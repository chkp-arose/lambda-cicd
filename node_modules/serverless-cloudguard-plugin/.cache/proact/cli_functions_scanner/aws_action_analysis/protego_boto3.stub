__protego_used={}
__protego_resource_map={}
__default_region='*'
class accessanalyzer:
    def __init__(self, region_name=__default_region):
        __protego_used['accessanalyzer']= __protego_used.get('accessanalyzer', {})
        __protego_resource_map['accessanalyzer']=__protego_resource_map.get('accessanalyzer', [])
        self.region = region_name
    def create_analyzer(self, *args, **kwargs):
        __protego_used['accessanalyzer']['create_analyzer']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["analyzerName","type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "CreateAnalyzer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_archive_rule(self, *args, **kwargs):
        __protego_used['accessanalyzer']['create_archive_rule']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["filter","analyzerName","ruleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "CreateArchiveRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_analyzer(self, *args, **kwargs):
        __protego_used['accessanalyzer']['delete_analyzer']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["analyzerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "DeleteAnalyzer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_archive_rule(self, *args, **kwargs):
        __protego_used['accessanalyzer']['delete_archive_rule']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["ruleName","analyzerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "DeleteArchiveRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_analyzed_resource(self, *args, **kwargs):
        __protego_used['accessanalyzer']['get_analyzed_resource']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["resourceArn","analyzerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "GetAnalyzedResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_analyzer(self, *args, **kwargs):
        __protego_used['accessanalyzer']['get_analyzer']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["analyzerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "GetAnalyzer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_archive_rule(self, *args, **kwargs):
        __protego_used['accessanalyzer']['get_archive_rule']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["ruleName","analyzerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "GetArchiveRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_finding(self, *args, **kwargs):
        __protego_used['accessanalyzer']['get_finding']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["analyzerArn","id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "GetFinding", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_analyzed_resources(self, *args, **kwargs):
        __protego_used['accessanalyzer']['list_analyzed_resources']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["analyzerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "ListAnalyzedResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_analyzers(self, *args, **kwargs):
        __protego_used['accessanalyzer']['list_analyzers']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "ListAnalyzers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_archive_rules(self, *args, **kwargs):
        __protego_used['accessanalyzer']['list_archive_rules']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["analyzerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "ListArchiveRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_findings(self, *args, **kwargs):
        __protego_used['accessanalyzer']['list_findings']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["analyzerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "ListFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['accessanalyzer']['list_tags_for_resource']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_resource_scan(self, *args, **kwargs):
        __protego_used['accessanalyzer']['start_resource_scan']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["resourceArn","analyzerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "StartResourceScan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['accessanalyzer']['tag_resource']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['accessanalyzer']['untag_resource']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_archive_rule(self, *args, **kwargs):
        __protego_used['accessanalyzer']['update_archive_rule']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["filter","analyzerName","ruleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "UpdateArchiveRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_findings(self, *args, **kwargs):
        __protego_used['accessanalyzer']['update_findings']=['accessanalyzer:*']
        for p in ['accessanalyzer:*']:
            res = {}
            for nm in ["status","analyzerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['accessanalyzer'].append({'action': "UpdateFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class acm:
    def __init__(self, region_name=__default_region):
        __protego_used['acm']= __protego_used.get('acm', {})
        __protego_resource_map['acm']=__protego_resource_map.get('acm', [])
        self.region = region_name
    def add_tags_to_certificate(self, *args, **kwargs):
        __protego_used['acm']['add_tags_to_certificate']=['acm:AddTagsToCertificate']
        for p in ['acm:AddTagsToCertificate']:
            res = {}
            for nm in ["CertificateArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "AddTagsToCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_certificate(self, *args, **kwargs):
        __protego_used['acm']['delete_certificate']=['acm:DeleteCertificate']
        for p in ['acm:DeleteCertificate']:
            res = {}
            for nm in ["CertificateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "DeleteCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_certificate(self, *args, **kwargs):
        __protego_used['acm']['describe_certificate']=['acm:DescribeCertificate']
        for p in ['acm:DescribeCertificate']:
            res = {}
            for nm in ["CertificateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "DescribeCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_certificate(self, *args, **kwargs):
        __protego_used['acm']['export_certificate']=['acm:ExportCertificate']
        for p in ['acm:ExportCertificate']:
            res = {}
            for nm in ["Passphrase","CertificateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "ExportCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_certificate(self, *args, **kwargs):
        __protego_used['acm']['get_certificate']=['acm:GetCertificate']
        for p in ['acm:GetCertificate']:
            res = {}
            for nm in ["CertificateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "GetCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_certificate(self, *args, **kwargs):
        __protego_used['acm']['import_certificate']=['acm:ImportCertificate']
        for p in ['acm:ImportCertificate']:
            res = {}
            for nm in ["PrivateKey","Certificate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "ImportCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_certificates(self, *args, **kwargs):
        __protego_used['acm']['list_certificates']=['acm:ListCertificates']
        for p in ['acm:ListCertificates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "ListCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_certificate(self, *args, **kwargs):
        __protego_used['acm']['list_tags_for_certificate']=['acm:ListTagsForCertificate']
        for p in ['acm:ListTagsForCertificate']:
            res = {}
            for nm in ["CertificateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "ListTagsForCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_certificate(self, *args, **kwargs):
        __protego_used['acm']['remove_tags_from_certificate']=['acm:RemoveTagsFromCertificate']
        for p in ['acm:RemoveTagsFromCertificate']:
            res = {}
            for nm in ["CertificateArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "RemoveTagsFromCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def renew_certificate(self, *args, **kwargs):
        __protego_used['acm']['renew_certificate']=['acm:RenewCertificate']
        for p in ['acm:RenewCertificate']:
            res = {}
            for nm in ["CertificateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "RenewCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def request_certificate(self, *args, **kwargs):
        __protego_used['acm']['request_certificate']=['acm:RequestCertificate']
        for p in ['acm:RequestCertificate']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "RequestCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def resend_validation_email(self, *args, **kwargs):
        __protego_used['acm']['resend_validation_email']=['acm:ResendValidationEmail']
        for p in ['acm:ResendValidationEmail']:
            res = {}
            for nm in ["Domain","CertificateArn","ValidationDomain"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "ResendValidationEmail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_certificate_options(self, *args, **kwargs):
        __protego_used['acm']['update_certificate_options']=['acm:UpdateCertificateOptions']
        for p in ['acm:UpdateCertificateOptions']:
            res = {}
            for nm in ["Options","CertificateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm'].append({'action': "UpdateCertificateOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class acm_pca:
    def __init__(self, region_name=__default_region):
        __protego_used['acm-pca']= __protego_used.get('acm-pca', {})
        __protego_resource_map['acm-pca']=__protego_resource_map.get('acm-pca', [])
        self.region = region_name
    def create_certificate_authority(self, *args, **kwargs):
        __protego_used['acm-pca']['create_certificate_authority']=['acm-pca:CreateCertificateAuthority']
        for p in ['acm-pca:CreateCertificateAuthority']:
            res = {}
            for nm in ["CertificateAuthorityConfiguration","CertificateAuthorityType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "CreateCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_certificate_authority_audit_report(self, *args, **kwargs):
        __protego_used['acm-pca']['create_certificate_authority_audit_report']=['acm-pca:CreateCertificateAuthorityAuditReport']
        for p in ['acm-pca:CreateCertificateAuthorityAuditReport']:
            res = {}
            for nm in ["AuditReportResponseFormat","S3BucketName","CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "CreateCertificateAuthorityAuditReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_permission(self, *args, **kwargs):
        __protego_used['acm-pca']['create_permission']=['acm-pca:CreatePermission']
        for p in ['acm-pca:CreatePermission']:
            res = {}
            for nm in ["Principal","Actions","CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "CreatePermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_certificate_authority(self, *args, **kwargs):
        __protego_used['acm-pca']['delete_certificate_authority']=['acm-pca:DeleteCertificateAuthority']
        for p in ['acm-pca:DeleteCertificateAuthority']:
            res = {}
            for nm in ["CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "DeleteCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_permission(self, *args, **kwargs):
        __protego_used['acm-pca']['delete_permission']=['acm-pca:DescribeCertificateAuthority']
        for p in ['acm-pca:DescribeCertificateAuthority']:
            res = {}
            for nm in ["Principal","CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "DeletePermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_certificate_authority(self, *args, **kwargs):
        __protego_used['acm-pca']['describe_certificate_authority']=['acm-pca:DescribeCertificateAuthorityAuditReport']
        for p in ['acm-pca:DescribeCertificateAuthorityAuditReport']:
            res = {}
            for nm in ["CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "DescribeCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_certificate_authority_audit_report(self, *args, **kwargs):
        __protego_used['acm-pca']['describe_certificate_authority_audit_report']=['acm-pca:DeletePermission']
        for p in ['acm-pca:DeletePermission']:
            res = {}
            for nm in ["AuditReportId","CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "DescribeCertificateAuthorityAuditReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_certificate(self, *args, **kwargs):
        __protego_used['acm-pca']['get_certificate']=['acm-pca:GetCertificate']
        for p in ['acm-pca:GetCertificate']:
            res = {}
            for nm in ["CertificateArn","CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "GetCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_certificate_authority_certificate(self, *args, **kwargs):
        __protego_used['acm-pca']['get_certificate_authority_certificate']=['acm-pca:GetCertificateAuthorityCertificate']
        for p in ['acm-pca:GetCertificateAuthorityCertificate']:
            res = {}
            for nm in ["CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "GetCertificateAuthorityCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_certificate_authority_csr(self, *args, **kwargs):
        __protego_used['acm-pca']['get_certificate_authority_csr']=['acm-pca:GetCertificateAuthorityCsr']
        for p in ['acm-pca:GetCertificateAuthorityCsr']:
            res = {}
            for nm in ["CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "GetCertificateAuthorityCsr", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_certificate_authority_certificate(self, *args, **kwargs):
        __protego_used['acm-pca']['import_certificate_authority_certificate']=['acm-pca:ImportCertificateAuthorityCertificate']
        for p in ['acm-pca:ImportCertificateAuthorityCertificate']:
            res = {}
            for nm in ["Certificate","CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "ImportCertificateAuthorityCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def issue_certificate(self, *args, **kwargs):
        __protego_used['acm-pca']['issue_certificate']=['acm-pca:IssueCertificate']
        for p in ['acm-pca:IssueCertificate']:
            res = {}
            for nm in ["Validity","Csr","SigningAlgorithm","CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "IssueCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_certificate_authorities(self, *args, **kwargs):
        __protego_used['acm-pca']['list_certificate_authorities']=['acm-pca:ListCertificateAuthorities']
        for p in ['acm-pca:ListCertificateAuthorities']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "ListCertificateAuthorities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_permissions(self, *args, **kwargs):
        __protego_used['acm-pca']['list_permissions']=['acm-pca:ListPermissions']
        for p in ['acm-pca:ListPermissions']:
            res = {}
            for nm in ["CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "ListPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags(self, *args, **kwargs):
        __protego_used['acm-pca']['list_tags']=['acm-pca:ListTags']
        for p in ['acm-pca:ListTags']:
            res = {}
            for nm in ["CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "ListTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_certificate_authority(self, *args, **kwargs):
        __protego_used['acm-pca']['restore_certificate_authority']=['acm-pca:RestoreCertificateAuthority']
        for p in ['acm-pca:RestoreCertificateAuthority']:
            res = {}
            for nm in ["CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "RestoreCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_certificate(self, *args, **kwargs):
        __protego_used['acm-pca']['revoke_certificate']=['acm-pca:RevokeCertificate']
        for p in ['acm-pca:RevokeCertificate']:
            res = {}
            for nm in ["CertificateSerial","RevocationReason","CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "RevokeCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_certificate_authority(self, *args, **kwargs):
        __protego_used['acm-pca']['tag_certificate_authority']=['acm-pca:TagCertificateAuthority']
        for p in ['acm-pca:TagCertificateAuthority']:
            res = {}
            for nm in ["Tags","CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "TagCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_certificate_authority(self, *args, **kwargs):
        __protego_used['acm-pca']['untag_certificate_authority']=['acm-pca:UntagCertificateAuthority']
        for p in ['acm-pca:UntagCertificateAuthority']:
            res = {}
            for nm in ["Tags","CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "UntagCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_certificate_authority(self, *args, **kwargs):
        __protego_used['acm-pca']['update_certificate_authority']=['acm-pca:UpdateCertificateAuthority']
        for p in ['acm-pca:UpdateCertificateAuthority']:
            res = {}
            for nm in ["CertificateAuthorityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['acm-pca'].append({'action': "UpdateCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class alexaforbusiness:
    def __init__(self, region_name=__default_region):
        __protego_used['alexaforbusiness']= __protego_used.get('alexaforbusiness', {})
        __protego_resource_map['alexaforbusiness']=__protego_resource_map.get('alexaforbusiness', [])
        self.region = region_name
    def approve_skill(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['approve_skill']=['a4b:ApproveSkill']
        for p in ['a4b:ApproveSkill']:
            res = {}
            for nm in ["SkillId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ApproveSkill", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_contact_with_address_book(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['associate_contact_with_address_book']=['a4b:AssociateContactWithAddressBook','a4b:AssociateContactWithAddressBook']
        for p in ['a4b:AssociateContactWithAddressBook','a4b:AssociateContactWithAddressBook']:
            res = {}
            for nm in ["AddressBookArn","ContactArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "AssociateContactWithAddressBook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_device_with_network_profile(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['associate_device_with_network_profile']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["NetworkProfileArn","DeviceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "AssociateDeviceWithNetworkProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_device_with_room(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['associate_device_with_room']=['a4b:AssociateDeviceWithRoom','a4b:AssociateDeviceWithRoom']
        for p in ['a4b:AssociateDeviceWithRoom','a4b:AssociateDeviceWithRoom']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "AssociateDeviceWithRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_skill_group_with_room(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['associate_skill_group_with_room']=['a4b:AssociateSkillGroupWithRoom','a4b:AssociateSkillGroupWithRoom']
        for p in ['a4b:AssociateSkillGroupWithRoom','a4b:AssociateSkillGroupWithRoom']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "AssociateSkillGroupWithRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_skill_with_skill_group(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['associate_skill_with_skill_group']=['a4b:AssociateSkillWithSkillGroup']
        for p in ['a4b:AssociateSkillWithSkillGroup']:
            res = {}
            for nm in ["SkillId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "AssociateSkillWithSkillGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_skill_with_users(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['associate_skill_with_users']=['a4b:AssociateSkillWithUsers']
        for p in ['a4b:AssociateSkillWithUsers']:
            res = {}
            for nm in ["SkillId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "AssociateSkillWithUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_address_book(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['create_address_book']=['a4b:CreateAddressBook']
        for p in ['a4b:CreateAddressBook']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "CreateAddressBook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_business_report_schedule(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['create_business_report_schedule']=['a4b:CreateBusinessReportSchedule']
        for p in ['a4b:CreateBusinessReportSchedule']:
            res = {}
            for nm in ["ContentRange","Format"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "CreateBusinessReportSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_conference_provider(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['create_conference_provider']=['a4b:CreateConferenceProvider']
        for p in ['a4b:CreateConferenceProvider']:
            res = {}
            for nm in ["ConferenceProviderName","MeetingSetting","ConferenceProviderType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "CreateConferenceProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_contact(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['create_contact']=['a4b:CreateContact']
        for p in ['a4b:CreateContact']:
            res = {}
            for nm in ["FirstName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "CreateContact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_gateway_group(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['create_gateway_group']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["Name","ClientRequestToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "CreateGatewayGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_network_profile(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['create_network_profile']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["SecurityType","NetworkProfileName","ClientRequestToken","Ssid"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "CreateNetworkProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_profile(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['create_profile']=['a4b:CreateProfile']
        for p in ['a4b:CreateProfile']:
            res = {}
            for nm in ["WakeWord","Timezone","DistanceUnit","Address","TemperatureUnit","ProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "CreateProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_room(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['create_room']=['a4b:CreateRoom']
        for p in ['a4b:CreateRoom']:
            res = {}
            for nm in ["RoomName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "CreateRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_skill_group(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['create_skill_group']=['a4b:CreateSkillGroup']
        for p in ['a4b:CreateSkillGroup']:
            res = {}
            for nm in ["SkillGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "CreateSkillGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['create_user']=['a4b:CreateUser']
        for p in ['a4b:CreateUser']:
            res = {}
            for nm in ["UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "CreateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_address_book(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_address_book']=['a4b:DeleteAddressBook']
        for p in ['a4b:DeleteAddressBook']:
            res = {}
            for nm in ["AddressBookArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteAddressBook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_business_report_schedule(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_business_report_schedule']=['a4b:DeleteBusinessReportSchedule']
        for p in ['a4b:DeleteBusinessReportSchedule']:
            res = {}
            for nm in ["ScheduleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteBusinessReportSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_conference_provider(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_conference_provider']=['a4b:DeleteConferenceProvider']
        for p in ['a4b:DeleteConferenceProvider']:
            res = {}
            for nm in ["ConferenceProviderArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteConferenceProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_contact(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_contact']=['a4b:DeleteContact']
        for p in ['a4b:DeleteContact']:
            res = {}
            for nm in ["ContactArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteContact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_device(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_device']=['a4b:DeleteDevice']
        for p in ['a4b:DeleteDevice']:
            res = {}
            for nm in ["DeviceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_device_usage_data(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_device_usage_data']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["DeviceArn","DeviceUsageType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteDeviceUsageData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_gateway_group(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_gateway_group']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["GatewayGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteGatewayGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_network_profile(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_network_profile']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["NetworkProfileArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteNetworkProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_profile(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_profile']=['a4b:DeleteProfile']
        for p in ['a4b:DeleteProfile']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_room(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_room']=['a4b:DeleteRoom']
        for p in ['a4b:DeleteRoom']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_room_skill_parameter(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_room_skill_parameter']=['a4b:DeleteRoomSkillParameter']
        for p in ['a4b:DeleteRoomSkillParameter']:
            res = {}
            for nm in ["ParameterKey","SkillId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteRoomSkillParameter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_skill_authorization(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_skill_authorization']=['a4b:DeleteSkillAuthorization']
        for p in ['a4b:DeleteSkillAuthorization']:
            res = {}
            for nm in ["SkillId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteSkillAuthorization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_skill_group(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_skill_group']=['a4b:DeleteSkillGroup']
        for p in ['a4b:DeleteSkillGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteSkillGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['delete_user']=['a4b:DeleteUser']
        for p in ['a4b:DeleteUser']:
            res = {}
            for nm in ["EnrollmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DeleteUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_contact_from_address_book(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['disassociate_contact_from_address_book']=['a4b:DisassociateContactFromAddressBook','a4b:DisassociateContactFromAddressBook']
        for p in ['a4b:DisassociateContactFromAddressBook','a4b:DisassociateContactFromAddressBook']:
            res = {}
            for nm in ["AddressBookArn","ContactArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DisassociateContactFromAddressBook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_device_from_room(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['disassociate_device_from_room']=['a4b:DisassociateDeviceFromRoom']
        for p in ['a4b:DisassociateDeviceFromRoom']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DisassociateDeviceFromRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_skill_from_skill_group(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['disassociate_skill_from_skill_group']=['a4b:DisassociateSkillFromSkillGroup']
        for p in ['a4b:DisassociateSkillFromSkillGroup']:
            res = {}
            for nm in ["SkillId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DisassociateSkillFromSkillGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_skill_from_users(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['disassociate_skill_from_users']=['a4b:DisassociateSkillFromUsers']
        for p in ['a4b:DisassociateSkillFromUsers']:
            res = {}
            for nm in ["SkillId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DisassociateSkillFromUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_skill_group_from_room(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['disassociate_skill_group_from_room']=['a4b:DisassociateSkillGroupFromRoom','a4b:DisassociateSkillGroupFromRoom']
        for p in ['a4b:DisassociateSkillGroupFromRoom','a4b:DisassociateSkillGroupFromRoom']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "DisassociateSkillGroupFromRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def forget_smart_home_appliances(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['forget_smart_home_appliances']=['a4b:ForgetSmartHomeAppliances']
        for p in ['a4b:ForgetSmartHomeAppliances']:
            res = {}
            for nm in ["RoomArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ForgetSmartHomeAppliances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_address_book(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_address_book']=['a4b:GetAddressBook']
        for p in ['a4b:GetAddressBook']:
            res = {}
            for nm in ["AddressBookArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetAddressBook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_conference_preference(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_conference_preference']=['a4b:GetConferencePreference']
        for p in ['a4b:GetConferencePreference']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetConferencePreference", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_conference_provider(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_conference_provider']=['a4b:GetConferenceProvider']
        for p in ['a4b:GetConferenceProvider']:
            res = {}
            for nm in ["ConferenceProviderArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetConferenceProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_contact(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_contact']=['a4b:GetContact']
        for p in ['a4b:GetContact']:
            res = {}
            for nm in ["ContactArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetContact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_device(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_device']=['a4b:GetDevice']
        for p in ['a4b:GetDevice']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_gateway(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_gateway']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["GatewayArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_gateway_group(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_gateway_group']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["GatewayGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetGatewayGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_invitation_configuration(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_invitation_configuration']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetInvitationConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_network_profile(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_network_profile']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["NetworkProfileArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetNetworkProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_profile(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_profile']=['a4b:GetProfile']
        for p in ['a4b:GetProfile']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_room(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_room']=['a4b:GetRoom']
        for p in ['a4b:GetRoom']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_room_skill_parameter(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_room_skill_parameter']=['a4b:GetRoomSkillParameter']
        for p in ['a4b:GetRoomSkillParameter']:
            res = {}
            for nm in ["ParameterKey","SkillId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetRoomSkillParameter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_skill_group(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['get_skill_group']=['a4b:GetSkillGroup']
        for p in ['a4b:GetSkillGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "GetSkillGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_business_report_schedules(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['list_business_report_schedules']=['a4b:ListBusinessReportSchedules']
        for p in ['a4b:ListBusinessReportSchedules']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ListBusinessReportSchedules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_conference_providers(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['list_conference_providers']=['a4b:ListConferenceProviders']
        for p in ['a4b:ListConferenceProviders']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ListConferenceProviders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_device_events(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['list_device_events']=['a4b:ListDeviceEvents']
        for p in ['a4b:ListDeviceEvents']:
            res = {}
            for nm in ["DeviceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ListDeviceEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_gateway_groups(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['list_gateway_groups']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ListGatewayGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_gateways(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['list_gateways']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ListGateways", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_skills(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['list_skills']=['a4b:ListSkills']
        for p in ['a4b:ListSkills']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ListSkills", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_skills_store_categories(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['list_skills_store_categories']=['a4b:ListSkillsStoreCategories']
        for p in ['a4b:ListSkillsStoreCategories']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ListSkillsStoreCategories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_skills_store_skills_by_category(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['list_skills_store_skills_by_category']=['a4b:ListSkillsStoreSkillsByCategory']
        for p in ['a4b:ListSkillsStoreSkillsByCategory']:
            res = {}
            for nm in ["CategoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ListSkillsStoreSkillsByCategory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_smart_home_appliances(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['list_smart_home_appliances']=['a4b:ListSmartHomeAppliances']
        for p in ['a4b:ListSmartHomeAppliances']:
            res = {}
            for nm in ["RoomArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ListSmartHomeAppliances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['list_tags']=['a4b:ListTags']
        for p in ['a4b:ListTags']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ListTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_conference_preference(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['put_conference_preference']=['a4b:PutConferencePreference']
        for p in ['a4b:PutConferencePreference']:
            res = {}
            for nm in ["ConferencePreference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "PutConferencePreference", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_invitation_configuration(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['put_invitation_configuration']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["OrganizationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "PutInvitationConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_room_skill_parameter(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['put_room_skill_parameter']=['a4b:PutRoomSkillParameter']
        for p in ['a4b:PutRoomSkillParameter']:
            res = {}
            for nm in ["RoomSkillParameter","SkillId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "PutRoomSkillParameter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_skill_authorization(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['put_skill_authorization']=['a4b:PutSkillAuthorization']
        for p in ['a4b:PutSkillAuthorization']:
            res = {}
            for nm in ["SkillId","AuthorizationResult"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "PutSkillAuthorization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_avs_device(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['register_avs_device']=['a4b:RegisterAVSDevice']
        for p in ['a4b:RegisterAVSDevice']:
            res = {}
            for nm in ["AmazonId","DeviceSerialNumber","UserCode","ClientId","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "RegisterAVSDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_skill(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['reject_skill']=['a4b:RejectSkill']
        for p in ['a4b:RejectSkill']:
            res = {}
            for nm in ["SkillId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "RejectSkill", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def resolve_room(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['resolve_room']=['a4b:ResolveRoom']
        for p in ['a4b:ResolveRoom']:
            res = {}
            for nm in ["UserId","SkillId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "ResolveRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_invitation(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['revoke_invitation']=['a4b:RevokeInvitation']
        for p in ['a4b:RevokeInvitation']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "RevokeInvitation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_address_books(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['search_address_books']=['a4b:SearchAddressBooks']
        for p in ['a4b:SearchAddressBooks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "SearchAddressBooks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_contacts(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['search_contacts']=['a4b:SearchContacts']
        for p in ['a4b:SearchContacts']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "SearchContacts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_devices(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['search_devices']=['a4b:SearchDevices']
        for p in ['a4b:SearchDevices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "SearchDevices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_network_profiles(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['search_network_profiles']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "SearchNetworkProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_profiles(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['search_profiles']=['a4b:SearchProfiles']
        for p in ['a4b:SearchProfiles']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "SearchProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_rooms(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['search_rooms']=['a4b:SearchRooms']
        for p in ['a4b:SearchRooms']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "SearchRooms", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_skill_groups(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['search_skill_groups']=['a4b:SearchSkillGroups']
        for p in ['a4b:SearchSkillGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "SearchSkillGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_users(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['search_users']=['a4b:SearchUsers']
        for p in ['a4b:SearchUsers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "SearchUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_announcement(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['send_announcement']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["Content","RoomFilters","ClientRequestToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "SendAnnouncement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_invitation(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['send_invitation']=['a4b:SendInvitation']
        for p in ['a4b:SendInvitation']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "SendInvitation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_device_sync(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['start_device_sync']=['a4b:StartDeviceSync']
        for p in ['a4b:StartDeviceSync']:
            res = {}
            for nm in ["Features"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "StartDeviceSync", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_smart_home_appliance_discovery(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['start_smart_home_appliance_discovery']=['a4b:StartSmartHomeApplianceDiscovery']
        for p in ['a4b:StartSmartHomeApplianceDiscovery']:
            res = {}
            for nm in ["RoomArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "StartSmartHomeApplianceDiscovery", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['tag_resource']=['a4b:TagResource']
        for p in ['a4b:TagResource']:
            res = {}
            for nm in ["Arn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['untag_resource']=['a4b:UntagResource']
        for p in ['a4b:UntagResource']:
            res = {}
            for nm in ["Arn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_address_book(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['update_address_book']=['a4b:UpdateAddressBook']
        for p in ['a4b:UpdateAddressBook']:
            res = {}
            for nm in ["AddressBookArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UpdateAddressBook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_business_report_schedule(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['update_business_report_schedule']=['a4b:UpdateBusinessReportSchedule']
        for p in ['a4b:UpdateBusinessReportSchedule']:
            res = {}
            for nm in ["ScheduleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UpdateBusinessReportSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_conference_provider(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['update_conference_provider']=['a4b:UpdateConferenceProvider']
        for p in ['a4b:UpdateConferenceProvider']:
            res = {}
            for nm in ["MeetingSetting","ConferenceProviderType","ConferenceProviderArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UpdateConferenceProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_contact(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['update_contact']=['a4b:UpdateContact']
        for p in ['a4b:UpdateContact']:
            res = {}
            for nm in ["ContactArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UpdateContact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_device(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['update_device']=['a4b:UpdateDevice']
        for p in ['a4b:UpdateDevice']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UpdateDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_gateway(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['update_gateway']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["GatewayArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UpdateGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_gateway_group(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['update_gateway_group']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["GatewayGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UpdateGatewayGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_network_profile(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['update_network_profile']=['alexaforbusiness:*']
        for p in ['alexaforbusiness:*']:
            res = {}
            for nm in ["NetworkProfileArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UpdateNetworkProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_profile(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['update_profile']=['a4b:UpdateProfile']
        for p in ['a4b:UpdateProfile']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UpdateProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_room(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['update_room']=['a4b:UpdateRoom']
        for p in ['a4b:UpdateRoom']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UpdateRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_skill_group(self, *args, **kwargs):
        __protego_used['alexaforbusiness']['update_skill_group']=['a4b:UpdateSkillGroup']
        for p in ['a4b:UpdateSkillGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['alexaforbusiness'].append({'action': "UpdateSkillGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class amplify:
    def __init__(self, region_name=__default_region):
        __protego_used['amplify']= __protego_used.get('amplify', {})
        __protego_resource_map['amplify']=__protego_resource_map.get('amplify', [])
        self.region = region_name
    def create_app(self, *args, **kwargs):
        __protego_used['amplify']['create_app']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "CreateApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_backend_environment(self, *args, **kwargs):
        __protego_used['amplify']['create_backend_environment']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId","environmentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "CreateBackendEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_branch(self, *args, **kwargs):
        __protego_used['amplify']['create_branch']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "CreateBranch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deployment(self, *args, **kwargs):
        __protego_used['amplify']['create_deployment']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "CreateDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_domain_association(self, *args, **kwargs):
        __protego_used['amplify']['create_domain_association']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["subDomainSettings","appId","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "CreateDomainAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_webhook(self, *args, **kwargs):
        __protego_used['amplify']['create_webhook']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "CreateWebhook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_app(self, *args, **kwargs):
        __protego_used['amplify']['delete_app']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "DeleteApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_backend_environment(self, *args, **kwargs):
        __protego_used['amplify']['delete_backend_environment']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId","environmentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "DeleteBackendEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_branch(self, *args, **kwargs):
        __protego_used['amplify']['delete_branch']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "DeleteBranch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_domain_association(self, *args, **kwargs):
        __protego_used['amplify']['delete_domain_association']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "DeleteDomainAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_job(self, *args, **kwargs):
        __protego_used['amplify']['delete_job']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["jobId","branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "DeleteJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_webhook(self, *args, **kwargs):
        __protego_used['amplify']['delete_webhook']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["webhookId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "DeleteWebhook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_access_logs(self, *args, **kwargs):
        __protego_used['amplify']['generate_access_logs']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "GenerateAccessLogs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_app(self, *args, **kwargs):
        __protego_used['amplify']['get_app']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "GetApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_artifact_url(self, *args, **kwargs):
        __protego_used['amplify']['get_artifact_url']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["artifactId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "GetArtifactUrl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_backend_environment(self, *args, **kwargs):
        __protego_used['amplify']['get_backend_environment']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId","environmentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "GetBackendEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_branch(self, *args, **kwargs):
        __protego_used['amplify']['get_branch']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "GetBranch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain_association(self, *args, **kwargs):
        __protego_used['amplify']['get_domain_association']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "GetDomainAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job(self, *args, **kwargs):
        __protego_used['amplify']['get_job']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["jobId","branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "GetJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_webhook(self, *args, **kwargs):
        __protego_used['amplify']['get_webhook']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["webhookId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "GetWebhook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_apps(self, *args, **kwargs):
        __protego_used['amplify']['list_apps']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "ListApps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_artifacts(self, *args, **kwargs):
        __protego_used['amplify']['list_artifacts']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["jobId","branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "ListArtifacts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_backend_environments(self, *args, **kwargs):
        __protego_used['amplify']['list_backend_environments']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "ListBackendEnvironments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_branches(self, *args, **kwargs):
        __protego_used['amplify']['list_branches']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "ListBranches", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_domain_associations(self, *args, **kwargs):
        __protego_used['amplify']['list_domain_associations']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "ListDomainAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs(self, *args, **kwargs):
        __protego_used['amplify']['list_jobs']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "ListJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['amplify']['list_tags_for_resource']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_webhooks(self, *args, **kwargs):
        __protego_used['amplify']['list_webhooks']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "ListWebhooks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_deployment(self, *args, **kwargs):
        __protego_used['amplify']['start_deployment']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "StartDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_job(self, *args, **kwargs):
        __protego_used['amplify']['start_job']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["jobType","branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "StartJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_job(self, *args, **kwargs):
        __protego_used['amplify']['stop_job']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["jobId","branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "StopJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['amplify']['tag_resource']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['amplify']['untag_resource']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_app(self, *args, **kwargs):
        __protego_used['amplify']['update_app']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "UpdateApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_branch(self, *args, **kwargs):
        __protego_used['amplify']['update_branch']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["branchName","appId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "UpdateBranch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_domain_association(self, *args, **kwargs):
        __protego_used['amplify']['update_domain_association']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["subDomainSettings","appId","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "UpdateDomainAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_webhook(self, *args, **kwargs):
        __protego_used['amplify']['update_webhook']=['amplify:*']
        for p in ['amplify:*']:
            res = {}
            for nm in ["webhookId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['amplify'].append({'action': "UpdateWebhook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class apigateway:
    def __init__(self, region_name=__default_region):
        __protego_used['apigateway']= __protego_used.get('apigateway', {})
        __protego_resource_map['apigateway']=__protego_resource_map.get('apigateway', [])
        self.region = region_name
    def create_api_key(self, *args, **kwargs):
        __protego_used['apigateway']['create_api_key']=['apigateway:POST','apigateway:PUT']
        for p in ['apigateway:POST','apigateway:PUT']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateApiKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_authorizer(self, *args, **kwargs):
        __protego_used['apigateway']['create_authorizer']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["restApiId","name","type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_base_path_mapping(self, *args, **kwargs):
        __protego_used['apigateway']['create_base_path_mapping']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["restApiId","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateBasePathMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deployment(self, *args, **kwargs):
        __protego_used['apigateway']['create_deployment']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_documentation_part(self, *args, **kwargs):
        __protego_used['apigateway']['create_documentation_part']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["location","restApiId","properties"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateDocumentationPart", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_documentation_version(self, *args, **kwargs):
        __protego_used['apigateway']['create_documentation_version']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["restApiId","documentationVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateDocumentationVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_domain_name(self, *args, **kwargs):
        __protego_used['apigateway']['create_domain_name']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateDomainName", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_model(self, *args, **kwargs):
        __protego_used['apigateway']['create_model']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["contentType","restApiId","name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_request_validator(self, *args, **kwargs):
        __protego_used['apigateway']['create_request_validator']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateRequestValidator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_resource(self, *args, **kwargs):
        __protego_used['apigateway']['create_resource']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["restApiId","parentId","pathPart"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_rest_api(self, *args, **kwargs):
        __protego_used['apigateway']['create_rest_api']=['apigateway:POST','apigateway:PUT']
        for p in ['apigateway:POST','apigateway:PUT']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateRestApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stage(self, *args, **kwargs):
        __protego_used['apigateway']['create_stage']=['apigateway:POST','apigateway:PUT']
        for p in ['apigateway:POST','apigateway:PUT']:
            res = {}
            for nm in ["restApiId","stageName","deploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateStage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_usage_plan(self, *args, **kwargs):
        __protego_used['apigateway']['create_usage_plan']=['apigateway:POST','apigateway:PUT']
        for p in ['apigateway:POST','apigateway:PUT']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateUsagePlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_usage_plan_key(self, *args, **kwargs):
        __protego_used['apigateway']['create_usage_plan_key']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["keyType","usagePlanId","keyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateUsagePlanKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpc_link(self, *args, **kwargs):
        __protego_used['apigateway']['create_vpc_link']=['apigateway:POST','apigateway:PUT']
        for p in ['apigateway:POST','apigateway:PUT']:
            res = {}
            for nm in ["name","targetArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "CreateVpcLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_api_key(self, *args, **kwargs):
        __protego_used['apigateway']['delete_api_key']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["apiKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteApiKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_authorizer(self, *args, **kwargs):
        __protego_used['apigateway']['delete_authorizer']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["restApiId","authorizerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_base_path_mapping(self, *args, **kwargs):
        __protego_used['apigateway']['delete_base_path_mapping']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["basePath","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteBasePathMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_client_certificate(self, *args, **kwargs):
        __protego_used['apigateway']['delete_client_certificate']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["clientCertificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteClientCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_deployment(self, *args, **kwargs):
        __protego_used['apigateway']['delete_deployment']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["restApiId","deploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_documentation_part(self, *args, **kwargs):
        __protego_used['apigateway']['delete_documentation_part']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["restApiId","documentationPartId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteDocumentationPart", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_documentation_version(self, *args, **kwargs):
        __protego_used['apigateway']['delete_documentation_version']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["restApiId","documentationVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteDocumentationVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_domain_name(self, *args, **kwargs):
        __protego_used['apigateway']['delete_domain_name']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteDomainName", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_gateway_response(self, *args, **kwargs):
        __protego_used['apigateway']['delete_gateway_response']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["restApiId","responseType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteGatewayResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_integration(self, *args, **kwargs):
        __protego_used['apigateway']['delete_integration']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["resourceId","restApiId","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteIntegration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_integration_response(self, *args, **kwargs):
        __protego_used['apigateway']['delete_integration_response']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["resourceId","restApiId","statusCode","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteIntegrationResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_method(self, *args, **kwargs):
        __protego_used['apigateway']['delete_method']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["resourceId","restApiId","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteMethod", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_method_response(self, *args, **kwargs):
        __protego_used['apigateway']['delete_method_response']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["resourceId","restApiId","statusCode","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteMethodResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_model(self, *args, **kwargs):
        __protego_used['apigateway']['delete_model']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["restApiId","modelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_request_validator(self, *args, **kwargs):
        __protego_used['apigateway']['delete_request_validator']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["restApiId","requestValidatorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteRequestValidator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resource(self, *args, **kwargs):
        __protego_used['apigateway']['delete_resource']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["resourceId","restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_rest_api(self, *args, **kwargs):
        __protego_used['apigateway']['delete_rest_api']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteRestApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_stage(self, *args, **kwargs):
        __protego_used['apigateway']['delete_stage']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["restApiId","stageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteStage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_usage_plan(self, *args, **kwargs):
        __protego_used['apigateway']['delete_usage_plan']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["usagePlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteUsagePlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_usage_plan_key(self, *args, **kwargs):
        __protego_used['apigateway']['delete_usage_plan_key']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["usagePlanId","keyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteUsagePlanKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpc_link(self, *args, **kwargs):
        __protego_used['apigateway']['delete_vpc_link']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["vpcLinkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "DeleteVpcLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def flush_stage_authorizers_cache(self, *args, **kwargs):
        __protego_used['apigateway']['flush_stage_authorizers_cache']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["restApiId","stageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "FlushStageAuthorizersCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def flush_stage_cache(self, *args, **kwargs):
        __protego_used['apigateway']['flush_stage_cache']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["restApiId","stageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "FlushStageCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_client_certificate(self, *args, **kwargs):
        __protego_used['apigateway']['generate_client_certificate']=['apigateway:POST','apigateway:PUT']
        for p in ['apigateway:POST','apigateway:PUT']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GenerateClientCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account(self, *args, **kwargs):
        __protego_used['apigateway']['get_account']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_api_key(self, *args, **kwargs):
        __protego_used['apigateway']['get_api_key']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["apiKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetApiKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_api_keys(self, *args, **kwargs):
        __protego_used['apigateway']['get_api_keys']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetApiKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_authorizer(self, *args, **kwargs):
        __protego_used['apigateway']['get_authorizer']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId","authorizerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_authorizers(self, *args, **kwargs):
        __protego_used['apigateway']['get_authorizers']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetAuthorizers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_base_path_mapping(self, *args, **kwargs):
        __protego_used['apigateway']['get_base_path_mapping']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["basePath","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetBasePathMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_base_path_mappings(self, *args, **kwargs):
        __protego_used['apigateway']['get_base_path_mappings']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetBasePathMappings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_client_certificate(self, *args, **kwargs):
        __protego_used['apigateway']['get_client_certificate']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["clientCertificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetClientCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_client_certificates(self, *args, **kwargs):
        __protego_used['apigateway']['get_client_certificates']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetClientCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployment(self, *args, **kwargs):
        __protego_used['apigateway']['get_deployment']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId","deploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployments(self, *args, **kwargs):
        __protego_used['apigateway']['get_deployments']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetDeployments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_documentation_part(self, *args, **kwargs):
        __protego_used['apigateway']['get_documentation_part']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId","documentationPartId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetDocumentationPart", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_documentation_parts(self, *args, **kwargs):
        __protego_used['apigateway']['get_documentation_parts']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetDocumentationParts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_documentation_version(self, *args, **kwargs):
        __protego_used['apigateway']['get_documentation_version']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId","documentationVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetDocumentationVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_documentation_versions(self, *args, **kwargs):
        __protego_used['apigateway']['get_documentation_versions']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetDocumentationVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain_name(self, *args, **kwargs):
        __protego_used['apigateway']['get_domain_name']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetDomainName", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain_names(self, *args, **kwargs):
        __protego_used['apigateway']['get_domain_names']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetDomainNames", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_export(self, *args, **kwargs):
        __protego_used['apigateway']['get_export']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["exportType","restApiId","stageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetExport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_gateway_response(self, *args, **kwargs):
        __protego_used['apigateway']['get_gateway_response']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId","responseType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetGatewayResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_gateway_responses(self, *args, **kwargs):
        __protego_used['apigateway']['get_gateway_responses']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetGatewayResponses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_integration(self, *args, **kwargs):
        __protego_used['apigateway']['get_integration']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["resourceId","restApiId","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetIntegration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_integration_response(self, *args, **kwargs):
        __protego_used['apigateway']['get_integration_response']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["resourceId","restApiId","statusCode","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetIntegrationResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_method(self, *args, **kwargs):
        __protego_used['apigateway']['get_method']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["resourceId","restApiId","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetMethod", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_method_response(self, *args, **kwargs):
        __protego_used['apigateway']['get_method_response']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["resourceId","restApiId","statusCode","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetMethodResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_model(self, *args, **kwargs):
        __protego_used['apigateway']['get_model']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId","modelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_model_template(self, *args, **kwargs):
        __protego_used['apigateway']['get_model_template']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId","modelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetModelTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_models(self, *args, **kwargs):
        __protego_used['apigateway']['get_models']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetModels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_request_validator(self, *args, **kwargs):
        __protego_used['apigateway']['get_request_validator']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId","requestValidatorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetRequestValidator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_request_validators(self, *args, **kwargs):
        __protego_used['apigateway']['get_request_validators']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetRequestValidators", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource(self, *args, **kwargs):
        __protego_used['apigateway']['get_resource']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["resourceId","restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resources(self, *args, **kwargs):
        __protego_used['apigateway']['get_resources']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rest_api(self, *args, **kwargs):
        __protego_used['apigateway']['get_rest_api']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetRestApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rest_apis(self, *args, **kwargs):
        __protego_used['apigateway']['get_rest_apis']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetRestApis", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sdk(self, *args, **kwargs):
        __protego_used['apigateway']['get_sdk']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["sdkType","restApiId","stageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetSdk", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sdk_type(self, *args, **kwargs):
        __protego_used['apigateway']['get_sdk_type']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetSdkType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sdk_types(self, *args, **kwargs):
        __protego_used['apigateway']['get_sdk_types']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetSdkTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_stage(self, *args, **kwargs):
        __protego_used['apigateway']['get_stage']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId","stageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetStage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_stages(self, *args, **kwargs):
        __protego_used['apigateway']['get_stages']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetStages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_tags(self, *args, **kwargs):
        __protego_used['apigateway']['get_tags']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_usage(self, *args, **kwargs):
        __protego_used['apigateway']['get_usage']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["endDate","usagePlanId","startDate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_usage_plan(self, *args, **kwargs):
        __protego_used['apigateway']['get_usage_plan']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["usagePlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetUsagePlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_usage_plan_key(self, *args, **kwargs):
        __protego_used['apigateway']['get_usage_plan_key']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["usagePlanId","keyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetUsagePlanKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_usage_plan_keys(self, *args, **kwargs):
        __protego_used['apigateway']['get_usage_plan_keys']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["usagePlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetUsagePlanKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_usage_plans(self, *args, **kwargs):
        __protego_used['apigateway']['get_usage_plans']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetUsagePlans", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_vpc_link(self, *args, **kwargs):
        __protego_used['apigateway']['get_vpc_link']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in ["vpcLinkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetVpcLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_vpc_links(self, *args, **kwargs):
        __protego_used['apigateway']['get_vpc_links']=['apigateway:GET']
        for p in ['apigateway:GET']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "GetVpcLinks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_api_keys(self, *args, **kwargs):
        __protego_used['apigateway']['import_api_keys']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["format","body"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "ImportApiKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_documentation_parts(self, *args, **kwargs):
        __protego_used['apigateway']['import_documentation_parts']=['apigateway:PUT']
        for p in ['apigateway:PUT']:
            res = {}
            for nm in ["restApiId","body"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "ImportDocumentationParts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_rest_api(self, *args, **kwargs):
        __protego_used['apigateway']['import_rest_api']=['apigateway:PUT']
        for p in ['apigateway:PUT']:
            res = {}
            for nm in ["body"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "ImportRestApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_gateway_response(self, *args, **kwargs):
        __protego_used['apigateway']['put_gateway_response']=['apigateway:PUT']
        for p in ['apigateway:PUT']:
            res = {}
            for nm in ["restApiId","responseType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "PutGatewayResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_integration(self, *args, **kwargs):
        __protego_used['apigateway']['put_integration']=['apigateway:PUT']
        for p in ['apigateway:PUT']:
            res = {}
            for nm in ["resourceId","restApiId","type","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "PutIntegration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_integration_response(self, *args, **kwargs):
        __protego_used['apigateway']['put_integration_response']=['apigateway:PUT']
        for p in ['apigateway:PUT']:
            res = {}
            for nm in ["resourceId","restApiId","statusCode","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "PutIntegrationResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_method(self, *args, **kwargs):
        __protego_used['apigateway']['put_method']=['apigateway:PUT']
        for p in ['apigateway:PUT']:
            res = {}
            for nm in ["resourceId","restApiId","authorizationType","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "PutMethod", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_method_response(self, *args, **kwargs):
        __protego_used['apigateway']['put_method_response']=['apigateway:PUT']
        for p in ['apigateway:PUT']:
            res = {}
            for nm in ["resourceId","restApiId","statusCode","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "PutMethodResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_rest_api(self, *args, **kwargs):
        __protego_used['apigateway']['put_rest_api']=['apigateway:PUT']
        for p in ['apigateway:PUT']:
            res = {}
            for nm in ["restApiId","body"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "PutRestApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['apigateway']['tag_resource']=['apigateway:PUT']
        for p in ['apigateway:PUT']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_invoke_authorizer(self, *args, **kwargs):
        __protego_used['apigateway']['test_invoke_authorizer']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["restApiId","authorizerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "TestInvokeAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_invoke_method(self, *args, **kwargs):
        __protego_used['apigateway']['test_invoke_method']=['apigateway:POST']
        for p in ['apigateway:POST']:
            res = {}
            for nm in ["resourceId","restApiId","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "TestInvokeMethod", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['apigateway']['untag_resource']=['apigateway:DELETE']
        for p in ['apigateway:DELETE']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_account(self, *args, **kwargs):
        __protego_used['apigateway']['update_account']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_api_key(self, *args, **kwargs):
        __protego_used['apigateway']['update_api_key']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["apiKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateApiKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_authorizer(self, *args, **kwargs):
        __protego_used['apigateway']['update_authorizer']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["restApiId","authorizerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_base_path_mapping(self, *args, **kwargs):
        __protego_used['apigateway']['update_base_path_mapping']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["basePath","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateBasePathMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_client_certificate(self, *args, **kwargs):
        __protego_used['apigateway']['update_client_certificate']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["clientCertificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateClientCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_deployment(self, *args, **kwargs):
        __protego_used['apigateway']['update_deployment']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["restApiId","deploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_documentation_part(self, *args, **kwargs):
        __protego_used['apigateway']['update_documentation_part']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["restApiId","documentationPartId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateDocumentationPart", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_documentation_version(self, *args, **kwargs):
        __protego_used['apigateway']['update_documentation_version']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["restApiId","documentationVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateDocumentationVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_domain_name(self, *args, **kwargs):
        __protego_used['apigateway']['update_domain_name']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateDomainName", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_gateway_response(self, *args, **kwargs):
        __protego_used['apigateway']['update_gateway_response']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["restApiId","responseType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateGatewayResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_integration(self, *args, **kwargs):
        __protego_used['apigateway']['update_integration']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["resourceId","restApiId","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateIntegration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_integration_response(self, *args, **kwargs):
        __protego_used['apigateway']['update_integration_response']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["resourceId","restApiId","statusCode","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateIntegrationResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_method(self, *args, **kwargs):
        __protego_used['apigateway']['update_method']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["resourceId","restApiId","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateMethod", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_method_response(self, *args, **kwargs):
        __protego_used['apigateway']['update_method_response']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["resourceId","restApiId","statusCode","httpMethod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateMethodResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_model(self, *args, **kwargs):
        __protego_used['apigateway']['update_model']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["restApiId","modelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_request_validator(self, *args, **kwargs):
        __protego_used['apigateway']['update_request_validator']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["restApiId","requestValidatorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateRequestValidator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_resource(self, *args, **kwargs):
        __protego_used['apigateway']['update_resource']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["resourceId","restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rest_api(self, *args, **kwargs):
        __protego_used['apigateway']['update_rest_api']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["restApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateRestApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_stage(self, *args, **kwargs):
        __protego_used['apigateway']['update_stage']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["restApiId","stageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateStage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_usage(self, *args, **kwargs):
        __protego_used['apigateway']['update_usage']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["usagePlanId","keyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_usage_plan(self, *args, **kwargs):
        __protego_used['apigateway']['update_usage_plan']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["usagePlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateUsagePlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_vpc_link(self, *args, **kwargs):
        __protego_used['apigateway']['update_vpc_link']=['apigateway:PATCH']
        for p in ['apigateway:PATCH']:
            res = {}
            for nm in ["vpcLinkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigateway'].append({'action': "UpdateVpcLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class apigatewaymanagementapi:
    def __init__(self, region_name=__default_region):
        __protego_used['apigatewaymanagementapi']= __protego_used.get('apigatewaymanagementapi', {})
        __protego_resource_map['apigatewaymanagementapi']=__protego_resource_map.get('apigatewaymanagementapi', [])
        self.region = region_name
    def delete_connection(self, *args, **kwargs):
        __protego_used['apigatewaymanagementapi']['delete_connection']=['apigatewaymanagementapi:*']
        for p in ['apigatewaymanagementapi:*']:
            res = {}
            for nm in ["ConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewaymanagementapi'].append({'action': "DeleteConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_connection(self, *args, **kwargs):
        __protego_used['apigatewaymanagementapi']['get_connection']=['apigatewaymanagementapi:*']
        for p in ['apigatewaymanagementapi:*']:
            res = {}
            for nm in ["ConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewaymanagementapi'].append({'action': "GetConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def post_to_connection(self, *args, **kwargs):
        __protego_used['apigatewaymanagementapi']['post_to_connection']=['apigatewaymanagementapi:*']
        for p in ['apigatewaymanagementapi:*']:
            res = {}
            for nm in ["Data","ConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewaymanagementapi'].append({'action': "PostToConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class apigatewayv2:
    def __init__(self, region_name=__default_region):
        __protego_used['apigatewayv2']= __protego_used.get('apigatewayv2', {})
        __protego_resource_map['apigatewayv2']=__protego_resource_map.get('apigatewayv2', [])
        self.region = region_name
    def create_api(self, *args, **kwargs):
        __protego_used['apigatewayv2']['create_api']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ProtocolType","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "CreateApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_api_mapping(self, *args, **kwargs):
        __protego_used['apigatewayv2']['create_api_mapping']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DomainName","ApiId","Stage"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "CreateApiMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_authorizer(self, *args, **kwargs):
        __protego_used['apigatewayv2']['create_authorizer']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["AuthorizerType","ApiId","Name","IdentitySource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "CreateAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deployment(self, *args, **kwargs):
        __protego_used['apigatewayv2']['create_deployment']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "CreateDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_domain_name(self, *args, **kwargs):
        __protego_used['apigatewayv2']['create_domain_name']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "CreateDomainName", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_integration(self, *args, **kwargs):
        __protego_used['apigatewayv2']['create_integration']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["IntegrationType","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "CreateIntegration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_integration_response(self, *args, **kwargs):
        __protego_used['apigatewayv2']['create_integration_response']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["IntegrationId","ApiId","IntegrationResponseKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "CreateIntegrationResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_model(self, *args, **kwargs):
        __protego_used['apigatewayv2']['create_model']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId","Name","Schema"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "CreateModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_route(self, *args, **kwargs):
        __protego_used['apigatewayv2']['create_route']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId","RouteKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "CreateRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_route_response(self, *args, **kwargs):
        __protego_used['apigatewayv2']['create_route_response']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["RouteId","ApiId","RouteResponseKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "CreateRouteResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stage(self, *args, **kwargs):
        __protego_used['apigatewayv2']['create_stage']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId","StageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "CreateStage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_api(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_api']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_api_mapping(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_api_mapping']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DomainName","ApiMappingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteApiMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_authorizer(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_authorizer']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["AuthorizerId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cors_configuration(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_cors_configuration']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteCorsConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_deployment(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_deployment']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DeploymentId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_domain_name(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_domain_name']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteDomainName", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_integration(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_integration']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["IntegrationId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteIntegration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_integration_response(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_integration_response']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["IntegrationId","ApiId","IntegrationResponseId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteIntegrationResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_model(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_model']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ModelId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_route(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_route']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["RouteId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_route_response(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_route_response']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["RouteId","RouteResponseId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteRouteResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_route_settings(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_route_settings']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["RouteKey","ApiId","StageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteRouteSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_stage(self, *args, **kwargs):
        __protego_used['apigatewayv2']['delete_stage']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId","StageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "DeleteStage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_api(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_api']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_api_mapping(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_api_mapping']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DomainName","ApiMappingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetApiMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_api_mappings(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_api_mappings']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetApiMappings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_apis(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_apis']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetApis", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_authorizer(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_authorizer']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["AuthorizerId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_authorizers(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_authorizers']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetAuthorizers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployment(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_deployment']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DeploymentId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployments(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_deployments']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetDeployments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain_name(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_domain_name']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetDomainName", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain_names(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_domain_names']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetDomainNames", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_integration(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_integration']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["IntegrationId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetIntegration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_integration_response(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_integration_response']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["IntegrationId","ApiId","IntegrationResponseId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetIntegrationResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_integration_responses(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_integration_responses']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["IntegrationId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetIntegrationResponses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_integrations(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_integrations']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetIntegrations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_model(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_model']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ModelId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_model_template(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_model_template']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ModelId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetModelTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_models(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_models']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetModels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_route(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_route']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["RouteId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_route_response(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_route_response']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["RouteId","RouteResponseId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetRouteResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_route_responses(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_route_responses']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["RouteId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetRouteResponses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_routes(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_routes']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetRoutes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_stage(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_stage']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId","StageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetStage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_stages(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_stages']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetStages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_tags(self, *args, **kwargs):
        __protego_used['apigatewayv2']['get_tags']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "GetTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_api(self, *args, **kwargs):
        __protego_used['apigatewayv2']['import_api']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["Body"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "ImportApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reimport_api(self, *args, **kwargs):
        __protego_used['apigatewayv2']['reimport_api']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["Body","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "ReimportApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['apigatewayv2']['tag_resource']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['apigatewayv2']['untag_resource']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_api(self, *args, **kwargs):
        __protego_used['apigatewayv2']['update_api']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UpdateApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_api_mapping(self, *args, **kwargs):
        __protego_used['apigatewayv2']['update_api_mapping']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DomainName","ApiId","ApiMappingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UpdateApiMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_authorizer(self, *args, **kwargs):
        __protego_used['apigatewayv2']['update_authorizer']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["AuthorizerId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UpdateAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_deployment(self, *args, **kwargs):
        __protego_used['apigatewayv2']['update_deployment']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DeploymentId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UpdateDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_domain_name(self, *args, **kwargs):
        __protego_used['apigatewayv2']['update_domain_name']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UpdateDomainName", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_integration(self, *args, **kwargs):
        __protego_used['apigatewayv2']['update_integration']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["IntegrationId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UpdateIntegration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_integration_response(self, *args, **kwargs):
        __protego_used['apigatewayv2']['update_integration_response']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["IntegrationId","ApiId","IntegrationResponseId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UpdateIntegrationResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_model(self, *args, **kwargs):
        __protego_used['apigatewayv2']['update_model']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ModelId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UpdateModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_route(self, *args, **kwargs):
        __protego_used['apigatewayv2']['update_route']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["RouteId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UpdateRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_route_response(self, *args, **kwargs):
        __protego_used['apigatewayv2']['update_route_response']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["RouteId","RouteResponseId","ApiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UpdateRouteResponse", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_stage(self, *args, **kwargs):
        __protego_used['apigatewayv2']['update_stage']=['apigatewayv2:*']
        for p in ['apigatewayv2:*']:
            res = {}
            for nm in ["ApiId","StageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['apigatewayv2'].append({'action': "UpdateStage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class appconfig:
    def __init__(self, region_name=__default_region):
        __protego_used['appconfig']= __protego_used.get('appconfig', {})
        __protego_resource_map['appconfig']=__protego_resource_map.get('appconfig', [])
        self.region = region_name
    def create_application(self, *args, **kwargs):
        __protego_used['appconfig']['create_application']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "CreateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_configuration_profile(self, *args, **kwargs):
        __protego_used['appconfig']['create_configuration_profile']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ApplicationId","RetrievalRoleArn","Name","LocationUri"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "CreateConfigurationProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deployment_strategy(self, *args, **kwargs):
        __protego_used['appconfig']['create_deployment_strategy']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ReplicateTo","GrowthFactor","Name","DeploymentDurationInMinutes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "CreateDeploymentStrategy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_environment(self, *args, **kwargs):
        __protego_used['appconfig']['create_environment']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ApplicationId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "CreateEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application(self, *args, **kwargs):
        __protego_used['appconfig']['delete_application']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "DeleteApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_profile(self, *args, **kwargs):
        __protego_used['appconfig']['delete_configuration_profile']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ApplicationId","ConfigurationProfileId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "DeleteConfigurationProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_deployment_strategy(self, *args, **kwargs):
        __protego_used['appconfig']['delete_deployment_strategy']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["DeploymentStrategyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "DeleteDeploymentStrategy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_environment(self, *args, **kwargs):
        __protego_used['appconfig']['delete_environment']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["EnvironmentId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "DeleteEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_application(self, *args, **kwargs):
        __protego_used['appconfig']['get_application']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "GetApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_configuration(self, *args, **kwargs):
        __protego_used['appconfig']['get_configuration']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["Environment","ClientId","Application","Configuration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "GetConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_configuration_profile(self, *args, **kwargs):
        __protego_used['appconfig']['get_configuration_profile']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ApplicationId","ConfigurationProfileId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "GetConfigurationProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployment(self, *args, **kwargs):
        __protego_used['appconfig']['get_deployment']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["EnvironmentId","ApplicationId","DeploymentNumber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "GetDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployment_strategy(self, *args, **kwargs):
        __protego_used['appconfig']['get_deployment_strategy']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["DeploymentStrategyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "GetDeploymentStrategy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_environment(self, *args, **kwargs):
        __protego_used['appconfig']['get_environment']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["EnvironmentId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "GetEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_applications(self, *args, **kwargs):
        __protego_used['appconfig']['list_applications']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "ListApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_configuration_profiles(self, *args, **kwargs):
        __protego_used['appconfig']['list_configuration_profiles']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "ListConfigurationProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_deployment_strategies(self, *args, **kwargs):
        __protego_used['appconfig']['list_deployment_strategies']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "ListDeploymentStrategies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_deployments(self, *args, **kwargs):
        __protego_used['appconfig']['list_deployments']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["EnvironmentId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "ListDeployments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_environments(self, *args, **kwargs):
        __protego_used['appconfig']['list_environments']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "ListEnvironments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['appconfig']['list_tags_for_resource']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_deployment(self, *args, **kwargs):
        __protego_used['appconfig']['start_deployment']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["DeploymentStrategyId","ConfigurationVersion","ApplicationId","EnvironmentId","ConfigurationProfileId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "StartDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_deployment(self, *args, **kwargs):
        __protego_used['appconfig']['stop_deployment']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["EnvironmentId","ApplicationId","DeploymentNumber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "StopDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['appconfig']['tag_resource']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['appconfig']['untag_resource']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_application(self, *args, **kwargs):
        __protego_used['appconfig']['update_application']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "UpdateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_configuration_profile(self, *args, **kwargs):
        __protego_used['appconfig']['update_configuration_profile']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ApplicationId","ConfigurationProfileId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "UpdateConfigurationProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_deployment_strategy(self, *args, **kwargs):
        __protego_used['appconfig']['update_deployment_strategy']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["DeploymentStrategyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "UpdateDeploymentStrategy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_environment(self, *args, **kwargs):
        __protego_used['appconfig']['update_environment']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["EnvironmentId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "UpdateEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def validate_configuration(self, *args, **kwargs):
        __protego_used['appconfig']['validate_configuration']=['appconfig:*']
        for p in ['appconfig:*']:
            res = {}
            for nm in ["ConfigurationVersion","ApplicationId","ConfigurationProfileId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appconfig'].append({'action': "ValidateConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class application_autoscaling:
    def __init__(self, region_name=__default_region):
        __protego_used['application-autoscaling']= __protego_used.get('application-autoscaling', {})
        __protego_resource_map['application-autoscaling']=__protego_resource_map.get('application-autoscaling', [])
        self.region = region_name
    def delete_scaling_policy(self, *args, **kwargs):
        __protego_used['application-autoscaling']['delete_scaling_policy']=['application-autoscaling:DeleteScalingPolicy']
        for p in ['application-autoscaling:DeleteScalingPolicy']:
            res = {}
            for nm in ["ServiceNamespace","ResourceId","PolicyName","ScalableDimension"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-autoscaling'].append({'action': "DeleteScalingPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_scheduled_action(self, *args, **kwargs):
        __protego_used['application-autoscaling']['delete_scheduled_action']=['application-autoscaling:DeleteScheduledAction']
        for p in ['application-autoscaling:DeleteScheduledAction']:
            res = {}
            for nm in ["ServiceNamespace","ScheduledActionName","ResourceId","ScalableDimension"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-autoscaling'].append({'action': "DeleteScheduledAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_scalable_target(self, *args, **kwargs):
        __protego_used['application-autoscaling']['deregister_scalable_target']=['application-autoscaling:DeregisterScalableTarget']
        for p in ['application-autoscaling:DeregisterScalableTarget']:
            res = {}
            for nm in ["ServiceNamespace","ResourceId","ScalableDimension"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-autoscaling'].append({'action': "DeregisterScalableTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scalable_targets(self, *args, **kwargs):
        __protego_used['application-autoscaling']['describe_scalable_targets']=['application-autoscaling:DescribeScalableTargets']
        for p in ['application-autoscaling:DescribeScalableTargets']:
            res = {}
            for nm in ["ServiceNamespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-autoscaling'].append({'action': "DescribeScalableTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scaling_activities(self, *args, **kwargs):
        __protego_used['application-autoscaling']['describe_scaling_activities']=['application-autoscaling:DescribeScalingActivities']
        for p in ['application-autoscaling:DescribeScalingActivities']:
            res = {}
            for nm in ["ServiceNamespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-autoscaling'].append({'action': "DescribeScalingActivities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scaling_policies(self, *args, **kwargs):
        __protego_used['application-autoscaling']['describe_scaling_policies']=['application-autoscaling:DescribeScalingPolicies']
        for p in ['application-autoscaling:DescribeScalingPolicies']:
            res = {}
            for nm in ["ServiceNamespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-autoscaling'].append({'action': "DescribeScalingPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scheduled_actions(self, *args, **kwargs):
        __protego_used['application-autoscaling']['describe_scheduled_actions']=['application-autoscaling:DescribeScheduledActions']
        for p in ['application-autoscaling:DescribeScheduledActions']:
            res = {}
            for nm in ["ServiceNamespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-autoscaling'].append({'action': "DescribeScheduledActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_scaling_policy(self, *args, **kwargs):
        __protego_used['application-autoscaling']['put_scaling_policy']=['application-autoscaling:PutScalingPolicy']
        for p in ['application-autoscaling:PutScalingPolicy']:
            res = {}
            for nm in ["ServiceNamespace","ResourceId","PolicyName","ScalableDimension"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-autoscaling'].append({'action': "PutScalingPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_scheduled_action(self, *args, **kwargs):
        __protego_used['application-autoscaling']['put_scheduled_action']=['application-autoscaling:PutScheduledAction']
        for p in ['application-autoscaling:PutScheduledAction']:
            res = {}
            for nm in ["ServiceNamespace","ScheduledActionName","ResourceId","ScalableDimension"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-autoscaling'].append({'action': "PutScheduledAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_scalable_target(self, *args, **kwargs):
        __protego_used['application-autoscaling']['register_scalable_target']=['application-autoscaling:RegisterScalableTarget']
        for p in ['application-autoscaling:RegisterScalableTarget']:
            res = {}
            for nm in ["ServiceNamespace","ResourceId","ScalableDimension"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-autoscaling'].append({'action': "RegisterScalableTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class application_insights:
    def __init__(self, region_name=__default_region):
        __protego_used['application-insights']= __protego_used.get('application-insights', {})
        __protego_resource_map['application-insights']=__protego_resource_map.get('application-insights', [])
        self.region = region_name
    def create_application(self, *args, **kwargs):
        __protego_used['application-insights']['create_application']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "CreateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_component(self, *args, **kwargs):
        __protego_used['application-insights']['create_component']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName","ResourceList","ComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "CreateComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_log_pattern(self, *args, **kwargs):
        __protego_used['application-insights']['create_log_pattern']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName","PatternName","Pattern","PatternSetName","Rank"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "CreateLogPattern", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application(self, *args, **kwargs):
        __protego_used['application-insights']['delete_application']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "DeleteApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_component(self, *args, **kwargs):
        __protego_used['application-insights']['delete_component']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName","ComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "DeleteComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_log_pattern(self, *args, **kwargs):
        __protego_used['application-insights']['delete_log_pattern']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName","PatternName","PatternSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "DeleteLogPattern", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_application(self, *args, **kwargs):
        __protego_used['application-insights']['describe_application']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "DescribeApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_component(self, *args, **kwargs):
        __protego_used['application-insights']['describe_component']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName","ComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "DescribeComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_component_configuration(self, *args, **kwargs):
        __protego_used['application-insights']['describe_component_configuration']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName","ComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "DescribeComponentConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_component_configuration_recommendation(self, *args, **kwargs):
        __protego_used['application-insights']['describe_component_configuration_recommendation']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName","Tier","ComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "DescribeComponentConfigurationRecommendation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_log_pattern(self, *args, **kwargs):
        __protego_used['application-insights']['describe_log_pattern']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName","PatternName","PatternSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "DescribeLogPattern", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_observation(self, *args, **kwargs):
        __protego_used['application-insights']['describe_observation']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ObservationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "DescribeObservation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_problem(self, *args, **kwargs):
        __protego_used['application-insights']['describe_problem']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ProblemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "DescribeProblem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_problem_observations(self, *args, **kwargs):
        __protego_used['application-insights']['describe_problem_observations']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ProblemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "DescribeProblemObservations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_applications(self, *args, **kwargs):
        __protego_used['application-insights']['list_applications']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "ListApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_components(self, *args, **kwargs):
        __protego_used['application-insights']['list_components']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "ListComponents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_log_pattern_sets(self, *args, **kwargs):
        __protego_used['application-insights']['list_log_pattern_sets']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "ListLogPatternSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_log_patterns(self, *args, **kwargs):
        __protego_used['application-insights']['list_log_patterns']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "ListLogPatterns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_problems(self, *args, **kwargs):
        __protego_used['application-insights']['list_problems']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "ListProblems", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['application-insights']['list_tags_for_resource']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['application-insights']['tag_resource']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['application-insights']['untag_resource']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_application(self, *args, **kwargs):
        __protego_used['application-insights']['update_application']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "UpdateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_component(self, *args, **kwargs):
        __protego_used['application-insights']['update_component']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName","ComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "UpdateComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_component_configuration(self, *args, **kwargs):
        __protego_used['application-insights']['update_component_configuration']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName","ComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "UpdateComponentConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_log_pattern(self, *args, **kwargs):
        __protego_used['application-insights']['update_log_pattern']=['application-insights:*']
        for p in ['application-insights:*']:
            res = {}
            for nm in ["ResourceGroupName","PatternName","PatternSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['application-insights'].append({'action': "UpdateLogPattern", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class appmesh:
    def __init__(self, region_name=__default_region):
        __protego_used['appmesh']= __protego_used.get('appmesh', {})
        __protego_resource_map['appmesh']=__protego_resource_map.get('appmesh', [])
        self.region = region_name
    def create_mesh(self, *args, **kwargs):
        __protego_used['appmesh']['create_mesh']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "CreateMesh", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_route(self, *args, **kwargs):
        __protego_used['appmesh']['create_route']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","spec","virtualRouterName","routeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "CreateRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_virtual_node(self, *args, **kwargs):
        __protego_used['appmesh']['create_virtual_node']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualNodeName","spec"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "CreateVirtualNode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_virtual_router(self, *args, **kwargs):
        __protego_used['appmesh']['create_virtual_router']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualRouterName","spec"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "CreateVirtualRouter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_virtual_service(self, *args, **kwargs):
        __protego_used['appmesh']['create_virtual_service']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualServiceName","spec"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "CreateVirtualService", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_mesh(self, *args, **kwargs):
        __protego_used['appmesh']['delete_mesh']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "DeleteMesh", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_route(self, *args, **kwargs):
        __protego_used['appmesh']['delete_route']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualRouterName","routeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "DeleteRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_virtual_node(self, *args, **kwargs):
        __protego_used['appmesh']['delete_virtual_node']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualNodeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "DeleteVirtualNode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_virtual_router(self, *args, **kwargs):
        __protego_used['appmesh']['delete_virtual_router']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualRouterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "DeleteVirtualRouter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_virtual_service(self, *args, **kwargs):
        __protego_used['appmesh']['delete_virtual_service']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualServiceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "DeleteVirtualService", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_mesh(self, *args, **kwargs):
        __protego_used['appmesh']['describe_mesh']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "DescribeMesh", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_route(self, *args, **kwargs):
        __protego_used['appmesh']['describe_route']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualRouterName","routeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "DescribeRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_virtual_node(self, *args, **kwargs):
        __protego_used['appmesh']['describe_virtual_node']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualNodeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "DescribeVirtualNode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_virtual_router(self, *args, **kwargs):
        __protego_used['appmesh']['describe_virtual_router']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualRouterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "DescribeVirtualRouter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_virtual_service(self, *args, **kwargs):
        __protego_used['appmesh']['describe_virtual_service']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualServiceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "DescribeVirtualService", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_meshes(self, *args, **kwargs):
        __protego_used['appmesh']['list_meshes']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "ListMeshes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_routes(self, *args, **kwargs):
        __protego_used['appmesh']['list_routes']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualRouterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "ListRoutes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['appmesh']['list_tags_for_resource']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_virtual_nodes(self, *args, **kwargs):
        __protego_used['appmesh']['list_virtual_nodes']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "ListVirtualNodes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_virtual_routers(self, *args, **kwargs):
        __protego_used['appmesh']['list_virtual_routers']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "ListVirtualRouters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_virtual_services(self, *args, **kwargs):
        __protego_used['appmesh']['list_virtual_services']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "ListVirtualServices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['appmesh']['tag_resource']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['appmesh']['untag_resource']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_mesh(self, *args, **kwargs):
        __protego_used['appmesh']['update_mesh']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "UpdateMesh", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_route(self, *args, **kwargs):
        __protego_used['appmesh']['update_route']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","spec","virtualRouterName","routeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "UpdateRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_virtual_node(self, *args, **kwargs):
        __protego_used['appmesh']['update_virtual_node']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualNodeName","spec"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "UpdateVirtualNode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_virtual_router(self, *args, **kwargs):
        __protego_used['appmesh']['update_virtual_router']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualRouterName","spec"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "UpdateVirtualRouter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_virtual_service(self, *args, **kwargs):
        __protego_used['appmesh']['update_virtual_service']=['appmesh:*']
        for p in ['appmesh:*']:
            res = {}
            for nm in ["meshName","virtualServiceName","spec"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appmesh'].append({'action': "UpdateVirtualService", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class appstream:
    def __init__(self, region_name=__default_region):
        __protego_used['appstream']= __protego_used.get('appstream', {})
        __protego_resource_map['appstream']=__protego_resource_map.get('appstream', [])
        self.region = region_name
    def associate_fleet(self, *args, **kwargs):
        __protego_used['appstream']['associate_fleet']=['appstream:AssociateFleet','appstream:AssociateFleet']
        for p in ['appstream:AssociateFleet','appstream:AssociateFleet']:
            res = {}
            for nm in ["FleetName","StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "AssociateFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_associate_user_stack(self, *args, **kwargs):
        __protego_used['appstream']['batch_associate_user_stack']=['appstream:BatchAssociateUserStack']
        for p in ['appstream:BatchAssociateUserStack']:
            res = {}
            for nm in ["UserStackAssociations"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "BatchAssociateUserStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_disassociate_user_stack(self, *args, **kwargs):
        __protego_used['appstream']['batch_disassociate_user_stack']=['appstream:BatchDisassociateUserStack']
        for p in ['appstream:BatchDisassociateUserStack']:
            res = {}
            for nm in ["UserStackAssociations"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "BatchDisassociateUserStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_image(self, *args, **kwargs):
        __protego_used['appstream']['copy_image']=['appstream:*']
        for p in ['appstream:*']:
            res = {}
            for nm in ["SourceImageName","DestinationImageName","DestinationRegion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "CopyImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_directory_config(self, *args, **kwargs):
        __protego_used['appstream']['create_directory_config']=['appstream:CreateDirectoryConfig']
        for p in ['appstream:CreateDirectoryConfig']:
            res = {}
            for nm in ["OrganizationalUnitDistinguishedNames","DirectoryName","ServiceAccountCredentials"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "CreateDirectoryConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_fleet(self, *args, **kwargs):
        __protego_used['appstream']['create_fleet']=['appstream:CreateFleet','appstream:CreateFleet']
        for p in ['appstream:CreateFleet','appstream:CreateFleet']:
            res = {}
            for nm in ["ComputeCapacity","InstanceType","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "CreateFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_image_builder(self, *args, **kwargs):
        __protego_used['appstream']['create_image_builder']=['appstream:CreateImageBuilder','appstream:CreateImageBuilder']
        for p in ['appstream:CreateImageBuilder','appstream:CreateImageBuilder']:
            res = {}
            for nm in ["InstanceType","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "CreateImageBuilder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_image_builder_streaming_url(self, *args, **kwargs):
        __protego_used['appstream']['create_image_builder_streaming_url']=['appstream:CreateImageBuilderStreamingURL']
        for p in ['appstream:CreateImageBuilderStreamingURL']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "CreateImageBuilderStreamingURL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stack(self, *args, **kwargs):
        __protego_used['appstream']['create_stack']=['appstream:CreateStack']
        for p in ['appstream:CreateStack']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "CreateStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_streaming_url(self, *args, **kwargs):
        __protego_used['appstream']['create_streaming_url']=['appstream:CreateStreamingURL','appstream:CreateStreamingURL']
        for p in ['appstream:CreateStreamingURL','appstream:CreateStreamingURL']:
            res = {}
            for nm in ["UserId","FleetName","StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "CreateStreamingURL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_usage_report_subscription(self, *args, **kwargs):
        __protego_used['appstream']['create_usage_report_subscription']=['appstream:CreateUsageReportSubscription']
        for p in ['appstream:CreateUsageReportSubscription']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "CreateUsageReportSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user(self, *args, **kwargs):
        __protego_used['appstream']['create_user']=['appstream:CreateUser']
        for p in ['appstream:CreateUser']:
            res = {}
            for nm in ["AuthenticationType","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "CreateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_directory_config(self, *args, **kwargs):
        __protego_used['appstream']['delete_directory_config']=['appstream:DeleteDirectoryConfig']
        for p in ['appstream:DeleteDirectoryConfig']:
            res = {}
            for nm in ["DirectoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DeleteDirectoryConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_fleet(self, *args, **kwargs):
        __protego_used['appstream']['delete_fleet']=['appstream:DeleteFleet']
        for p in ['appstream:DeleteFleet']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DeleteFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_image(self, *args, **kwargs):
        __protego_used['appstream']['delete_image']=['appstream:DeleteImage']
        for p in ['appstream:DeleteImage']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DeleteImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_image_builder(self, *args, **kwargs):
        __protego_used['appstream']['delete_image_builder']=['appstream:DeleteImageBuilder']
        for p in ['appstream:DeleteImageBuilder']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DeleteImageBuilder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_image_permissions(self, *args, **kwargs):
        __protego_used['appstream']['delete_image_permissions']=['appstream:*']
        for p in ['appstream:*']:
            res = {}
            for nm in ["SharedAccountId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DeleteImagePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_stack(self, *args, **kwargs):
        __protego_used['appstream']['delete_stack']=['appstream:DeleteStack']
        for p in ['appstream:DeleteStack']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DeleteStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_usage_report_subscription(self, *args, **kwargs):
        __protego_used['appstream']['delete_usage_report_subscription']=['appstream:DeleteUsageReportSubscription']
        for p in ['appstream:DeleteUsageReportSubscription']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DeleteUsageReportSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user(self, *args, **kwargs):
        __protego_used['appstream']['delete_user']=['appstream:DeleteUser']
        for p in ['appstream:DeleteUser']:
            res = {}
            for nm in ["AuthenticationType","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DeleteUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_directory_configs(self, *args, **kwargs):
        __protego_used['appstream']['describe_directory_configs']=['appstream:DescribeDirectoryConfigs']
        for p in ['appstream:DescribeDirectoryConfigs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DescribeDirectoryConfigs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fleets(self, *args, **kwargs):
        __protego_used['appstream']['describe_fleets']=['appstream:DescribeFleets']
        for p in ['appstream:DescribeFleets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DescribeFleets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_image_builders(self, *args, **kwargs):
        __protego_used['appstream']['describe_image_builders']=['appstream:DescribeImageBuilders']
        for p in ['appstream:DescribeImageBuilders']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DescribeImageBuilders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_image_permissions(self, *args, **kwargs):
        __protego_used['appstream']['describe_image_permissions']=['appstream:*']
        for p in ['appstream:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DescribeImagePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_images(self, *args, **kwargs):
        __protego_used['appstream']['describe_images']=['appstream:DescribeImages']
        for p in ['appstream:DescribeImages']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DescribeImages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_sessions(self, *args, **kwargs):
        __protego_used['appstream']['describe_sessions']=['appstream:DescribeSessions','appstream:DescribeSessions']
        for p in ['appstream:DescribeSessions','appstream:DescribeSessions']:
            res = {}
            for nm in ["FleetName","StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DescribeSessions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stacks(self, *args, **kwargs):
        __protego_used['appstream']['describe_stacks']=['appstream:DescribeStacks']
        for p in ['appstream:DescribeStacks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DescribeStacks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_usage_report_subscriptions(self, *args, **kwargs):
        __protego_used['appstream']['describe_usage_report_subscriptions']=['appstream:DescribeUsageReportSubscriptions']
        for p in ['appstream:DescribeUsageReportSubscriptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DescribeUsageReportSubscriptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user_stack_associations(self, *args, **kwargs):
        __protego_used['appstream']['describe_user_stack_associations']=['appstream:DescribeUserStackAssociations']
        for p in ['appstream:DescribeUserStackAssociations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DescribeUserStackAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_users(self, *args, **kwargs):
        __protego_used['appstream']['describe_users']=['appstream:DescribeUsers']
        for p in ['appstream:DescribeUsers']:
            res = {}
            for nm in ["AuthenticationType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DescribeUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_user(self, *args, **kwargs):
        __protego_used['appstream']['disable_user']=['appstream:DisableUser']
        for p in ['appstream:DisableUser']:
            res = {}
            for nm in ["AuthenticationType","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DisableUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_fleet(self, *args, **kwargs):
        __protego_used['appstream']['disassociate_fleet']=['appstream:DisassociateFleet','appstream:DisassociateFleet']
        for p in ['appstream:DisassociateFleet','appstream:DisassociateFleet']:
            res = {}
            for nm in ["FleetName","StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "DisassociateFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_user(self, *args, **kwargs):
        __protego_used['appstream']['enable_user']=['appstream:EnableUser']
        for p in ['appstream:EnableUser']:
            res = {}
            for nm in ["AuthenticationType","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "EnableUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def expire_session(self, *args, **kwargs):
        __protego_used['appstream']['expire_session']=['appstream:ExpireSession']
        for p in ['appstream:ExpireSession']:
            res = {}
            for nm in ["SessionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "ExpireSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_associated_fleets(self, *args, **kwargs):
        __protego_used['appstream']['list_associated_fleets']=['appstream:ListAssociatedFleets']
        for p in ['appstream:ListAssociatedFleets']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "ListAssociatedFleets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_associated_stacks(self, *args, **kwargs):
        __protego_used['appstream']['list_associated_stacks']=['appstream:ListAssociatedStacks']
        for p in ['appstream:ListAssociatedStacks']:
            res = {}
            for nm in ["FleetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "ListAssociatedStacks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['appstream']['list_tags_for_resource']=['appstream:ListTagsForResource']
        for p in ['appstream:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_fleet(self, *args, **kwargs):
        __protego_used['appstream']['start_fleet']=['appstream:StartFleet']
        for p in ['appstream:StartFleet']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "StartFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_image_builder(self, *args, **kwargs):
        __protego_used['appstream']['start_image_builder']=['appstream:StartImageBuilder']
        for p in ['appstream:StartImageBuilder']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "StartImageBuilder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_fleet(self, *args, **kwargs):
        __protego_used['appstream']['stop_fleet']=['appstream:StopFleet']
        for p in ['appstream:StopFleet']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "StopFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_image_builder(self, *args, **kwargs):
        __protego_used['appstream']['stop_image_builder']=['appstream:StopImageBuilder']
        for p in ['appstream:StopImageBuilder']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "StopImageBuilder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['appstream']['tag_resource']=['appstream:TagResource']
        for p in ['appstream:TagResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['appstream']['untag_resource']=['appstream:UntagResource']
        for p in ['appstream:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_directory_config(self, *args, **kwargs):
        __protego_used['appstream']['update_directory_config']=['appstream:UpdateDirectoryConfig']
        for p in ['appstream:UpdateDirectoryConfig']:
            res = {}
            for nm in ["DirectoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "UpdateDirectoryConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_fleet(self, *args, **kwargs):
        __protego_used['appstream']['update_fleet']=['appstream:UpdateFleet','appstream:UpdateFleet']
        for p in ['appstream:UpdateFleet','appstream:UpdateFleet']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "UpdateFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_image_permissions(self, *args, **kwargs):
        __protego_used['appstream']['update_image_permissions']=['appstream:*']
        for p in ['appstream:*']:
            res = {}
            for nm in ["SharedAccountId","Name","ImagePermissions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "UpdateImagePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_stack(self, *args, **kwargs):
        __protego_used['appstream']['update_stack']=['appstream:UpdateStack']
        for p in ['appstream:UpdateStack']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appstream'].append({'action': "UpdateStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class appsync:
    def __init__(self, region_name=__default_region):
        __protego_used['appsync']= __protego_used.get('appsync', {})
        __protego_resource_map['appsync']=__protego_resource_map.get('appsync', [])
        self.region = region_name
    def create_api_cache(self, *args, **kwargs):
        __protego_used['appsync']['create_api_cache']=['appsync:*']
        for p in ['appsync:*']:
            res = {}
            for nm in ["apiCachingBehavior","apiId","ttl","type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "CreateApiCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_api_key(self, *args, **kwargs):
        __protego_used['appsync']['create_api_key']=['appsync:CreateApiKey']
        for p in ['appsync:CreateApiKey']:
            res = {}
            for nm in ["apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "CreateApiKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_data_source(self, *args, **kwargs):
        __protego_used['appsync']['create_data_source']=['appsync:CreateDataSource']
        for p in ['appsync:CreateDataSource']:
            res = {}
            for nm in ["name","apiId","type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "CreateDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_function(self, *args, **kwargs):
        __protego_used['appsync']['create_function']=['appsync:CreateFunction']
        for p in ['appsync:CreateFunction']:
            res = {}
            for nm in ["dataSourceName","name","functionVersion","apiId","requestMappingTemplate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "CreateFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_graphql_api(self, *args, **kwargs):
        __protego_used['appsync']['create_graphql_api']=['appsync:CreateGraphqlApi']
        for p in ['appsync:CreateGraphqlApi']:
            res = {}
            for nm in ["name","authenticationType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "CreateGraphqlApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_resolver(self, *args, **kwargs):
        __protego_used['appsync']['create_resolver']=['appsync:CreateResolver']
        for p in ['appsync:CreateResolver']:
            res = {}
            for nm in ["typeName","apiId","requestMappingTemplate","fieldName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "CreateResolver", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_type(self, *args, **kwargs):
        __protego_used['appsync']['create_type']=['appsync:CreateType']
        for p in ['appsync:CreateType']:
            res = {}
            for nm in ["format","apiId","definition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "CreateType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_api_cache(self, *args, **kwargs):
        __protego_used['appsync']['delete_api_cache']=['appsync:*']
        for p in ['appsync:*']:
            res = {}
            for nm in ["apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "DeleteApiCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_api_key(self, *args, **kwargs):
        __protego_used['appsync']['delete_api_key']=['appsync:DeleteApiKey']
        for p in ['appsync:DeleteApiKey']:
            res = {}
            for nm in ["apiId","id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "DeleteApiKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_data_source(self, *args, **kwargs):
        __protego_used['appsync']['delete_data_source']=['appsync:DeleteDataSource']
        for p in ['appsync:DeleteDataSource']:
            res = {}
            for nm in ["name","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "DeleteDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_function(self, *args, **kwargs):
        __protego_used['appsync']['delete_function']=['appsync:DeleteFunction']
        for p in ['appsync:DeleteFunction']:
            res = {}
            for nm in ["functionId","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "DeleteFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_graphql_api(self, *args, **kwargs):
        __protego_used['appsync']['delete_graphql_api']=['appsync:DeleteGraphqlApi']
        for p in ['appsync:DeleteGraphqlApi']:
            res = {}
            for nm in ["apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "DeleteGraphqlApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resolver(self, *args, **kwargs):
        __protego_used['appsync']['delete_resolver']=['appsync:DeleteResolver']
        for p in ['appsync:DeleteResolver']:
            res = {}
            for nm in ["typeName","apiId","fieldName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "DeleteResolver", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_type(self, *args, **kwargs):
        __protego_used['appsync']['delete_type']=['appsync:DeleteType']
        for p in ['appsync:DeleteType']:
            res = {}
            for nm in ["typeName","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "DeleteType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def flush_api_cache(self, *args, **kwargs):
        __protego_used['appsync']['flush_api_cache']=['appsync:*']
        for p in ['appsync:*']:
            res = {}
            for nm in ["apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "FlushApiCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_api_cache(self, *args, **kwargs):
        __protego_used['appsync']['get_api_cache']=['appsync:*']
        for p in ['appsync:*']:
            res = {}
            for nm in ["apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "GetApiCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_data_source(self, *args, **kwargs):
        __protego_used['appsync']['get_data_source']=['appsync:GetDataSource']
        for p in ['appsync:GetDataSource']:
            res = {}
            for nm in ["name","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "GetDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_function(self, *args, **kwargs):
        __protego_used['appsync']['get_function']=['appsync:GetFunction']
        for p in ['appsync:GetFunction']:
            res = {}
            for nm in ["functionId","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "GetFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_graphql_api(self, *args, **kwargs):
        __protego_used['appsync']['get_graphql_api']=['appsync:GetGraphqlApi']
        for p in ['appsync:GetGraphqlApi']:
            res = {}
            for nm in ["apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "GetGraphqlApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_introspection_schema(self, *args, **kwargs):
        __protego_used['appsync']['get_introspection_schema']=['appsync:GetIntrospectionSchema']
        for p in ['appsync:GetIntrospectionSchema']:
            res = {}
            for nm in ["format","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "GetIntrospectionSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resolver(self, *args, **kwargs):
        __protego_used['appsync']['get_resolver']=['appsync:GetResolver']
        for p in ['appsync:GetResolver']:
            res = {}
            for nm in ["typeName","apiId","fieldName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "GetResolver", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_schema_creation_status(self, *args, **kwargs):
        __protego_used['appsync']['get_schema_creation_status']=['appsync:GetSchemaCreationStatus']
        for p in ['appsync:GetSchemaCreationStatus']:
            res = {}
            for nm in ["apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "GetSchemaCreationStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_type(self, *args, **kwargs):
        __protego_used['appsync']['get_type']=['appsync:GetType']
        for p in ['appsync:GetType']:
            res = {}
            for nm in ["format","typeName","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "GetType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_api_keys(self, *args, **kwargs):
        __protego_used['appsync']['list_api_keys']=['appsync:ListApiKeys']
        for p in ['appsync:ListApiKeys']:
            res = {}
            for nm in ["apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "ListApiKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_data_sources(self, *args, **kwargs):
        __protego_used['appsync']['list_data_sources']=['appsync:ListDataSources']
        for p in ['appsync:ListDataSources']:
            res = {}
            for nm in ["apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "ListDataSources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_functions(self, *args, **kwargs):
        __protego_used['appsync']['list_functions']=['appsync:ListFunctions']
        for p in ['appsync:ListFunctions']:
            res = {}
            for nm in ["apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "ListFunctions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_graphql_apis(self, *args, **kwargs):
        __protego_used['appsync']['list_graphql_apis']=['appsync:ListGraphqlApis']
        for p in ['appsync:ListGraphqlApis']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "ListGraphqlApis", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resolvers(self, *args, **kwargs):
        __protego_used['appsync']['list_resolvers']=['appsync:ListResolvers']
        for p in ['appsync:ListResolvers']:
            res = {}
            for nm in ["typeName","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "ListResolvers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resolvers_by_function(self, *args, **kwargs):
        __protego_used['appsync']['list_resolvers_by_function']=['appsync:*']
        for p in ['appsync:*']:
            res = {}
            for nm in ["functionId","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "ListResolversByFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['appsync']['list_tags_for_resource']=['appsync:*']
        for p in ['appsync:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_types(self, *args, **kwargs):
        __protego_used['appsync']['list_types']=['appsync:ListTypes']
        for p in ['appsync:ListTypes']:
            res = {}
            for nm in ["format","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "ListTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_schema_creation(self, *args, **kwargs):
        __protego_used['appsync']['start_schema_creation']=['appsync:StartSchemaCreation']
        for p in ['appsync:StartSchemaCreation']:
            res = {}
            for nm in ["apiId","definition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "StartSchemaCreation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['appsync']['tag_resource']=['appsync:*']
        for p in ['appsync:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['appsync']['untag_resource']=['appsync:*']
        for p in ['appsync:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_api_cache(self, *args, **kwargs):
        __protego_used['appsync']['update_api_cache']=['appsync:*']
        for p in ['appsync:*']:
            res = {}
            for nm in ["apiCachingBehavior","apiId","ttl","type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "UpdateApiCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_api_key(self, *args, **kwargs):
        __protego_used['appsync']['update_api_key']=['appsync:UpdateApiKey']
        for p in ['appsync:UpdateApiKey']:
            res = {}
            for nm in ["apiId","id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "UpdateApiKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_data_source(self, *args, **kwargs):
        __protego_used['appsync']['update_data_source']=['appsync:UpdateDataSource']
        for p in ['appsync:UpdateDataSource']:
            res = {}
            for nm in ["name","apiId","type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "UpdateDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_function(self, *args, **kwargs):
        __protego_used['appsync']['update_function']=['appsync:UpdateFunction']
        for p in ['appsync:UpdateFunction']:
            res = {}
            for nm in ["dataSourceName","name","apiId","functionVersion","functionId","requestMappingTemplate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "UpdateFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_graphql_api(self, *args, **kwargs):
        __protego_used['appsync']['update_graphql_api']=['appsync:UpdateGraphqlApi']
        for p in ['appsync:UpdateGraphqlApi']:
            res = {}
            for nm in ["name","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "UpdateGraphqlApi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_resolver(self, *args, **kwargs):
        __protego_used['appsync']['update_resolver']=['appsync:UpdateResolver']
        for p in ['appsync:UpdateResolver']:
            res = {}
            for nm in ["typeName","apiId","requestMappingTemplate","fieldName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "UpdateResolver", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_type(self, *args, **kwargs):
        __protego_used['appsync']['update_type']=['appsync:UpdateType']
        for p in ['appsync:UpdateType']:
            res = {}
            for nm in ["format","typeName","apiId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['appsync'].append({'action': "UpdateType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class athena:
    def __init__(self, region_name=__default_region):
        __protego_used['athena']= __protego_used.get('athena', {})
        __protego_resource_map['athena']=__protego_resource_map.get('athena', [])
        self.region = region_name
    def batch_get_named_query(self, *args, **kwargs):
        __protego_used['athena']['batch_get_named_query']=['athena:BatchGetNamedQuery']
        for p in ['athena:BatchGetNamedQuery']:
            res = {}
            for nm in ["NamedQueryIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "BatchGetNamedQuery", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_query_execution(self, *args, **kwargs):
        __protego_used['athena']['batch_get_query_execution']=['athena:BatchGetQueryExecution']
        for p in ['athena:BatchGetQueryExecution']:
            res = {}
            for nm in ["QueryExecutionIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "BatchGetQueryExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_named_query(self, *args, **kwargs):
        __protego_used['athena']['create_named_query']=['athena:CreateNamedQuery']
        for p in ['athena:CreateNamedQuery']:
            res = {}
            for nm in ["Database","Name","QueryString"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "CreateNamedQuery", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_work_group(self, *args, **kwargs):
        __protego_used['athena']['create_work_group']=['athena:CreateWorkGroup']
        for p in ['athena:CreateWorkGroup']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "CreateWorkGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_named_query(self, *args, **kwargs):
        __protego_used['athena']['delete_named_query']=['athena:DeleteNamedQuery']
        for p in ['athena:DeleteNamedQuery']:
            res = {}
            for nm in ["NamedQueryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "DeleteNamedQuery", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_work_group(self, *args, **kwargs):
        __protego_used['athena']['delete_work_group']=['athena:DeleteWorkGroup']
        for p in ['athena:DeleteWorkGroup']:
            res = {}
            for nm in ["WorkGroup"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "DeleteWorkGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_named_query(self, *args, **kwargs):
        __protego_used['athena']['get_named_query']=['athena:GetNamedQuery']
        for p in ['athena:GetNamedQuery']:
            res = {}
            for nm in ["NamedQueryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "GetNamedQuery", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_query_execution(self, *args, **kwargs):
        __protego_used['athena']['get_query_execution']=['athena:GetQueryExecution']
        for p in ['athena:GetQueryExecution']:
            res = {}
            for nm in ["QueryExecutionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "GetQueryExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_query_results(self, *args, **kwargs):
        __protego_used['athena']['get_query_results']=['athena:GetQueryResults']
        for p in ['athena:GetQueryResults']:
            res = {}
            for nm in ["QueryExecutionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "GetQueryResults", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_work_group(self, *args, **kwargs):
        __protego_used['athena']['get_work_group']=['athena:GetWorkGroup']
        for p in ['athena:GetWorkGroup']:
            res = {}
            for nm in ["WorkGroup"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "GetWorkGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_named_queries(self, *args, **kwargs):
        __protego_used['athena']['list_named_queries']=['athena:ListNamedQueries']
        for p in ['athena:ListNamedQueries']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "ListNamedQueries", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_query_executions(self, *args, **kwargs):
        __protego_used['athena']['list_query_executions']=['athena:ListQueryExecutions']
        for p in ['athena:ListQueryExecutions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "ListQueryExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['athena']['list_tags_for_resource']=['athena:ListTagsForResource']
        for p in ['athena:ListTagsForResource']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_work_groups(self, *args, **kwargs):
        __protego_used['athena']['list_work_groups']=['athena:ListWorkGroups']
        for p in ['athena:ListWorkGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "ListWorkGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_query_execution(self, *args, **kwargs):
        __protego_used['athena']['start_query_execution']=['athena:StartQueryExecution']
        for p in ['athena:StartQueryExecution']:
            res = {}
            for nm in ["QueryString"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "StartQueryExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_query_execution(self, *args, **kwargs):
        __protego_used['athena']['stop_query_execution']=['athena:StopQueryExecution']
        for p in ['athena:StopQueryExecution']:
            res = {}
            for nm in ["QueryExecutionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "StopQueryExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['athena']['tag_resource']=['athena:TagResource']
        for p in ['athena:TagResource']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['athena']['untag_resource']=['athena:UntagResource']
        for p in ['athena:UntagResource']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_work_group(self, *args, **kwargs):
        __protego_used['athena']['update_work_group']=['athena:UpdateWorkGroup']
        for p in ['athena:UpdateWorkGroup']:
            res = {}
            for nm in ["WorkGroup"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['athena'].append({'action': "UpdateWorkGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class autoscaling:
    def __init__(self, region_name=__default_region):
        __protego_used['autoscaling']= __protego_used.get('autoscaling', {})
        __protego_resource_map['autoscaling']=__protego_resource_map.get('autoscaling', [])
        self.region = region_name
    def attach_instances(self, *args, **kwargs):
        __protego_used['autoscaling']['attach_instances']=['autoscaling:AttachInstances']
        for p in ['autoscaling:AttachInstances']:
            res = {}
            for nm in ["AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "AttachInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_load_balancer_target_groups(self, *args, **kwargs):
        __protego_used['autoscaling']['attach_load_balancer_target_groups']=['autoscaling:AttachLoadBalancerTargetGroups']
        for p in ['autoscaling:AttachLoadBalancerTargetGroups']:
            res = {}
            for nm in ["TargetGroupARNs","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "AttachLoadBalancerTargetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_load_balancers(self, *args, **kwargs):
        __protego_used['autoscaling']['attach_load_balancers']=['autoscaling:AttachLoadBalancers']
        for p in ['autoscaling:AttachLoadBalancers']:
            res = {}
            for nm in ["LoadBalancerNames","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "AttachLoadBalancers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_delete_scheduled_action(self, *args, **kwargs):
        __protego_used['autoscaling']['batch_delete_scheduled_action']=['autoscaling:*']
        for p in ['autoscaling:*']:
            res = {}
            for nm in ["ScheduledActionNames","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "BatchDeleteScheduledAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_put_scheduled_update_group_action(self, *args, **kwargs):
        __protego_used['autoscaling']['batch_put_scheduled_update_group_action']=['autoscaling:*']
        for p in ['autoscaling:*']:
            res = {}
            for nm in ["ScheduledUpdateGroupActions","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "BatchPutScheduledUpdateGroupAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def complete_lifecycle_action(self, *args, **kwargs):
        __protego_used['autoscaling']['complete_lifecycle_action']=['autoscaling:CompleteLifecycleAction']
        for p in ['autoscaling:CompleteLifecycleAction']:
            res = {}
            for nm in ["LifecycleActionResult","AutoScalingGroupName","LifecycleHookName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "CompleteLifecycleAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_auto_scaling_group(self, *args, **kwargs):
        __protego_used['autoscaling']['create_auto_scaling_group']=['autoscaling:CreateAutoScalingGroup']
        for p in ['autoscaling:CreateAutoScalingGroup']:
            res = {}
            for nm in ["MinSize","MaxSize","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "CreateAutoScalingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_launch_configuration(self, *args, **kwargs):
        __protego_used['autoscaling']['create_launch_configuration']=['autoscaling:CreateLaunchConfiguration']
        for p in ['autoscaling:CreateLaunchConfiguration']:
            res = {}
            for nm in ["LaunchConfigurationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "CreateLaunchConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_or_update_tags(self, *args, **kwargs):
        __protego_used['autoscaling']['create_or_update_tags']=['autoscaling:CreateOrUpdateTags']
        for p in ['autoscaling:CreateOrUpdateTags']:
            res = {}
            for nm in ["Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "CreateOrUpdateTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_auto_scaling_group(self, *args, **kwargs):
        __protego_used['autoscaling']['delete_auto_scaling_group']=['autoscaling:DeleteAutoScalingGroup']
        for p in ['autoscaling:DeleteAutoScalingGroup']:
            res = {}
            for nm in ["AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DeleteAutoScalingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_launch_configuration(self, *args, **kwargs):
        __protego_used['autoscaling']['delete_launch_configuration']=['autoscaling:DeleteLaunchConfiguration']
        for p in ['autoscaling:DeleteLaunchConfiguration']:
            res = {}
            for nm in ["LaunchConfigurationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DeleteLaunchConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_lifecycle_hook(self, *args, **kwargs):
        __protego_used['autoscaling']['delete_lifecycle_hook']=['autoscaling:DeleteLifecycleHook']
        for p in ['autoscaling:DeleteLifecycleHook']:
            res = {}
            for nm in ["AutoScalingGroupName","LifecycleHookName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DeleteLifecycleHook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_notification_configuration(self, *args, **kwargs):
        __protego_used['autoscaling']['delete_notification_configuration']=['autoscaling:DeleteNotificationConfiguration']
        for p in ['autoscaling:DeleteNotificationConfiguration']:
            res = {}
            for nm in ["TopicARN","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DeleteNotificationConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_policy(self, *args, **kwargs):
        __protego_used['autoscaling']['delete_policy']=['autoscaling:DeletePolicy']
        for p in ['autoscaling:DeletePolicy']:
            res = {}
            for nm in ["PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DeletePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_scheduled_action(self, *args, **kwargs):
        __protego_used['autoscaling']['delete_scheduled_action']=['autoscaling:DeleteScheduledAction']
        for p in ['autoscaling:DeleteScheduledAction']:
            res = {}
            for nm in ["ScheduledActionName","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DeleteScheduledAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tags(self, *args, **kwargs):
        __protego_used['autoscaling']['delete_tags']=['autoscaling:DeleteTags']
        for p in ['autoscaling:DeleteTags']:
            res = {}
            for nm in ["Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DeleteTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_limits(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_account_limits']=['autoscaling:DescribeAccountLimits']
        for p in ['autoscaling:DescribeAccountLimits']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeAccountLimits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_adjustment_types(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_adjustment_types']=['autoscaling:DescribeAdjustmentTypes']
        for p in ['autoscaling:DescribeAdjustmentTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeAdjustmentTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_auto_scaling_groups(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_auto_scaling_groups']=['autoscaling:DescribeAutoScalingGroups']
        for p in ['autoscaling:DescribeAutoScalingGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeAutoScalingGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_auto_scaling_instances(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_auto_scaling_instances']=['autoscaling:DescribeAutoScalingInstances']
        for p in ['autoscaling:DescribeAutoScalingInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeAutoScalingInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_auto_scaling_notification_types(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_auto_scaling_notification_types']=['autoscaling:DescribeAutoScalingNotificationTypes']
        for p in ['autoscaling:DescribeAutoScalingNotificationTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeAutoScalingNotificationTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_launch_configurations(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_launch_configurations']=['autoscaling:DescribeLaunchConfigurations']
        for p in ['autoscaling:DescribeLaunchConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeLaunchConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_lifecycle_hook_types(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_lifecycle_hook_types']=['autoscaling:DescribeLifecycleHookTypes']
        for p in ['autoscaling:DescribeLifecycleHookTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeLifecycleHookTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_lifecycle_hooks(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_lifecycle_hooks']=['autoscaling:DescribeLifecycleHooks']
        for p in ['autoscaling:DescribeLifecycleHooks']:
            res = {}
            for nm in ["AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeLifecycleHooks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_load_balancer_target_groups(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_load_balancer_target_groups']=['autoscaling:DescribeLoadBalancerTargetGroups']
        for p in ['autoscaling:DescribeLoadBalancerTargetGroups']:
            res = {}
            for nm in ["AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeLoadBalancerTargetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_load_balancers(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_load_balancers']=['autoscaling:DescribeLoadBalancers']
        for p in ['autoscaling:DescribeLoadBalancers']:
            res = {}
            for nm in ["AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeLoadBalancers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_metric_collection_types(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_metric_collection_types']=['autoscaling:DescribeMetricCollectionTypes']
        for p in ['autoscaling:DescribeMetricCollectionTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeMetricCollectionTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_notification_configurations(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_notification_configurations']=['autoscaling:DescribeNotificationConfigurations']
        for p in ['autoscaling:DescribeNotificationConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeNotificationConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_policies(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_policies']=['autoscaling:DescribePolicies']
        for p in ['autoscaling:DescribePolicies']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribePolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scaling_activities(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_scaling_activities']=['autoscaling:DescribeScalingActivities']
        for p in ['autoscaling:DescribeScalingActivities']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeScalingActivities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scaling_process_types(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_scaling_process_types']=['autoscaling:DescribeScalingProcessTypes']
        for p in ['autoscaling:DescribeScalingProcessTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeScalingProcessTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scheduled_actions(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_scheduled_actions']=['autoscaling:DescribeScheduledActions']
        for p in ['autoscaling:DescribeScheduledActions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeScheduledActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tags(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_tags']=['autoscaling:DescribeTags']
        for p in ['autoscaling:DescribeTags']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_termination_policy_types(self, *args, **kwargs):
        __protego_used['autoscaling']['describe_termination_policy_types']=['autoscaling:DescribeTerminationPolicyTypes']
        for p in ['autoscaling:DescribeTerminationPolicyTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DescribeTerminationPolicyTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_instances(self, *args, **kwargs):
        __protego_used['autoscaling']['detach_instances']=['autoscaling:DetachInstances']
        for p in ['autoscaling:DetachInstances']:
            res = {}
            for nm in ["ShouldDecrementDesiredCapacity","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DetachInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_load_balancer_target_groups(self, *args, **kwargs):
        __protego_used['autoscaling']['detach_load_balancer_target_groups']=['autoscaling:DetachLoadBalancerTargetGroups']
        for p in ['autoscaling:DetachLoadBalancerTargetGroups']:
            res = {}
            for nm in ["TargetGroupARNs","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DetachLoadBalancerTargetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_load_balancers(self, *args, **kwargs):
        __protego_used['autoscaling']['detach_load_balancers']=['autoscaling:DetachLoadBalancers']
        for p in ['autoscaling:DetachLoadBalancers']:
            res = {}
            for nm in ["LoadBalancerNames","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DetachLoadBalancers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_metrics_collection(self, *args, **kwargs):
        __protego_used['autoscaling']['disable_metrics_collection']=['autoscaling:DisableMetricsCollection']
        for p in ['autoscaling:DisableMetricsCollection']:
            res = {}
            for nm in ["AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "DisableMetricsCollection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_metrics_collection(self, *args, **kwargs):
        __protego_used['autoscaling']['enable_metrics_collection']=['autoscaling:EnableMetricsCollection']
        for p in ['autoscaling:EnableMetricsCollection']:
            res = {}
            for nm in ["Granularity","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "EnableMetricsCollection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enter_standby(self, *args, **kwargs):
        __protego_used['autoscaling']['enter_standby']=['autoscaling:EnterStandby']
        for p in ['autoscaling:EnterStandby']:
            res = {}
            for nm in ["ShouldDecrementDesiredCapacity","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "EnterStandby", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def execute_policy(self, *args, **kwargs):
        __protego_used['autoscaling']['execute_policy']=['autoscaling:ExecutePolicy']
        for p in ['autoscaling:ExecutePolicy']:
            res = {}
            for nm in ["PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "ExecutePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def exit_standby(self, *args, **kwargs):
        __protego_used['autoscaling']['exit_standby']=['autoscaling:ExitStandby']
        for p in ['autoscaling:ExitStandby']:
            res = {}
            for nm in ["AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "ExitStandby", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_lifecycle_hook(self, *args, **kwargs):
        __protego_used['autoscaling']['put_lifecycle_hook']=['autoscaling:PutLifecycleHook']
        for p in ['autoscaling:PutLifecycleHook']:
            res = {}
            for nm in ["AutoScalingGroupName","LifecycleHookName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "PutLifecycleHook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_notification_configuration(self, *args, **kwargs):
        __protego_used['autoscaling']['put_notification_configuration']=['autoscaling:PutNotificationConfiguration']
        for p in ['autoscaling:PutNotificationConfiguration']:
            res = {}
            for nm in ["TopicARN","NotificationTypes","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "PutNotificationConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_scaling_policy(self, *args, **kwargs):
        __protego_used['autoscaling']['put_scaling_policy']=['autoscaling:PutScalingPolicy']
        for p in ['autoscaling:PutScalingPolicy']:
            res = {}
            for nm in ["AutoScalingGroupName","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "PutScalingPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_scheduled_update_group_action(self, *args, **kwargs):
        __protego_used['autoscaling']['put_scheduled_update_group_action']=['autoscaling:PutScheduledUpdateGroupAction']
        for p in ['autoscaling:PutScheduledUpdateGroupAction']:
            res = {}
            for nm in ["ScheduledActionName","AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "PutScheduledUpdateGroupAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def record_lifecycle_action_heartbeat(self, *args, **kwargs):
        __protego_used['autoscaling']['record_lifecycle_action_heartbeat']=['autoscaling:RecordLifecycleActionHeartbeat']
        for p in ['autoscaling:RecordLifecycleActionHeartbeat']:
            res = {}
            for nm in ["AutoScalingGroupName","LifecycleHookName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "RecordLifecycleActionHeartbeat", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def resume_processes(self, *args, **kwargs):
        __protego_used['autoscaling']['resume_processes']=['autoscaling:ResumeProcesses']
        for p in ['autoscaling:ResumeProcesses']:
            res = {}
            for nm in ["AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "ResumeProcesses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_desired_capacity(self, *args, **kwargs):
        __protego_used['autoscaling']['set_desired_capacity']=['autoscaling:SetDesiredCapacity']
        for p in ['autoscaling:SetDesiredCapacity']:
            res = {}
            for nm in ["AutoScalingGroupName","DesiredCapacity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "SetDesiredCapacity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_instance_health(self, *args, **kwargs):
        __protego_used['autoscaling']['set_instance_health']=['autoscaling:SetInstanceHealth']
        for p in ['autoscaling:SetInstanceHealth']:
            res = {}
            for nm in ["HealthStatus","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "SetInstanceHealth", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_instance_protection(self, *args, **kwargs):
        __protego_used['autoscaling']['set_instance_protection']=['autoscaling:SetInstanceProtection']
        for p in ['autoscaling:SetInstanceProtection']:
            res = {}
            for nm in ["ProtectedFromScaleIn","AutoScalingGroupName","InstanceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "SetInstanceProtection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def suspend_processes(self, *args, **kwargs):
        __protego_used['autoscaling']['suspend_processes']=['autoscaling:SuspendProcesses']
        for p in ['autoscaling:SuspendProcesses']:
            res = {}
            for nm in ["AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "SuspendProcesses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def terminate_instance_in_auto_scaling_group(self, *args, **kwargs):
        __protego_used['autoscaling']['terminate_instance_in_auto_scaling_group']=['autoscaling:TerminateInstanceInAutoScalingGroup']
        for p in ['autoscaling:TerminateInstanceInAutoScalingGroup']:
            res = {}
            for nm in ["ShouldDecrementDesiredCapacity","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "TerminateInstanceInAutoScalingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_auto_scaling_group(self, *args, **kwargs):
        __protego_used['autoscaling']['update_auto_scaling_group']=['autoscaling:UpdateAutoScalingGroup']
        for p in ['autoscaling:UpdateAutoScalingGroup']:
            res = {}
            for nm in ["AutoScalingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling'].append({'action': "UpdateAutoScalingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class autoscaling_plans:
    def __init__(self, region_name=__default_region):
        __protego_used['autoscaling-plans']= __protego_used.get('autoscaling-plans', {})
        __protego_resource_map['autoscaling-plans']=__protego_resource_map.get('autoscaling-plans', [])
        self.region = region_name
    def create_scaling_plan(self, *args, **kwargs):
        __protego_used['autoscaling-plans']['create_scaling_plan']=['autoscaling-plans:CreateScalingPlan']
        for p in ['autoscaling-plans:CreateScalingPlan']:
            res = {}
            for nm in ["ScalingPlanName","ApplicationSource","ScalingInstructions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling-plans'].append({'action': "CreateScalingPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_scaling_plan(self, *args, **kwargs):
        __protego_used['autoscaling-plans']['delete_scaling_plan']=['autoscaling-plans:DeleteScalingPlan']
        for p in ['autoscaling-plans:DeleteScalingPlan']:
            res = {}
            for nm in ["ScalingPlanName","ScalingPlanVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling-plans'].append({'action': "DeleteScalingPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scaling_plan_resources(self, *args, **kwargs):
        __protego_used['autoscaling-plans']['describe_scaling_plan_resources']=['autoscaling-plans:DescribeScalingPlanResources']
        for p in ['autoscaling-plans:DescribeScalingPlanResources']:
            res = {}
            for nm in ["ScalingPlanName","ScalingPlanVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling-plans'].append({'action': "DescribeScalingPlanResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scaling_plans(self, *args, **kwargs):
        __protego_used['autoscaling-plans']['describe_scaling_plans']=['autoscaling-plans:DescribeScalingPlans']
        for p in ['autoscaling-plans:DescribeScalingPlans']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling-plans'].append({'action': "DescribeScalingPlans", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_scaling_plan_resource_forecast_data(self, *args, **kwargs):
        __protego_used['autoscaling-plans']['get_scaling_plan_resource_forecast_data']=['autoscaling-plans:GetScalingPlanResourceForecastData']
        for p in ['autoscaling-plans:GetScalingPlanResourceForecastData']:
            res = {}
            for nm in ["ScalingPlanVersion","ForecastDataType","EndTime","ResourceId","ServiceNamespace","ScalableDimension","StartTime","ScalingPlanName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling-plans'].append({'action': "GetScalingPlanResourceForecastData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_scaling_plan(self, *args, **kwargs):
        __protego_used['autoscaling-plans']['update_scaling_plan']=['autoscaling-plans:UpdateScalingPlan']
        for p in ['autoscaling-plans:UpdateScalingPlan']:
            res = {}
            for nm in ["ScalingPlanName","ScalingPlanVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['autoscaling-plans'].append({'action': "UpdateScalingPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class backup:
    def __init__(self, region_name=__default_region):
        __protego_used['backup']= __protego_used.get('backup', {})
        __protego_resource_map['backup']=__protego_resource_map.get('backup', [])
        self.region = region_name
    def create_backup_plan(self, *args, **kwargs):
        __protego_used['backup']['create_backup_plan']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlan"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "CreateBackupPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_backup_selection(self, *args, **kwargs):
        __protego_used['backup']['create_backup_selection']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlanId","BackupSelection"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "CreateBackupSelection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_backup_vault(self, *args, **kwargs):
        __protego_used['backup']['create_backup_vault']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "CreateBackupVault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_backup_plan(self, *args, **kwargs):
        __protego_used['backup']['delete_backup_plan']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "DeleteBackupPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_backup_selection(self, *args, **kwargs):
        __protego_used['backup']['delete_backup_selection']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlanId","SelectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "DeleteBackupSelection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_backup_vault(self, *args, **kwargs):
        __protego_used['backup']['delete_backup_vault']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "DeleteBackupVault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_backup_vault_access_policy(self, *args, **kwargs):
        __protego_used['backup']['delete_backup_vault_access_policy']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "DeleteBackupVaultAccessPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_backup_vault_notifications(self, *args, **kwargs):
        __protego_used['backup']['delete_backup_vault_notifications']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "DeleteBackupVaultNotifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_recovery_point(self, *args, **kwargs):
        __protego_used['backup']['delete_recovery_point']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName","RecoveryPointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "DeleteRecoveryPoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_backup_job(self, *args, **kwargs):
        __protego_used['backup']['describe_backup_job']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupJobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "DescribeBackupJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_backup_vault(self, *args, **kwargs):
        __protego_used['backup']['describe_backup_vault']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "DescribeBackupVault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_protected_resource(self, *args, **kwargs):
        __protego_used['backup']['describe_protected_resource']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "DescribeProtectedResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_recovery_point(self, *args, **kwargs):
        __protego_used['backup']['describe_recovery_point']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName","RecoveryPointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "DescribeRecoveryPoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_restore_job(self, *args, **kwargs):
        __protego_used['backup']['describe_restore_job']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["RestoreJobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "DescribeRestoreJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_backup_plan_template(self, *args, **kwargs):
        __protego_used['backup']['export_backup_plan_template']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ExportBackupPlanTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_backup_plan(self, *args, **kwargs):
        __protego_used['backup']['get_backup_plan']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "GetBackupPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_backup_plan_from_json(self, *args, **kwargs):
        __protego_used['backup']['get_backup_plan_from_json']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlanTemplateJson"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "GetBackupPlanFromJSON", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_backup_plan_from_template(self, *args, **kwargs):
        __protego_used['backup']['get_backup_plan_from_template']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlanTemplateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "GetBackupPlanFromTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_backup_selection(self, *args, **kwargs):
        __protego_used['backup']['get_backup_selection']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlanId","SelectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "GetBackupSelection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_backup_vault_access_policy(self, *args, **kwargs):
        __protego_used['backup']['get_backup_vault_access_policy']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "GetBackupVaultAccessPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_backup_vault_notifications(self, *args, **kwargs):
        __protego_used['backup']['get_backup_vault_notifications']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "GetBackupVaultNotifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_recovery_point_restore_metadata(self, *args, **kwargs):
        __protego_used['backup']['get_recovery_point_restore_metadata']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName","RecoveryPointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "GetRecoveryPointRestoreMetadata", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_supported_resource_types(self, *args, **kwargs):
        __protego_used['backup']['get_supported_resource_types']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "GetSupportedResourceTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_backup_jobs(self, *args, **kwargs):
        __protego_used['backup']['list_backup_jobs']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ListBackupJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_backup_plan_templates(self, *args, **kwargs):
        __protego_used['backup']['list_backup_plan_templates']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ListBackupPlanTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_backup_plan_versions(self, *args, **kwargs):
        __protego_used['backup']['list_backup_plan_versions']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ListBackupPlanVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_backup_plans(self, *args, **kwargs):
        __protego_used['backup']['list_backup_plans']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ListBackupPlans", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_backup_selections(self, *args, **kwargs):
        __protego_used['backup']['list_backup_selections']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ListBackupSelections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_backup_vaults(self, *args, **kwargs):
        __protego_used['backup']['list_backup_vaults']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ListBackupVaults", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_protected_resources(self, *args, **kwargs):
        __protego_used['backup']['list_protected_resources']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ListProtectedResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_recovery_points_by_backup_vault(self, *args, **kwargs):
        __protego_used['backup']['list_recovery_points_by_backup_vault']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ListRecoveryPointsByBackupVault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_recovery_points_by_resource(self, *args, **kwargs):
        __protego_used['backup']['list_recovery_points_by_resource']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ListRecoveryPointsByResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_restore_jobs(self, *args, **kwargs):
        __protego_used['backup']['list_restore_jobs']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ListRestoreJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags(self, *args, **kwargs):
        __protego_used['backup']['list_tags']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "ListTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_backup_vault_access_policy(self, *args, **kwargs):
        __protego_used['backup']['put_backup_vault_access_policy']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "PutBackupVaultAccessPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_backup_vault_notifications(self, *args, **kwargs):
        __protego_used['backup']['put_backup_vault_notifications']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultEvents","BackupVaultName","SNSTopicArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "PutBackupVaultNotifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_backup_job(self, *args, **kwargs):
        __protego_used['backup']['start_backup_job']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["ResourceArn","BackupVaultName","IamRoleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "StartBackupJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_restore_job(self, *args, **kwargs):
        __protego_used['backup']['start_restore_job']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["Metadata","RecoveryPointArn","IamRoleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "StartRestoreJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_backup_job(self, *args, **kwargs):
        __protego_used['backup']['stop_backup_job']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupJobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "StopBackupJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['backup']['tag_resource']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['backup']['untag_resource']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["ResourceArn","TagKeyList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_backup_plan(self, *args, **kwargs):
        __protego_used['backup']['update_backup_plan']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupPlan","BackupPlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "UpdateBackupPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_recovery_point_lifecycle(self, *args, **kwargs):
        __protego_used['backup']['update_recovery_point_lifecycle']=['backup:*']
        for p in ['backup:*']:
            res = {}
            for nm in ["BackupVaultName","RecoveryPointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['backup'].append({'action': "UpdateRecoveryPointLifecycle", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class batch:
    def __init__(self, region_name=__default_region):
        __protego_used['batch']= __protego_used.get('batch', {})
        __protego_resource_map['batch']=__protego_resource_map.get('batch', [])
        self.region = region_name
    def cancel_job(self, *args, **kwargs):
        __protego_used['batch']['cancel_job']=['batch:CancelJob']
        for p in ['batch:CancelJob']:
            res = {}
            for nm in ["jobId","reason"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "CancelJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_compute_environment(self, *args, **kwargs):
        __protego_used['batch']['create_compute_environment']=['batch:CreateComputeEnvironment']
        for p in ['batch:CreateComputeEnvironment']:
            res = {}
            for nm in ["serviceRole","type","computeEnvironmentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "CreateComputeEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_job_queue(self, *args, **kwargs):
        __protego_used['batch']['create_job_queue']=['batch:CreateJobQueue']
        for p in ['batch:CreateJobQueue']:
            res = {}
            for nm in ["jobQueueName","computeEnvironmentOrder","priority"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "CreateJobQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_compute_environment(self, *args, **kwargs):
        __protego_used['batch']['delete_compute_environment']=['batch:DeleteComputeEnvironment']
        for p in ['batch:DeleteComputeEnvironment']:
            res = {}
            for nm in ["computeEnvironment"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "DeleteComputeEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_job_queue(self, *args, **kwargs):
        __protego_used['batch']['delete_job_queue']=['batch:DeleteJobQueue']
        for p in ['batch:DeleteJobQueue']:
            res = {}
            for nm in ["jobQueue"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "DeleteJobQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_job_definition(self, *args, **kwargs):
        __protego_used['batch']['deregister_job_definition']=['batch:DeregisterJobDefinition']
        for p in ['batch:DeregisterJobDefinition']:
            res = {}
            for nm in ["jobDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "DeregisterJobDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_compute_environments(self, *args, **kwargs):
        __protego_used['batch']['describe_compute_environments']=['batch:DescribeComputeEnvironments']
        for p in ['batch:DescribeComputeEnvironments']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "DescribeComputeEnvironments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_job_definitions(self, *args, **kwargs):
        __protego_used['batch']['describe_job_definitions']=['batch:DescribeJobDefinitions']
        for p in ['batch:DescribeJobDefinitions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "DescribeJobDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_job_queues(self, *args, **kwargs):
        __protego_used['batch']['describe_job_queues']=['batch:DescribeJobQueues']
        for p in ['batch:DescribeJobQueues']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "DescribeJobQueues", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_jobs(self, *args, **kwargs):
        __protego_used['batch']['describe_jobs']=['batch:DescribeJobs']
        for p in ['batch:DescribeJobs']:
            res = {}
            for nm in ["jobs"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "DescribeJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs(self, *args, **kwargs):
        __protego_used['batch']['list_jobs']=['batch:ListJobs']
        for p in ['batch:ListJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "ListJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_job_definition(self, *args, **kwargs):
        __protego_used['batch']['register_job_definition']=['batch:RegisterJobDefinition']
        for p in ['batch:RegisterJobDefinition']:
            res = {}
            for nm in ["jobDefinitionName","type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "RegisterJobDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def submit_job(self, *args, **kwargs):
        __protego_used['batch']['submit_job']=['batch:SubmitJob','batch:SubmitJob']
        for p in ['batch:SubmitJob','batch:SubmitJob']:
            res = {}
            for nm in ["jobName","jobQueue","jobDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "SubmitJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def terminate_job(self, *args, **kwargs):
        __protego_used['batch']['terminate_job']=['batch:TerminateJob']
        for p in ['batch:TerminateJob']:
            res = {}
            for nm in ["jobId","reason"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "TerminateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_compute_environment(self, *args, **kwargs):
        __protego_used['batch']['update_compute_environment']=['batch:UpdateComputeEnvironment']
        for p in ['batch:UpdateComputeEnvironment']:
            res = {}
            for nm in ["computeEnvironment"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "UpdateComputeEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_job_queue(self, *args, **kwargs):
        __protego_used['batch']['update_job_queue']=['batch:UpdateJobQueue']
        for p in ['batch:UpdateJobQueue']:
            res = {}
            for nm in ["jobQueue"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['batch'].append({'action': "UpdateJobQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class budgets:
    def __init__(self, region_name=__default_region):
        __protego_used['budgets']= __protego_used.get('budgets', {})
        __protego_resource_map['budgets']=__protego_resource_map.get('budgets', [])
        self.region = region_name
    def create_budget(self, *args, **kwargs):
        __protego_used['budgets']['create_budget']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","Budget"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "CreateBudget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_notification(self, *args, **kwargs):
        __protego_used['budgets']['create_notification']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","Notification","Subscribers","BudgetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "CreateNotification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_subscriber(self, *args, **kwargs):
        __protego_used['budgets']['create_subscriber']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","Notification","BudgetName","Subscriber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "CreateSubscriber", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_budget(self, *args, **kwargs):
        __protego_used['budgets']['delete_budget']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","BudgetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "DeleteBudget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_notification(self, *args, **kwargs):
        __protego_used['budgets']['delete_notification']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","Notification","BudgetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "DeleteNotification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_subscriber(self, *args, **kwargs):
        __protego_used['budgets']['delete_subscriber']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","Notification","BudgetName","Subscriber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "DeleteSubscriber", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_budget(self, *args, **kwargs):
        __protego_used['budgets']['describe_budget']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","BudgetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "DescribeBudget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_budget_performance_history(self, *args, **kwargs):
        __protego_used['budgets']['describe_budget_performance_history']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","BudgetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "DescribeBudgetPerformanceHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_budgets(self, *args, **kwargs):
        __protego_used['budgets']['describe_budgets']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "DescribeBudgets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_notifications_for_budget(self, *args, **kwargs):
        __protego_used['budgets']['describe_notifications_for_budget']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","BudgetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "DescribeNotificationsForBudget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_subscribers_for_notification(self, *args, **kwargs):
        __protego_used['budgets']['describe_subscribers_for_notification']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","Notification","BudgetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "DescribeSubscribersForNotification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_budget(self, *args, **kwargs):
        __protego_used['budgets']['update_budget']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","NewBudget"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "UpdateBudget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_notification(self, *args, **kwargs):
        __protego_used['budgets']['update_notification']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","OldNotification","NewNotification","BudgetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "UpdateNotification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_subscriber(self, *args, **kwargs):
        __protego_used['budgets']['update_subscriber']=['budgets:*']
        for p in ['budgets:*']:
            res = {}
            for nm in ["AccountId","Notification","BudgetName","OldSubscriber","NewSubscriber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['budgets'].append({'action': "UpdateSubscriber", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class ce:
    def __init__(self, region_name=__default_region):
        __protego_used['ce']= __protego_used.get('ce', {})
        __protego_resource_map['ce']=__protego_resource_map.get('ce', [])
        self.region = region_name
    def create_cost_category_definition(self, *args, **kwargs):
        __protego_used['ce']['create_cost_category_definition']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in ["RuleVersion","Rules","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "CreateCostCategoryDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cost_category_definition(self, *args, **kwargs):
        __protego_used['ce']['delete_cost_category_definition']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in ["CostCategoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "DeleteCostCategoryDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cost_category_definition(self, *args, **kwargs):
        __protego_used['ce']['describe_cost_category_definition']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in ["CostCategoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "DescribeCostCategoryDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_cost_and_usage(self, *args, **kwargs):
        __protego_used['ce']['get_cost_and_usage']=['ce:GetCostAndUsage']
        for p in ['ce:GetCostAndUsage']:
            res = {}
            for nm in ["TimePeriod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetCostAndUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_cost_and_usage_with_resources(self, *args, **kwargs):
        __protego_used['ce']['get_cost_and_usage_with_resources']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in ["TimePeriod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetCostAndUsageWithResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_cost_forecast(self, *args, **kwargs):
        __protego_used['ce']['get_cost_forecast']=['ce:GetCostForecast']
        for p in ['ce:GetCostForecast']:
            res = {}
            for nm in ["Granularity","TimePeriod","Metric"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetCostForecast", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dimension_values(self, *args, **kwargs):
        __protego_used['ce']['get_dimension_values']=['ce:GetDimensionValues']
        for p in ['ce:GetDimensionValues']:
            res = {}
            for nm in ["TimePeriod","Dimension"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetDimensionValues", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_reservation_coverage(self, *args, **kwargs):
        __protego_used['ce']['get_reservation_coverage']=['ce:GetReservationCoverage']
        for p in ['ce:GetReservationCoverage']:
            res = {}
            for nm in ["TimePeriod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetReservationCoverage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_reservation_purchase_recommendation(self, *args, **kwargs):
        __protego_used['ce']['get_reservation_purchase_recommendation']=['ce:GetReservationPurchaseRecommendation']
        for p in ['ce:GetReservationPurchaseRecommendation']:
            res = {}
            for nm in ["Service"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetReservationPurchaseRecommendation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_reservation_utilization(self, *args, **kwargs):
        __protego_used['ce']['get_reservation_utilization']=['ce:GetReservationUtilization']
        for p in ['ce:GetReservationUtilization']:
            res = {}
            for nm in ["TimePeriod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetReservationUtilization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rightsizing_recommendation(self, *args, **kwargs):
        __protego_used['ce']['get_rightsizing_recommendation']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in ["Service"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetRightsizingRecommendation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_savings_plans_coverage(self, *args, **kwargs):
        __protego_used['ce']['get_savings_plans_coverage']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in ["TimePeriod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetSavingsPlansCoverage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_savings_plans_purchase_recommendation(self, *args, **kwargs):
        __protego_used['ce']['get_savings_plans_purchase_recommendation']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in ["TermInYears","SavingsPlansType","PaymentOption","LookbackPeriodInDays"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetSavingsPlansPurchaseRecommendation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_savings_plans_utilization(self, *args, **kwargs):
        __protego_used['ce']['get_savings_plans_utilization']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in ["TimePeriod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetSavingsPlansUtilization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_savings_plans_utilization_details(self, *args, **kwargs):
        __protego_used['ce']['get_savings_plans_utilization_details']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in ["TimePeriod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetSavingsPlansUtilizationDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_tags(self, *args, **kwargs):
        __protego_used['ce']['get_tags']=['ce:GetTags']
        for p in ['ce:GetTags']:
            res = {}
            for nm in ["TimePeriod"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_usage_forecast(self, *args, **kwargs):
        __protego_used['ce']['get_usage_forecast']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in ["Granularity","TimePeriod","Metric"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "GetUsageForecast", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_cost_category_definitions(self, *args, **kwargs):
        __protego_used['ce']['list_cost_category_definitions']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "ListCostCategoryDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_cost_category_definition(self, *args, **kwargs):
        __protego_used['ce']['update_cost_category_definition']=['ce:*']
        for p in ['ce:*']:
            res = {}
            for nm in ["CostCategoryArn","RuleVersion","Rules"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ce'].append({'action': "UpdateCostCategoryDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class chime:
    def __init__(self, region_name=__default_region):
        __protego_used['chime']= __protego_used.get('chime', {})
        __protego_resource_map['chime']=__protego_resource_map.get('chime', [])
        self.region = region_name
    def associate_phone_number_with_user(self, *args, **kwargs):
        __protego_used['chime']['associate_phone_number_with_user']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","E164PhoneNumber","UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "AssociatePhoneNumberWithUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_phone_numbers_with_voice_connector(self, *args, **kwargs):
        __protego_used['chime']['associate_phone_numbers_with_voice_connector']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "AssociatePhoneNumbersWithVoiceConnector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_phone_numbers_with_voice_connector_group(self, *args, **kwargs):
        __protego_used['chime']['associate_phone_numbers_with_voice_connector_group']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "AssociatePhoneNumbersWithVoiceConnectorGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_create_attendee(self, *args, **kwargs):
        __protego_used['chime']['batch_create_attendee']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["MeetingId","Attendees"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "BatchCreateAttendee", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_create_room_membership(self, *args, **kwargs):
        __protego_used['chime']['batch_create_room_membership']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","RoomId","MembershipItemList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "BatchCreateRoomMembership", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_delete_phone_number(self, *args, **kwargs):
        __protego_used['chime']['batch_delete_phone_number']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["PhoneNumberIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "BatchDeletePhoneNumber", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_suspend_user(self, *args, **kwargs):
        __protego_used['chime']['batch_suspend_user']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","UserIdList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "BatchSuspendUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_unsuspend_user(self, *args, **kwargs):
        __protego_used['chime']['batch_unsuspend_user']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","UserIdList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "BatchUnsuspendUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_update_phone_number(self, *args, **kwargs):
        __protego_used['chime']['batch_update_phone_number']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["UpdatePhoneNumberRequestItems"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "BatchUpdatePhoneNumber", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_update_user(self, *args, **kwargs):
        __protego_used['chime']['batch_update_user']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","UpdateUserRequestItems"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "BatchUpdateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_account(self, *args, **kwargs):
        __protego_used['chime']['create_account']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "CreateAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_attendee(self, *args, **kwargs):
        __protego_used['chime']['create_attendee']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["MeetingId","ExternalUserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "CreateAttendee", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_bot(self, *args, **kwargs):
        __protego_used['chime']['create_bot']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","DisplayName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "CreateBot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_meeting(self, *args, **kwargs):
        __protego_used['chime']['create_meeting']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["ClientRequestToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "CreateMeeting", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_phone_number_order(self, *args, **kwargs):
        __protego_used['chime']['create_phone_number_order']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["E164PhoneNumbers","ProductType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "CreatePhoneNumberOrder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_room(self, *args, **kwargs):
        __protego_used['chime']['create_room']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "CreateRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_room_membership(self, *args, **kwargs):
        __protego_used['chime']['create_room_membership']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","RoomId","MemberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "CreateRoomMembership", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_voice_connector(self, *args, **kwargs):
        __protego_used['chime']['create_voice_connector']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["RequireEncryption","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "CreateVoiceConnector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_voice_connector_group(self, *args, **kwargs):
        __protego_used['chime']['create_voice_connector_group']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "CreateVoiceConnectorGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_account(self, *args, **kwargs):
        __protego_used['chime']['delete_account']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_attendee(self, *args, **kwargs):
        __protego_used['chime']['delete_attendee']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["MeetingId","AttendeeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteAttendee", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_events_configuration(self, *args, **kwargs):
        __protego_used['chime']['delete_events_configuration']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","BotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteEventsConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_meeting(self, *args, **kwargs):
        __protego_used['chime']['delete_meeting']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["MeetingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteMeeting", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_phone_number(self, *args, **kwargs):
        __protego_used['chime']['delete_phone_number']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["PhoneNumberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeletePhoneNumber", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_room(self, *args, **kwargs):
        __protego_used['chime']['delete_room']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","RoomId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_room_membership(self, *args, **kwargs):
        __protego_used['chime']['delete_room_membership']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","RoomId","MemberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteRoomMembership", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_voice_connector(self, *args, **kwargs):
        __protego_used['chime']['delete_voice_connector']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteVoiceConnector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_voice_connector_group(self, *args, **kwargs):
        __protego_used['chime']['delete_voice_connector_group']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteVoiceConnectorGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_voice_connector_origination(self, *args, **kwargs):
        __protego_used['chime']['delete_voice_connector_origination']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteVoiceConnectorOrigination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_voice_connector_streaming_configuration(self, *args, **kwargs):
        __protego_used['chime']['delete_voice_connector_streaming_configuration']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteVoiceConnectorStreamingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_voice_connector_termination(self, *args, **kwargs):
        __protego_used['chime']['delete_voice_connector_termination']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteVoiceConnectorTermination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_voice_connector_termination_credentials(self, *args, **kwargs):
        __protego_used['chime']['delete_voice_connector_termination_credentials']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DeleteVoiceConnectorTerminationCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_phone_number_from_user(self, *args, **kwargs):
        __protego_used['chime']['disassociate_phone_number_from_user']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DisassociatePhoneNumberFromUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_phone_numbers_from_voice_connector(self, *args, **kwargs):
        __protego_used['chime']['disassociate_phone_numbers_from_voice_connector']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DisassociatePhoneNumbersFromVoiceConnector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_phone_numbers_from_voice_connector_group(self, *args, **kwargs):
        __protego_used['chime']['disassociate_phone_numbers_from_voice_connector_group']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "DisassociatePhoneNumbersFromVoiceConnectorGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account(self, *args, **kwargs):
        __protego_used['chime']['get_account']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account_settings(self, *args, **kwargs):
        __protego_used['chime']['get_account_settings']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetAccountSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_attendee(self, *args, **kwargs):
        __protego_used['chime']['get_attendee']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["MeetingId","AttendeeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetAttendee", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bot(self, *args, **kwargs):
        __protego_used['chime']['get_bot']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","BotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetBot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_events_configuration(self, *args, **kwargs):
        __protego_used['chime']['get_events_configuration']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","BotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetEventsConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_global_settings(self, *args, **kwargs):
        __protego_used['chime']['get_global_settings']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetGlobalSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_meeting(self, *args, **kwargs):
        __protego_used['chime']['get_meeting']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["MeetingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetMeeting", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_phone_number(self, *args, **kwargs):
        __protego_used['chime']['get_phone_number']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["PhoneNumberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetPhoneNumber", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_phone_number_order(self, *args, **kwargs):
        __protego_used['chime']['get_phone_number_order']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["PhoneNumberOrderId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetPhoneNumberOrder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_phone_number_settings(self, *args, **kwargs):
        __protego_used['chime']['get_phone_number_settings']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetPhoneNumberSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_room(self, *args, **kwargs):
        __protego_used['chime']['get_room']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","RoomId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_user(self, *args, **kwargs):
        __protego_used['chime']['get_user']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_user_settings(self, *args, **kwargs):
        __protego_used['chime']['get_user_settings']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetUserSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_voice_connector(self, *args, **kwargs):
        __protego_used['chime']['get_voice_connector']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetVoiceConnector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_voice_connector_group(self, *args, **kwargs):
        __protego_used['chime']['get_voice_connector_group']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetVoiceConnectorGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_voice_connector_logging_configuration(self, *args, **kwargs):
        __protego_used['chime']['get_voice_connector_logging_configuration']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetVoiceConnectorLoggingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_voice_connector_origination(self, *args, **kwargs):
        __protego_used['chime']['get_voice_connector_origination']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetVoiceConnectorOrigination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_voice_connector_streaming_configuration(self, *args, **kwargs):
        __protego_used['chime']['get_voice_connector_streaming_configuration']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetVoiceConnectorStreamingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_voice_connector_termination(self, *args, **kwargs):
        __protego_used['chime']['get_voice_connector_termination']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetVoiceConnectorTermination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_voice_connector_termination_health(self, *args, **kwargs):
        __protego_used['chime']['get_voice_connector_termination_health']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "GetVoiceConnectorTerminationHealth", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def invite_users(self, *args, **kwargs):
        __protego_used['chime']['invite_users']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","UserEmailList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "InviteUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_accounts(self, *args, **kwargs):
        __protego_used['chime']['list_accounts']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListAccounts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_attendees(self, *args, **kwargs):
        __protego_used['chime']['list_attendees']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["MeetingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListAttendees", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_bots(self, *args, **kwargs):
        __protego_used['chime']['list_bots']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListBots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_meetings(self, *args, **kwargs):
        __protego_used['chime']['list_meetings']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListMeetings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_phone_number_orders(self, *args, **kwargs):
        __protego_used['chime']['list_phone_number_orders']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListPhoneNumberOrders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_phone_numbers(self, *args, **kwargs):
        __protego_used['chime']['list_phone_numbers']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListPhoneNumbers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_room_memberships(self, *args, **kwargs):
        __protego_used['chime']['list_room_memberships']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","RoomId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListRoomMemberships", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_rooms(self, *args, **kwargs):
        __protego_used['chime']['list_rooms']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListRooms", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_users(self, *args, **kwargs):
        __protego_used['chime']['list_users']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_voice_connector_groups(self, *args, **kwargs):
        __protego_used['chime']['list_voice_connector_groups']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListVoiceConnectorGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_voice_connector_termination_credentials(self, *args, **kwargs):
        __protego_used['chime']['list_voice_connector_termination_credentials']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListVoiceConnectorTerminationCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_voice_connectors(self, *args, **kwargs):
        __protego_used['chime']['list_voice_connectors']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ListVoiceConnectors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def logout_user(self, *args, **kwargs):
        __protego_used['chime']['logout_user']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "LogoutUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_events_configuration(self, *args, **kwargs):
        __protego_used['chime']['put_events_configuration']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","BotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "PutEventsConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_voice_connector_logging_configuration(self, *args, **kwargs):
        __protego_used['chime']['put_voice_connector_logging_configuration']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId","LoggingConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "PutVoiceConnectorLoggingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_voice_connector_origination(self, *args, **kwargs):
        __protego_used['chime']['put_voice_connector_origination']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId","Origination"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "PutVoiceConnectorOrigination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_voice_connector_streaming_configuration(self, *args, **kwargs):
        __protego_used['chime']['put_voice_connector_streaming_configuration']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["StreamingConfiguration","VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "PutVoiceConnectorStreamingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_voice_connector_termination(self, *args, **kwargs):
        __protego_used['chime']['put_voice_connector_termination']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["Termination","VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "PutVoiceConnectorTermination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_voice_connector_termination_credentials(self, *args, **kwargs):
        __protego_used['chime']['put_voice_connector_termination_credentials']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "PutVoiceConnectorTerminationCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def regenerate_security_token(self, *args, **kwargs):
        __protego_used['chime']['regenerate_security_token']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","BotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "RegenerateSecurityToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_personal_pin(self, *args, **kwargs):
        __protego_used['chime']['reset_personal_pin']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "ResetPersonalPIN", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_phone_number(self, *args, **kwargs):
        __protego_used['chime']['restore_phone_number']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["PhoneNumberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "RestorePhoneNumber", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_available_phone_numbers(self, *args, **kwargs):
        __protego_used['chime']['search_available_phone_numbers']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "SearchAvailablePhoneNumbers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_account(self, *args, **kwargs):
        __protego_used['chime']['update_account']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdateAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_account_settings(self, *args, **kwargs):
        __protego_used['chime']['update_account_settings']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","AccountSettings"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdateAccountSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_bot(self, *args, **kwargs):
        __protego_used['chime']['update_bot']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","BotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdateBot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_global_settings(self, *args, **kwargs):
        __protego_used['chime']['update_global_settings']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnector","BusinessCalling"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdateGlobalSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_phone_number(self, *args, **kwargs):
        __protego_used['chime']['update_phone_number']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["PhoneNumberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdatePhoneNumber", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_phone_number_settings(self, *args, **kwargs):
        __protego_used['chime']['update_phone_number_settings']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["CallingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdatePhoneNumberSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_room(self, *args, **kwargs):
        __protego_used['chime']['update_room']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","RoomId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdateRoom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_room_membership(self, *args, **kwargs):
        __protego_used['chime']['update_room_membership']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","RoomId","MemberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdateRoomMembership", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user(self, *args, **kwargs):
        __protego_used['chime']['update_user']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_settings(self, *args, **kwargs):
        __protego_used['chime']['update_user_settings']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["AccountId","UserSettings","UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdateUserSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_voice_connector(self, *args, **kwargs):
        __protego_used['chime']['update_voice_connector']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorId","RequireEncryption","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdateVoiceConnector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_voice_connector_group(self, *args, **kwargs):
        __protego_used['chime']['update_voice_connector_group']=['chime:*']
        for p in ['chime:*']:
            res = {}
            for nm in ["VoiceConnectorItems","Name","VoiceConnectorGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['chime'].append({'action': "UpdateVoiceConnectorGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cloud9:
    def __init__(self, region_name=__default_region):
        __protego_used['cloud9']= __protego_used.get('cloud9', {})
        __protego_resource_map['cloud9']=__protego_resource_map.get('cloud9', [])
        self.region = region_name
    def create_environment_ec2(self, *args, **kwargs):
        __protego_used['cloud9']['create_environment_ec2']=['cloud9:CreateEnvironmentEC2']
        for p in ['cloud9:CreateEnvironmentEC2']:
            res = {}
            for nm in ["instanceType","name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloud9'].append({'action': "CreateEnvironmentEC2", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_environment_membership(self, *args, **kwargs):
        __protego_used['cloud9']['create_environment_membership']=['cloud9:CreateEnvironmentMembership']
        for p in ['cloud9:CreateEnvironmentMembership']:
            res = {}
            for nm in ["environmentId","permissions","userArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloud9'].append({'action': "CreateEnvironmentMembership", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_environment(self, *args, **kwargs):
        __protego_used['cloud9']['delete_environment']=['cloud9:DeleteEnvironment']
        for p in ['cloud9:DeleteEnvironment']:
            res = {}
            for nm in ["environmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloud9'].append({'action': "DeleteEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_environment_membership(self, *args, **kwargs):
        __protego_used['cloud9']['delete_environment_membership']=['cloud9:DeleteEnvironmentMembership']
        for p in ['cloud9:DeleteEnvironmentMembership']:
            res = {}
            for nm in ["environmentId","userArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloud9'].append({'action': "DeleteEnvironmentMembership", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_environment_memberships(self, *args, **kwargs):
        __protego_used['cloud9']['describe_environment_memberships']=['cloud9:DescribeEnvironmentMemberships']
        for p in ['cloud9:DescribeEnvironmentMemberships']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloud9'].append({'action': "DescribeEnvironmentMemberships", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_environment_status(self, *args, **kwargs):
        __protego_used['cloud9']['describe_environment_status']=['cloud9:DescribeEnvironmentStatus']
        for p in ['cloud9:DescribeEnvironmentStatus']:
            res = {}
            for nm in ["environmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloud9'].append({'action': "DescribeEnvironmentStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_environments(self, *args, **kwargs):
        __protego_used['cloud9']['describe_environments']=['cloud9:DescribeEnvironments']
        for p in ['cloud9:DescribeEnvironments']:
            res = {}
            for nm in ["environmentIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloud9'].append({'action': "DescribeEnvironments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_environments(self, *args, **kwargs):
        __protego_used['cloud9']['list_environments']=['cloud9:ListEnvironments']
        for p in ['cloud9:ListEnvironments']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloud9'].append({'action': "ListEnvironments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_environment(self, *args, **kwargs):
        __protego_used['cloud9']['update_environment']=['cloud9:UpdateEnvironment']
        for p in ['cloud9:UpdateEnvironment']:
            res = {}
            for nm in ["environmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloud9'].append({'action': "UpdateEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_environment_membership(self, *args, **kwargs):
        __protego_used['cloud9']['update_environment_membership']=['cloud9:UpdateEnvironmentMembership']
        for p in ['cloud9:UpdateEnvironmentMembership']:
            res = {}
            for nm in ["environmentId","permissions","userArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloud9'].append({'action': "UpdateEnvironmentMembership", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class clouddirectory:
    def __init__(self, region_name=__default_region):
        __protego_used['clouddirectory']= __protego_used.get('clouddirectory', {})
        __protego_resource_map['clouddirectory']=__protego_resource_map.get('clouddirectory', [])
        self.region = region_name
    def add_facet_to_object(self, *args, **kwargs):
        __protego_used['clouddirectory']['add_facet_to_object']=['clouddirectory:AddFacetToObject']
        for p in ['clouddirectory:AddFacetToObject']:
            res = {}
            for nm in ["SchemaFacet","DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "AddFacetToObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def apply_schema(self, *args, **kwargs):
        __protego_used['clouddirectory']['apply_schema']=['clouddirectory:ApplySchema','clouddirectory:ApplySchema']
        for p in ['clouddirectory:ApplySchema','clouddirectory:ApplySchema']:
            res = {}
            for nm in ["PublishedSchemaArn","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ApplySchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_object(self, *args, **kwargs):
        __protego_used['clouddirectory']['attach_object']=['clouddirectory:AttachObject']
        for p in ['clouddirectory:AttachObject']:
            res = {}
            for nm in ["LinkName","ParentReference","DirectoryArn","ChildReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "AttachObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_policy(self, *args, **kwargs):
        __protego_used['clouddirectory']['attach_policy']=['clouddirectory:AttachPolicy']
        for p in ['clouddirectory:AttachPolicy']:
            res = {}
            for nm in ["PolicyReference","DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "AttachPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_to_index(self, *args, **kwargs):
        __protego_used['clouddirectory']['attach_to_index']=['clouddirectory:AttachToIndex']
        for p in ['clouddirectory:AttachToIndex']:
            res = {}
            for nm in ["TargetReference","IndexReference","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "AttachToIndex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_typed_link(self, *args, **kwargs):
        __protego_used['clouddirectory']['attach_typed_link']=['clouddirectory:AttachTypedLink']
        for p in ['clouddirectory:AttachTypedLink']:
            res = {}
            for nm in ["TypedLinkFacet","Attributes","SourceObjectReference","TargetObjectReference","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "AttachTypedLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_read(self, *args, **kwargs):
        __protego_used['clouddirectory']['batch_read']=['clouddirectory:BatchRead']
        for p in ['clouddirectory:BatchRead']:
            res = {}
            for nm in ["Operations","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "BatchRead", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_write(self, *args, **kwargs):
        __protego_used['clouddirectory']['batch_write']=['clouddirectory:BatchWrite']
        for p in ['clouddirectory:BatchWrite']:
            res = {}
            for nm in ["Operations","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "BatchWrite", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_directory(self, *args, **kwargs):
        __protego_used['clouddirectory']['create_directory']=['clouddirectory:CreateDirectory']
        for p in ['clouddirectory:CreateDirectory']:
            res = {}
            for nm in ["SchemaArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "CreateDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_facet(self, *args, **kwargs):
        __protego_used['clouddirectory']['create_facet']=['clouddirectory:CreateFacet']
        for p in ['clouddirectory:CreateFacet']:
            res = {}
            for nm in ["SchemaArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "CreateFacet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_index(self, *args, **kwargs):
        __protego_used['clouddirectory']['create_index']=['clouddirectory:CreateIndex']
        for p in ['clouddirectory:CreateIndex']:
            res = {}
            for nm in ["IsUnique","OrderedIndexedAttributeList","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "CreateIndex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_object(self, *args, **kwargs):
        __protego_used['clouddirectory']['create_object']=['clouddirectory:CreateObject']
        for p in ['clouddirectory:CreateObject']:
            res = {}
            for nm in ["SchemaFacets","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "CreateObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_schema(self, *args, **kwargs):
        __protego_used['clouddirectory']['create_schema']=['clouddirectory:CreateSchema']
        for p in ['clouddirectory:CreateSchema']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "CreateSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_typed_link_facet(self, *args, **kwargs):
        __protego_used['clouddirectory']['create_typed_link_facet']=['clouddirectory:CreateTypedLinkFacet']
        for p in ['clouddirectory:CreateTypedLinkFacet']:
            res = {}
            for nm in ["Facet","SchemaArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "CreateTypedLinkFacet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_directory(self, *args, **kwargs):
        __protego_used['clouddirectory']['delete_directory']=['clouddirectory:DeleteDirectory']
        for p in ['clouddirectory:DeleteDirectory']:
            res = {}
            for nm in ["DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "DeleteDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_facet(self, *args, **kwargs):
        __protego_used['clouddirectory']['delete_facet']=['clouddirectory:DeleteFacet']
        for p in ['clouddirectory:DeleteFacet']:
            res = {}
            for nm in ["SchemaArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "DeleteFacet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_object(self, *args, **kwargs):
        __protego_used['clouddirectory']['delete_object']=['clouddirectory:DeleteObject']
        for p in ['clouddirectory:DeleteObject']:
            res = {}
            for nm in ["DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "DeleteObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_schema(self, *args, **kwargs):
        __protego_used['clouddirectory']['delete_schema']=['clouddirectory:DeleteSchema']
        for p in ['clouddirectory:DeleteSchema']:
            res = {}
            for nm in ["SchemaArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "DeleteSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_typed_link_facet(self, *args, **kwargs):
        __protego_used['clouddirectory']['delete_typed_link_facet']=['clouddirectory:DeleteTypedLinkFacet']
        for p in ['clouddirectory:DeleteTypedLinkFacet']:
            res = {}
            for nm in ["SchemaArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "DeleteTypedLinkFacet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_from_index(self, *args, **kwargs):
        __protego_used['clouddirectory']['detach_from_index']=['clouddirectory:DetachFromIndex']
        for p in ['clouddirectory:DetachFromIndex']:
            res = {}
            for nm in ["TargetReference","IndexReference","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "DetachFromIndex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_object(self, *args, **kwargs):
        __protego_used['clouddirectory']['detach_object']=['clouddirectory:DetachObject']
        for p in ['clouddirectory:DetachObject']:
            res = {}
            for nm in ["LinkName","ParentReference","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "DetachObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_policy(self, *args, **kwargs):
        __protego_used['clouddirectory']['detach_policy']=['clouddirectory:DetachPolicy']
        for p in ['clouddirectory:DetachPolicy']:
            res = {}
            for nm in ["PolicyReference","DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "DetachPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_typed_link(self, *args, **kwargs):
        __protego_used['clouddirectory']['detach_typed_link']=['clouddirectory:DetachTypedLink']
        for p in ['clouddirectory:DetachTypedLink']:
            res = {}
            for nm in ["TypedLinkSpecifier","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "DetachTypedLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_directory(self, *args, **kwargs):
        __protego_used['clouddirectory']['disable_directory']=['clouddirectory:DisableDirectory']
        for p in ['clouddirectory:DisableDirectory']:
            res = {}
            for nm in ["DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "DisableDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_directory(self, *args, **kwargs):
        __protego_used['clouddirectory']['enable_directory']=['clouddirectory:EnableDirectory']
        for p in ['clouddirectory:EnableDirectory']:
            res = {}
            for nm in ["DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "EnableDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_applied_schema_version(self, *args, **kwargs):
        __protego_used['clouddirectory']['get_applied_schema_version']=['clouddirectory:*']
        for p in ['clouddirectory:*']:
            res = {}
            for nm in ["SchemaArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "GetAppliedSchemaVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_directory(self, *args, **kwargs):
        __protego_used['clouddirectory']['get_directory']=['clouddirectory:GetDirectory']
        for p in ['clouddirectory:GetDirectory']:
            res = {}
            for nm in ["DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "GetDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_facet(self, *args, **kwargs):
        __protego_used['clouddirectory']['get_facet']=['clouddirectory:GetFacet']
        for p in ['clouddirectory:GetFacet']:
            res = {}
            for nm in ["SchemaArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "GetFacet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_link_attributes(self, *args, **kwargs):
        __protego_used['clouddirectory']['get_link_attributes']=['clouddirectory:*']
        for p in ['clouddirectory:*']:
            res = {}
            for nm in ["TypedLinkSpecifier","AttributeNames","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "GetLinkAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_object_attributes(self, *args, **kwargs):
        __protego_used['clouddirectory']['get_object_attributes']=['clouddirectory:GetObjectAttributes']
        for p in ['clouddirectory:GetObjectAttributes']:
            res = {}
            for nm in ["AttributeNames","SchemaFacet","DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "GetObjectAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_object_information(self, *args, **kwargs):
        __protego_used['clouddirectory']['get_object_information']=['clouddirectory:GetObjectInformation']
        for p in ['clouddirectory:GetObjectInformation']:
            res = {}
            for nm in ["DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "GetObjectInformation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_schema_as_json(self, *args, **kwargs):
        __protego_used['clouddirectory']['get_schema_as_json']=['clouddirectory:GetSchemaAsJson']
        for p in ['clouddirectory:GetSchemaAsJson']:
            res = {}
            for nm in ["SchemaArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "GetSchemaAsJson", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_typed_link_facet_information(self, *args, **kwargs):
        __protego_used['clouddirectory']['get_typed_link_facet_information']=['clouddirectory:GetTypedLinkFacetInformation']
        for p in ['clouddirectory:GetTypedLinkFacetInformation']:
            res = {}
            for nm in ["SchemaArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "GetTypedLinkFacetInformation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_applied_schema_arns(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_applied_schema_arns']=['clouddirectory:ListAppliedSchemaArns']
        for p in ['clouddirectory:ListAppliedSchemaArns']:
            res = {}
            for nm in ["DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListAppliedSchemaArns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_attached_indices(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_attached_indices']=['clouddirectory:ListAttachedIndices']
        for p in ['clouddirectory:ListAttachedIndices']:
            res = {}
            for nm in ["TargetReference","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListAttachedIndices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_development_schema_arns(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_development_schema_arns']=['clouddirectory:ListDevelopmentSchemaArns']
        for p in ['clouddirectory:ListDevelopmentSchemaArns']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListDevelopmentSchemaArns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_directories(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_directories']=['clouddirectory:ListDirectories']
        for p in ['clouddirectory:ListDirectories']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListDirectories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_facet_attributes(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_facet_attributes']=['clouddirectory:ListFacetAttributes']
        for p in ['clouddirectory:ListFacetAttributes']:
            res = {}
            for nm in ["SchemaArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListFacetAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_facet_names(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_facet_names']=['clouddirectory:ListFacetNames']
        for p in ['clouddirectory:ListFacetNames']:
            res = {}
            for nm in ["SchemaArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListFacetNames", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_incoming_typed_links(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_incoming_typed_links']=['clouddirectory:ListIncomingTypedLinks']
        for p in ['clouddirectory:ListIncomingTypedLinks']:
            res = {}
            for nm in ["DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListIncomingTypedLinks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_index(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_index']=['clouddirectory:ListIndex']
        for p in ['clouddirectory:ListIndex']:
            res = {}
            for nm in ["IndexReference","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListIndex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_managed_schema_arns(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_managed_schema_arns']=['clouddirectory:*']
        for p in ['clouddirectory:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListManagedSchemaArns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_object_attributes(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_object_attributes']=['clouddirectory:ListObjectAttributes']
        for p in ['clouddirectory:ListObjectAttributes']:
            res = {}
            for nm in ["DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListObjectAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_object_children(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_object_children']=['clouddirectory:ListObjectChildren']
        for p in ['clouddirectory:ListObjectChildren']:
            res = {}
            for nm in ["DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListObjectChildren", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_object_parent_paths(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_object_parent_paths']=['clouddirectory:ListObjectParentPaths']
        for p in ['clouddirectory:ListObjectParentPaths']:
            res = {}
            for nm in ["DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListObjectParentPaths", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_object_parents(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_object_parents']=['clouddirectory:ListObjectParents']
        for p in ['clouddirectory:ListObjectParents']:
            res = {}
            for nm in ["DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListObjectParents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_object_policies(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_object_policies']=['clouddirectory:ListObjectPolicies']
        for p in ['clouddirectory:ListObjectPolicies']:
            res = {}
            for nm in ["DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListObjectPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_outgoing_typed_links(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_outgoing_typed_links']=['clouddirectory:ListOutgoingTypedLinks']
        for p in ['clouddirectory:ListOutgoingTypedLinks']:
            res = {}
            for nm in ["DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListOutgoingTypedLinks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_policy_attachments(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_policy_attachments']=['clouddirectory:ListPolicyAttachments']
        for p in ['clouddirectory:ListPolicyAttachments']:
            res = {}
            for nm in ["PolicyReference","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListPolicyAttachments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_published_schema_arns(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_published_schema_arns']=['clouddirectory:ListPublishedSchemaArns']
        for p in ['clouddirectory:ListPublishedSchemaArns']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListPublishedSchemaArns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_tags_for_resource']=['clouddirectory:ListTagsForResource']
        for p in ['clouddirectory:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_typed_link_facet_attributes(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_typed_link_facet_attributes']=['clouddirectory:ListTypedLinkFacetAttributes']
        for p in ['clouddirectory:ListTypedLinkFacetAttributes']:
            res = {}
            for nm in ["SchemaArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListTypedLinkFacetAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_typed_link_facet_names(self, *args, **kwargs):
        __protego_used['clouddirectory']['list_typed_link_facet_names']=['clouddirectory:ListTypedLinkFacetNames']
        for p in ['clouddirectory:ListTypedLinkFacetNames']:
            res = {}
            for nm in ["SchemaArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "ListTypedLinkFacetNames", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def lookup_policy(self, *args, **kwargs):
        __protego_used['clouddirectory']['lookup_policy']=['clouddirectory:LookupPolicy']
        for p in ['clouddirectory:LookupPolicy']:
            res = {}
            for nm in ["DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "LookupPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def publish_schema(self, *args, **kwargs):
        __protego_used['clouddirectory']['publish_schema']=['clouddirectory:PublishSchema']
        for p in ['clouddirectory:PublishSchema']:
            res = {}
            for nm in ["Version","DevelopmentSchemaArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "PublishSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_schema_from_json(self, *args, **kwargs):
        __protego_used['clouddirectory']['put_schema_from_json']=['clouddirectory:PutSchemaFromJson']
        for p in ['clouddirectory:PutSchemaFromJson']:
            res = {}
            for nm in ["Document","SchemaArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "PutSchemaFromJson", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_facet_from_object(self, *args, **kwargs):
        __protego_used['clouddirectory']['remove_facet_from_object']=['clouddirectory:RemoveFacetFromObject']
        for p in ['clouddirectory:RemoveFacetFromObject']:
            res = {}
            for nm in ["SchemaFacet","DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "RemoveFacetFromObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['clouddirectory']['tag_resource']=['clouddirectory:TagResource']
        for p in ['clouddirectory:TagResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['clouddirectory']['untag_resource']=['clouddirectory:UntagResource']
        for p in ['clouddirectory:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_facet(self, *args, **kwargs):
        __protego_used['clouddirectory']['update_facet']=['clouddirectory:UpdateFacet']
        for p in ['clouddirectory:UpdateFacet']:
            res = {}
            for nm in ["SchemaArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "UpdateFacet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_link_attributes(self, *args, **kwargs):
        __protego_used['clouddirectory']['update_link_attributes']=['clouddirectory:*']
        for p in ['clouddirectory:*']:
            res = {}
            for nm in ["TypedLinkSpecifier","AttributeUpdates","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "UpdateLinkAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_object_attributes(self, *args, **kwargs):
        __protego_used['clouddirectory']['update_object_attributes']=['clouddirectory:UpdateObjectAttributes']
        for p in ['clouddirectory:UpdateObjectAttributes']:
            res = {}
            for nm in ["AttributeUpdates","DirectoryArn","ObjectReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "UpdateObjectAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_schema(self, *args, **kwargs):
        __protego_used['clouddirectory']['update_schema']=['clouddirectory:UpdateSchema']
        for p in ['clouddirectory:UpdateSchema']:
            res = {}
            for nm in ["SchemaArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "UpdateSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_typed_link_facet(self, *args, **kwargs):
        __protego_used['clouddirectory']['update_typed_link_facet']=['clouddirectory:UpdateTypedLinkFacet']
        for p in ['clouddirectory:UpdateTypedLinkFacet']:
            res = {}
            for nm in ["IdentityAttributeOrder","AttributeUpdates","SchemaArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "UpdateTypedLinkFacet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upgrade_applied_schema(self, *args, **kwargs):
        __protego_used['clouddirectory']['upgrade_applied_schema']=['clouddirectory:*']
        for p in ['clouddirectory:*']:
            res = {}
            for nm in ["PublishedSchemaArn","DirectoryArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "UpgradeAppliedSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upgrade_published_schema(self, *args, **kwargs):
        __protego_used['clouddirectory']['upgrade_published_schema']=['clouddirectory:*']
        for p in ['clouddirectory:*']:
            res = {}
            for nm in ["PublishedSchemaArn","DevelopmentSchemaArn","MinorVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['clouddirectory'].append({'action': "UpgradePublishedSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cloudformation:
    def __init__(self, region_name=__default_region):
        __protego_used['cloudformation']= __protego_used.get('cloudformation', {})
        __protego_resource_map['cloudformation']=__protego_resource_map.get('cloudformation', [])
        self.region = region_name
    def cancel_update_stack(self, *args, **kwargs):
        __protego_used['cloudformation']['cancel_update_stack']=['cloudformation:CancelUpdateStack']
        for p in ['cloudformation:CancelUpdateStack']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "CancelUpdateStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def continue_update_rollback(self, *args, **kwargs):
        __protego_used['cloudformation']['continue_update_rollback']=['cloudformation:ContinueUpdateRollback']
        for p in ['cloudformation:ContinueUpdateRollback']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ContinueUpdateRollback", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_change_set(self, *args, **kwargs):
        __protego_used['cloudformation']['create_change_set']=['cloudformation:CreateChangeSet']
        for p in ['cloudformation:CreateChangeSet']:
            res = {}
            for nm in ["ChangeSetName","StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "CreateChangeSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stack(self, *args, **kwargs):
        __protego_used['cloudformation']['create_stack']=['cloudformation:CreateStack']
        for p in ['cloudformation:CreateStack']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "CreateStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stack_instances(self, *args, **kwargs):
        __protego_used['cloudformation']['create_stack_instances']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["Accounts","StackSetName","Regions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "CreateStackInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stack_set(self, *args, **kwargs):
        __protego_used['cloudformation']['create_stack_set']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["StackSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "CreateStackSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_change_set(self, *args, **kwargs):
        __protego_used['cloudformation']['delete_change_set']=['cloudformation:DeleteChangeSet']
        for p in ['cloudformation:DeleteChangeSet']:
            res = {}
            for nm in ["ChangeSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DeleteChangeSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_stack(self, *args, **kwargs):
        __protego_used['cloudformation']['delete_stack']=['cloudformation:DeleteStack']
        for p in ['cloudformation:DeleteStack']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DeleteStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_stack_instances(self, *args, **kwargs):
        __protego_used['cloudformation']['delete_stack_instances']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["Accounts","StackSetName","RetainStacks","Regions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DeleteStackInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_stack_set(self, *args, **kwargs):
        __protego_used['cloudformation']['delete_stack_set']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["StackSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DeleteStackSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_type(self, *args, **kwargs):
        __protego_used['cloudformation']['deregister_type']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DeregisterType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_limits(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_account_limits']=['cloudformation:DescribeAccountLimits']
        for p in ['cloudformation:DescribeAccountLimits']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeAccountLimits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_change_set(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_change_set']=['cloudformation:DescribeChangeSet']
        for p in ['cloudformation:DescribeChangeSet']:
            res = {}
            for nm in ["ChangeSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeChangeSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stack_drift_detection_status(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_stack_drift_detection_status']=['cloudformation:DescribeStackDriftDetectionStatus']
        for p in ['cloudformation:DescribeStackDriftDetectionStatus']:
            res = {}
            for nm in ["StackDriftDetectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeStackDriftDetectionStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stack_events(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_stack_events']=['cloudformation:DescribeStackEvents']
        for p in ['cloudformation:DescribeStackEvents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeStackEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stack_instance(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_stack_instance']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["StackSetName","StackInstanceRegion","StackInstanceAccount"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeStackInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stack_resource(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_stack_resource']=['cloudformation:DescribeStackResource']
        for p in ['cloudformation:DescribeStackResource']:
            res = {}
            for nm in ["LogicalResourceId","StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeStackResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stack_resource_drifts(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_stack_resource_drifts']=['cloudformation:DescribeStackResourceDrifts']
        for p in ['cloudformation:DescribeStackResourceDrifts']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeStackResourceDrifts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stack_resources(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_stack_resources']=['cloudformation:DescribeStackResources']
        for p in ['cloudformation:DescribeStackResources']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeStackResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stack_set(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_stack_set']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["StackSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeStackSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stack_set_operation(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_stack_set_operation']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["StackSetName","OperationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeStackSetOperation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stacks(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_stacks']=['cloudformation:DescribeStacks']
        for p in ['cloudformation:DescribeStacks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeStacks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_type(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_type']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_type_registration(self, *args, **kwargs):
        __protego_used['cloudformation']['describe_type_registration']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["RegistrationToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DescribeTypeRegistration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_stack_drift(self, *args, **kwargs):
        __protego_used['cloudformation']['detect_stack_drift']=['cloudformation:DetectStackDrift']
        for p in ['cloudformation:DetectStackDrift']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DetectStackDrift", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_stack_resource_drift(self, *args, **kwargs):
        __protego_used['cloudformation']['detect_stack_resource_drift']=['cloudformation:DetectStackResourceDrift']
        for p in ['cloudformation:DetectStackResourceDrift']:
            res = {}
            for nm in ["LogicalResourceId","StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DetectStackResourceDrift", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_stack_set_drift(self, *args, **kwargs):
        __protego_used['cloudformation']['detect_stack_set_drift']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["StackSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "DetectStackSetDrift", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def estimate_template_cost(self, *args, **kwargs):
        __protego_used['cloudformation']['estimate_template_cost']=['cloudformation:EstimateTemplateCost']
        for p in ['cloudformation:EstimateTemplateCost']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "EstimateTemplateCost", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def execute_change_set(self, *args, **kwargs):
        __protego_used['cloudformation']['execute_change_set']=['cloudformation:ExecuteChangeSet']
        for p in ['cloudformation:ExecuteChangeSet']:
            res = {}
            for nm in ["ChangeSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ExecuteChangeSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_stack_policy(self, *args, **kwargs):
        __protego_used['cloudformation']['get_stack_policy']=['cloudformation:GetStackPolicy']
        for p in ['cloudformation:GetStackPolicy']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "GetStackPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_template(self, *args, **kwargs):
        __protego_used['cloudformation']['get_template']=['cloudformation:GetTemplate']
        for p in ['cloudformation:GetTemplate']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "GetTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_template_summary(self, *args, **kwargs):
        __protego_used['cloudformation']['get_template_summary']=['cloudformation:GetTemplateSummary']
        for p in ['cloudformation:GetTemplateSummary']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "GetTemplateSummary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_change_sets(self, *args, **kwargs):
        __protego_used['cloudformation']['list_change_sets']=['cloudformation:ListChangeSets']
        for p in ['cloudformation:ListChangeSets']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListChangeSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_exports(self, *args, **kwargs):
        __protego_used['cloudformation']['list_exports']=['cloudformation:ListExports']
        for p in ['cloudformation:ListExports']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListExports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_imports(self, *args, **kwargs):
        __protego_used['cloudformation']['list_imports']=['cloudformation:ListImports']
        for p in ['cloudformation:ListImports']:
            res = {}
            for nm in ["ExportName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListImports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_stack_instances(self, *args, **kwargs):
        __protego_used['cloudformation']['list_stack_instances']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["StackSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListStackInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_stack_resources(self, *args, **kwargs):
        __protego_used['cloudformation']['list_stack_resources']=['cloudformation:ListStackResources']
        for p in ['cloudformation:ListStackResources']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListStackResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_stack_set_operation_results(self, *args, **kwargs):
        __protego_used['cloudformation']['list_stack_set_operation_results']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["StackSetName","OperationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListStackSetOperationResults", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_stack_set_operations(self, *args, **kwargs):
        __protego_used['cloudformation']['list_stack_set_operations']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["StackSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListStackSetOperations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_stack_sets(self, *args, **kwargs):
        __protego_used['cloudformation']['list_stack_sets']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListStackSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_stacks(self, *args, **kwargs):
        __protego_used['cloudformation']['list_stacks']=['cloudformation:ListStacks']
        for p in ['cloudformation:ListStacks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListStacks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_type_registrations(self, *args, **kwargs):
        __protego_used['cloudformation']['list_type_registrations']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListTypeRegistrations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_type_versions(self, *args, **kwargs):
        __protego_used['cloudformation']['list_type_versions']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListTypeVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_types(self, *args, **kwargs):
        __protego_used['cloudformation']['list_types']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ListTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def record_handler_progress(self, *args, **kwargs):
        __protego_used['cloudformation']['record_handler_progress']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["BearerToken","OperationStatus"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "RecordHandlerProgress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_type(self, *args, **kwargs):
        __protego_used['cloudformation']['register_type']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["SchemaHandlerPackage","TypeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "RegisterType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_stack_policy(self, *args, **kwargs):
        __protego_used['cloudformation']['set_stack_policy']=['cloudformation:SetStackPolicy']
        for p in ['cloudformation:SetStackPolicy']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "SetStackPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_type_default_version(self, *args, **kwargs):
        __protego_used['cloudformation']['set_type_default_version']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "SetTypeDefaultVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def signal_resource(self, *args, **kwargs):
        __protego_used['cloudformation']['signal_resource']=['cloudformation:SignalResource']
        for p in ['cloudformation:SignalResource']:
            res = {}
            for nm in ["LogicalResourceId","UniqueId","Status","StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "SignalResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_stack_set_operation(self, *args, **kwargs):
        __protego_used['cloudformation']['stop_stack_set_operation']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["StackSetName","OperationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "StopStackSetOperation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_stack(self, *args, **kwargs):
        __protego_used['cloudformation']['update_stack']=['cloudformation:UpdateStack']
        for p in ['cloudformation:UpdateStack']:
            res = {}
            for nm in ["StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "UpdateStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_stack_instances(self, *args, **kwargs):
        __protego_used['cloudformation']['update_stack_instances']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["Accounts","StackSetName","Regions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "UpdateStackInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_stack_set(self, *args, **kwargs):
        __protego_used['cloudformation']['update_stack_set']=['cloudformation:*']
        for p in ['cloudformation:*']:
            res = {}
            for nm in ["StackSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "UpdateStackSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_termination_protection(self, *args, **kwargs):
        __protego_used['cloudformation']['update_termination_protection']=['cloudformation:UpdateTerminationProtection']
        for p in ['cloudformation:UpdateTerminationProtection']:
            res = {}
            for nm in ["EnableTerminationProtection","StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "UpdateTerminationProtection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def validate_template(self, *args, **kwargs):
        __protego_used['cloudformation']['validate_template']=['cloudformation:ValidateTemplate']
        for p in ['cloudformation:ValidateTemplate']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudformation'].append({'action': "ValidateTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cloudfront:
    def __init__(self, region_name=__default_region):
        __protego_used['cloudfront']= __protego_used.get('cloudfront', {})
        __protego_resource_map['cloudfront']=__protego_resource_map.get('cloudfront', [])
        self.region = region_name
    def create_cloud_front_origin_access_identity(self, *args, **kwargs):
        __protego_used['cloudfront']['create_cloud_front_origin_access_identity']=['cloudfront:CreateCloudFrontOriginAccessIdentity']
        for p in ['cloudfront:CreateCloudFrontOriginAccessIdentity']:
            res = {}
            for nm in ["CloudFrontOriginAccessIdentityConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "CreateCloudFrontOriginAccessIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_distribution(self, *args, **kwargs):
        __protego_used['cloudfront']['create_distribution']=['cloudfront:CreateDistribution']
        for p in ['cloudfront:CreateDistribution']:
            res = {}
            for nm in ["DistributionConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "CreateDistribution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_distribution_with_tags(self, *args, **kwargs):
        __protego_used['cloudfront']['create_distribution_with_tags']=['cloudfront:CreateDistributionWithTags']
        for p in ['cloudfront:CreateDistributionWithTags']:
            res = {}
            for nm in ["DistributionConfigWithTags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "CreateDistributionWithTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_field_level_encryption_config(self, *args, **kwargs):
        __protego_used['cloudfront']['create_field_level_encryption_config']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["FieldLevelEncryptionConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "CreateFieldLevelEncryptionConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_field_level_encryption_profile(self, *args, **kwargs):
        __protego_used['cloudfront']['create_field_level_encryption_profile']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["FieldLevelEncryptionProfileConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "CreateFieldLevelEncryptionProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_invalidation(self, *args, **kwargs):
        __protego_used['cloudfront']['create_invalidation']=['cloudfront:CreateInvalidation']
        for p in ['cloudfront:CreateInvalidation']:
            res = {}
            for nm in ["InvalidationBatch","DistributionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "CreateInvalidation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_public_key(self, *args, **kwargs):
        __protego_used['cloudfront']['create_public_key']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["PublicKeyConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "CreatePublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_streaming_distribution(self, *args, **kwargs):
        __protego_used['cloudfront']['create_streaming_distribution']=['cloudfront:CreateStreamingDistribution']
        for p in ['cloudfront:CreateStreamingDistribution']:
            res = {}
            for nm in ["StreamingDistributionConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "CreateStreamingDistribution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_streaming_distribution_with_tags(self, *args, **kwargs):
        __protego_used['cloudfront']['create_streaming_distribution_with_tags']=['cloudfront:CreateStreamingDistributionWithTags']
        for p in ['cloudfront:CreateStreamingDistributionWithTags']:
            res = {}
            for nm in ["StreamingDistributionConfigWithTags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "CreateStreamingDistributionWithTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cloud_front_origin_access_identity(self, *args, **kwargs):
        __protego_used['cloudfront']['delete_cloud_front_origin_access_identity']=['cloudfront:DeleteCloudFrontOriginAccessIdentity']
        for p in ['cloudfront:DeleteCloudFrontOriginAccessIdentity']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "DeleteCloudFrontOriginAccessIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_distribution(self, *args, **kwargs):
        __protego_used['cloudfront']['delete_distribution']=['cloudfront:DeleteDistribution']
        for p in ['cloudfront:DeleteDistribution']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "DeleteDistribution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_field_level_encryption_config(self, *args, **kwargs):
        __protego_used['cloudfront']['delete_field_level_encryption_config']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "DeleteFieldLevelEncryptionConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_field_level_encryption_profile(self, *args, **kwargs):
        __protego_used['cloudfront']['delete_field_level_encryption_profile']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "DeleteFieldLevelEncryptionProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_public_key(self, *args, **kwargs):
        __protego_used['cloudfront']['delete_public_key']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "DeletePublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_streaming_distribution(self, *args, **kwargs):
        __protego_used['cloudfront']['delete_streaming_distribution']=['cloudfront:DeleteStreamingDistribution']
        for p in ['cloudfront:DeleteStreamingDistribution']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "DeleteStreamingDistribution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_cloud_front_origin_access_identity(self, *args, **kwargs):
        __protego_used['cloudfront']['get_cloud_front_origin_access_identity']=['cloudfront:GetCloudFrontOriginAccessIdentity']
        for p in ['cloudfront:GetCloudFrontOriginAccessIdentity']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetCloudFrontOriginAccessIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_cloud_front_origin_access_identity_config(self, *args, **kwargs):
        __protego_used['cloudfront']['get_cloud_front_origin_access_identity_config']=['cloudfront:GetCloudFrontOriginAccessIdentityConfig']
        for p in ['cloudfront:GetCloudFrontOriginAccessIdentityConfig']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetCloudFrontOriginAccessIdentityConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_distribution(self, *args, **kwargs):
        __protego_used['cloudfront']['get_distribution']=['cloudfront:GetDistribution']
        for p in ['cloudfront:GetDistribution']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetDistribution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_distribution_config(self, *args, **kwargs):
        __protego_used['cloudfront']['get_distribution_config']=['cloudfront:GetDistributionConfig']
        for p in ['cloudfront:GetDistributionConfig']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetDistributionConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_field_level_encryption(self, *args, **kwargs):
        __protego_used['cloudfront']['get_field_level_encryption']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetFieldLevelEncryption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_field_level_encryption_config(self, *args, **kwargs):
        __protego_used['cloudfront']['get_field_level_encryption_config']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetFieldLevelEncryptionConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_field_level_encryption_profile(self, *args, **kwargs):
        __protego_used['cloudfront']['get_field_level_encryption_profile']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetFieldLevelEncryptionProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_field_level_encryption_profile_config(self, *args, **kwargs):
        __protego_used['cloudfront']['get_field_level_encryption_profile_config']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetFieldLevelEncryptionProfileConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_invalidation(self, *args, **kwargs):
        __protego_used['cloudfront']['get_invalidation']=['cloudfront:GetInvalidation']
        for p in ['cloudfront:GetInvalidation']:
            res = {}
            for nm in ["DistributionId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetInvalidation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_public_key(self, *args, **kwargs):
        __protego_used['cloudfront']['get_public_key']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetPublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_public_key_config(self, *args, **kwargs):
        __protego_used['cloudfront']['get_public_key_config']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetPublicKeyConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_streaming_distribution(self, *args, **kwargs):
        __protego_used['cloudfront']['get_streaming_distribution']=['cloudfront:GetStreamingDistribution']
        for p in ['cloudfront:GetStreamingDistribution']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetStreamingDistribution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_streaming_distribution_config(self, *args, **kwargs):
        __protego_used['cloudfront']['get_streaming_distribution_config']=['cloudfront:GetStreamingDistributionConfig']
        for p in ['cloudfront:GetStreamingDistributionConfig']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "GetStreamingDistributionConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_cloud_front_origin_access_identities(self, *args, **kwargs):
        __protego_used['cloudfront']['list_cloud_front_origin_access_identities']=['cloudfront:ListCloudFrontOriginAccessIdentities']
        for p in ['cloudfront:ListCloudFrontOriginAccessIdentities']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "ListCloudFrontOriginAccessIdentities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_distributions(self, *args, **kwargs):
        __protego_used['cloudfront']['list_distributions']=['cloudfront:ListDistributions']
        for p in ['cloudfront:ListDistributions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "ListDistributions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_distributions_by_web_acl_id(self, *args, **kwargs):
        __protego_used['cloudfront']['list_distributions_by_web_acl_id']=['cloudfront:ListDistributionsByWebACLId']
        for p in ['cloudfront:ListDistributionsByWebACLId']:
            res = {}
            for nm in ["WebACLId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "ListDistributionsByWebACLId", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_field_level_encryption_configs(self, *args, **kwargs):
        __protego_used['cloudfront']['list_field_level_encryption_configs']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "ListFieldLevelEncryptionConfigs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_field_level_encryption_profiles(self, *args, **kwargs):
        __protego_used['cloudfront']['list_field_level_encryption_profiles']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "ListFieldLevelEncryptionProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_invalidations(self, *args, **kwargs):
        __protego_used['cloudfront']['list_invalidations']=['cloudfront:ListInvalidations']
        for p in ['cloudfront:ListInvalidations']:
            res = {}
            for nm in ["DistributionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "ListInvalidations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_public_keys(self, *args, **kwargs):
        __protego_used['cloudfront']['list_public_keys']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "ListPublicKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_streaming_distributions(self, *args, **kwargs):
        __protego_used['cloudfront']['list_streaming_distributions']=['cloudfront:ListStreamingDistributions']
        for p in ['cloudfront:ListStreamingDistributions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "ListStreamingDistributions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['cloudfront']['list_tags_for_resource']=['cloudfront:ListTagsForResource']
        for p in ['cloudfront:ListTagsForResource']:
            res = {}
            for nm in ["Resource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['cloudfront']['tag_resource']=['cloudfront:TagResource']
        for p in ['cloudfront:TagResource']:
            res = {}
            for nm in ["Resource","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['cloudfront']['untag_resource']=['cloudfront:UntagResource']
        for p in ['cloudfront:UntagResource']:
            res = {}
            for nm in ["TagKeys","Resource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_cloud_front_origin_access_identity(self, *args, **kwargs):
        __protego_used['cloudfront']['update_cloud_front_origin_access_identity']=['cloudfront:UpdateCloudFrontOriginAccessIdentity']
        for p in ['cloudfront:UpdateCloudFrontOriginAccessIdentity']:
            res = {}
            for nm in ["Id","CloudFrontOriginAccessIdentityConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "UpdateCloudFrontOriginAccessIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_distribution(self, *args, **kwargs):
        __protego_used['cloudfront']['update_distribution']=['cloudfront:UpdateDistribution']
        for p in ['cloudfront:UpdateDistribution']:
            res = {}
            for nm in ["DistributionConfig","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "UpdateDistribution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_field_level_encryption_config(self, *args, **kwargs):
        __protego_used['cloudfront']['update_field_level_encryption_config']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["Id","FieldLevelEncryptionConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "UpdateFieldLevelEncryptionConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_field_level_encryption_profile(self, *args, **kwargs):
        __protego_used['cloudfront']['update_field_level_encryption_profile']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["FieldLevelEncryptionProfileConfig","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "UpdateFieldLevelEncryptionProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_public_key(self, *args, **kwargs):
        __protego_used['cloudfront']['update_public_key']=['cloudfront:*']
        for p in ['cloudfront:*']:
            res = {}
            for nm in ["PublicKeyConfig","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "UpdatePublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_streaming_distribution(self, *args, **kwargs):
        __protego_used['cloudfront']['update_streaming_distribution']=['cloudfront:UpdateStreamingDistribution']
        for p in ['cloudfront:UpdateStreamingDistribution']:
            res = {}
            for nm in ["StreamingDistributionConfig","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudfront'].append({'action': "UpdateStreamingDistribution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cloudhsm:
    def __init__(self, region_name=__default_region):
        __protego_used['cloudhsm']= __protego_used.get('cloudhsm', {})
        __protego_resource_map['cloudhsm']=__protego_resource_map.get('cloudhsm', [])
        self.region = region_name
    def add_tags_to_resource(self, *args, **kwargs):
        __protego_used['cloudhsm']['add_tags_to_resource']=['cloudhsm:AddTagsToResource']
        for p in ['cloudhsm:AddTagsToResource']:
            res = {}
            for nm in ["ResourceArn","TagList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "AddTagsToResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_hapg(self, *args, **kwargs):
        __protego_used['cloudhsm']['create_hapg']=['cloudhsm:CreateHapg']
        for p in ['cloudhsm:CreateHapg']:
            res = {}
            for nm in ["Label"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "CreateHapg", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_hsm(self, *args, **kwargs):
        __protego_used['cloudhsm']['create_hsm']=['cloudhsm:CreateHsm']
        for p in ['cloudhsm:CreateHsm']:
            res = {}
            for nm in ["SshKey","SubnetId","IamRoleArn","SubscriptionType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "CreateHsm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_luna_client(self, *args, **kwargs):
        __protego_used['cloudhsm']['create_luna_client']=['cloudhsm:CreateLunaClient']
        for p in ['cloudhsm:CreateLunaClient']:
            res = {}
            for nm in ["Certificate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "CreateLunaClient", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_hapg(self, *args, **kwargs):
        __protego_used['cloudhsm']['delete_hapg']=['cloudhsm:DeleteHapg']
        for p in ['cloudhsm:DeleteHapg']:
            res = {}
            for nm in ["HapgArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "DeleteHapg", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_hsm(self, *args, **kwargs):
        __protego_used['cloudhsm']['delete_hsm']=['cloudhsm:DeleteHsm']
        for p in ['cloudhsm:DeleteHsm']:
            res = {}
            for nm in ["HsmArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "DeleteHsm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_luna_client(self, *args, **kwargs):
        __protego_used['cloudhsm']['delete_luna_client']=['cloudhsm:DeleteLunaClient']
        for p in ['cloudhsm:DeleteLunaClient']:
            res = {}
            for nm in ["ClientArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "DeleteLunaClient", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_hapg(self, *args, **kwargs):
        __protego_used['cloudhsm']['describe_hapg']=['cloudhsm:DescribeHapg']
        for p in ['cloudhsm:DescribeHapg']:
            res = {}
            for nm in ["HapgArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "DescribeHapg", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_hsm(self, *args, **kwargs):
        __protego_used['cloudhsm']['describe_hsm']=['cloudhsm:DescribeHsm']
        for p in ['cloudhsm:DescribeHsm']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "DescribeHsm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_luna_client(self, *args, **kwargs):
        __protego_used['cloudhsm']['describe_luna_client']=['cloudhsm:DescribeLunaClient']
        for p in ['cloudhsm:DescribeLunaClient']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "DescribeLunaClient", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_config(self, *args, **kwargs):
        __protego_used['cloudhsm']['get_config']=['cloudhsm:GetConfig']
        for p in ['cloudhsm:GetConfig']:
            res = {}
            for nm in ["HapgList","ClientArn","ClientVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "GetConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_available_zones(self, *args, **kwargs):
        __protego_used['cloudhsm']['list_available_zones']=['cloudhsm:ListAvailableZones']
        for p in ['cloudhsm:ListAvailableZones']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "ListAvailableZones", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_hapgs(self, *args, **kwargs):
        __protego_used['cloudhsm']['list_hapgs']=['cloudhsm:ListHapgs']
        for p in ['cloudhsm:ListHapgs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "ListHapgs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_hsms(self, *args, **kwargs):
        __protego_used['cloudhsm']['list_hsms']=['cloudhsm:ListHsms']
        for p in ['cloudhsm:ListHsms']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "ListHsms", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_luna_clients(self, *args, **kwargs):
        __protego_used['cloudhsm']['list_luna_clients']=['cloudhsm:ListLunaClients']
        for p in ['cloudhsm:ListLunaClients']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "ListLunaClients", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['cloudhsm']['list_tags_for_resource']=['cloudhsm:ListTagsForResource']
        for p in ['cloudhsm:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_hapg(self, *args, **kwargs):
        __protego_used['cloudhsm']['modify_hapg']=['cloudhsm:ModifyHapg']
        for p in ['cloudhsm:ModifyHapg']:
            res = {}
            for nm in ["HapgArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "ModifyHapg", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_hsm(self, *args, **kwargs):
        __protego_used['cloudhsm']['modify_hsm']=['cloudhsm:ModifyHsm']
        for p in ['cloudhsm:ModifyHsm']:
            res = {}
            for nm in ["HsmArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "ModifyHsm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_luna_client(self, *args, **kwargs):
        __protego_used['cloudhsm']['modify_luna_client']=['cloudhsm:ModifyLunaClient']
        for p in ['cloudhsm:ModifyLunaClient']:
            res = {}
            for nm in ["ClientArn","Certificate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "ModifyLunaClient", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_resource(self, *args, **kwargs):
        __protego_used['cloudhsm']['remove_tags_from_resource']=['cloudhsm:RemoveTagsFromResource']
        for p in ['cloudhsm:RemoveTagsFromResource']:
            res = {}
            for nm in ["ResourceArn","TagKeyList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsm'].append({'action': "RemoveTagsFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cloudhsmv2:
    def __init__(self, region_name=__default_region):
        __protego_used['cloudhsmv2']= __protego_used.get('cloudhsmv2', {})
        __protego_resource_map['cloudhsmv2']=__protego_resource_map.get('cloudhsmv2', [])
        self.region = region_name
    def copy_backup_to_region(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['copy_backup_to_region']=['cloudhsmv2:*']
        for p in ['cloudhsmv2:*']:
            res = {}
            for nm in ["BackupId","DestinationRegion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "CopyBackupToRegion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cluster(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['create_cluster']=['cloudhsm:*']
        for p in ['cloudhsm:*']:
            res = {}
            for nm in ["HsmType","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "CreateCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_hsm(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['create_hsm']=['cloudhsm:CreateHsm']
        for p in ['cloudhsm:CreateHsm']:
            res = {}
            for nm in ["ClusterId","AvailabilityZone"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "CreateHsm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_backup(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['delete_backup']=['cloudhsmv2:*']
        for p in ['cloudhsmv2:*']:
            res = {}
            for nm in ["BackupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "DeleteBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cluster(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['delete_cluster']=['cloudhsm:*']
        for p in ['cloudhsm:*']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "DeleteCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_hsm(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['delete_hsm']=['cloudhsm:DeleteHsm']
        for p in ['cloudhsm:DeleteHsm']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "DeleteHsm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_backups(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['describe_backups']=['cloudhsm:*']
        for p in ['cloudhsm:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "DescribeBackups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_clusters(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['describe_clusters']=['cloudhsm:*']
        for p in ['cloudhsm:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "DescribeClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def initialize_cluster(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['initialize_cluster']=['cloudhsm:*']
        for p in ['cloudhsm:*']:
            res = {}
            for nm in ["ClusterId","SignedCert","TrustAnchor"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "InitializeCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['list_tags']=['cloudhsm:*']
        for p in ['cloudhsm:*']:
            res = {}
            for nm in ["ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "ListTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_backup(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['restore_backup']=['cloudhsmv2:*']
        for p in ['cloudhsmv2:*']:
            res = {}
            for nm in ["BackupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "RestoreBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['tag_resource']=['cloudhsm:*']
        for p in ['cloudhsm:*']:
            res = {}
            for nm in ["ResourceId","TagList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['cloudhsmv2']['untag_resource']=['cloudhsm:*']
        for p in ['cloudhsm:*']:
            res = {}
            for nm in ["TagKeyList","ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudhsmv2'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cloudsearch:
    def __init__(self, region_name=__default_region):
        __protego_used['cloudsearch']= __protego_used.get('cloudsearch', {})
        __protego_resource_map['cloudsearch']=__protego_resource_map.get('cloudsearch', [])
        self.region = region_name
    def build_suggesters(self, *args, **kwargs):
        __protego_used['cloudsearch']['build_suggesters']=['cloudsearch:BuildSuggesters']
        for p in ['cloudsearch:BuildSuggesters']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "BuildSuggesters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_domain(self, *args, **kwargs):
        __protego_used['cloudsearch']['create_domain']=['cloudsearch:CreateDomain']
        for p in ['cloudsearch:CreateDomain']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "CreateDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def define_analysis_scheme(self, *args, **kwargs):
        __protego_used['cloudsearch']['define_analysis_scheme']=['cloudsearch:DefineAnalysisScheme']
        for p in ['cloudsearch:DefineAnalysisScheme']:
            res = {}
            for nm in ["DomainName","AnalysisScheme"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DefineAnalysisScheme", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def define_expression(self, *args, **kwargs):
        __protego_used['cloudsearch']['define_expression']=['cloudsearch:DefineExpression']
        for p in ['cloudsearch:DefineExpression']:
            res = {}
            for nm in ["DomainName","Expression"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DefineExpression", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def define_index_field(self, *args, **kwargs):
        __protego_used['cloudsearch']['define_index_field']=['cloudsearch:DefineIndexField']
        for p in ['cloudsearch:DefineIndexField']:
            res = {}
            for nm in ["DomainName","IndexField"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DefineIndexField", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def define_suggester(self, *args, **kwargs):
        __protego_used['cloudsearch']['define_suggester']=['cloudsearch:DefineSuggester']
        for p in ['cloudsearch:DefineSuggester']:
            res = {}
            for nm in ["Suggester","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DefineSuggester", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_analysis_scheme(self, *args, **kwargs):
        __protego_used['cloudsearch']['delete_analysis_scheme']=['cloudsearch:DeleteAnalysisScheme']
        for p in ['cloudsearch:DeleteAnalysisScheme']:
            res = {}
            for nm in ["DomainName","AnalysisSchemeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DeleteAnalysisScheme", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_domain(self, *args, **kwargs):
        __protego_used['cloudsearch']['delete_domain']=['cloudsearch:DeleteDomain']
        for p in ['cloudsearch:DeleteDomain']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DeleteDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_expression(self, *args, **kwargs):
        __protego_used['cloudsearch']['delete_expression']=['cloudsearch:DeleteExpression']
        for p in ['cloudsearch:DeleteExpression']:
            res = {}
            for nm in ["DomainName","ExpressionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DeleteExpression", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_index_field(self, *args, **kwargs):
        __protego_used['cloudsearch']['delete_index_field']=['cloudsearch:DeleteIndexField']
        for p in ['cloudsearch:DeleteIndexField']:
            res = {}
            for nm in ["DomainName","IndexFieldName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DeleteIndexField", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_suggester(self, *args, **kwargs):
        __protego_used['cloudsearch']['delete_suggester']=['cloudsearch:DeleteSuggester']
        for p in ['cloudsearch:DeleteSuggester']:
            res = {}
            for nm in ["DomainName","SuggesterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DeleteSuggester", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_analysis_schemes(self, *args, **kwargs):
        __protego_used['cloudsearch']['describe_analysis_schemes']=['cloudsearch:DescribeAnalysisSchemes']
        for p in ['cloudsearch:DescribeAnalysisSchemes']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DescribeAnalysisSchemes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_availability_options(self, *args, **kwargs):
        __protego_used['cloudsearch']['describe_availability_options']=['cloudsearch:DescribeAvailabilityOptions']
        for p in ['cloudsearch:DescribeAvailabilityOptions']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DescribeAvailabilityOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_domain_endpoint_options(self, *args, **kwargs):
        __protego_used['cloudsearch']['describe_domain_endpoint_options']=['cloudsearch:*']
        for p in ['cloudsearch:*']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DescribeDomainEndpointOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_domains(self, *args, **kwargs):
        __protego_used['cloudsearch']['describe_domains']=['cloudsearch:DescribeDomains']
        for p in ['cloudsearch:DescribeDomains']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DescribeDomains", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_expressions(self, *args, **kwargs):
        __protego_used['cloudsearch']['describe_expressions']=['cloudsearch:DescribeExpressions']
        for p in ['cloudsearch:DescribeExpressions']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DescribeExpressions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_index_fields(self, *args, **kwargs):
        __protego_used['cloudsearch']['describe_index_fields']=['cloudsearch:DescribeIndexFields']
        for p in ['cloudsearch:DescribeIndexFields']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DescribeIndexFields", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scaling_parameters(self, *args, **kwargs):
        __protego_used['cloudsearch']['describe_scaling_parameters']=['cloudsearch:DescribeScalingParameters']
        for p in ['cloudsearch:DescribeScalingParameters']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DescribeScalingParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_service_access_policies(self, *args, **kwargs):
        __protego_used['cloudsearch']['describe_service_access_policies']=['cloudsearch:DescribeServiceAccessPolicies']
        for p in ['cloudsearch:DescribeServiceAccessPolicies']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DescribeServiceAccessPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_suggesters(self, *args, **kwargs):
        __protego_used['cloudsearch']['describe_suggesters']=['cloudsearch:DescribeSuggesters']
        for p in ['cloudsearch:DescribeSuggesters']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "DescribeSuggesters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def index_documents(self, *args, **kwargs):
        __protego_used['cloudsearch']['index_documents']=['cloudsearch:IndexDocuments']
        for p in ['cloudsearch:IndexDocuments']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "IndexDocuments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_domain_names(self, *args, **kwargs):
        __protego_used['cloudsearch']['list_domain_names']=['cloudsearch:ListDomainNames']
        for p in ['cloudsearch:ListDomainNames']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "ListDomainNames", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_availability_options(self, *args, **kwargs):
        __protego_used['cloudsearch']['update_availability_options']=['cloudsearch:UpdateAvailabilityOptions']
        for p in ['cloudsearch:UpdateAvailabilityOptions']:
            res = {}
            for nm in ["DomainName","MultiAZ"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "UpdateAvailabilityOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_domain_endpoint_options(self, *args, **kwargs):
        __protego_used['cloudsearch']['update_domain_endpoint_options']=['cloudsearch:*']
        for p in ['cloudsearch:*']:
            res = {}
            for nm in ["DomainName","DomainEndpointOptions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "UpdateDomainEndpointOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_scaling_parameters(self, *args, **kwargs):
        __protego_used['cloudsearch']['update_scaling_parameters']=['cloudsearch:UpdateScalingParameters']
        for p in ['cloudsearch:UpdateScalingParameters']:
            res = {}
            for nm in ["DomainName","ScalingParameters"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "UpdateScalingParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_service_access_policies(self, *args, **kwargs):
        __protego_used['cloudsearch']['update_service_access_policies']=['cloudsearch:UpdateServiceAccessPolicies']
        for p in ['cloudsearch:UpdateServiceAccessPolicies']:
            res = {}
            for nm in ["AccessPolicies","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearch'].append({'action': "UpdateServiceAccessPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cloudsearchdomain:
    def __init__(self, region_name=__default_region):
        __protego_used['cloudsearchdomain']= __protego_used.get('cloudsearchdomain', {})
        __protego_resource_map['cloudsearchdomain']=__protego_resource_map.get('cloudsearchdomain', [])
        self.region = region_name
    def search(self, *args, **kwargs):
        __protego_used['cloudsearchdomain']['search']=['cloudsearch:*']
        for p in ['cloudsearch:*']:
            res = {}
            for nm in ["query"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearchdomain'].append({'action': "Search", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def suggest(self, *args, **kwargs):
        __protego_used['cloudsearchdomain']['suggest']=['cloudsearch:*']
        for p in ['cloudsearch:*']:
            res = {}
            for nm in ["query","suggester"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearchdomain'].append({'action': "Suggest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_documents(self, *args, **kwargs):
        __protego_used['cloudsearchdomain']['upload_documents']=['cloudsearch:*']
        for p in ['cloudsearch:*']:
            res = {}
            for nm in ["contentType","documents"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudsearchdomain'].append({'action': "UploadDocuments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cloudtrail:
    def __init__(self, region_name=__default_region):
        __protego_used['cloudtrail']= __protego_used.get('cloudtrail', {})
        __protego_resource_map['cloudtrail']=__protego_resource_map.get('cloudtrail', [])
        self.region = region_name
    def add_tags(self, *args, **kwargs):
        __protego_used['cloudtrail']['add_tags']=['cloudtrail:AddTags']
        for p in ['cloudtrail:AddTags']:
            res = {}
            for nm in ["ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "AddTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_trail(self, *args, **kwargs):
        __protego_used['cloudtrail']['create_trail']=['cloudtrail:CreateTrail']
        for p in ['cloudtrail:CreateTrail']:
            res = {}
            for nm in ["S3BucketName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "CreateTrail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_trail(self, *args, **kwargs):
        __protego_used['cloudtrail']['delete_trail']=['cloudtrail:DeleteTrail']
        for p in ['cloudtrail:DeleteTrail']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "DeleteTrail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_trails(self, *args, **kwargs):
        __protego_used['cloudtrail']['describe_trails']=['cloudtrail:DescribeTrails']
        for p in ['cloudtrail:DescribeTrails']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "DescribeTrails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_event_selectors(self, *args, **kwargs):
        __protego_used['cloudtrail']['get_event_selectors']=['cloudtrail:GetEventSelectors']
        for p in ['cloudtrail:GetEventSelectors']:
            res = {}
            for nm in ["TrailName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "GetEventSelectors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_insight_selectors(self, *args, **kwargs):
        __protego_used['cloudtrail']['get_insight_selectors']=['cloudtrail:*']
        for p in ['cloudtrail:*']:
            res = {}
            for nm in ["TrailName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "GetInsightSelectors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_trail(self, *args, **kwargs):
        __protego_used['cloudtrail']['get_trail']=['cloudtrail:*']
        for p in ['cloudtrail:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "GetTrail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_trail_status(self, *args, **kwargs):
        __protego_used['cloudtrail']['get_trail_status']=['cloudtrail:GetTrailStatus']
        for p in ['cloudtrail:GetTrailStatus']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "GetTrailStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_public_keys(self, *args, **kwargs):
        __protego_used['cloudtrail']['list_public_keys']=['cloudtrail:ListPublicKeys']
        for p in ['cloudtrail:ListPublicKeys']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "ListPublicKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags(self, *args, **kwargs):
        __protego_used['cloudtrail']['list_tags']=['cloudtrail:ListTags']
        for p in ['cloudtrail:ListTags']:
            res = {}
            for nm in ["ResourceIdList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "ListTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_trails(self, *args, **kwargs):
        __protego_used['cloudtrail']['list_trails']=['cloudtrail:*']
        for p in ['cloudtrail:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "ListTrails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def lookup_events(self, *args, **kwargs):
        __protego_used['cloudtrail']['lookup_events']=['cloudtrail:LookupEvents']
        for p in ['cloudtrail:LookupEvents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "LookupEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_event_selectors(self, *args, **kwargs):
        __protego_used['cloudtrail']['put_event_selectors']=['cloudtrail:PutEventSelectors']
        for p in ['cloudtrail:PutEventSelectors']:
            res = {}
            for nm in ["TrailName","EventSelectors"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "PutEventSelectors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_insight_selectors(self, *args, **kwargs):
        __protego_used['cloudtrail']['put_insight_selectors']=['cloudtrail:*']
        for p in ['cloudtrail:*']:
            res = {}
            for nm in ["TrailName","InsightSelectors"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "PutInsightSelectors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags(self, *args, **kwargs):
        __protego_used['cloudtrail']['remove_tags']=['cloudtrail:RemoveTags']
        for p in ['cloudtrail:RemoveTags']:
            res = {}
            for nm in ["ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "RemoveTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_logging(self, *args, **kwargs):
        __protego_used['cloudtrail']['start_logging']=['cloudtrail:StartLogging']
        for p in ['cloudtrail:StartLogging']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "StartLogging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_logging(self, *args, **kwargs):
        __protego_used['cloudtrail']['stop_logging']=['cloudtrail:StopLogging']
        for p in ['cloudtrail:StopLogging']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "StopLogging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_trail(self, *args, **kwargs):
        __protego_used['cloudtrail']['update_trail']=['cloudtrail:UpdateTrail']
        for p in ['cloudtrail:UpdateTrail']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudtrail'].append({'action': "UpdateTrail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cloudwatch:
    def __init__(self, region_name=__default_region):
        __protego_used['cloudwatch']= __protego_used.get('cloudwatch', {})
        __protego_resource_map['cloudwatch']=__protego_resource_map.get('cloudwatch', [])
        self.region = region_name
    def delete_alarms(self, *args, **kwargs):
        __protego_used['cloudwatch']['delete_alarms']=['cloudwatch:DeleteAlarms']
        for p in ['cloudwatch:DeleteAlarms']:
            res = {}
            for nm in ["AlarmNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "DeleteAlarms", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_anomaly_detector(self, *args, **kwargs):
        __protego_used['cloudwatch']['delete_anomaly_detector']=['cloudwatch:*']
        for p in ['cloudwatch:*']:
            res = {}
            for nm in ["Stat","MetricName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "DeleteAnomalyDetector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dashboards(self, *args, **kwargs):
        __protego_used['cloudwatch']['delete_dashboards']=['cloudwatch:DeleteDashboards']
        for p in ['cloudwatch:DeleteDashboards']:
            res = {}
            for nm in ["DashboardNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "DeleteDashboards", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_insight_rules(self, *args, **kwargs):
        __protego_used['cloudwatch']['delete_insight_rules']=['cloudwatch:*']
        for p in ['cloudwatch:*']:
            res = {}
            for nm in ["RuleNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "DeleteInsightRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_alarm_history(self, *args, **kwargs):
        __protego_used['cloudwatch']['describe_alarm_history']=['cloudwatch:DescribeAlarmHistory']
        for p in ['cloudwatch:DescribeAlarmHistory']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "DescribeAlarmHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_alarms(self, *args, **kwargs):
        __protego_used['cloudwatch']['describe_alarms']=['cloudwatch:DescribeAlarms']
        for p in ['cloudwatch:DescribeAlarms']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "DescribeAlarms", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_alarms_for_metric(self, *args, **kwargs):
        __protego_used['cloudwatch']['describe_alarms_for_metric']=['cloudwatch:DescribeAlarmsForMetric']
        for p in ['cloudwatch:DescribeAlarmsForMetric']:
            res = {}
            for nm in ["MetricName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "DescribeAlarmsForMetric", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_anomaly_detectors(self, *args, **kwargs):
        __protego_used['cloudwatch']['describe_anomaly_detectors']=['cloudwatch:*']
        for p in ['cloudwatch:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "DescribeAnomalyDetectors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_insight_rules(self, *args, **kwargs):
        __protego_used['cloudwatch']['describe_insight_rules']=['cloudwatch:*']
        for p in ['cloudwatch:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "DescribeInsightRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_alarm_actions(self, *args, **kwargs):
        __protego_used['cloudwatch']['disable_alarm_actions']=['cloudwatch:DisableAlarmActions']
        for p in ['cloudwatch:DisableAlarmActions']:
            res = {}
            for nm in ["AlarmNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "DisableAlarmActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_insight_rules(self, *args, **kwargs):
        __protego_used['cloudwatch']['disable_insight_rules']=['cloudwatch:*']
        for p in ['cloudwatch:*']:
            res = {}
            for nm in ["RuleNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "DisableInsightRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_alarm_actions(self, *args, **kwargs):
        __protego_used['cloudwatch']['enable_alarm_actions']=['cloudwatch:EnableAlarmActions']
        for p in ['cloudwatch:EnableAlarmActions']:
            res = {}
            for nm in ["AlarmNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "EnableAlarmActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_insight_rules(self, *args, **kwargs):
        __protego_used['cloudwatch']['enable_insight_rules']=['cloudwatch:*']
        for p in ['cloudwatch:*']:
            res = {}
            for nm in ["RuleNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "EnableInsightRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dashboard(self, *args, **kwargs):
        __protego_used['cloudwatch']['get_dashboard']=['cloudwatch:GetDashboard']
        for p in ['cloudwatch:GetDashboard']:
            res = {}
            for nm in ["DashboardName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "GetDashboard", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_insight_rule_report(self, *args, **kwargs):
        __protego_used['cloudwatch']['get_insight_rule_report']=['cloudwatch:*']
        for p in ['cloudwatch:*']:
            res = {}
            for nm in ["RuleName","EndTime","StartTime","Period"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "GetInsightRuleReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_metric_data(self, *args, **kwargs):
        __protego_used['cloudwatch']['get_metric_data']=['cloudwatch:GetMetricData']
        for p in ['cloudwatch:GetMetricData']:
            res = {}
            for nm in ["MetricDataQueries","StartTime","EndTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "GetMetricData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_metric_statistics(self, *args, **kwargs):
        __protego_used['cloudwatch']['get_metric_statistics']=['cloudwatch:GetMetricStatistics']
        for p in ['cloudwatch:GetMetricStatistics']:
            res = {}
            for nm in ["Period","EndTime","StartTime","MetricName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "GetMetricStatistics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_metric_widget_image(self, *args, **kwargs):
        __protego_used['cloudwatch']['get_metric_widget_image']=['cloudwatch:GetMetricWidgetImage']
        for p in ['cloudwatch:GetMetricWidgetImage']:
            res = {}
            for nm in ["MetricWidget"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "GetMetricWidgetImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dashboards(self, *args, **kwargs):
        __protego_used['cloudwatch']['list_dashboards']=['cloudwatch:ListDashboards']
        for p in ['cloudwatch:ListDashboards']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "ListDashboards", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_metrics(self, *args, **kwargs):
        __protego_used['cloudwatch']['list_metrics']=['cloudwatch:ListMetrics']
        for p in ['cloudwatch:ListMetrics']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "ListMetrics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['cloudwatch']['list_tags_for_resource']=['cloudwatch:ListTagsForResource']
        for p in ['cloudwatch:ListTagsForResource']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_anomaly_detector(self, *args, **kwargs):
        __protego_used['cloudwatch']['put_anomaly_detector']=['cloudwatch:*']
        for p in ['cloudwatch:*']:
            res = {}
            for nm in ["Stat","MetricName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "PutAnomalyDetector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_dashboard(self, *args, **kwargs):
        __protego_used['cloudwatch']['put_dashboard']=['cloudwatch:PutDashboard']
        for p in ['cloudwatch:PutDashboard']:
            res = {}
            for nm in ["DashboardBody","DashboardName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "PutDashboard", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_insight_rule(self, *args, **kwargs):
        __protego_used['cloudwatch']['put_insight_rule']=['cloudwatch:*']
        for p in ['cloudwatch:*']:
            res = {}
            for nm in ["RuleName","RuleDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "PutInsightRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_metric_alarm(self, *args, **kwargs):
        __protego_used['cloudwatch']['put_metric_alarm']=['cloudwatch:PutMetricAlarm']
        for p in ['cloudwatch:PutMetricAlarm']:
            res = {}
            for nm in ["EvaluationPeriods","AlarmName","ComparisonOperator"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "PutMetricAlarm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_metric_data(self, *args, **kwargs):
        __protego_used['cloudwatch']['put_metric_data']=['cloudwatch:PutMetricData']
        for p in ['cloudwatch:PutMetricData']:
            res = {}
            for nm in ["MetricData","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "PutMetricData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_alarm_state(self, *args, **kwargs):
        __protego_used['cloudwatch']['set_alarm_state']=['cloudwatch:SetAlarmState']
        for p in ['cloudwatch:SetAlarmState']:
            res = {}
            for nm in ["AlarmName","StateValue","StateReason"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "SetAlarmState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['cloudwatch']['tag_resource']=['cloudwatch:TagResource']
        for p in ['cloudwatch:TagResource']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['cloudwatch']['untag_resource']=['cloudwatch:UntagResource']
        for p in ['cloudwatch:UntagResource']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cloudwatch'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class codebuild:
    def __init__(self, region_name=__default_region):
        __protego_used['codebuild']= __protego_used.get('codebuild', {})
        __protego_resource_map['codebuild']=__protego_resource_map.get('codebuild', [])
        self.region = region_name
    def batch_delete_builds(self, *args, **kwargs):
        __protego_used['codebuild']['batch_delete_builds']=['codebuild:BatchDeleteBuilds']
        for p in ['codebuild:BatchDeleteBuilds']:
            res = {}
            for nm in ["ids"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "BatchDeleteBuilds", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_builds(self, *args, **kwargs):
        __protego_used['codebuild']['batch_get_builds']=['codebuild:BatchGetBuilds']
        for p in ['codebuild:BatchGetBuilds']:
            res = {}
            for nm in ["ids"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "BatchGetBuilds", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_projects(self, *args, **kwargs):
        __protego_used['codebuild']['batch_get_projects']=['codebuild:BatchGetProjects']
        for p in ['codebuild:BatchGetProjects']:
            res = {}
            for nm in ["names"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "BatchGetProjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_report_groups(self, *args, **kwargs):
        __protego_used['codebuild']['batch_get_report_groups']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["reportGroupArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "BatchGetReportGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_reports(self, *args, **kwargs):
        __protego_used['codebuild']['batch_get_reports']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["reportArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "BatchGetReports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_project(self, *args, **kwargs):
        __protego_used['codebuild']['create_project']=['codebuild:CreateProject']
        for p in ['codebuild:CreateProject']:
            res = {}
            for nm in ["name","artifacts","environment","serviceRole","source"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "CreateProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_report_group(self, *args, **kwargs):
        __protego_used['codebuild']['create_report_group']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["name","exportConfig","type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "CreateReportGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_webhook(self, *args, **kwargs):
        __protego_used['codebuild']['create_webhook']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "CreateWebhook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_project(self, *args, **kwargs):
        __protego_used['codebuild']['delete_project']=['codebuild:DeleteProject']
        for p in ['codebuild:DeleteProject']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "DeleteProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_report(self, *args, **kwargs):
        __protego_used['codebuild']['delete_report']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "DeleteReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_report_group(self, *args, **kwargs):
        __protego_used['codebuild']['delete_report_group']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "DeleteReportGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resource_policy(self, *args, **kwargs):
        __protego_used['codebuild']['delete_resource_policy']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "DeleteResourcePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_source_credentials(self, *args, **kwargs):
        __protego_used['codebuild']['delete_source_credentials']=['codebuild:DeleteSourceCredentials']
        for p in ['codebuild:DeleteSourceCredentials']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "DeleteSourceCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_webhook(self, *args, **kwargs):
        __protego_used['codebuild']['delete_webhook']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "DeleteWebhook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_test_cases(self, *args, **kwargs):
        __protego_used['codebuild']['describe_test_cases']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["reportArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "DescribeTestCases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource_policy(self, *args, **kwargs):
        __protego_used['codebuild']['get_resource_policy']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "GetResourcePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_source_credentials(self, *args, **kwargs):
        __protego_used['codebuild']['import_source_credentials']=['codebuild:ImportSourceCredentials']
        for p in ['codebuild:ImportSourceCredentials']:
            res = {}
            for nm in ["serverType","authType","token"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "ImportSourceCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def invalidate_project_cache(self, *args, **kwargs):
        __protego_used['codebuild']['invalidate_project_cache']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "InvalidateProjectCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_builds(self, *args, **kwargs):
        __protego_used['codebuild']['list_builds']=['codebuild:ListBuilds']
        for p in ['codebuild:ListBuilds']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "ListBuilds", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_builds_for_project(self, *args, **kwargs):
        __protego_used['codebuild']['list_builds_for_project']=['codebuild:ListBuildsForProject']
        for p in ['codebuild:ListBuildsForProject']:
            res = {}
            for nm in ["projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "ListBuildsForProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_curated_environment_images(self, *args, **kwargs):
        __protego_used['codebuild']['list_curated_environment_images']=['codebuild:ListCuratedEnvironmentImages']
        for p in ['codebuild:ListCuratedEnvironmentImages']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "ListCuratedEnvironmentImages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_projects(self, *args, **kwargs):
        __protego_used['codebuild']['list_projects']=['codebuild:ListProjects']
        for p in ['codebuild:ListProjects']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "ListProjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_report_groups(self, *args, **kwargs):
        __protego_used['codebuild']['list_report_groups']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "ListReportGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_reports(self, *args, **kwargs):
        __protego_used['codebuild']['list_reports']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "ListReports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_reports_for_report_group(self, *args, **kwargs):
        __protego_used['codebuild']['list_reports_for_report_group']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["reportGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "ListReportsForReportGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_shared_projects(self, *args, **kwargs):
        __protego_used['codebuild']['list_shared_projects']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "ListSharedProjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_shared_report_groups(self, *args, **kwargs):
        __protego_used['codebuild']['list_shared_report_groups']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "ListSharedReportGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_source_credentials(self, *args, **kwargs):
        __protego_used['codebuild']['list_source_credentials']=['codebuild:ListSourceCredentials']
        for p in ['codebuild:ListSourceCredentials']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "ListSourceCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_resource_policy(self, *args, **kwargs):
        __protego_used['codebuild']['put_resource_policy']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["resourceArn","policy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "PutResourcePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_build(self, *args, **kwargs):
        __protego_used['codebuild']['start_build']=['codebuild:StartBuild']
        for p in ['codebuild:StartBuild']:
            res = {}
            for nm in ["projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "StartBuild", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_build(self, *args, **kwargs):
        __protego_used['codebuild']['stop_build']=['codebuild:StopBuild']
        for p in ['codebuild:StopBuild']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "StopBuild", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_project(self, *args, **kwargs):
        __protego_used['codebuild']['update_project']=['codebuild:UpdateProject']
        for p in ['codebuild:UpdateProject']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "UpdateProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_report_group(self, *args, **kwargs):
        __protego_used['codebuild']['update_report_group']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "UpdateReportGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_webhook(self, *args, **kwargs):
        __protego_used['codebuild']['update_webhook']=['codebuild:*']
        for p in ['codebuild:*']:
            res = {}
            for nm in ["projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codebuild'].append({'action': "UpdateWebhook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class codecommit:
    def __init__(self, region_name=__default_region):
        __protego_used['codecommit']= __protego_used.get('codecommit', {})
        __protego_resource_map['codecommit']=__protego_resource_map.get('codecommit', [])
        self.region = region_name
    def associate_approval_rule_template_with_repository(self, *args, **kwargs):
        __protego_used['codecommit']['associate_approval_rule_template_with_repository']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["approvalRuleTemplateName","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "AssociateApprovalRuleTemplateWithRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_associate_approval_rule_template_with_repositories(self, *args, **kwargs):
        __protego_used['codecommit']['batch_associate_approval_rule_template_with_repositories']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["repositoryNames","approvalRuleTemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "BatchAssociateApprovalRuleTemplateWithRepositories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_describe_merge_conflicts(self, *args, **kwargs):
        __protego_used['codecommit']['batch_describe_merge_conflicts']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["sourceCommitSpecifier","destinationCommitSpecifier","mergeOption","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "BatchDescribeMergeConflicts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_disassociate_approval_rule_template_from_repositories(self, *args, **kwargs):
        __protego_used['codecommit']['batch_disassociate_approval_rule_template_from_repositories']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["repositoryNames","approvalRuleTemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "BatchDisassociateApprovalRuleTemplateFromRepositories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_commits(self, *args, **kwargs):
        __protego_used['codecommit']['batch_get_commits']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["repositoryName","commitIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "BatchGetCommits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_repositories(self, *args, **kwargs):
        __protego_used['codecommit']['batch_get_repositories']=['codecommit:BatchGetRepositories']
        for p in ['codecommit:BatchGetRepositories']:
            res = {}
            for nm in ["repositoryNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "BatchGetRepositories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_approval_rule_template(self, *args, **kwargs):
        __protego_used['codecommit']['create_approval_rule_template']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["approvalRuleTemplateContent","approvalRuleTemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "CreateApprovalRuleTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_branch(self, *args, **kwargs):
        __protego_used['codecommit']['create_branch']=['codecommit:CreateBranch']
        for p in ['codecommit:CreateBranch']:
            res = {}
            for nm in ["branchName","repositoryName","commitId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "CreateBranch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_commit(self, *args, **kwargs):
        __protego_used['codecommit']['create_commit']=['codecommit:CreateCommit']
        for p in ['codecommit:CreateCommit']:
            res = {}
            for nm in ["branchName","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "CreateCommit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_pull_request(self, *args, **kwargs):
        __protego_used['codecommit']['create_pull_request']=['codecommit:CreatePullRequest']
        for p in ['codecommit:CreatePullRequest']:
            res = {}
            for nm in ["title","targets"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "CreatePullRequest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_pull_request_approval_rule(self, *args, **kwargs):
        __protego_used['codecommit']['create_pull_request_approval_rule']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["approvalRuleContent","pullRequestId","approvalRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "CreatePullRequestApprovalRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_repository(self, *args, **kwargs):
        __protego_used['codecommit']['create_repository']=['codecommit:CreateRepository']
        for p in ['codecommit:CreateRepository']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "CreateRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_unreferenced_merge_commit(self, *args, **kwargs):
        __protego_used['codecommit']['create_unreferenced_merge_commit']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["sourceCommitSpecifier","destinationCommitSpecifier","mergeOption","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "CreateUnreferencedMergeCommit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_approval_rule_template(self, *args, **kwargs):
        __protego_used['codecommit']['delete_approval_rule_template']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["approvalRuleTemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "DeleteApprovalRuleTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_branch(self, *args, **kwargs):
        __protego_used['codecommit']['delete_branch']=['codecommit:DeleteBranch']
        for p in ['codecommit:DeleteBranch']:
            res = {}
            for nm in ["branchName","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "DeleteBranch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_comment_content(self, *args, **kwargs):
        __protego_used['codecommit']['delete_comment_content']=['codecommit:DeleteCommentContent']
        for p in ['codecommit:DeleteCommentContent']:
            res = {}
            for nm in ["commentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "DeleteCommentContent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_file(self, *args, **kwargs):
        __protego_used['codecommit']['delete_file']=['codecommit:DeleteFile']
        for p in ['codecommit:DeleteFile']:
            res = {}
            for nm in ["branchName","repositoryName","parentCommitId","filePath"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "DeleteFile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_pull_request_approval_rule(self, *args, **kwargs):
        __protego_used['codecommit']['delete_pull_request_approval_rule']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["pullRequestId","approvalRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "DeletePullRequestApprovalRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_repository(self, *args, **kwargs):
        __protego_used['codecommit']['delete_repository']=['codecommit:DeleteRepository']
        for p in ['codecommit:DeleteRepository']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "DeleteRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_merge_conflicts(self, *args, **kwargs):
        __protego_used['codecommit']['describe_merge_conflicts']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["mergeOption","destinationCommitSpecifier","repositoryName","filePath","sourceCommitSpecifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "DescribeMergeConflicts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_pull_request_events(self, *args, **kwargs):
        __protego_used['codecommit']['describe_pull_request_events']=['codecommit:DescribePullRequestEvents']
        for p in ['codecommit:DescribePullRequestEvents']:
            res = {}
            for nm in ["pullRequestId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "DescribePullRequestEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_approval_rule_template_from_repository(self, *args, **kwargs):
        __protego_used['codecommit']['disassociate_approval_rule_template_from_repository']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["approvalRuleTemplateName","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "DisassociateApprovalRuleTemplateFromRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def evaluate_pull_request_approval_rules(self, *args, **kwargs):
        __protego_used['codecommit']['evaluate_pull_request_approval_rules']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["pullRequestId","revisionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "EvaluatePullRequestApprovalRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_approval_rule_template(self, *args, **kwargs):
        __protego_used['codecommit']['get_approval_rule_template']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["approvalRuleTemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetApprovalRuleTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_blob(self, *args, **kwargs):
        __protego_used['codecommit']['get_blob']=['codecommit:GetBlob']
        for p in ['codecommit:GetBlob']:
            res = {}
            for nm in ["blobId","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetBlob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_branch(self, *args, **kwargs):
        __protego_used['codecommit']['get_branch']=['codecommit:GetBranch']
        for p in ['codecommit:GetBranch']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetBranch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_comment(self, *args, **kwargs):
        __protego_used['codecommit']['get_comment']=['codecommit:GetComment']
        for p in ['codecommit:GetComment']:
            res = {}
            for nm in ["commentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetComment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_comments_for_compared_commit(self, *args, **kwargs):
        __protego_used['codecommit']['get_comments_for_compared_commit']=['codecommit:GetCommentsForComparedCommit']
        for p in ['codecommit:GetCommentsForComparedCommit']:
            res = {}
            for nm in ["afterCommitId","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetCommentsForComparedCommit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_comments_for_pull_request(self, *args, **kwargs):
        __protego_used['codecommit']['get_comments_for_pull_request']=['codecommit:GetCommentsForPullRequest']
        for p in ['codecommit:GetCommentsForPullRequest']:
            res = {}
            for nm in ["pullRequestId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetCommentsForPullRequest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_commit(self, *args, **kwargs):
        __protego_used['codecommit']['get_commit']=['codecommit:GetCommit']
        for p in ['codecommit:GetCommit']:
            res = {}
            for nm in ["repositoryName","commitId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetCommit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_differences(self, *args, **kwargs):
        __protego_used['codecommit']['get_differences']=['codecommit:GetDifferences']
        for p in ['codecommit:GetDifferences']:
            res = {}
            for nm in ["afterCommitSpecifier","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetDifferences", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_file(self, *args, **kwargs):
        __protego_used['codecommit']['get_file']=['codecommit:GetFile']
        for p in ['codecommit:GetFile']:
            res = {}
            for nm in ["repositoryName","filePath"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetFile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_folder(self, *args, **kwargs):
        __protego_used['codecommit']['get_folder']=['codecommit:GetFolder']
        for p in ['codecommit:GetFolder']:
            res = {}
            for nm in ["repositoryName","folderPath"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetFolder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_merge_commit(self, *args, **kwargs):
        __protego_used['codecommit']['get_merge_commit']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["sourceCommitSpecifier","destinationCommitSpecifier","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetMergeCommit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_merge_conflicts(self, *args, **kwargs):
        __protego_used['codecommit']['get_merge_conflicts']=['codecommit:GetMergeConflicts']
        for p in ['codecommit:GetMergeConflicts']:
            res = {}
            for nm in ["sourceCommitSpecifier","destinationCommitSpecifier","mergeOption","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetMergeConflicts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_merge_options(self, *args, **kwargs):
        __protego_used['codecommit']['get_merge_options']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["sourceCommitSpecifier","destinationCommitSpecifier","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetMergeOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_pull_request(self, *args, **kwargs):
        __protego_used['codecommit']['get_pull_request']=['codecommit:GetPullRequest']
        for p in ['codecommit:GetPullRequest']:
            res = {}
            for nm in ["pullRequestId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetPullRequest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_pull_request_approval_states(self, *args, **kwargs):
        __protego_used['codecommit']['get_pull_request_approval_states']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["pullRequestId","revisionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetPullRequestApprovalStates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_pull_request_override_state(self, *args, **kwargs):
        __protego_used['codecommit']['get_pull_request_override_state']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["pullRequestId","revisionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetPullRequestOverrideState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_repository(self, *args, **kwargs):
        __protego_used['codecommit']['get_repository']=['codecommit:GetRepository']
        for p in ['codecommit:GetRepository']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_repository_triggers(self, *args, **kwargs):
        __protego_used['codecommit']['get_repository_triggers']=['codecommit:GetRepositoryTriggers']
        for p in ['codecommit:GetRepositoryTriggers']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "GetRepositoryTriggers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_approval_rule_templates(self, *args, **kwargs):
        __protego_used['codecommit']['list_approval_rule_templates']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "ListApprovalRuleTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_associated_approval_rule_templates_for_repository(self, *args, **kwargs):
        __protego_used['codecommit']['list_associated_approval_rule_templates_for_repository']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "ListAssociatedApprovalRuleTemplatesForRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_branches(self, *args, **kwargs):
        __protego_used['codecommit']['list_branches']=['codecommit:ListBranches']
        for p in ['codecommit:ListBranches']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "ListBranches", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_pull_requests(self, *args, **kwargs):
        __protego_used['codecommit']['list_pull_requests']=['codecommit:ListPullRequests']
        for p in ['codecommit:ListPullRequests']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "ListPullRequests", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_repositories(self, *args, **kwargs):
        __protego_used['codecommit']['list_repositories']=['codecommit:ListRepositories']
        for p in ['codecommit:ListRepositories']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "ListRepositories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_repositories_for_approval_rule_template(self, *args, **kwargs):
        __protego_used['codecommit']['list_repositories_for_approval_rule_template']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["approvalRuleTemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "ListRepositoriesForApprovalRuleTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['codecommit']['list_tags_for_resource']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def merge_branches_by_fast_forward(self, *args, **kwargs):
        __protego_used['codecommit']['merge_branches_by_fast_forward']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["sourceCommitSpecifier","destinationCommitSpecifier","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "MergeBranchesByFastForward", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def merge_branches_by_squash(self, *args, **kwargs):
        __protego_used['codecommit']['merge_branches_by_squash']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["sourceCommitSpecifier","destinationCommitSpecifier","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "MergeBranchesBySquash", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def merge_branches_by_three_way(self, *args, **kwargs):
        __protego_used['codecommit']['merge_branches_by_three_way']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["sourceCommitSpecifier","destinationCommitSpecifier","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "MergeBranchesByThreeWay", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def merge_pull_request_by_fast_forward(self, *args, **kwargs):
        __protego_used['codecommit']['merge_pull_request_by_fast_forward']=['codecommit:MergePullRequestByFastForward']
        for p in ['codecommit:MergePullRequestByFastForward']:
            res = {}
            for nm in ["pullRequestId","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "MergePullRequestByFastForward", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def merge_pull_request_by_squash(self, *args, **kwargs):
        __protego_used['codecommit']['merge_pull_request_by_squash']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["pullRequestId","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "MergePullRequestBySquash", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def merge_pull_request_by_three_way(self, *args, **kwargs):
        __protego_used['codecommit']['merge_pull_request_by_three_way']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["pullRequestId","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "MergePullRequestByThreeWay", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def override_pull_request_approval_rules(self, *args, **kwargs):
        __protego_used['codecommit']['override_pull_request_approval_rules']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["pullRequestId","revisionId","overrideStatus"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "OverridePullRequestApprovalRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def post_comment_for_compared_commit(self, *args, **kwargs):
        __protego_used['codecommit']['post_comment_for_compared_commit']=['codecommit:PostCommentForComparedCommit']
        for p in ['codecommit:PostCommentForComparedCommit']:
            res = {}
            for nm in ["content","afterCommitId","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "PostCommentForComparedCommit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def post_comment_for_pull_request(self, *args, **kwargs):
        __protego_used['codecommit']['post_comment_for_pull_request']=['codecommit:PostCommentForPullRequest']
        for p in ['codecommit:PostCommentForPullRequest']:
            res = {}
            for nm in ["afterCommitId","pullRequestId","content","repositoryName","beforeCommitId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "PostCommentForPullRequest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def post_comment_reply(self, *args, **kwargs):
        __protego_used['codecommit']['post_comment_reply']=['codecommit:PostCommentReply']
        for p in ['codecommit:PostCommentReply']:
            res = {}
            for nm in ["content","inReplyTo"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "PostCommentReply", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_file(self, *args, **kwargs):
        __protego_used['codecommit']['put_file']=['codecommit:PutFile']
        for p in ['codecommit:PutFile']:
            res = {}
            for nm in ["branchName","repositoryName","fileContent","filePath"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "PutFile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_repository_triggers(self, *args, **kwargs):
        __protego_used['codecommit']['put_repository_triggers']=['codecommit:PutRepositoryTriggers']
        for p in ['codecommit:PutRepositoryTriggers']:
            res = {}
            for nm in ["repositoryName","triggers"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "PutRepositoryTriggers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['codecommit']['tag_resource']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_repository_triggers(self, *args, **kwargs):
        __protego_used['codecommit']['test_repository_triggers']=['codecommit:TestRepositoryTriggers']
        for p in ['codecommit:TestRepositoryTriggers']:
            res = {}
            for nm in ["repositoryName","triggers"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "TestRepositoryTriggers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['codecommit']['untag_resource']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_approval_rule_template_content(self, *args, **kwargs):
        __protego_used['codecommit']['update_approval_rule_template_content']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["newRuleContent","approvalRuleTemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdateApprovalRuleTemplateContent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_approval_rule_template_description(self, *args, **kwargs):
        __protego_used['codecommit']['update_approval_rule_template_description']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["approvalRuleTemplateDescription","approvalRuleTemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdateApprovalRuleTemplateDescription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_approval_rule_template_name(self, *args, **kwargs):
        __protego_used['codecommit']['update_approval_rule_template_name']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["oldApprovalRuleTemplateName","newApprovalRuleTemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdateApprovalRuleTemplateName", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_comment(self, *args, **kwargs):
        __protego_used['codecommit']['update_comment']=['codecommit:UpdateComment']
        for p in ['codecommit:UpdateComment']:
            res = {}
            for nm in ["content","commentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdateComment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_default_branch(self, *args, **kwargs):
        __protego_used['codecommit']['update_default_branch']=['codecommit:UpdateDefaultBranch']
        for p in ['codecommit:UpdateDefaultBranch']:
            res = {}
            for nm in ["defaultBranchName","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdateDefaultBranch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_pull_request_approval_rule_content(self, *args, **kwargs):
        __protego_used['codecommit']['update_pull_request_approval_rule_content']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["pullRequestId","newRuleContent","approvalRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdatePullRequestApprovalRuleContent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_pull_request_approval_state(self, *args, **kwargs):
        __protego_used['codecommit']['update_pull_request_approval_state']=['codecommit:*']
        for p in ['codecommit:*']:
            res = {}
            for nm in ["pullRequestId","revisionId","approvalState"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdatePullRequestApprovalState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_pull_request_description(self, *args, **kwargs):
        __protego_used['codecommit']['update_pull_request_description']=['codecommit:UpdatePullRequestDescription']
        for p in ['codecommit:UpdatePullRequestDescription']:
            res = {}
            for nm in ["pullRequestId","description"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdatePullRequestDescription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_pull_request_status(self, *args, **kwargs):
        __protego_used['codecommit']['update_pull_request_status']=['codecommit:UpdatePullRequestStatus']
        for p in ['codecommit:UpdatePullRequestStatus']:
            res = {}
            for nm in ["pullRequestId","pullRequestStatus"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdatePullRequestStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_pull_request_title(self, *args, **kwargs):
        __protego_used['codecommit']['update_pull_request_title']=['codecommit:UpdatePullRequestTitle']
        for p in ['codecommit:UpdatePullRequestTitle']:
            res = {}
            for nm in ["pullRequestId","title"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdatePullRequestTitle", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_repository_description(self, *args, **kwargs):
        __protego_used['codecommit']['update_repository_description']=['codecommit:UpdateRepositoryDescription']
        for p in ['codecommit:UpdateRepositoryDescription']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdateRepositoryDescription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_repository_name(self, *args, **kwargs):
        __protego_used['codecommit']['update_repository_name']=['codecommit:UpdateRepositoryName']
        for p in ['codecommit:UpdateRepositoryName']:
            res = {}
            for nm in ["newName","oldName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codecommit'].append({'action': "UpdateRepositoryName", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class codedeploy:
    def __init__(self, region_name=__default_region):
        __protego_used['codedeploy']= __protego_used.get('codedeploy', {})
        __protego_resource_map['codedeploy']=__protego_resource_map.get('codedeploy', [])
        self.region = region_name
    def add_tags_to_on_premises_instances(self, *args, **kwargs):
        __protego_used['codedeploy']['add_tags_to_on_premises_instances']=['codedeploy:AddTagsToOnPremisesInstances']
        for p in ['codedeploy:AddTagsToOnPremisesInstances']:
            res = {}
            for nm in ["instanceNames","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "AddTagsToOnPremisesInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_application_revisions(self, *args, **kwargs):
        __protego_used['codedeploy']['batch_get_application_revisions']=['codedeploy:BatchGetApplicationRevisions']
        for p in ['codedeploy:BatchGetApplicationRevisions']:
            res = {}
            for nm in ["applicationName","revisions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "BatchGetApplicationRevisions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_applications(self, *args, **kwargs):
        __protego_used['codedeploy']['batch_get_applications']=['codedeploy:BatchGetApplications']
        for p in ['codedeploy:BatchGetApplications']:
            res = {}
            for nm in ["applicationNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "BatchGetApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_deployment_groups(self, *args, **kwargs):
        __protego_used['codedeploy']['batch_get_deployment_groups']=['codedeploy:BatchGetDeploymentGroups']
        for p in ['codedeploy:BatchGetDeploymentGroups']:
            res = {}
            for nm in ["applicationName","deploymentGroupNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "BatchGetDeploymentGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_deployment_instances(self, *args, **kwargs):
        __protego_used['codedeploy']['batch_get_deployment_instances']=['codedeploy:BatchGetDeploymentInstances']
        for p in ['codedeploy:BatchGetDeploymentInstances']:
            res = {}
            for nm in ["instanceIds","deploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "BatchGetDeploymentInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_deployment_targets(self, *args, **kwargs):
        __protego_used['codedeploy']['batch_get_deployment_targets']=['codedeploy:BatchGetDeploymentTargets']
        for p in ['codedeploy:BatchGetDeploymentTargets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "BatchGetDeploymentTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_deployments(self, *args, **kwargs):
        __protego_used['codedeploy']['batch_get_deployments']=['codedeploy:BatchGetDeployments']
        for p in ['codedeploy:BatchGetDeployments']:
            res = {}
            for nm in ["deploymentIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "BatchGetDeployments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_on_premises_instances(self, *args, **kwargs):
        __protego_used['codedeploy']['batch_get_on_premises_instances']=['codedeploy:BatchGetOnPremisesInstances']
        for p in ['codedeploy:BatchGetOnPremisesInstances']:
            res = {}
            for nm in ["instanceNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "BatchGetOnPremisesInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def continue_deployment(self, *args, **kwargs):
        __protego_used['codedeploy']['continue_deployment']=['codedeploy:ContinueDeployment']
        for p in ['codedeploy:ContinueDeployment']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "ContinueDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_application(self, *args, **kwargs):
        __protego_used['codedeploy']['create_application']=['codedeploy:CreateApplication']
        for p in ['codedeploy:CreateApplication']:
            res = {}
            for nm in ["applicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "CreateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deployment(self, *args, **kwargs):
        __protego_used['codedeploy']['create_deployment']=['codedeploy:CreateDeployment']
        for p in ['codedeploy:CreateDeployment']:
            res = {}
            for nm in ["applicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "CreateDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deployment_config(self, *args, **kwargs):
        __protego_used['codedeploy']['create_deployment_config']=['codedeploy:CreateDeploymentConfig']
        for p in ['codedeploy:CreateDeploymentConfig']:
            res = {}
            for nm in ["deploymentConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "CreateDeploymentConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deployment_group(self, *args, **kwargs):
        __protego_used['codedeploy']['create_deployment_group']=['codedeploy:CreateDeploymentGroup']
        for p in ['codedeploy:CreateDeploymentGroup']:
            res = {}
            for nm in ["applicationName","serviceRoleArn","deploymentGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "CreateDeploymentGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application(self, *args, **kwargs):
        __protego_used['codedeploy']['delete_application']=['codedeploy:DeleteApplication']
        for p in ['codedeploy:DeleteApplication']:
            res = {}
            for nm in ["applicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "DeleteApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_deployment_config(self, *args, **kwargs):
        __protego_used['codedeploy']['delete_deployment_config']=['codedeploy:DeleteDeploymentConfig']
        for p in ['codedeploy:DeleteDeploymentConfig']:
            res = {}
            for nm in ["deploymentConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "DeleteDeploymentConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_deployment_group(self, *args, **kwargs):
        __protego_used['codedeploy']['delete_deployment_group']=['codedeploy:DeleteDeploymentGroup']
        for p in ['codedeploy:DeleteDeploymentGroup']:
            res = {}
            for nm in ["applicationName","deploymentGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "DeleteDeploymentGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_git_hub_account_token(self, *args, **kwargs):
        __protego_used['codedeploy']['delete_git_hub_account_token']=['codedeploy:*']
        for p in ['codedeploy:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "DeleteGitHubAccountToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_on_premises_instance(self, *args, **kwargs):
        __protego_used['codedeploy']['deregister_on_premises_instance']=['codedeploy:DeregisterOnPremisesInstance']
        for p in ['codedeploy:DeregisterOnPremisesInstance']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "DeregisterOnPremisesInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_application(self, *args, **kwargs):
        __protego_used['codedeploy']['get_application']=['codedeploy:GetApplication']
        for p in ['codedeploy:GetApplication']:
            res = {}
            for nm in ["applicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "GetApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_application_revision(self, *args, **kwargs):
        __protego_used['codedeploy']['get_application_revision']=['codedeploy:GetApplicationRevision']
        for p in ['codedeploy:GetApplicationRevision']:
            res = {}
            for nm in ["applicationName","revision"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "GetApplicationRevision", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployment(self, *args, **kwargs):
        __protego_used['codedeploy']['get_deployment']=['codedeploy:GetDeployment']
        for p in ['codedeploy:GetDeployment']:
            res = {}
            for nm in ["deploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "GetDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployment_config(self, *args, **kwargs):
        __protego_used['codedeploy']['get_deployment_config']=['codedeploy:GetDeploymentConfig']
        for p in ['codedeploy:GetDeploymentConfig']:
            res = {}
            for nm in ["deploymentConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "GetDeploymentConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployment_group(self, *args, **kwargs):
        __protego_used['codedeploy']['get_deployment_group']=['codedeploy:GetDeploymentGroup']
        for p in ['codedeploy:GetDeploymentGroup']:
            res = {}
            for nm in ["applicationName","deploymentGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "GetDeploymentGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployment_instance(self, *args, **kwargs):
        __protego_used['codedeploy']['get_deployment_instance']=['codedeploy:GetDeploymentInstance']
        for p in ['codedeploy:GetDeploymentInstance']:
            res = {}
            for nm in ["instanceId","deploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "GetDeploymentInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployment_target(self, *args, **kwargs):
        __protego_used['codedeploy']['get_deployment_target']=['codedeploy:GetDeploymentTarget']
        for p in ['codedeploy:GetDeploymentTarget']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "GetDeploymentTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_on_premises_instance(self, *args, **kwargs):
        __protego_used['codedeploy']['get_on_premises_instance']=['codedeploy:GetOnPremisesInstance']
        for p in ['codedeploy:GetOnPremisesInstance']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "GetOnPremisesInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_application_revisions(self, *args, **kwargs):
        __protego_used['codedeploy']['list_application_revisions']=['codedeploy:ListApplicationRevisions']
        for p in ['codedeploy:ListApplicationRevisions']:
            res = {}
            for nm in ["applicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "ListApplicationRevisions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_applications(self, *args, **kwargs):
        __protego_used['codedeploy']['list_applications']=['codedeploy:ListApplications']
        for p in ['codedeploy:ListApplications']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "ListApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_deployment_configs(self, *args, **kwargs):
        __protego_used['codedeploy']['list_deployment_configs']=['codedeploy:ListDeploymentConfigs']
        for p in ['codedeploy:ListDeploymentConfigs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "ListDeploymentConfigs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_deployment_groups(self, *args, **kwargs):
        __protego_used['codedeploy']['list_deployment_groups']=['codedeploy:ListDeploymentGroups']
        for p in ['codedeploy:ListDeploymentGroups']:
            res = {}
            for nm in ["applicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "ListDeploymentGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_deployment_instances(self, *args, **kwargs):
        __protego_used['codedeploy']['list_deployment_instances']=['codedeploy:ListDeploymentInstances']
        for p in ['codedeploy:ListDeploymentInstances']:
            res = {}
            for nm in ["deploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "ListDeploymentInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_deployment_targets(self, *args, **kwargs):
        __protego_used['codedeploy']['list_deployment_targets']=['codedeploy:ListDeploymentTargets']
        for p in ['codedeploy:ListDeploymentTargets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "ListDeploymentTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_deployments(self, *args, **kwargs):
        __protego_used['codedeploy']['list_deployments']=['codedeploy:ListDeployments']
        for p in ['codedeploy:ListDeployments']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "ListDeployments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_git_hub_account_token_names(self, *args, **kwargs):
        __protego_used['codedeploy']['list_git_hub_account_token_names']=['codedeploy:*']
        for p in ['codedeploy:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "ListGitHubAccountTokenNames", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_on_premises_instances(self, *args, **kwargs):
        __protego_used['codedeploy']['list_on_premises_instances']=['codedeploy:ListOnPremisesInstances']
        for p in ['codedeploy:ListOnPremisesInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "ListOnPremisesInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['codedeploy']['list_tags_for_resource']=['codedeploy:ListTagsForResource']
        for p in ['codedeploy:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_lifecycle_event_hook_execution_status(self, *args, **kwargs):
        __protego_used['codedeploy']['put_lifecycle_event_hook_execution_status']=['codedeploy:*']
        for p in ['codedeploy:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "PutLifecycleEventHookExecutionStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_application_revision(self, *args, **kwargs):
        __protego_used['codedeploy']['register_application_revision']=['codedeploy:RegisterApplicationRevision']
        for p in ['codedeploy:RegisterApplicationRevision']:
            res = {}
            for nm in ["applicationName","revision"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "RegisterApplicationRevision", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_on_premises_instance(self, *args, **kwargs):
        __protego_used['codedeploy']['register_on_premises_instance']=['codedeploy:RegisterOnPremisesInstance']
        for p in ['codedeploy:RegisterOnPremisesInstance']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "RegisterOnPremisesInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_on_premises_instances(self, *args, **kwargs):
        __protego_used['codedeploy']['remove_tags_from_on_premises_instances']=['codedeploy:RemoveTagsFromOnPremisesInstances']
        for p in ['codedeploy:RemoveTagsFromOnPremisesInstances']:
            res = {}
            for nm in ["instanceNames","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "RemoveTagsFromOnPremisesInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def skip_wait_time_for_instance_termination(self, *args, **kwargs):
        __protego_used['codedeploy']['skip_wait_time_for_instance_termination']=['codedeploy:*']
        for p in ['codedeploy:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "SkipWaitTimeForInstanceTermination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_deployment(self, *args, **kwargs):
        __protego_used['codedeploy']['stop_deployment']=['codedeploy:StopDeployment']
        for p in ['codedeploy:StopDeployment']:
            res = {}
            for nm in ["deploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "StopDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['codedeploy']['tag_resource']=['codedeploy:TagResource']
        for p in ['codedeploy:TagResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['codedeploy']['untag_resource']=['codedeploy:UntagResource']
        for p in ['codedeploy:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_application(self, *args, **kwargs):
        __protego_used['codedeploy']['update_application']=['codedeploy:UpdateApplication']
        for p in ['codedeploy:UpdateApplication']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "UpdateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_deployment_group(self, *args, **kwargs):
        __protego_used['codedeploy']['update_deployment_group']=['codedeploy:UpdateDeploymentGroup']
        for p in ['codedeploy:UpdateDeploymentGroup']:
            res = {}
            for nm in ["applicationName","currentDeploymentGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codedeploy'].append({'action': "UpdateDeploymentGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class codeguru_reviewer:
    def __init__(self, region_name=__default_region):
        __protego_used['codeguru-reviewer']= __protego_used.get('codeguru-reviewer', {})
        __protego_resource_map['codeguru-reviewer']=__protego_resource_map.get('codeguru-reviewer', [])
        self.region = region_name
    def associate_repository(self, *args, **kwargs):
        __protego_used['codeguru-reviewer']['associate_repository']=['codeguru-reviewer:*']
        for p in ['codeguru-reviewer:*']:
            res = {}
            for nm in ["Repository"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguru-reviewer'].append({'action': "AssociateRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_repository_association(self, *args, **kwargs):
        __protego_used['codeguru-reviewer']['describe_repository_association']=['codeguru-reviewer:*']
        for p in ['codeguru-reviewer:*']:
            res = {}
            for nm in ["AssociationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguru-reviewer'].append({'action': "DescribeRepositoryAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_repository(self, *args, **kwargs):
        __protego_used['codeguru-reviewer']['disassociate_repository']=['codeguru-reviewer:*']
        for p in ['codeguru-reviewer:*']:
            res = {}
            for nm in ["AssociationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguru-reviewer'].append({'action': "DisassociateRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_repository_associations(self, *args, **kwargs):
        __protego_used['codeguru-reviewer']['list_repository_associations']=['codeguru-reviewer:*']
        for p in ['codeguru-reviewer:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguru-reviewer'].append({'action': "ListRepositoryAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class codeguruprofiler:
    def __init__(self, region_name=__default_region):
        __protego_used['codeguruprofiler']= __protego_used.get('codeguruprofiler', {})
        __protego_resource_map['codeguruprofiler']=__protego_resource_map.get('codeguruprofiler', [])
        self.region = region_name
    def configure_agent(self, *args, **kwargs):
        __protego_used['codeguruprofiler']['configure_agent']=['codeguruprofiler:*']
        for p in ['codeguruprofiler:*']:
            res = {}
            for nm in ["profilingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguruprofiler'].append({'action': "ConfigureAgent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_profiling_group(self, *args, **kwargs):
        __protego_used['codeguruprofiler']['create_profiling_group']=['codeguruprofiler:*']
        for p in ['codeguruprofiler:*']:
            res = {}
            for nm in ["profilingGroupName","clientToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguruprofiler'].append({'action': "CreateProfilingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_profiling_group(self, *args, **kwargs):
        __protego_used['codeguruprofiler']['delete_profiling_group']=['codeguruprofiler:*']
        for p in ['codeguruprofiler:*']:
            res = {}
            for nm in ["profilingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguruprofiler'].append({'action': "DeleteProfilingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_profiling_group(self, *args, **kwargs):
        __protego_used['codeguruprofiler']['describe_profiling_group']=['codeguruprofiler:*']
        for p in ['codeguruprofiler:*']:
            res = {}
            for nm in ["profilingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguruprofiler'].append({'action': "DescribeProfilingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_profile(self, *args, **kwargs):
        __protego_used['codeguruprofiler']['get_profile']=['codeguruprofiler:*']
        for p in ['codeguruprofiler:*']:
            res = {}
            for nm in ["profilingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguruprofiler'].append({'action': "GetProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_profile_times(self, *args, **kwargs):
        __protego_used['codeguruprofiler']['list_profile_times']=['codeguruprofiler:*']
        for p in ['codeguruprofiler:*']:
            res = {}
            for nm in ["profilingGroupName","period","startTime","endTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguruprofiler'].append({'action': "ListProfileTimes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_profiling_groups(self, *args, **kwargs):
        __protego_used['codeguruprofiler']['list_profiling_groups']=['codeguruprofiler:*']
        for p in ['codeguruprofiler:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguruprofiler'].append({'action': "ListProfilingGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def post_agent_profile(self, *args, **kwargs):
        __protego_used['codeguruprofiler']['post_agent_profile']=['codeguruprofiler:*']
        for p in ['codeguruprofiler:*']:
            res = {}
            for nm in ["contentType","profilingGroupName","agentProfile"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguruprofiler'].append({'action': "PostAgentProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_profiling_group(self, *args, **kwargs):
        __protego_used['codeguruprofiler']['update_profiling_group']=['codeguruprofiler:*']
        for p in ['codeguruprofiler:*']:
            res = {}
            for nm in ["profilingGroupName","agentOrchestrationConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codeguruprofiler'].append({'action': "UpdateProfilingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class codepipeline:
    def __init__(self, region_name=__default_region):
        __protego_used['codepipeline']= __protego_used.get('codepipeline', {})
        __protego_resource_map['codepipeline']=__protego_resource_map.get('codepipeline', [])
        self.region = region_name
    def acknowledge_job(self, *args, **kwargs):
        __protego_used['codepipeline']['acknowledge_job']=['codepipeline:AcknowledgeJob']
        for p in ['codepipeline:AcknowledgeJob']:
            res = {}
            for nm in ["jobId","nonce"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "AcknowledgeJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def acknowledge_third_party_job(self, *args, **kwargs):
        __protego_used['codepipeline']['acknowledge_third_party_job']=['codepipeline:AcknowledgeThirdPartyJob']
        for p in ['codepipeline:AcknowledgeThirdPartyJob']:
            res = {}
            for nm in ["jobId","clientToken","nonce"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "AcknowledgeThirdPartyJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_custom_action_type(self, *args, **kwargs):
        __protego_used['codepipeline']['create_custom_action_type']=['codepipeline:CreateCustomActionType']
        for p in ['codepipeline:CreateCustomActionType']:
            res = {}
            for nm in ["provider","version","outputArtifactDetails","category","inputArtifactDetails"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "CreateCustomActionType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_pipeline(self, *args, **kwargs):
        __protego_used['codepipeline']['create_pipeline']=['codepipeline:CreatePipeline']
        for p in ['codepipeline:CreatePipeline']:
            res = {}
            for nm in ["pipeline"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "CreatePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_custom_action_type(self, *args, **kwargs):
        __protego_used['codepipeline']['delete_custom_action_type']=['codepipeline:DeleteCustomActionType']
        for p in ['codepipeline:DeleteCustomActionType']:
            res = {}
            for nm in ["category","provider","version"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "DeleteCustomActionType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_pipeline(self, *args, **kwargs):
        __protego_used['codepipeline']['delete_pipeline']=['codepipeline:DeletePipeline']
        for p in ['codepipeline:DeletePipeline']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "DeletePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_webhook(self, *args, **kwargs):
        __protego_used['codepipeline']['delete_webhook']=['codepipeline:*']
        for p in ['codepipeline:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "DeleteWebhook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_webhook_with_third_party(self, *args, **kwargs):
        __protego_used['codepipeline']['deregister_webhook_with_third_party']=['codepipeline:*']
        for p in ['codepipeline:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "DeregisterWebhookWithThirdParty", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_stage_transition(self, *args, **kwargs):
        __protego_used['codepipeline']['disable_stage_transition']=['codepipeline:DisableStageTransition']
        for p in ['codepipeline:DisableStageTransition']:
            res = {}
            for nm in ["reason","stageName","transitionType","pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "DisableStageTransition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_stage_transition(self, *args, **kwargs):
        __protego_used['codepipeline']['enable_stage_transition']=['codepipeline:EnableStageTransition']
        for p in ['codepipeline:EnableStageTransition']:
            res = {}
            for nm in ["stageName","transitionType","pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "EnableStageTransition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job_details(self, *args, **kwargs):
        __protego_used['codepipeline']['get_job_details']=['codepipeline:GetJobDetails']
        for p in ['codepipeline:GetJobDetails']:
            res = {}
            for nm in ["jobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "GetJobDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_pipeline(self, *args, **kwargs):
        __protego_used['codepipeline']['get_pipeline']=['codepipeline:GetPipeline']
        for p in ['codepipeline:GetPipeline']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "GetPipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_pipeline_execution(self, *args, **kwargs):
        __protego_used['codepipeline']['get_pipeline_execution']=['codepipeline:GetPipelineExecution']
        for p in ['codepipeline:GetPipelineExecution']:
            res = {}
            for nm in ["pipelineExecutionId","pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "GetPipelineExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_pipeline_state(self, *args, **kwargs):
        __protego_used['codepipeline']['get_pipeline_state']=['codepipeline:GetPipelineState']
        for p in ['codepipeline:GetPipelineState']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "GetPipelineState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_third_party_job_details(self, *args, **kwargs):
        __protego_used['codepipeline']['get_third_party_job_details']=['codepipeline:GetThirdPartyJobDetails']
        for p in ['codepipeline:GetThirdPartyJobDetails']:
            res = {}
            for nm in ["jobId","clientToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "GetThirdPartyJobDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_action_executions(self, *args, **kwargs):
        __protego_used['codepipeline']['list_action_executions']=['codepipeline:ListActionExecutions']
        for p in ['codepipeline:ListActionExecutions']:
            res = {}
            for nm in ["pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "ListActionExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_action_types(self, *args, **kwargs):
        __protego_used['codepipeline']['list_action_types']=['codepipeline:ListActionTypes']
        for p in ['codepipeline:ListActionTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "ListActionTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_pipeline_executions(self, *args, **kwargs):
        __protego_used['codepipeline']['list_pipeline_executions']=['codepipeline:ListPipelineExecutions']
        for p in ['codepipeline:ListPipelineExecutions']:
            res = {}
            for nm in ["pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "ListPipelineExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_pipelines(self, *args, **kwargs):
        __protego_used['codepipeline']['list_pipelines']=['codepipeline:ListPipelines']
        for p in ['codepipeline:ListPipelines']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "ListPipelines", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['codepipeline']['list_tags_for_resource']=['codepipeline:ListTagsForResource']
        for p in ['codepipeline:ListTagsForResource']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_webhooks(self, *args, **kwargs):
        __protego_used['codepipeline']['list_webhooks']=['codepipeline:*']
        for p in ['codepipeline:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "ListWebhooks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def poll_for_jobs(self, *args, **kwargs):
        __protego_used['codepipeline']['poll_for_jobs']=['codepipeline:PollForJobs']
        for p in ['codepipeline:PollForJobs']:
            res = {}
            for nm in ["actionTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "PollForJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def poll_for_third_party_jobs(self, *args, **kwargs):
        __protego_used['codepipeline']['poll_for_third_party_jobs']=['codepipeline:PollForThirdPartyJobs']
        for p in ['codepipeline:PollForThirdPartyJobs']:
            res = {}
            for nm in ["actionTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "PollForThirdPartyJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_action_revision(self, *args, **kwargs):
        __protego_used['codepipeline']['put_action_revision']=['codepipeline:PutActionRevision']
        for p in ['codepipeline:PutActionRevision']:
            res = {}
            for nm in ["stageName","actionName","actionRevision","pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "PutActionRevision", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_approval_result(self, *args, **kwargs):
        __protego_used['codepipeline']['put_approval_result']=['codepipeline:PutApprovalResult']
        for p in ['codepipeline:PutApprovalResult']:
            res = {}
            for nm in ["result","actionName","stageName","token","pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "PutApprovalResult", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_job_failure_result(self, *args, **kwargs):
        __protego_used['codepipeline']['put_job_failure_result']=['codepipeline:PutJobFailureResult']
        for p in ['codepipeline:PutJobFailureResult']:
            res = {}
            for nm in ["jobId","failureDetails"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "PutJobFailureResult", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_job_success_result(self, *args, **kwargs):
        __protego_used['codepipeline']['put_job_success_result']=['codepipeline:PutJobSuccessResult']
        for p in ['codepipeline:PutJobSuccessResult']:
            res = {}
            for nm in ["jobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "PutJobSuccessResult", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_third_party_job_failure_result(self, *args, **kwargs):
        __protego_used['codepipeline']['put_third_party_job_failure_result']=['codepipeline:PutThirdPartyJobFailureResult']
        for p in ['codepipeline:PutThirdPartyJobFailureResult']:
            res = {}
            for nm in ["jobId","clientToken","failureDetails"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "PutThirdPartyJobFailureResult", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_third_party_job_success_result(self, *args, **kwargs):
        __protego_used['codepipeline']['put_third_party_job_success_result']=['codepipeline:PutThirdPartyJobSuccessResult']
        for p in ['codepipeline:PutThirdPartyJobSuccessResult']:
            res = {}
            for nm in ["jobId","clientToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "PutThirdPartyJobSuccessResult", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_webhook(self, *args, **kwargs):
        __protego_used['codepipeline']['put_webhook']=['codepipeline:*','codepipeline:*']
        for p in ['codepipeline:*','codepipeline:*']:
            res = {}
            for nm in ["webhook"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "PutWebhook", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_webhook_with_third_party(self, *args, **kwargs):
        __protego_used['codepipeline']['register_webhook_with_third_party']=['codepipeline:*']
        for p in ['codepipeline:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "RegisterWebhookWithThirdParty", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def retry_stage_execution(self, *args, **kwargs):
        __protego_used['codepipeline']['retry_stage_execution']=['codepipeline:RetryStageExecution']
        for p in ['codepipeline:RetryStageExecution']:
            res = {}
            for nm in ["stageName","pipelineExecutionId","retryMode","pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "RetryStageExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_pipeline_execution(self, *args, **kwargs):
        __protego_used['codepipeline']['start_pipeline_execution']=['codepipeline:StartPipelineExecution']
        for p in ['codepipeline:StartPipelineExecution']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "StartPipelineExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['codepipeline']['tag_resource']=['codepipeline:TagResource']
        for p in ['codepipeline:TagResource']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['codepipeline']['untag_resource']=['codepipeline:UntagResource']
        for p in ['codepipeline:UntagResource']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_pipeline(self, *args, **kwargs):
        __protego_used['codepipeline']['update_pipeline']=['codepipeline:UpdatePipeline']
        for p in ['codepipeline:UpdatePipeline']:
            res = {}
            for nm in ["pipeline"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codepipeline'].append({'action': "UpdatePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class codestar:
    def __init__(self, region_name=__default_region):
        __protego_used['codestar']= __protego_used.get('codestar', {})
        __protego_resource_map['codestar']=__protego_resource_map.get('codestar', [])
        self.region = region_name
    def associate_team_member(self, *args, **kwargs):
        __protego_used['codestar']['associate_team_member']=['codestar:AssociateTeamMember']
        for p in ['codestar:AssociateTeamMember']:
            res = {}
            for nm in ["projectRole","userArn","projectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "AssociateTeamMember", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_project(self, *args, **kwargs):
        __protego_used['codestar']['create_project']=['codestar:CreateProject']
        for p in ['codestar:CreateProject']:
            res = {}
            for nm in ["name","id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "CreateProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user_profile(self, *args, **kwargs):
        __protego_used['codestar']['create_user_profile']=['codestar:CreateUserProfile']
        for p in ['codestar:CreateUserProfile']:
            res = {}
            for nm in ["displayName","emailAddress","userArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "CreateUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_project(self, *args, **kwargs):
        __protego_used['codestar']['delete_project']=['codestar:DeleteProject']
        for p in ['codestar:DeleteProject']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "DeleteProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_profile(self, *args, **kwargs):
        __protego_used['codestar']['delete_user_profile']=['codestar:DeleteUserProfile']
        for p in ['codestar:DeleteUserProfile']:
            res = {}
            for nm in ["userArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "DeleteUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_project(self, *args, **kwargs):
        __protego_used['codestar']['describe_project']=['codestar:DescribeProject']
        for p in ['codestar:DescribeProject']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "DescribeProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user_profile(self, *args, **kwargs):
        __protego_used['codestar']['describe_user_profile']=['codestar:DescribeUserProfile']
        for p in ['codestar:DescribeUserProfile']:
            res = {}
            for nm in ["userArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "DescribeUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_team_member(self, *args, **kwargs):
        __protego_used['codestar']['disassociate_team_member']=['codestar:DisassociateTeamMember']
        for p in ['codestar:DisassociateTeamMember']:
            res = {}
            for nm in ["userArn","projectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "DisassociateTeamMember", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_projects(self, *args, **kwargs):
        __protego_used['codestar']['list_projects']=['codestar:ListProjects']
        for p in ['codestar:ListProjects']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "ListProjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resources(self, *args, **kwargs):
        __protego_used['codestar']['list_resources']=['codestar:ListResources']
        for p in ['codestar:ListResources']:
            res = {}
            for nm in ["projectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "ListResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_project(self, *args, **kwargs):
        __protego_used['codestar']['list_tags_for_project']=['codestar:*']
        for p in ['codestar:*']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "ListTagsForProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_team_members(self, *args, **kwargs):
        __protego_used['codestar']['list_team_members']=['codestar:ListTeamMembers']
        for p in ['codestar:ListTeamMembers']:
            res = {}
            for nm in ["projectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "ListTeamMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_user_profiles(self, *args, **kwargs):
        __protego_used['codestar']['list_user_profiles']=['codestar:ListUserProfiles']
        for p in ['codestar:ListUserProfiles']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "ListUserProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_project(self, *args, **kwargs):
        __protego_used['codestar']['tag_project']=['codestar:*']
        for p in ['codestar:*']:
            res = {}
            for nm in ["id","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "TagProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_project(self, *args, **kwargs):
        __protego_used['codestar']['untag_project']=['codestar:*']
        for p in ['codestar:*']:
            res = {}
            for nm in ["id","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "UntagProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_project(self, *args, **kwargs):
        __protego_used['codestar']['update_project']=['codestar:UpdateProject']
        for p in ['codestar:UpdateProject']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "UpdateProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_team_member(self, *args, **kwargs):
        __protego_used['codestar']['update_team_member']=['codestar:UpdateTeamMember']
        for p in ['codestar:UpdateTeamMember']:
            res = {}
            for nm in ["userArn","projectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "UpdateTeamMember", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_profile(self, *args, **kwargs):
        __protego_used['codestar']['update_user_profile']=['codestar:UpdateUserProfile']
        for p in ['codestar:UpdateUserProfile']:
            res = {}
            for nm in ["userArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar'].append({'action': "UpdateUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class codestar_connections:
    def __init__(self, region_name=__default_region):
        __protego_used['codestar-connections']= __protego_used.get('codestar-connections', {})
        __protego_resource_map['codestar-connections']=__protego_resource_map.get('codestar-connections', [])
        self.region = region_name
    def create_connection(self, *args, **kwargs):
        __protego_used['codestar-connections']['create_connection']=['codestar-connections:*']
        for p in ['codestar-connections:*']:
            res = {}
            for nm in ["ProviderType","ConnectionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-connections'].append({'action': "CreateConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_connection(self, *args, **kwargs):
        __protego_used['codestar-connections']['delete_connection']=['codestar-connections:*']
        for p in ['codestar-connections:*']:
            res = {}
            for nm in ["ConnectionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-connections'].append({'action': "DeleteConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_connection(self, *args, **kwargs):
        __protego_used['codestar-connections']['get_connection']=['codestar-connections:*']
        for p in ['codestar-connections:*']:
            res = {}
            for nm in ["ConnectionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-connections'].append({'action': "GetConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_connections(self, *args, **kwargs):
        __protego_used['codestar-connections']['list_connections']=['codestar-connections:*']
        for p in ['codestar-connections:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-connections'].append({'action': "ListConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class codestar_notifications:
    def __init__(self, region_name=__default_region):
        __protego_used['codestar-notifications']= __protego_used.get('codestar-notifications', {})
        __protego_resource_map['codestar-notifications']=__protego_resource_map.get('codestar-notifications', [])
        self.region = region_name
    def create_notification_rule(self, *args, **kwargs):
        __protego_used['codestar-notifications']['create_notification_rule']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in ["Targets","Resource","Name","DetailType","EventTypeIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "CreateNotificationRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_notification_rule(self, *args, **kwargs):
        __protego_used['codestar-notifications']['delete_notification_rule']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "DeleteNotificationRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_target(self, *args, **kwargs):
        __protego_used['codestar-notifications']['delete_target']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in ["TargetAddress"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "DeleteTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_notification_rule(self, *args, **kwargs):
        __protego_used['codestar-notifications']['describe_notification_rule']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "DescribeNotificationRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_event_types(self, *args, **kwargs):
        __protego_used['codestar-notifications']['list_event_types']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "ListEventTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_notification_rules(self, *args, **kwargs):
        __protego_used['codestar-notifications']['list_notification_rules']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "ListNotificationRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['codestar-notifications']['list_tags_for_resource']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_targets(self, *args, **kwargs):
        __protego_used['codestar-notifications']['list_targets']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "ListTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def subscribe(self, *args, **kwargs):
        __protego_used['codestar-notifications']['subscribe']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in ["Arn","Target"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "Subscribe", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['codestar-notifications']['tag_resource']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in ["Arn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unsubscribe(self, *args, **kwargs):
        __protego_used['codestar-notifications']['unsubscribe']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in ["Arn","TargetAddress"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "Unsubscribe", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['codestar-notifications']['untag_resource']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in ["Arn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_notification_rule(self, *args, **kwargs):
        __protego_used['codestar-notifications']['update_notification_rule']=['codestar-notifications:*']
        for p in ['codestar-notifications:*']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['codestar-notifications'].append({'action': "UpdateNotificationRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cognito_identity:
    def __init__(self, region_name=__default_region):
        __protego_used['cognito-identity']= __protego_used.get('cognito-identity', {})
        __protego_resource_map['cognito-identity']=__protego_resource_map.get('cognito-identity', [])
        self.region = region_name
    def create_identity_pool(self, *args, **kwargs):
        __protego_used['cognito-identity']['create_identity_pool']=['cognito-identity:CreateIdentityPool']
        for p in ['cognito-identity:CreateIdentityPool']:
            res = {}
            for nm in ["AllowUnauthenticatedIdentities","IdentityPoolName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "CreateIdentityPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_identities(self, *args, **kwargs):
        __protego_used['cognito-identity']['delete_identities']=['cognito-identity:DeleteIdentities']
        for p in ['cognito-identity:DeleteIdentities']:
            res = {}
            for nm in ["IdentityIdsToDelete"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "DeleteIdentities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_identity_pool(self, *args, **kwargs):
        __protego_used['cognito-identity']['delete_identity_pool']=['cognito-identity:DeleteIdentityPool']
        for p in ['cognito-identity:DeleteIdentityPool']:
            res = {}
            for nm in ["IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "DeleteIdentityPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_identity(self, *args, **kwargs):
        __protego_used['cognito-identity']['describe_identity']=['cognito-identity:DescribeIdentity']
        for p in ['cognito-identity:DescribeIdentity']:
            res = {}
            for nm in ["IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "DescribeIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_identity_pool(self, *args, **kwargs):
        __protego_used['cognito-identity']['describe_identity_pool']=['cognito-identity:DescribeIdentityPool']
        for p in ['cognito-identity:DescribeIdentityPool']:
            res = {}
            for nm in ["IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "DescribeIdentityPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_credentials_for_identity(self, *args, **kwargs):
        __protego_used['cognito-identity']['get_credentials_for_identity']=['cognito-identity:GetCredentialsForIdentity']
        for p in ['cognito-identity:GetCredentialsForIdentity']:
            res = {}
            for nm in ["IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "GetCredentialsForIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_id(self, *args, **kwargs):
        __protego_used['cognito-identity']['get_id']=['cognito-identity:GetId']
        for p in ['cognito-identity:GetId']:
            res = {}
            for nm in ["IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "GetId", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_identity_pool_roles(self, *args, **kwargs):
        __protego_used['cognito-identity']['get_identity_pool_roles']=['cognito-identity:GetIdentityPoolRoles']
        for p in ['cognito-identity:GetIdentityPoolRoles']:
            res = {}
            for nm in ["IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "GetIdentityPoolRoles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_open_id_token(self, *args, **kwargs):
        __protego_used['cognito-identity']['get_open_id_token']=['cognito-identity:GetOpenIdToken']
        for p in ['cognito-identity:GetOpenIdToken']:
            res = {}
            for nm in ["IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "GetOpenIdToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_open_id_token_for_developer_identity(self, *args, **kwargs):
        __protego_used['cognito-identity']['get_open_id_token_for_developer_identity']=['cognito-identity:GetOpenIdTokenForDeveloperIdentity']
        for p in ['cognito-identity:GetOpenIdTokenForDeveloperIdentity']:
            res = {}
            for nm in ["IdentityPoolId","Logins"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "GetOpenIdTokenForDeveloperIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_identities(self, *args, **kwargs):
        __protego_used['cognito-identity']['list_identities']=['cognito-identity:ListIdentities']
        for p in ['cognito-identity:ListIdentities']:
            res = {}
            for nm in ["MaxResults","IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "ListIdentities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_identity_pools(self, *args, **kwargs):
        __protego_used['cognito-identity']['list_identity_pools']=['cognito-identity:ListIdentityPools']
        for p in ['cognito-identity:ListIdentityPools']:
            res = {}
            for nm in ["MaxResults"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "ListIdentityPools", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['cognito-identity']['list_tags_for_resource']=['cognito-identity:ListTagsForResource']
        for p in ['cognito-identity:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def lookup_developer_identity(self, *args, **kwargs):
        __protego_used['cognito-identity']['lookup_developer_identity']=['cognito-identity:LookupDeveloperIdentity']
        for p in ['cognito-identity:LookupDeveloperIdentity']:
            res = {}
            for nm in ["IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "LookupDeveloperIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def merge_developer_identities(self, *args, **kwargs):
        __protego_used['cognito-identity']['merge_developer_identities']=['cognito-identity:MergeDeveloperIdentities']
        for p in ['cognito-identity:MergeDeveloperIdentities']:
            res = {}
            for nm in ["DeveloperProviderName","IdentityPoolId","DestinationUserIdentifier","SourceUserIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "MergeDeveloperIdentities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_identity_pool_roles(self, *args, **kwargs):
        __protego_used['cognito-identity']['set_identity_pool_roles']=['cognito-identity:SetIdentityPoolRoles']
        for p in ['cognito-identity:SetIdentityPoolRoles']:
            res = {}
            for nm in ["Roles","IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "SetIdentityPoolRoles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['cognito-identity']['tag_resource']=['cognito-identity:TagResource']
        for p in ['cognito-identity:TagResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unlink_developer_identity(self, *args, **kwargs):
        __protego_used['cognito-identity']['unlink_developer_identity']=['cognito-identity:UnlinkDeveloperIdentity']
        for p in ['cognito-identity:UnlinkDeveloperIdentity']:
            res = {}
            for nm in ["DeveloperProviderName","IdentityPoolId","DeveloperUserIdentifier","IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "UnlinkDeveloperIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unlink_identity(self, *args, **kwargs):
        __protego_used['cognito-identity']['unlink_identity']=['cognito-identity:UnlinkIdentity']
        for p in ['cognito-identity:UnlinkIdentity']:
            res = {}
            for nm in ["LoginsToRemove","Logins","IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "UnlinkIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['cognito-identity']['untag_resource']=['cognito-identity:UntagResource']
        for p in ['cognito-identity:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_identity_pool(self, *args, **kwargs):
        __protego_used['cognito-identity']['update_identity_pool']=['cognito-identity:UpdateIdentityPool']
        for p in ['cognito-identity:UpdateIdentityPool']:
            res = {}
            for nm in ["IdentityPoolName","IdentityPoolId","AllowUnauthenticatedIdentities"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-identity'].append({'action': "UpdateIdentityPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cognito_idp:
    def __init__(self, region_name=__default_region):
        __protego_used['cognito-idp']= __protego_used.get('cognito-idp', {})
        __protego_resource_map['cognito-idp']=__protego_resource_map.get('cognito-idp', [])
        self.region = region_name
    def add_custom_attributes(self, *args, **kwargs):
        __protego_used['cognito-idp']['add_custom_attributes']=['cognito-idp:AddCustomAttributes']
        for p in ['cognito-idp:AddCustomAttributes']:
            res = {}
            for nm in ["CustomAttributes","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AddCustomAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_add_user_to_group(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_add_user_to_group']=['cognito-idp:AdminAddUserToGroup']
        for p in ['cognito-idp:AdminAddUserToGroup']:
            res = {}
            for nm in ["GroupName","UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminAddUserToGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_confirm_sign_up(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_confirm_sign_up']=['cognito-idp:AdminConfirmSignUp']
        for p in ['cognito-idp:AdminConfirmSignUp']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminConfirmSignUp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_create_user(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_create_user']=['cognito-idp:AdminCreateUser']
        for p in ['cognito-idp:AdminCreateUser']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminCreateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_delete_user(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_delete_user']=['cognito-idp:AdminDeleteUser']
        for p in ['cognito-idp:AdminDeleteUser']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminDeleteUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_delete_user_attributes(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_delete_user_attributes']=['cognito-idp:AdminDeleteUserAttributes']
        for p in ['cognito-idp:AdminDeleteUserAttributes']:
            res = {}
            for nm in ["UserAttributeNames","UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminDeleteUserAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_disable_provider_for_user(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_disable_provider_for_user']=['cognito-idp:AdminDisableProviderForUser']
        for p in ['cognito-idp:AdminDisableProviderForUser']:
            res = {}
            for nm in ["UserPoolId","User"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminDisableProviderForUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_disable_user(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_disable_user']=['cognito-idp:AdminDisableUser']
        for p in ['cognito-idp:AdminDisableUser']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminDisableUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_enable_user(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_enable_user']=['cognito-idp:AdminEnableUser']
        for p in ['cognito-idp:AdminEnableUser']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminEnableUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_forget_device(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_forget_device']=['cognito-idp:AdminForgetDevice']
        for p in ['cognito-idp:AdminForgetDevice']:
            res = {}
            for nm in ["DeviceKey","UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminForgetDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_get_device(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_get_device']=['cognito-idp:AdminGetDevice']
        for p in ['cognito-idp:AdminGetDevice']:
            res = {}
            for nm in ["Username","DeviceKey","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminGetDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_get_user(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_get_user']=['cognito-idp:AdminGetUser']
        for p in ['cognito-idp:AdminGetUser']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminGetUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_initiate_auth(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_initiate_auth']=['cognito-idp:AdminInitiateAuth']
        for p in ['cognito-idp:AdminInitiateAuth']:
            res = {}
            for nm in ["ClientId","UserPoolId","AuthFlow"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminInitiateAuth", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_link_provider_for_user(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_link_provider_for_user']=['cognito-idp:AdminLinkProviderForUser']
        for p in ['cognito-idp:AdminLinkProviderForUser']:
            res = {}
            for nm in ["DestinationUser","SourceUser","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminLinkProviderForUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_list_devices(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_list_devices']=['cognito-idp:AdminListDevices']
        for p in ['cognito-idp:AdminListDevices']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminListDevices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_list_groups_for_user(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_list_groups_for_user']=['cognito-idp:AdminListGroupsForUser']
        for p in ['cognito-idp:AdminListGroupsForUser']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminListGroupsForUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_list_user_auth_events(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_list_user_auth_events']=['cognito-idp:AdminListUserAuthEvents']
        for p in ['cognito-idp:AdminListUserAuthEvents']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminListUserAuthEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_remove_user_from_group(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_remove_user_from_group']=['cognito-idp:AdminRemoveUserFromGroup']
        for p in ['cognito-idp:AdminRemoveUserFromGroup']:
            res = {}
            for nm in ["GroupName","UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminRemoveUserFromGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_reset_user_password(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_reset_user_password']=['cognito-idp:AdminResetUserPassword']
        for p in ['cognito-idp:AdminResetUserPassword']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminResetUserPassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_respond_to_auth_challenge(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_respond_to_auth_challenge']=['cognito-idp:AdminRespondToAuthChallenge']
        for p in ['cognito-idp:AdminRespondToAuthChallenge']:
            res = {}
            for nm in ["ClientId","UserPoolId","ChallengeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminRespondToAuthChallenge", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_set_user_mfa_preference(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_set_user_mfa_preference']=['cognito-idp:AdminSetUserMFAPreference']
        for p in ['cognito-idp:AdminSetUserMFAPreference']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminSetUserMFAPreference", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_set_user_password(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_set_user_password']=['cognito-idp:AdminSetUserPassword']
        for p in ['cognito-idp:AdminSetUserPassword']:
            res = {}
            for nm in ["UserPoolId","Password","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminSetUserPassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_set_user_settings(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_set_user_settings']=['cognito-idp:AdminSetUserSettings']
        for p in ['cognito-idp:AdminSetUserSettings']:
            res = {}
            for nm in ["MFAOptions","UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminSetUserSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_update_auth_event_feedback(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_update_auth_event_feedback']=['cognito-idp:AdminUpdateAuthEventFeedback']
        for p in ['cognito-idp:AdminUpdateAuthEventFeedback']:
            res = {}
            for nm in ["FeedbackValue","UserPoolId","EventId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminUpdateAuthEventFeedback", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_update_device_status(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_update_device_status']=['cognito-idp:AdminUpdateDeviceStatus']
        for p in ['cognito-idp:AdminUpdateDeviceStatus']:
            res = {}
            for nm in ["DeviceKey","UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminUpdateDeviceStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_update_user_attributes(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_update_user_attributes']=['cognito-idp:AdminUpdateUserAttributes']
        for p in ['cognito-idp:AdminUpdateUserAttributes']:
            res = {}
            for nm in ["UserAttributes","UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminUpdateUserAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def admin_user_global_sign_out(self, *args, **kwargs):
        __protego_used['cognito-idp']['admin_user_global_sign_out']=['cognito-idp:AdminUserGlobalSignOut']
        for p in ['cognito-idp:AdminUserGlobalSignOut']:
            res = {}
            for nm in ["UserPoolId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AdminUserGlobalSignOut", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_software_token(self, *args, **kwargs):
        __protego_used['cognito-idp']['associate_software_token']=['cognito-idp:AssociateSoftwareToken']
        for p in ['cognito-idp:AssociateSoftwareToken']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "AssociateSoftwareToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def change_password(self, *args, **kwargs):
        __protego_used['cognito-idp']['change_password']=['cognito-idp:ChangePassword']
        for p in ['cognito-idp:ChangePassword']:
            res = {}
            for nm in ["ProposedPassword","AccessToken","PreviousPassword"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ChangePassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def confirm_device(self, *args, **kwargs):
        __protego_used['cognito-idp']['confirm_device']=['cognito-idp:ConfirmDevice']
        for p in ['cognito-idp:ConfirmDevice']:
            res = {}
            for nm in ["AccessToken","DeviceKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ConfirmDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def confirm_forgot_password(self, *args, **kwargs):
        __protego_used['cognito-idp']['confirm_forgot_password']=['cognito-idp:ConfirmForgotPassword']
        for p in ['cognito-idp:ConfirmForgotPassword']:
            res = {}
            for nm in ["ClientId","Password","ConfirmationCode","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ConfirmForgotPassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def confirm_sign_up(self, *args, **kwargs):
        __protego_used['cognito-idp']['confirm_sign_up']=['cognito-idp:ConfirmSignUp']
        for p in ['cognito-idp:ConfirmSignUp']:
            res = {}
            for nm in ["ClientId","ConfirmationCode","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ConfirmSignUp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_group(self, *args, **kwargs):
        __protego_used['cognito-idp']['create_group']=['cognito-idp:CreateGroup']
        for p in ['cognito-idp:CreateGroup']:
            res = {}
            for nm in ["GroupName","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "CreateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_identity_provider(self, *args, **kwargs):
        __protego_used['cognito-idp']['create_identity_provider']=['cognito-idp:CreateIdentityProvider']
        for p in ['cognito-idp:CreateIdentityProvider']:
            res = {}
            for nm in ["ProviderName","ProviderType","UserPoolId","ProviderDetails"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "CreateIdentityProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_resource_server(self, *args, **kwargs):
        __protego_used['cognito-idp']['create_resource_server']=['cognito-idp:CreateResourceServer']
        for p in ['cognito-idp:CreateResourceServer']:
            res = {}
            for nm in ["UserPoolId","Identifier","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "CreateResourceServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user_import_job(self, *args, **kwargs):
        __protego_used['cognito-idp']['create_user_import_job']=['cognito-idp:CreateUserImportJob']
        for p in ['cognito-idp:CreateUserImportJob']:
            res = {}
            for nm in ["CloudWatchLogsRoleArn","JobName","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "CreateUserImportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user_pool(self, *args, **kwargs):
        __protego_used['cognito-idp']['create_user_pool']=['cognito-idp:CreateUserPool']
        for p in ['cognito-idp:CreateUserPool']:
            res = {}
            for nm in ["PoolName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "CreateUserPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user_pool_client(self, *args, **kwargs):
        __protego_used['cognito-idp']['create_user_pool_client']=['cognito-idp:CreateUserPoolClient']
        for p in ['cognito-idp:CreateUserPoolClient']:
            res = {}
            for nm in ["ClientName","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "CreateUserPoolClient", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user_pool_domain(self, *args, **kwargs):
        __protego_used['cognito-idp']['create_user_pool_domain']=['cognito-idp:CreateUserPoolDomain']
        for p in ['cognito-idp:CreateUserPoolDomain']:
            res = {}
            for nm in ["Domain","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "CreateUserPoolDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_group(self, *args, **kwargs):
        __protego_used['cognito-idp']['delete_group']=['cognito-idp:DeleteGroup']
        for p in ['cognito-idp:DeleteGroup']:
            res = {}
            for nm in ["GroupName","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DeleteGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_identity_provider(self, *args, **kwargs):
        __protego_used['cognito-idp']['delete_identity_provider']=['cognito-idp:DeleteIdentityProvider']
        for p in ['cognito-idp:DeleteIdentityProvider']:
            res = {}
            for nm in ["ProviderName","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DeleteIdentityProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resource_server(self, *args, **kwargs):
        __protego_used['cognito-idp']['delete_resource_server']=['cognito-idp:DeleteResourceServer']
        for p in ['cognito-idp:DeleteResourceServer']:
            res = {}
            for nm in ["UserPoolId","Identifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DeleteResourceServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user(self, *args, **kwargs):
        __protego_used['cognito-idp']['delete_user']=['cognito-idp:DeleteUser']
        for p in ['cognito-idp:DeleteUser']:
            res = {}
            for nm in ["AccessToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DeleteUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_attributes(self, *args, **kwargs):
        __protego_used['cognito-idp']['delete_user_attributes']=['cognito-idp:DeleteUserAttributes']
        for p in ['cognito-idp:DeleteUserAttributes']:
            res = {}
            for nm in ["AccessToken","UserAttributeNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DeleteUserAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_pool(self, *args, **kwargs):
        __protego_used['cognito-idp']['delete_user_pool']=['cognito-idp:DeleteUserPool']
        for p in ['cognito-idp:DeleteUserPool']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DeleteUserPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_pool_client(self, *args, **kwargs):
        __protego_used['cognito-idp']['delete_user_pool_client']=['cognito-idp:DeleteUserPoolClient']
        for p in ['cognito-idp:DeleteUserPoolClient']:
            res = {}
            for nm in ["ClientId","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DeleteUserPoolClient", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_pool_domain(self, *args, **kwargs):
        __protego_used['cognito-idp']['delete_user_pool_domain']=['cognito-idp:DeleteUserPoolDomain']
        for p in ['cognito-idp:DeleteUserPoolDomain']:
            res = {}
            for nm in ["Domain","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DeleteUserPoolDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_identity_provider(self, *args, **kwargs):
        __protego_used['cognito-idp']['describe_identity_provider']=['cognito-idp:DescribeIdentityProvider']
        for p in ['cognito-idp:DescribeIdentityProvider']:
            res = {}
            for nm in ["ProviderName","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DescribeIdentityProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_resource_server(self, *args, **kwargs):
        __protego_used['cognito-idp']['describe_resource_server']=['cognito-idp:DescribeResourceServer']
        for p in ['cognito-idp:DescribeResourceServer']:
            res = {}
            for nm in ["UserPoolId","Identifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DescribeResourceServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_risk_configuration(self, *args, **kwargs):
        __protego_used['cognito-idp']['describe_risk_configuration']=['cognito-idp:DescribeRiskConfiguration']
        for p in ['cognito-idp:DescribeRiskConfiguration']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DescribeRiskConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user_import_job(self, *args, **kwargs):
        __protego_used['cognito-idp']['describe_user_import_job']=['cognito-idp:DescribeUserImportJob']
        for p in ['cognito-idp:DescribeUserImportJob']:
            res = {}
            for nm in ["JobId","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DescribeUserImportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user_pool(self, *args, **kwargs):
        __protego_used['cognito-idp']['describe_user_pool']=['cognito-idp:DescribeUserPool']
        for p in ['cognito-idp:DescribeUserPool']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DescribeUserPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user_pool_client(self, *args, **kwargs):
        __protego_used['cognito-idp']['describe_user_pool_client']=['cognito-idp:DescribeUserPoolClient']
        for p in ['cognito-idp:DescribeUserPoolClient']:
            res = {}
            for nm in ["ClientId","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DescribeUserPoolClient", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user_pool_domain(self, *args, **kwargs):
        __protego_used['cognito-idp']['describe_user_pool_domain']=['cognito-idp:DescribeUserPoolDomain']
        for p in ['cognito-idp:DescribeUserPoolDomain']:
            res = {}
            for nm in ["Domain"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "DescribeUserPoolDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def forget_device(self, *args, **kwargs):
        __protego_used['cognito-idp']['forget_device']=['cognito-idp:ForgetDevice']
        for p in ['cognito-idp:ForgetDevice']:
            res = {}
            for nm in ["DeviceKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ForgetDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def forgot_password(self, *args, **kwargs):
        __protego_used['cognito-idp']['forgot_password']=['cognito-idp:ForgotPassword']
        for p in ['cognito-idp:ForgotPassword']:
            res = {}
            for nm in ["ClientId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ForgotPassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_csv_header(self, *args, **kwargs):
        __protego_used['cognito-idp']['get_csv_header']=['cognito-idp:GetCSVHeader']
        for p in ['cognito-idp:GetCSVHeader']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "GetCSVHeader", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_device(self, *args, **kwargs):
        __protego_used['cognito-idp']['get_device']=['cognito-idp:GetDevice']
        for p in ['cognito-idp:GetDevice']:
            res = {}
            for nm in ["DeviceKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "GetDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_group(self, *args, **kwargs):
        __protego_used['cognito-idp']['get_group']=['cognito-idp:GetGroup']
        for p in ['cognito-idp:GetGroup']:
            res = {}
            for nm in ["GroupName","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "GetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_identity_provider_by_identifier(self, *args, **kwargs):
        __protego_used['cognito-idp']['get_identity_provider_by_identifier']=['cognito-idp:GetIdentityProviderByIdentifier']
        for p in ['cognito-idp:GetIdentityProviderByIdentifier']:
            res = {}
            for nm in ["IdpIdentifier","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "GetIdentityProviderByIdentifier", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_signing_certificate(self, *args, **kwargs):
        __protego_used['cognito-idp']['get_signing_certificate']=['cognito-idp:GetSigningCertificate']
        for p in ['cognito-idp:GetSigningCertificate']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "GetSigningCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ui_customization(self, *args, **kwargs):
        __protego_used['cognito-idp']['get_ui_customization']=['cognito-idp:GetUICustomization']
        for p in ['cognito-idp:GetUICustomization']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "GetUICustomization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_user(self, *args, **kwargs):
        __protego_used['cognito-idp']['get_user']=['cognito-idp:GetUser']
        for p in ['cognito-idp:GetUser']:
            res = {}
            for nm in ["AccessToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "GetUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_user_attribute_verification_code(self, *args, **kwargs):
        __protego_used['cognito-idp']['get_user_attribute_verification_code']=['cognito-idp:GetUserAttributeVerificationCode']
        for p in ['cognito-idp:GetUserAttributeVerificationCode']:
            res = {}
            for nm in ["AttributeName","AccessToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "GetUserAttributeVerificationCode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_user_pool_mfa_config(self, *args, **kwargs):
        __protego_used['cognito-idp']['get_user_pool_mfa_config']=['cognito-idp:GetUserPoolMfaConfig']
        for p in ['cognito-idp:GetUserPoolMfaConfig']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "GetUserPoolMfaConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def global_sign_out(self, *args, **kwargs):
        __protego_used['cognito-idp']['global_sign_out']=['cognito-idp:GlobalSignOut']
        for p in ['cognito-idp:GlobalSignOut']:
            res = {}
            for nm in ["AccessToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "GlobalSignOut", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def initiate_auth(self, *args, **kwargs):
        __protego_used['cognito-idp']['initiate_auth']=['cognito-idp:InitiateAuth']
        for p in ['cognito-idp:InitiateAuth']:
            res = {}
            for nm in ["ClientId","AuthFlow"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "InitiateAuth", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_devices(self, *args, **kwargs):
        __protego_used['cognito-idp']['list_devices']=['cognito-idp:ListDevices']
        for p in ['cognito-idp:ListDevices']:
            res = {}
            for nm in ["AccessToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ListDevices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_groups(self, *args, **kwargs):
        __protego_used['cognito-idp']['list_groups']=['cognito-idp:ListGroups']
        for p in ['cognito-idp:ListGroups']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ListGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_identity_providers(self, *args, **kwargs):
        __protego_used['cognito-idp']['list_identity_providers']=['cognito-idp:ListIdentityProviders']
        for p in ['cognito-idp:ListIdentityProviders']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ListIdentityProviders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resource_servers(self, *args, **kwargs):
        __protego_used['cognito-idp']['list_resource_servers']=['cognito-idp:ListResourceServers']
        for p in ['cognito-idp:ListResourceServers']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ListResourceServers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['cognito-idp']['list_tags_for_resource']=['cognito-idp:ListTagsForResource']
        for p in ['cognito-idp:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_user_import_jobs(self, *args, **kwargs):
        __protego_used['cognito-idp']['list_user_import_jobs']=['cognito-idp:ListUserImportJobs']
        for p in ['cognito-idp:ListUserImportJobs']:
            res = {}
            for nm in ["MaxResults","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ListUserImportJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_user_pool_clients(self, *args, **kwargs):
        __protego_used['cognito-idp']['list_user_pool_clients']=['cognito-idp:ListUserPoolClients']
        for p in ['cognito-idp:ListUserPoolClients']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ListUserPoolClients", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_user_pools(self, *args, **kwargs):
        __protego_used['cognito-idp']['list_user_pools']=['cognito-idp:ListUserPools']
        for p in ['cognito-idp:ListUserPools']:
            res = {}
            for nm in ["MaxResults"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ListUserPools", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_users(self, *args, **kwargs):
        __protego_used['cognito-idp']['list_users']=['cognito-idp:ListUsers']
        for p in ['cognito-idp:ListUsers']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ListUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_users_in_group(self, *args, **kwargs):
        __protego_used['cognito-idp']['list_users_in_group']=['cognito-idp:ListUsersInGroup']
        for p in ['cognito-idp:ListUsersInGroup']:
            res = {}
            for nm in ["GroupName","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ListUsersInGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def resend_confirmation_code(self, *args, **kwargs):
        __protego_used['cognito-idp']['resend_confirmation_code']=['cognito-idp:ResendConfirmationCode']
        for p in ['cognito-idp:ResendConfirmationCode']:
            res = {}
            for nm in ["ClientId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "ResendConfirmationCode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def respond_to_auth_challenge(self, *args, **kwargs):
        __protego_used['cognito-idp']['respond_to_auth_challenge']=['cognito-idp:RespondToAuthChallenge']
        for p in ['cognito-idp:RespondToAuthChallenge']:
            res = {}
            for nm in ["ClientId","ChallengeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "RespondToAuthChallenge", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_risk_configuration(self, *args, **kwargs):
        __protego_used['cognito-idp']['set_risk_configuration']=['cognito-idp:SetRiskConfiguration']
        for p in ['cognito-idp:SetRiskConfiguration']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "SetRiskConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_ui_customization(self, *args, **kwargs):
        __protego_used['cognito-idp']['set_ui_customization']=['cognito-idp:SetUICustomization']
        for p in ['cognito-idp:SetUICustomization']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "SetUICustomization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_user_mfa_preference(self, *args, **kwargs):
        __protego_used['cognito-idp']['set_user_mfa_preference']=['cognito-idp:SetUserMFAPreference']
        for p in ['cognito-idp:SetUserMFAPreference']:
            res = {}
            for nm in ["AccessToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "SetUserMFAPreference", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_user_pool_mfa_config(self, *args, **kwargs):
        __protego_used['cognito-idp']['set_user_pool_mfa_config']=['cognito-idp:SetUserPoolMfaConfig']
        for p in ['cognito-idp:SetUserPoolMfaConfig']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "SetUserPoolMfaConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_user_settings(self, *args, **kwargs):
        __protego_used['cognito-idp']['set_user_settings']=['cognito-idp:SetUserSettings']
        for p in ['cognito-idp:SetUserSettings']:
            res = {}
            for nm in ["MFAOptions","AccessToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "SetUserSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def sign_up(self, *args, **kwargs):
        __protego_used['cognito-idp']['sign_up']=['cognito-idp:SignUp']
        for p in ['cognito-idp:SignUp']:
            res = {}
            for nm in ["ClientId","Password","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "SignUp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_user_import_job(self, *args, **kwargs):
        __protego_used['cognito-idp']['start_user_import_job']=['cognito-idp:StartUserImportJob']
        for p in ['cognito-idp:StartUserImportJob']:
            res = {}
            for nm in ["JobId","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "StartUserImportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_user_import_job(self, *args, **kwargs):
        __protego_used['cognito-idp']['stop_user_import_job']=['cognito-idp:StopUserImportJob']
        for p in ['cognito-idp:StopUserImportJob']:
            res = {}
            for nm in ["JobId","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "StopUserImportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['cognito-idp']['tag_resource']=['cognito-idp:TagResource']
        for p in ['cognito-idp:TagResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['cognito-idp']['untag_resource']=['cognito-idp:UntagResource']
        for p in ['cognito-idp:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_auth_event_feedback(self, *args, **kwargs):
        __protego_used['cognito-idp']['update_auth_event_feedback']=['cognito-idp:UpdateAuthEventFeedback']
        for p in ['cognito-idp:UpdateAuthEventFeedback']:
            res = {}
            for nm in ["UserPoolId","FeedbackToken","FeedbackValue","EventId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "UpdateAuthEventFeedback", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_device_status(self, *args, **kwargs):
        __protego_used['cognito-idp']['update_device_status']=['cognito-idp:UpdateDeviceStatus']
        for p in ['cognito-idp:UpdateDeviceStatus']:
            res = {}
            for nm in ["AccessToken","DeviceKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "UpdateDeviceStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_group(self, *args, **kwargs):
        __protego_used['cognito-idp']['update_group']=['cognito-idp:UpdateGroup']
        for p in ['cognito-idp:UpdateGroup']:
            res = {}
            for nm in ["GroupName","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "UpdateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_identity_provider(self, *args, **kwargs):
        __protego_used['cognito-idp']['update_identity_provider']=['cognito-idp:UpdateIdentityProvider']
        for p in ['cognito-idp:UpdateIdentityProvider']:
            res = {}
            for nm in ["ProviderName","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "UpdateIdentityProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_resource_server(self, *args, **kwargs):
        __protego_used['cognito-idp']['update_resource_server']=['cognito-idp:UpdateResourceServer']
        for p in ['cognito-idp:UpdateResourceServer']:
            res = {}
            for nm in ["UserPoolId","Identifier","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "UpdateResourceServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_attributes(self, *args, **kwargs):
        __protego_used['cognito-idp']['update_user_attributes']=['cognito-idp:UpdateUserAttributes']
        for p in ['cognito-idp:UpdateUserAttributes']:
            res = {}
            for nm in ["AccessToken","UserAttributes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "UpdateUserAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_pool(self, *args, **kwargs):
        __protego_used['cognito-idp']['update_user_pool']=['cognito-idp:UpdateUserPool']
        for p in ['cognito-idp:UpdateUserPool']:
            res = {}
            for nm in ["UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "UpdateUserPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_pool_client(self, *args, **kwargs):
        __protego_used['cognito-idp']['update_user_pool_client']=['cognito-idp:UpdateUserPoolClient']
        for p in ['cognito-idp:UpdateUserPoolClient']:
            res = {}
            for nm in ["ClientId","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "UpdateUserPoolClient", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_pool_domain(self, *args, **kwargs):
        __protego_used['cognito-idp']['update_user_pool_domain']=['cognito-idp:UpdateUserPoolDomain']
        for p in ['cognito-idp:UpdateUserPoolDomain']:
            res = {}
            for nm in ["CustomDomainConfig","Domain","UserPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "UpdateUserPoolDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def verify_software_token(self, *args, **kwargs):
        __protego_used['cognito-idp']['verify_software_token']=['cognito-idp:VerifySoftwareToken']
        for p in ['cognito-idp:VerifySoftwareToken']:
            res = {}
            for nm in ["UserCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "VerifySoftwareToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def verify_user_attribute(self, *args, **kwargs):
        __protego_used['cognito-idp']['verify_user_attribute']=['cognito-idp:VerifyUserAttribute']
        for p in ['cognito-idp:VerifyUserAttribute']:
            res = {}
            for nm in ["AttributeName","AccessToken","Code"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-idp'].append({'action': "VerifyUserAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cognito_sync:
    def __init__(self, region_name=__default_region):
        __protego_used['cognito-sync']= __protego_used.get('cognito-sync', {})
        __protego_resource_map['cognito-sync']=__protego_resource_map.get('cognito-sync', [])
        self.region = region_name
    def bulk_publish(self, *args, **kwargs):
        __protego_used['cognito-sync']['bulk_publish']=['cognito-sync:BulkPublish']
        for p in ['cognito-sync:BulkPublish']:
            res = {}
            for nm in ["IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "BulkPublish", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dataset(self, *args, **kwargs):
        __protego_used['cognito-sync']['delete_dataset']=['cognito-sync:DeleteDataset']
        for p in ['cognito-sync:DeleteDataset']:
            res = {}
            for nm in ["IdentityPoolId","DatasetName","IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "DeleteDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dataset(self, *args, **kwargs):
        __protego_used['cognito-sync']['describe_dataset']=['cognito-sync:DescribeDataset']
        for p in ['cognito-sync:DescribeDataset']:
            res = {}
            for nm in ["IdentityPoolId","DatasetName","IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "DescribeDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_identity_pool_usage(self, *args, **kwargs):
        __protego_used['cognito-sync']['describe_identity_pool_usage']=['cognito-sync:DescribeIdentityPoolUsage']
        for p in ['cognito-sync:DescribeIdentityPoolUsage']:
            res = {}
            for nm in ["IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "DescribeIdentityPoolUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_identity_usage(self, *args, **kwargs):
        __protego_used['cognito-sync']['describe_identity_usage']=['cognito-sync:DescribeIdentityUsage']
        for p in ['cognito-sync:DescribeIdentityUsage']:
            res = {}
            for nm in ["IdentityPoolId","IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "DescribeIdentityUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bulk_publish_details(self, *args, **kwargs):
        __protego_used['cognito-sync']['get_bulk_publish_details']=['cognito-sync:GetBulkPublishDetails']
        for p in ['cognito-sync:GetBulkPublishDetails']:
            res = {}
            for nm in ["IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "GetBulkPublishDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_cognito_events(self, *args, **kwargs):
        __protego_used['cognito-sync']['get_cognito_events']=['cognito-sync:GetCognitoEvents']
        for p in ['cognito-sync:GetCognitoEvents']:
            res = {}
            for nm in ["IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "GetCognitoEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_identity_pool_configuration(self, *args, **kwargs):
        __protego_used['cognito-sync']['get_identity_pool_configuration']=['cognito-sync:GetIdentityPoolConfiguration']
        for p in ['cognito-sync:GetIdentityPoolConfiguration']:
            res = {}
            for nm in ["IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "GetIdentityPoolConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_datasets(self, *args, **kwargs):
        __protego_used['cognito-sync']['list_datasets']=['cognito-sync:ListDatasets']
        for p in ['cognito-sync:ListDatasets']:
            res = {}
            for nm in ["IdentityPoolId","IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "ListDatasets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_identity_pool_usage(self, *args, **kwargs):
        __protego_used['cognito-sync']['list_identity_pool_usage']=['cognito-sync:ListIdentityPoolUsage']
        for p in ['cognito-sync:ListIdentityPoolUsage']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "ListIdentityPoolUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_records(self, *args, **kwargs):
        __protego_used['cognito-sync']['list_records']=['cognito-sync:ListRecords']
        for p in ['cognito-sync:ListRecords']:
            res = {}
            for nm in ["IdentityPoolId","DatasetName","IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "ListRecords", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_device(self, *args, **kwargs):
        __protego_used['cognito-sync']['register_device']=['cognito-sync:RegisterDevice']
        for p in ['cognito-sync:RegisterDevice']:
            res = {}
            for nm in ["IdentityPoolId","Platform","Token","IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "RegisterDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_cognito_events(self, *args, **kwargs):
        __protego_used['cognito-sync']['set_cognito_events']=['cognito-sync:SetCognitoEvents']
        for p in ['cognito-sync:SetCognitoEvents']:
            res = {}
            for nm in ["IdentityPoolId","Events"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "SetCognitoEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_identity_pool_configuration(self, *args, **kwargs):
        __protego_used['cognito-sync']['set_identity_pool_configuration']=['cognito-sync:SetIdentityPoolConfiguration']
        for p in ['cognito-sync:SetIdentityPoolConfiguration']:
            res = {}
            for nm in ["IdentityPoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "SetIdentityPoolConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def subscribe_to_dataset(self, *args, **kwargs):
        __protego_used['cognito-sync']['subscribe_to_dataset']=['cognito-sync:SubscribeToDataset']
        for p in ['cognito-sync:SubscribeToDataset']:
            res = {}
            for nm in ["IdentityPoolId","DatasetName","DeviceId","IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "SubscribeToDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unsubscribe_from_dataset(self, *args, **kwargs):
        __protego_used['cognito-sync']['unsubscribe_from_dataset']=['cognito-sync:UnsubscribeFromDataset']
        for p in ['cognito-sync:UnsubscribeFromDataset']:
            res = {}
            for nm in ["IdentityPoolId","DatasetName","DeviceId","IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "UnsubscribeFromDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_records(self, *args, **kwargs):
        __protego_used['cognito-sync']['update_records']=['cognito-sync:UpdateRecords']
        for p in ['cognito-sync:UpdateRecords']:
            res = {}
            for nm in ["IdentityPoolId","DatasetName","SyncSessionToken","IdentityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cognito-sync'].append({'action': "UpdateRecords", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class comprehend:
    def __init__(self, region_name=__default_region):
        __protego_used['comprehend']= __protego_used.get('comprehend', {})
        __protego_resource_map['comprehend']=__protego_resource_map.get('comprehend', [])
        self.region = region_name
    def batch_detect_dominant_language(self, *args, **kwargs):
        __protego_used['comprehend']['batch_detect_dominant_language']=['comprehend:BatchDetectDominantLanguage']
        for p in ['comprehend:BatchDetectDominantLanguage']:
            res = {}
            for nm in ["TextList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "BatchDetectDominantLanguage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_detect_entities(self, *args, **kwargs):
        __protego_used['comprehend']['batch_detect_entities']=['comprehend:BatchDetectEntities']
        for p in ['comprehend:BatchDetectEntities']:
            res = {}
            for nm in ["LanguageCode","TextList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "BatchDetectEntities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_detect_key_phrases(self, *args, **kwargs):
        __protego_used['comprehend']['batch_detect_key_phrases']=['comprehend:BatchDetectKeyPhrases']
        for p in ['comprehend:BatchDetectKeyPhrases']:
            res = {}
            for nm in ["LanguageCode","TextList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "BatchDetectKeyPhrases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_detect_sentiment(self, *args, **kwargs):
        __protego_used['comprehend']['batch_detect_sentiment']=['comprehend:BatchDetectSentiment']
        for p in ['comprehend:BatchDetectSentiment']:
            res = {}
            for nm in ["LanguageCode","TextList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "BatchDetectSentiment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_detect_syntax(self, *args, **kwargs):
        __protego_used['comprehend']['batch_detect_syntax']=['comprehend:BatchDetectSyntax']
        for p in ['comprehend:BatchDetectSyntax']:
            res = {}
            for nm in ["LanguageCode","TextList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "BatchDetectSyntax", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def classify_document(self, *args, **kwargs):
        __protego_used['comprehend']['classify_document']=['comprehend:*']
        for p in ['comprehend:*']:
            res = {}
            for nm in ["EndpointArn","Text"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "ClassifyDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_document_classifier(self, *args, **kwargs):
        __protego_used['comprehend']['create_document_classifier']=['comprehend:CreateDocumentClassifier']
        for p in ['comprehend:CreateDocumentClassifier']:
            res = {}
            for nm in ["InputDataConfig","DataAccessRoleArn","DocumentClassifierName","LanguageCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "CreateDocumentClassifier", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_endpoint(self, *args, **kwargs):
        __protego_used['comprehend']['create_endpoint']=['comprehend:*']
        for p in ['comprehend:*']:
            res = {}
            for nm in ["DesiredInferenceUnits","EndpointName","ModelArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "CreateEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_entity_recognizer(self, *args, **kwargs):
        __protego_used['comprehend']['create_entity_recognizer']=['comprehend:CreateEntityRecognizer']
        for p in ['comprehend:CreateEntityRecognizer']:
            res = {}
            for nm in ["RecognizerName","InputDataConfig","DataAccessRoleArn","LanguageCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "CreateEntityRecognizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_document_classifier(self, *args, **kwargs):
        __protego_used['comprehend']['delete_document_classifier']=['comprehend:DeleteDocumentClassifier']
        for p in ['comprehend:DeleteDocumentClassifier']:
            res = {}
            for nm in ["DocumentClassifierArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DeleteDocumentClassifier", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_endpoint(self, *args, **kwargs):
        __protego_used['comprehend']['delete_endpoint']=['comprehend:*']
        for p in ['comprehend:*']:
            res = {}
            for nm in ["EndpointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DeleteEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_entity_recognizer(self, *args, **kwargs):
        __protego_used['comprehend']['delete_entity_recognizer']=[':DeleteEntityRecognizer']
        for p in [':DeleteEntityRecognizer']:
            res = {}
            for nm in ["EntityRecognizerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DeleteEntityRecognizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_document_classification_job(self, *args, **kwargs):
        __protego_used['comprehend']['describe_document_classification_job']=['comprehend:DescribeDocumentClassificationJob']
        for p in ['comprehend:DescribeDocumentClassificationJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DescribeDocumentClassificationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_document_classifier(self, *args, **kwargs):
        __protego_used['comprehend']['describe_document_classifier']=['comprehend:DescribeDocumentClassifier']
        for p in ['comprehend:DescribeDocumentClassifier']:
            res = {}
            for nm in ["DocumentClassifierArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DescribeDocumentClassifier", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dominant_language_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['describe_dominant_language_detection_job']=['comprehend:DescribeDominantLanguageDetectionJob']
        for p in ['comprehend:DescribeDominantLanguageDetectionJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DescribeDominantLanguageDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_endpoint(self, *args, **kwargs):
        __protego_used['comprehend']['describe_endpoint']=['comprehend:*']
        for p in ['comprehend:*']:
            res = {}
            for nm in ["EndpointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DescribeEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_entities_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['describe_entities_detection_job']=['comprehend:DescribeEntitiesDetectionJob']
        for p in ['comprehend:DescribeEntitiesDetectionJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DescribeEntitiesDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_entity_recognizer(self, *args, **kwargs):
        __protego_used['comprehend']['describe_entity_recognizer']=['comprehend:DescribeEntityRecognizer']
        for p in ['comprehend:DescribeEntityRecognizer']:
            res = {}
            for nm in ["EntityRecognizerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DescribeEntityRecognizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_key_phrases_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['describe_key_phrases_detection_job']=['comprehend:DescribeKeyPhrasesDetectionJob']
        for p in ['comprehend:DescribeKeyPhrasesDetectionJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DescribeKeyPhrasesDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_sentiment_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['describe_sentiment_detection_job']=['comprehend:DescribeSentimentDetectionJob']
        for p in ['comprehend:DescribeSentimentDetectionJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DescribeSentimentDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_topics_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['describe_topics_detection_job']=['comprehend:DescribeTopicsDetectionJob']
        for p in ['comprehend:DescribeTopicsDetectionJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DescribeTopicsDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_dominant_language(self, *args, **kwargs):
        __protego_used['comprehend']['detect_dominant_language']=['comprehend:DetectDominantLanguage']
        for p in ['comprehend:DetectDominantLanguage']:
            res = {}
            for nm in ["Text"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DetectDominantLanguage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_entities(self, *args, **kwargs):
        __protego_used['comprehend']['detect_entities']=['comprehend:DetectEntities']
        for p in ['comprehend:DetectEntities']:
            res = {}
            for nm in ["Text","LanguageCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DetectEntities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_key_phrases(self, *args, **kwargs):
        __protego_used['comprehend']['detect_key_phrases']=['comprehend:DetectKeyPhrases']
        for p in ['comprehend:DetectKeyPhrases']:
            res = {}
            for nm in ["Text","LanguageCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DetectKeyPhrases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_sentiment(self, *args, **kwargs):
        __protego_used['comprehend']['detect_sentiment']=['comprehend:DetectSentiment']
        for p in ['comprehend:DetectSentiment']:
            res = {}
            for nm in ["Text","LanguageCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DetectSentiment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_syntax(self, *args, **kwargs):
        __protego_used['comprehend']['detect_syntax']=['comprehend:DetectSyntax']
        for p in ['comprehend:DetectSyntax']:
            res = {}
            for nm in ["Text","LanguageCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "DetectSyntax", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_document_classification_jobs(self, *args, **kwargs):
        __protego_used['comprehend']['list_document_classification_jobs']=['comprehend:ListDocumentClassificationJobs']
        for p in ['comprehend:ListDocumentClassificationJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "ListDocumentClassificationJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_document_classifiers(self, *args, **kwargs):
        __protego_used['comprehend']['list_document_classifiers']=['comprehend:ListDocumentClassifiers']
        for p in ['comprehend:ListDocumentClassifiers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "ListDocumentClassifiers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dominant_language_detection_jobs(self, *args, **kwargs):
        __protego_used['comprehend']['list_dominant_language_detection_jobs']=['comprehend:ListDominantLanguageDetectionJobs']
        for p in ['comprehend:ListDominantLanguageDetectionJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "ListDominantLanguageDetectionJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_endpoints(self, *args, **kwargs):
        __protego_used['comprehend']['list_endpoints']=['comprehend:*']
        for p in ['comprehend:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "ListEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_entities_detection_jobs(self, *args, **kwargs):
        __protego_used['comprehend']['list_entities_detection_jobs']=['comprehend:ListEntitiesDetectionJobs']
        for p in ['comprehend:ListEntitiesDetectionJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "ListEntitiesDetectionJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_entity_recognizers(self, *args, **kwargs):
        __protego_used['comprehend']['list_entity_recognizers']=['comprehend:ListEntityRecognizers']
        for p in ['comprehend:ListEntityRecognizers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "ListEntityRecognizers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_key_phrases_detection_jobs(self, *args, **kwargs):
        __protego_used['comprehend']['list_key_phrases_detection_jobs']=['comprehend:ListKeyPhrasesDetectionJobs']
        for p in ['comprehend:ListKeyPhrasesDetectionJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "ListKeyPhrasesDetectionJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_sentiment_detection_jobs(self, *args, **kwargs):
        __protego_used['comprehend']['list_sentiment_detection_jobs']=['comprehend:ListSentimentDetectionJobs']
        for p in ['comprehend:ListSentimentDetectionJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "ListSentimentDetectionJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['comprehend']['list_tags_for_resource']=['comprehend:ListTagsForResource']
        for p in ['comprehend:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_topics_detection_jobs(self, *args, **kwargs):
        __protego_used['comprehend']['list_topics_detection_jobs']=['comprehend:ListTopicsDetectionJobs']
        for p in ['comprehend:ListTopicsDetectionJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "ListTopicsDetectionJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_document_classification_job(self, *args, **kwargs):
        __protego_used['comprehend']['start_document_classification_job']=['comprehend:StartDocumentClassificationJob']
        for p in ['comprehend:StartDocumentClassificationJob']:
            res = {}
            for nm in ["InputDataConfig","DataAccessRoleArn","DocumentClassifierArn","OutputDataConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StartDocumentClassificationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_dominant_language_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['start_dominant_language_detection_job']=['comprehend:StartDominantLanguageDetectionJob']
        for p in ['comprehend:StartDominantLanguageDetectionJob']:
            res = {}
            for nm in ["InputDataConfig","DataAccessRoleArn","OutputDataConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StartDominantLanguageDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_entities_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['start_entities_detection_job']=['comprehend:StartEntitiesDetectionJob']
        for p in ['comprehend:StartEntitiesDetectionJob']:
            res = {}
            for nm in ["InputDataConfig","DataAccessRoleArn","LanguageCode","OutputDataConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StartEntitiesDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_key_phrases_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['start_key_phrases_detection_job']=['comprehend:StartKeyPhrasesDetectionJob']
        for p in ['comprehend:StartKeyPhrasesDetectionJob']:
            res = {}
            for nm in ["InputDataConfig","DataAccessRoleArn","LanguageCode","OutputDataConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StartKeyPhrasesDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_sentiment_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['start_sentiment_detection_job']=['comprehend:StartSentimentDetectionJob']
        for p in ['comprehend:StartSentimentDetectionJob']:
            res = {}
            for nm in ["InputDataConfig","DataAccessRoleArn","LanguageCode","OutputDataConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StartSentimentDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_topics_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['start_topics_detection_job']=['comprehend:StartTopicsDetectionJob']
        for p in ['comprehend:StartTopicsDetectionJob']:
            res = {}
            for nm in ["InputDataConfig","DataAccessRoleArn","OutputDataConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StartTopicsDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_dominant_language_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['stop_dominant_language_detection_job']=['comprehend:StopDominantLanguageDetectionJob']
        for p in ['comprehend:StopDominantLanguageDetectionJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StopDominantLanguageDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_entities_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['stop_entities_detection_job']=['comprehend:StopEntitiesDetectionJob']
        for p in ['comprehend:StopEntitiesDetectionJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StopEntitiesDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_key_phrases_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['stop_key_phrases_detection_job']=['comprehend:StopKeyPhrasesDetectionJob']
        for p in ['comprehend:StopKeyPhrasesDetectionJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StopKeyPhrasesDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_sentiment_detection_job(self, *args, **kwargs):
        __protego_used['comprehend']['stop_sentiment_detection_job']=['comprehend:StopSentimentDetectionJob']
        for p in ['comprehend:StopSentimentDetectionJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StopSentimentDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_training_document_classifier(self, *args, **kwargs):
        __protego_used['comprehend']['stop_training_document_classifier']=['comprehend:StopTrainingDocumentClassifier']
        for p in ['comprehend:StopTrainingDocumentClassifier']:
            res = {}
            for nm in ["DocumentClassifierArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StopTrainingDocumentClassifier", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_training_entity_recognizer(self, *args, **kwargs):
        __protego_used['comprehend']['stop_training_entity_recognizer']=['comprehend:StopTrainingEntityRecognizer']
        for p in ['comprehend:StopTrainingEntityRecognizer']:
            res = {}
            for nm in ["EntityRecognizerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "StopTrainingEntityRecognizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['comprehend']['tag_resource']=['comprehend:TagResource']
        for p in ['comprehend:TagResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['comprehend']['untag_resource']=['comprehend:UntagResource']
        for p in ['comprehend:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_endpoint(self, *args, **kwargs):
        __protego_used['comprehend']['update_endpoint']=['comprehend:*']
        for p in ['comprehend:*']:
            res = {}
            for nm in ["EndpointArn","DesiredInferenceUnits"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehend'].append({'action': "UpdateEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class comprehendmedical:
    def __init__(self, region_name=__default_region):
        __protego_used['comprehendmedical']= __protego_used.get('comprehendmedical', {})
        __protego_resource_map['comprehendmedical']=__protego_resource_map.get('comprehendmedical', [])
        self.region = region_name
    def describe_entities_detection_v2_job(self, *args, **kwargs):
        __protego_used['comprehendmedical']['describe_entities_detection_v2_job']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "DescribeEntitiesDetectionV2Job", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_phi_detection_job(self, *args, **kwargs):
        __protego_used['comprehendmedical']['describe_phi_detection_job']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "DescribePHIDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_entities(self, *args, **kwargs):
        __protego_used['comprehendmedical']['detect_entities']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in ["Text"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "DetectEntities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_entities_v2(self, *args, **kwargs):
        __protego_used['comprehendmedical']['detect_entities_v2']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in ["Text"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "DetectEntitiesV2", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_phi(self, *args, **kwargs):
        __protego_used['comprehendmedical']['detect_phi']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in ["Text"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "DetectPHI", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def infer_icd10_cm(self, *args, **kwargs):
        __protego_used['comprehendmedical']['infer_icd10_cm']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in ["Text"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "InferICD10CM", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def infer_rx_norm(self, *args, **kwargs):
        __protego_used['comprehendmedical']['infer_rx_norm']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in ["Text"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "InferRxNorm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_entities_detection_v2_jobs(self, *args, **kwargs):
        __protego_used['comprehendmedical']['list_entities_detection_v2_jobs']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "ListEntitiesDetectionV2Jobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_phi_detection_jobs(self, *args, **kwargs):
        __protego_used['comprehendmedical']['list_phi_detection_jobs']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "ListPHIDetectionJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_entities_detection_v2_job(self, *args, **kwargs):
        __protego_used['comprehendmedical']['start_entities_detection_v2_job']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in ["InputDataConfig","DataAccessRoleArn","LanguageCode","OutputDataConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "StartEntitiesDetectionV2Job", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_phi_detection_job(self, *args, **kwargs):
        __protego_used['comprehendmedical']['start_phi_detection_job']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in ["InputDataConfig","DataAccessRoleArn","LanguageCode","OutputDataConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "StartPHIDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_entities_detection_v2_job(self, *args, **kwargs):
        __protego_used['comprehendmedical']['stop_entities_detection_v2_job']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "StopEntitiesDetectionV2Job", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_phi_detection_job(self, *args, **kwargs):
        __protego_used['comprehendmedical']['stop_phi_detection_job']=['comprehendmedical:*']
        for p in ['comprehendmedical:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['comprehendmedical'].append({'action': "StopPHIDetectionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class compute_optimizer:
    def __init__(self, region_name=__default_region):
        __protego_used['compute-optimizer']= __protego_used.get('compute-optimizer', {})
        __protego_resource_map['compute-optimizer']=__protego_resource_map.get('compute-optimizer', [])
        self.region = region_name
    def get_auto_scaling_group_recommendations(self, *args, **kwargs):
        __protego_used['compute-optimizer']['get_auto_scaling_group_recommendations']=['compute-optimizer:*']
        for p in ['compute-optimizer:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['compute-optimizer'].append({'action': "GetAutoScalingGroupRecommendations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ec2_instance_recommendations(self, *args, **kwargs):
        __protego_used['compute-optimizer']['get_ec2_instance_recommendations']=['compute-optimizer:*']
        for p in ['compute-optimizer:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['compute-optimizer'].append({'action': "GetEC2InstanceRecommendations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ec2_recommendation_projected_metrics(self, *args, **kwargs):
        __protego_used['compute-optimizer']['get_ec2_recommendation_projected_metrics']=['compute-optimizer:*']
        for p in ['compute-optimizer:*']:
            res = {}
            for nm in ["stat","instanceArn","period","startTime","endTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['compute-optimizer'].append({'action': "GetEC2RecommendationProjectedMetrics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_enrollment_status(self, *args, **kwargs):
        __protego_used['compute-optimizer']['get_enrollment_status']=['compute-optimizer:*']
        for p in ['compute-optimizer:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['compute-optimizer'].append({'action': "GetEnrollmentStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_recommendation_summaries(self, *args, **kwargs):
        __protego_used['compute-optimizer']['get_recommendation_summaries']=['compute-optimizer:*']
        for p in ['compute-optimizer:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['compute-optimizer'].append({'action': "GetRecommendationSummaries", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_enrollment_status(self, *args, **kwargs):
        __protego_used['compute-optimizer']['update_enrollment_status']=['compute-optimizer:*']
        for p in ['compute-optimizer:*']:
            res = {}
            for nm in ["status"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['compute-optimizer'].append({'action': "UpdateEnrollmentStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class config:
    def __init__(self, region_name=__default_region):
        __protego_used['config']= __protego_used.get('config', {})
        __protego_resource_map['config']=__protego_resource_map.get('config', [])
        self.region = region_name
    def batch_get_aggregate_resource_config(self, *args, **kwargs):
        __protego_used['config']['batch_get_aggregate_resource_config']=['config:BatchGetAggregateResourceConfig']
        for p in ['config:BatchGetAggregateResourceConfig']:
            res = {}
            for nm in ["ResourceIdentifiers","ConfigurationAggregatorName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "BatchGetAggregateResourceConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_resource_config(self, *args, **kwargs):
        __protego_used['config']['batch_get_resource_config']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["resourceKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "BatchGetResourceConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_aggregation_authorization(self, *args, **kwargs):
        __protego_used['config']['delete_aggregation_authorization']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["AuthorizedAccountId","AuthorizedAwsRegion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteAggregationAuthorization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_config_rule(self, *args, **kwargs):
        __protego_used['config']['delete_config_rule']=['config:DeleteConfigRule']
        for p in ['config:DeleteConfigRule']:
            res = {}
            for nm in ["ConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteConfigRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_aggregator(self, *args, **kwargs):
        __protego_used['config']['delete_configuration_aggregator']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ConfigurationAggregatorName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteConfigurationAggregator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_recorder(self, *args, **kwargs):
        __protego_used['config']['delete_configuration_recorder']=['config:DeleteConfigurationRecorder']
        for p in ['config:DeleteConfigurationRecorder']:
            res = {}
            for nm in ["ConfigurationRecorderName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteConfigurationRecorder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_conformance_pack(self, *args, **kwargs):
        __protego_used['config']['delete_conformance_pack']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ConformancePackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteConformancePack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_delivery_channel(self, *args, **kwargs):
        __protego_used['config']['delete_delivery_channel']=['config:DeleteDeliveryChannel']
        for p in ['config:DeleteDeliveryChannel']:
            res = {}
            for nm in ["DeliveryChannelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteDeliveryChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_evaluation_results(self, *args, **kwargs):
        __protego_used['config']['delete_evaluation_results']=['config:DeleteEvaluationResults']
        for p in ['config:DeleteEvaluationResults']:
            res = {}
            for nm in ["ConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteEvaluationResults", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_organization_config_rule(self, *args, **kwargs):
        __protego_used['config']['delete_organization_config_rule']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["OrganizationConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteOrganizationConfigRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_organization_conformance_pack(self, *args, **kwargs):
        __protego_used['config']['delete_organization_conformance_pack']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["OrganizationConformancePackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteOrganizationConformancePack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_pending_aggregation_request(self, *args, **kwargs):
        __protego_used['config']['delete_pending_aggregation_request']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["RequesterAccountId","RequesterAwsRegion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeletePendingAggregationRequest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_remediation_configuration(self, *args, **kwargs):
        __protego_used['config']['delete_remediation_configuration']=['config:DeleteRemediationConfiguration']
        for p in ['config:DeleteRemediationConfiguration']:
            res = {}
            for nm in ["ConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteRemediationConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_remediation_exceptions(self, *args, **kwargs):
        __protego_used['config']['delete_remediation_exceptions']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ResourceKeys","ConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteRemediationExceptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resource_config(self, *args, **kwargs):
        __protego_used['config']['delete_resource_config']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ResourceId","ResourceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteResourceConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_retention_configuration(self, *args, **kwargs):
        __protego_used['config']['delete_retention_configuration']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["RetentionConfigurationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeleteRetentionConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deliver_config_snapshot(self, *args, **kwargs):
        __protego_used['config']['deliver_config_snapshot']=['config:DeliverConfigSnapshot']
        for p in ['config:DeliverConfigSnapshot']:
            res = {}
            for nm in ["deliveryChannelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DeliverConfigSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_aggregate_compliance_by_config_rules(self, *args, **kwargs):
        __protego_used['config']['describe_aggregate_compliance_by_config_rules']=['config:DescribeAggregateComplianceByConfigRules']
        for p in ['config:DescribeAggregateComplianceByConfigRules']:
            res = {}
            for nm in ["ConfigurationAggregatorName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeAggregateComplianceByConfigRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_aggregation_authorizations(self, *args, **kwargs):
        __protego_used['config']['describe_aggregation_authorizations']=['config:DescribeAggregationAuthorizations']
        for p in ['config:DescribeAggregationAuthorizations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeAggregationAuthorizations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_compliance_by_config_rule(self, *args, **kwargs):
        __protego_used['config']['describe_compliance_by_config_rule']=['config:DescribeComplianceByConfigRule']
        for p in ['config:DescribeComplianceByConfigRule']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeComplianceByConfigRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_compliance_by_resource(self, *args, **kwargs):
        __protego_used['config']['describe_compliance_by_resource']=['config:DescribeComplianceByResource']
        for p in ['config:DescribeComplianceByResource']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeComplianceByResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_config_rule_evaluation_status(self, *args, **kwargs):
        __protego_used['config']['describe_config_rule_evaluation_status']=['config:DescribeConfigRuleEvaluationStatus']
        for p in ['config:DescribeConfigRuleEvaluationStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeConfigRuleEvaluationStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_config_rules(self, *args, **kwargs):
        __protego_used['config']['describe_config_rules']=['config:DescribeConfigRules']
        for p in ['config:DescribeConfigRules']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeConfigRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configuration_aggregator_sources_status(self, *args, **kwargs):
        __protego_used['config']['describe_configuration_aggregator_sources_status']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ConfigurationAggregatorName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeConfigurationAggregatorSourcesStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configuration_aggregators(self, *args, **kwargs):
        __protego_used['config']['describe_configuration_aggregators']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeConfigurationAggregators", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configuration_recorder_status(self, *args, **kwargs):
        __protego_used['config']['describe_configuration_recorder_status']=['config:DescribeConfigurationRecorderStatus']
        for p in ['config:DescribeConfigurationRecorderStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeConfigurationRecorderStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configuration_recorders(self, *args, **kwargs):
        __protego_used['config']['describe_configuration_recorders']=['config:DescribeConfigurationRecorders']
        for p in ['config:DescribeConfigurationRecorders']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeConfigurationRecorders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_conformance_pack_compliance(self, *args, **kwargs):
        __protego_used['config']['describe_conformance_pack_compliance']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ConformancePackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeConformancePackCompliance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_conformance_pack_status(self, *args, **kwargs):
        __protego_used['config']['describe_conformance_pack_status']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeConformancePackStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_conformance_packs(self, *args, **kwargs):
        __protego_used['config']['describe_conformance_packs']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeConformancePacks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_delivery_channel_status(self, *args, **kwargs):
        __protego_used['config']['describe_delivery_channel_status']=['config:DescribeDeliveryChannelStatus']
        for p in ['config:DescribeDeliveryChannelStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeDeliveryChannelStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_delivery_channels(self, *args, **kwargs):
        __protego_used['config']['describe_delivery_channels']=['config:DescribeDeliveryChannels']
        for p in ['config:DescribeDeliveryChannels']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeDeliveryChannels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_organization_config_rule_statuses(self, *args, **kwargs):
        __protego_used['config']['describe_organization_config_rule_statuses']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeOrganizationConfigRuleStatuses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_organization_config_rules(self, *args, **kwargs):
        __protego_used['config']['describe_organization_config_rules']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeOrganizationConfigRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_organization_conformance_pack_statuses(self, *args, **kwargs):
        __protego_used['config']['describe_organization_conformance_pack_statuses']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeOrganizationConformancePackStatuses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_organization_conformance_packs(self, *args, **kwargs):
        __protego_used['config']['describe_organization_conformance_packs']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeOrganizationConformancePacks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_pending_aggregation_requests(self, *args, **kwargs):
        __protego_used['config']['describe_pending_aggregation_requests']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribePendingAggregationRequests", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_remediation_configurations(self, *args, **kwargs):
        __protego_used['config']['describe_remediation_configurations']=['config:DescribeRemediationConfigurations']
        for p in ['config:DescribeRemediationConfigurations']:
            res = {}
            for nm in ["ConfigRuleNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeRemediationConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_remediation_exceptions(self, *args, **kwargs):
        __protego_used['config']['describe_remediation_exceptions']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeRemediationExceptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_remediation_execution_status(self, *args, **kwargs):
        __protego_used['config']['describe_remediation_execution_status']=['config:DescribeRemediationExecutionStatus']
        for p in ['config:DescribeRemediationExecutionStatus']:
            res = {}
            for nm in ["ConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeRemediationExecutionStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_retention_configurations(self, *args, **kwargs):
        __protego_used['config']['describe_retention_configurations']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "DescribeRetentionConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_aggregate_compliance_details_by_config_rule(self, *args, **kwargs):
        __protego_used['config']['get_aggregate_compliance_details_by_config_rule']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["AccountId","AwsRegion","ConfigRuleName","ConfigurationAggregatorName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetAggregateComplianceDetailsByConfigRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_aggregate_config_rule_compliance_summary(self, *args, **kwargs):
        __protego_used['config']['get_aggregate_config_rule_compliance_summary']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ConfigurationAggregatorName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetAggregateConfigRuleComplianceSummary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_aggregate_discovered_resource_counts(self, *args, **kwargs):
        __protego_used['config']['get_aggregate_discovered_resource_counts']=['config:GetAggregateDiscoveredResourceCounts']
        for p in ['config:GetAggregateDiscoveredResourceCounts']:
            res = {}
            for nm in ["ConfigurationAggregatorName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetAggregateDiscoveredResourceCounts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_aggregate_resource_config(self, *args, **kwargs):
        __protego_used['config']['get_aggregate_resource_config']=['config:GetAggregateResourceConfig']
        for p in ['config:GetAggregateResourceConfig']:
            res = {}
            for nm in ["ResourceIdentifier","ConfigurationAggregatorName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetAggregateResourceConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_compliance_details_by_config_rule(self, *args, **kwargs):
        __protego_used['config']['get_compliance_details_by_config_rule']=['config:GetComplianceDetailsByConfigRule']
        for p in ['config:GetComplianceDetailsByConfigRule']:
            res = {}
            for nm in ["ConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetComplianceDetailsByConfigRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_compliance_details_by_resource(self, *args, **kwargs):
        __protego_used['config']['get_compliance_details_by_resource']=['config:GetComplianceDetailsByResource']
        for p in ['config:GetComplianceDetailsByResource']:
            res = {}
            for nm in ["ResourceId","ResourceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetComplianceDetailsByResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_compliance_summary_by_config_rule(self, *args, **kwargs):
        __protego_used['config']['get_compliance_summary_by_config_rule']=['config:GetComplianceSummaryByConfigRule']
        for p in ['config:GetComplianceSummaryByConfigRule']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetComplianceSummaryByConfigRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_compliance_summary_by_resource_type(self, *args, **kwargs):
        __protego_used['config']['get_compliance_summary_by_resource_type']=['config:GetComplianceSummaryByResourceType']
        for p in ['config:GetComplianceSummaryByResourceType']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetComplianceSummaryByResourceType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_conformance_pack_compliance_details(self, *args, **kwargs):
        __protego_used['config']['get_conformance_pack_compliance_details']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ConformancePackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetConformancePackComplianceDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_conformance_pack_compliance_summary(self, *args, **kwargs):
        __protego_used['config']['get_conformance_pack_compliance_summary']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ConformancePackNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetConformancePackComplianceSummary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_discovered_resource_counts(self, *args, **kwargs):
        __protego_used['config']['get_discovered_resource_counts']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetDiscoveredResourceCounts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_organization_config_rule_detailed_status(self, *args, **kwargs):
        __protego_used['config']['get_organization_config_rule_detailed_status']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["OrganizationConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetOrganizationConfigRuleDetailedStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_organization_conformance_pack_detailed_status(self, *args, **kwargs):
        __protego_used['config']['get_organization_conformance_pack_detailed_status']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["OrganizationConformancePackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetOrganizationConformancePackDetailedStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource_config_history(self, *args, **kwargs):
        __protego_used['config']['get_resource_config_history']=['config:GetResourceConfigHistory']
        for p in ['config:GetResourceConfigHistory']:
            res = {}
            for nm in ["resourceId","resourceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "GetResourceConfigHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_aggregate_discovered_resources(self, *args, **kwargs):
        __protego_used['config']['list_aggregate_discovered_resources']=['config:ListAggregateDiscoveredResources']
        for p in ['config:ListAggregateDiscoveredResources']:
            res = {}
            for nm in ["ResourceType","ConfigurationAggregatorName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "ListAggregateDiscoveredResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_discovered_resources(self, *args, **kwargs):
        __protego_used['config']['list_discovered_resources']=['config:ListDiscoveredResources']
        for p in ['config:ListDiscoveredResources']:
            res = {}
            for nm in ["resourceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "ListDiscoveredResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['config']['list_tags_for_resource']=['config:ListTagsForResource']
        for p in ['config:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_aggregation_authorization(self, *args, **kwargs):
        __protego_used['config']['put_aggregation_authorization']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["AuthorizedAccountId","AuthorizedAwsRegion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutAggregationAuthorization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_config_rule(self, *args, **kwargs):
        __protego_used['config']['put_config_rule']=['config:PutConfigRule']
        for p in ['config:PutConfigRule']:
            res = {}
            for nm in ["ConfigRule"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutConfigRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_aggregator(self, *args, **kwargs):
        __protego_used['config']['put_configuration_aggregator']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ConfigurationAggregatorName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutConfigurationAggregator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_recorder(self, *args, **kwargs):
        __protego_used['config']['put_configuration_recorder']=['config:PutConfigurationRecorder']
        for p in ['config:PutConfigurationRecorder']:
            res = {}
            for nm in ["ConfigurationRecorder"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutConfigurationRecorder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_conformance_pack(self, *args, **kwargs):
        __protego_used['config']['put_conformance_pack']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ConformancePackName","DeliveryS3Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutConformancePack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_delivery_channel(self, *args, **kwargs):
        __protego_used['config']['put_delivery_channel']=['config:PutDeliveryChannel']
        for p in ['config:PutDeliveryChannel']:
            res = {}
            for nm in ["DeliveryChannel"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutDeliveryChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_evaluations(self, *args, **kwargs):
        __protego_used['config']['put_evaluations']=['config:PutEvaluations']
        for p in ['config:PutEvaluations']:
            res = {}
            for nm in ["ResultToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutEvaluations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_organization_config_rule(self, *args, **kwargs):
        __protego_used['config']['put_organization_config_rule']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["OrganizationConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutOrganizationConfigRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_organization_conformance_pack(self, *args, **kwargs):
        __protego_used['config']['put_organization_conformance_pack']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["DeliveryS3Bucket","OrganizationConformancePackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutOrganizationConformancePack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_remediation_configurations(self, *args, **kwargs):
        __protego_used['config']['put_remediation_configurations']=['config:PutRemediationConfigurations']
        for p in ['config:PutRemediationConfigurations']:
            res = {}
            for nm in ["RemediationConfigurations"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutRemediationConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_remediation_exceptions(self, *args, **kwargs):
        __protego_used['config']['put_remediation_exceptions']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["ResourceKeys","ConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutRemediationExceptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_resource_config(self, *args, **kwargs):
        __protego_used['config']['put_resource_config']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["SchemaVersionId","ResourceId","ResourceType","Configuration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutResourceConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_retention_configuration(self, *args, **kwargs):
        __protego_used['config']['put_retention_configuration']=['config:*']
        for p in ['config:*']:
            res = {}
            for nm in ["RetentionPeriodInDays"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "PutRetentionConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def select_resource_config(self, *args, **kwargs):
        __protego_used['config']['select_resource_config']=['config:SelectResourceConfig']
        for p in ['config:SelectResourceConfig']:
            res = {}
            for nm in ["Expression"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "SelectResourceConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_config_rules_evaluation(self, *args, **kwargs):
        __protego_used['config']['start_config_rules_evaluation']=['config:StartConfigRulesEvaluation']
        for p in ['config:StartConfigRulesEvaluation']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "StartConfigRulesEvaluation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_configuration_recorder(self, *args, **kwargs):
        __protego_used['config']['start_configuration_recorder']=['config:StartConfigurationRecorder']
        for p in ['config:StartConfigurationRecorder']:
            res = {}
            for nm in ["ConfigurationRecorderName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "StartConfigurationRecorder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_remediation_execution(self, *args, **kwargs):
        __protego_used['config']['start_remediation_execution']=['config:StartRemediationExecution']
        for p in ['config:StartRemediationExecution']:
            res = {}
            for nm in ["ResourceKeys","ConfigRuleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "StartRemediationExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_configuration_recorder(self, *args, **kwargs):
        __protego_used['config']['stop_configuration_recorder']=['config:StopConfigurationRecorder']
        for p in ['config:StopConfigurationRecorder']:
            res = {}
            for nm in ["ConfigurationRecorderName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "StopConfigurationRecorder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['config']['tag_resource']=['config:TagResource']
        for p in ['config:TagResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['config']['untag_resource']=['config:UntagResource']
        for p in ['config:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['config'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class connect:
    def __init__(self, region_name=__default_region):
        __protego_used['connect']= __protego_used.get('connect', {})
        __protego_resource_map['connect']=__protego_resource_map.get('connect', [])
        self.region = region_name
    def create_user(self, *args, **kwargs):
        __protego_used['connect']['create_user']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InstanceId","RoutingProfileId","PhoneConfig","SecurityProfileIds","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "CreateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user(self, *args, **kwargs):
        __protego_used['connect']['delete_user']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["UserId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "DeleteUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user(self, *args, **kwargs):
        __protego_used['connect']['describe_user']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["UserId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "DescribeUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user_hierarchy_group(self, *args, **kwargs):
        __protego_used['connect']['describe_user_hierarchy_group']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["HierarchyGroupId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "DescribeUserHierarchyGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user_hierarchy_structure(self, *args, **kwargs):
        __protego_used['connect']['describe_user_hierarchy_structure']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "DescribeUserHierarchyStructure", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_contact_attributes(self, *args, **kwargs):
        __protego_used['connect']['get_contact_attributes']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InitialContactId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "GetContactAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_current_metric_data(self, *args, **kwargs):
        __protego_used['connect']['get_current_metric_data']=['connect:GetCurrentMetricData']
        for p in ['connect:GetCurrentMetricData']:
            res = {}
            for nm in ["CurrentMetrics","InstanceId","Filters"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "GetCurrentMetricData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_federation_token(self, *args, **kwargs):
        __protego_used['connect']['get_federation_token']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "GetFederationToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_metric_data(self, *args, **kwargs):
        __protego_used['connect']['get_metric_data']=['connect:GetMetricData']
        for p in ['connect:GetMetricData']:
            res = {}
            for nm in ["InstanceId","HistoricalMetrics","EndTime","StartTime","Filters"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "GetMetricData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_contact_flows(self, *args, **kwargs):
        __protego_used['connect']['list_contact_flows']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "ListContactFlows", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_hours_of_operations(self, *args, **kwargs):
        __protego_used['connect']['list_hours_of_operations']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "ListHoursOfOperations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_phone_numbers(self, *args, **kwargs):
        __protego_used['connect']['list_phone_numbers']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "ListPhoneNumbers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_queues(self, *args, **kwargs):
        __protego_used['connect']['list_queues']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "ListQueues", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_routing_profiles(self, *args, **kwargs):
        __protego_used['connect']['list_routing_profiles']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "ListRoutingProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_security_profiles(self, *args, **kwargs):
        __protego_used['connect']['list_security_profiles']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "ListSecurityProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['connect']['list_tags_for_resource']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_user_hierarchy_groups(self, *args, **kwargs):
        __protego_used['connect']['list_user_hierarchy_groups']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "ListUserHierarchyGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_users(self, *args, **kwargs):
        __protego_used['connect']['list_users']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "ListUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_chat_contact(self, *args, **kwargs):
        __protego_used['connect']['start_chat_contact']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["ContactFlowId","ParticipantDetails","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "StartChatContact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_outbound_voice_contact(self, *args, **kwargs):
        __protego_used['connect']['start_outbound_voice_contact']=['connect:StartOutboundVoiceContact']
        for p in ['connect:StartOutboundVoiceContact']:
            res = {}
            for nm in ["ContactFlowId","InstanceId","DestinationPhoneNumber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "StartOutboundVoiceContact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_contact(self, *args, **kwargs):
        __protego_used['connect']['stop_contact']=['connect:StopContact']
        for p in ['connect:StopContact']:
            res = {}
            for nm in ["InstanceId","ContactId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "StopContact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['connect']['tag_resource']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['connect']['untag_resource']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_contact_attributes(self, *args, **kwargs):
        __protego_used['connect']['update_contact_attributes']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["InitialContactId","Attributes","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "UpdateContactAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_hierarchy(self, *args, **kwargs):
        __protego_used['connect']['update_user_hierarchy']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["UserId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "UpdateUserHierarchy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_identity_info(self, *args, **kwargs):
        __protego_used['connect']['update_user_identity_info']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["UserId","IdentityInfo","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "UpdateUserIdentityInfo", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_phone_config(self, *args, **kwargs):
        __protego_used['connect']['update_user_phone_config']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["PhoneConfig","InstanceId","UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "UpdateUserPhoneConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_routing_profile(self, *args, **kwargs):
        __protego_used['connect']['update_user_routing_profile']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["UserId","RoutingProfileId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "UpdateUserRoutingProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_security_profiles(self, *args, **kwargs):
        __protego_used['connect']['update_user_security_profiles']=['connect:*']
        for p in ['connect:*']:
            res = {}
            for nm in ["UserId","SecurityProfileIds","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connect'].append({'action': "UpdateUserSecurityProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class connectparticipant:
    def __init__(self, region_name=__default_region):
        __protego_used['connectparticipant']= __protego_used.get('connectparticipant', {})
        __protego_resource_map['connectparticipant']=__protego_resource_map.get('connectparticipant', [])
        self.region = region_name
    def create_participant_connection(self, *args, **kwargs):
        __protego_used['connectparticipant']['create_participant_connection']=['connectparticipant:*']
        for p in ['connectparticipant:*']:
            res = {}
            for nm in ["ParticipantToken","Type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connectparticipant'].append({'action': "CreateParticipantConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disconnect_participant(self, *args, **kwargs):
        __protego_used['connectparticipant']['disconnect_participant']=['connectparticipant:*']
        for p in ['connectparticipant:*']:
            res = {}
            for nm in ["ConnectionToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connectparticipant'].append({'action': "DisconnectParticipant", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_transcript(self, *args, **kwargs):
        __protego_used['connectparticipant']['get_transcript']=['connectparticipant:*']
        for p in ['connectparticipant:*']:
            res = {}
            for nm in ["ConnectionToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connectparticipant'].append({'action': "GetTranscript", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_event(self, *args, **kwargs):
        __protego_used['connectparticipant']['send_event']=['connectparticipant:*']
        for p in ['connectparticipant:*']:
            res = {}
            for nm in ["ConnectionToken","ContentType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connectparticipant'].append({'action': "SendEvent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_message(self, *args, **kwargs):
        __protego_used['connectparticipant']['send_message']=['connectparticipant:*']
        for p in ['connectparticipant:*']:
            res = {}
            for nm in ["Content","ConnectionToken","ContentType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['connectparticipant'].append({'action': "SendMessage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class cur:
    def __init__(self, region_name=__default_region):
        __protego_used['cur']= __protego_used.get('cur', {})
        __protego_resource_map['cur']=__protego_resource_map.get('cur', [])
        self.region = region_name
    def delete_report_definition(self, *args, **kwargs):
        __protego_used['cur']['delete_report_definition']=['cur:DeleteReportDefinition']
        for p in ['cur:DeleteReportDefinition']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cur'].append({'action': "DeleteReportDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_report_definitions(self, *args, **kwargs):
        __protego_used['cur']['describe_report_definitions']=['cur:DescribeReportDefinitions']
        for p in ['cur:DescribeReportDefinitions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cur'].append({'action': "DescribeReportDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_report_definition(self, *args, **kwargs):
        __protego_used['cur']['modify_report_definition']=['cur:*']
        for p in ['cur:*']:
            res = {}
            for nm in ["ReportName","ReportDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cur'].append({'action': "ModifyReportDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_report_definition(self, *args, **kwargs):
        __protego_used['cur']['put_report_definition']=['cur:PutReportDefinition']
        for p in ['cur:PutReportDefinition']:
            res = {}
            for nm in ["ReportDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['cur'].append({'action': "PutReportDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class dataexchange:
    def __init__(self, region_name=__default_region):
        __protego_used['dataexchange']= __protego_used.get('dataexchange', {})
        __protego_resource_map['dataexchange']=__protego_resource_map.get('dataexchange', [])
        self.region = region_name
    def cancel_job(self, *args, **kwargs):
        __protego_used['dataexchange']['cancel_job']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "CancelJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_data_set(self, *args, **kwargs):
        __protego_used['dataexchange']['create_data_set']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["Description","AssetType","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "CreateDataSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_job(self, *args, **kwargs):
        __protego_used['dataexchange']['create_job']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["Details","Type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "CreateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_revision(self, *args, **kwargs):
        __protego_used['dataexchange']['create_revision']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "CreateRevision", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_asset(self, *args, **kwargs):
        __protego_used['dataexchange']['delete_asset']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId","RevisionId","AssetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "DeleteAsset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_data_set(self, *args, **kwargs):
        __protego_used['dataexchange']['delete_data_set']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "DeleteDataSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_revision(self, *args, **kwargs):
        __protego_used['dataexchange']['delete_revision']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId","RevisionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "DeleteRevision", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_asset(self, *args, **kwargs):
        __protego_used['dataexchange']['get_asset']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId","RevisionId","AssetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "GetAsset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_data_set(self, *args, **kwargs):
        __protego_used['dataexchange']['get_data_set']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "GetDataSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job(self, *args, **kwargs):
        __protego_used['dataexchange']['get_job']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "GetJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_revision(self, *args, **kwargs):
        __protego_used['dataexchange']['get_revision']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId","RevisionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "GetRevision", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_data_set_revisions(self, *args, **kwargs):
        __protego_used['dataexchange']['list_data_set_revisions']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "ListDataSetRevisions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_data_sets(self, *args, **kwargs):
        __protego_used['dataexchange']['list_data_sets']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "ListDataSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs(self, *args, **kwargs):
        __protego_used['dataexchange']['list_jobs']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "ListJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_revision_assets(self, *args, **kwargs):
        __protego_used['dataexchange']['list_revision_assets']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId","RevisionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "ListRevisionAssets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['dataexchange']['list_tags_for_resource']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_job(self, *args, **kwargs):
        __protego_used['dataexchange']['start_job']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "StartJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['dataexchange']['tag_resource']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['dataexchange']['untag_resource']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_asset(self, *args, **kwargs):
        __protego_used['dataexchange']['update_asset']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId","RevisionId","AssetId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "UpdateAsset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_data_set(self, *args, **kwargs):
        __protego_used['dataexchange']['update_data_set']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "UpdateDataSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_revision(self, *args, **kwargs):
        __protego_used['dataexchange']['update_revision']=['dataexchange:*']
        for p in ['dataexchange:*']:
            res = {}
            for nm in ["DataSetId","RevisionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dataexchange'].append({'action': "UpdateRevision", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class datapipeline:
    def __init__(self, region_name=__default_region):
        __protego_used['datapipeline']= __protego_used.get('datapipeline', {})
        __protego_resource_map['datapipeline']=__protego_resource_map.get('datapipeline', [])
        self.region = region_name
    def activate_pipeline(self, *args, **kwargs):
        __protego_used['datapipeline']['activate_pipeline']=['datapipeline:ActivatePipeline']
        for p in ['datapipeline:ActivatePipeline']:
            res = {}
            for nm in ["pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "ActivatePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_tags(self, *args, **kwargs):
        __protego_used['datapipeline']['add_tags']=['datapipeline:AddTags']
        for p in ['datapipeline:AddTags']:
            res = {}
            for nm in ["tags","pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "AddTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_pipeline(self, *args, **kwargs):
        __protego_used['datapipeline']['create_pipeline']=['datapipeline:CreatePipeline']
        for p in ['datapipeline:CreatePipeline']:
            res = {}
            for nm in ["name","uniqueId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "CreatePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deactivate_pipeline(self, *args, **kwargs):
        __protego_used['datapipeline']['deactivate_pipeline']=['datapipeline:DeactivatePipeline']
        for p in ['datapipeline:DeactivatePipeline']:
            res = {}
            for nm in ["pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "DeactivatePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_pipeline(self, *args, **kwargs):
        __protego_used['datapipeline']['delete_pipeline']=['datapipeline:DeletePipeline']
        for p in ['datapipeline:DeletePipeline']:
            res = {}
            for nm in ["pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "DeletePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_objects(self, *args, **kwargs):
        __protego_used['datapipeline']['describe_objects']=['datapipeline:DescribeObjects']
        for p in ['datapipeline:DescribeObjects']:
            res = {}
            for nm in ["objectIds","pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "DescribeObjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_pipelines(self, *args, **kwargs):
        __protego_used['datapipeline']['describe_pipelines']=['datapipeline:DescribePipelines']
        for p in ['datapipeline:DescribePipelines']:
            res = {}
            for nm in ["pipelineIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "DescribePipelines", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def evaluate_expression(self, *args, **kwargs):
        __protego_used['datapipeline']['evaluate_expression']=['datapipeline:EvaluateExpression']
        for p in ['datapipeline:EvaluateExpression']:
            res = {}
            for nm in ["expression","objectId","pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "EvaluateExpression", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_pipeline_definition(self, *args, **kwargs):
        __protego_used['datapipeline']['get_pipeline_definition']=['datapipeline:GetPipelineDefinition']
        for p in ['datapipeline:GetPipelineDefinition']:
            res = {}
            for nm in ["pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "GetPipelineDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_pipelines(self, *args, **kwargs):
        __protego_used['datapipeline']['list_pipelines']=['datapipeline:ListPipelines']
        for p in ['datapipeline:ListPipelines']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "ListPipelines", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def poll_for_task(self, *args, **kwargs):
        __protego_used['datapipeline']['poll_for_task']=['datapipeline:PollForTask']
        for p in ['datapipeline:PollForTask']:
            res = {}
            for nm in ["workerGroup"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "PollForTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_pipeline_definition(self, *args, **kwargs):
        __protego_used['datapipeline']['put_pipeline_definition']=['datapipeline:PutPipelineDefinition']
        for p in ['datapipeline:PutPipelineDefinition']:
            res = {}
            for nm in ["pipelineObjects","pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "PutPipelineDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def query_objects(self, *args, **kwargs):
        __protego_used['datapipeline']['query_objects']=['datapipeline:QueryObjects']
        for p in ['datapipeline:QueryObjects']:
            res = {}
            for nm in ["sphere","pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "QueryObjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags(self, *args, **kwargs):
        __protego_used['datapipeline']['remove_tags']=['datapipeline:RemoveTags']
        for p in ['datapipeline:RemoveTags']:
            res = {}
            for nm in ["tagKeys","pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "RemoveTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def report_task_progress(self, *args, **kwargs):
        __protego_used['datapipeline']['report_task_progress']=['datapipeline:ReportTaskProgress']
        for p in ['datapipeline:ReportTaskProgress']:
            res = {}
            for nm in ["taskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "ReportTaskProgress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def report_task_runner_heartbeat(self, *args, **kwargs):
        __protego_used['datapipeline']['report_task_runner_heartbeat']=['datapipeline:ReportTaskRunnerHeartbeat']
        for p in ['datapipeline:ReportTaskRunnerHeartbeat']:
            res = {}
            for nm in ["taskrunnerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "ReportTaskRunnerHeartbeat", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_status(self, *args, **kwargs):
        __protego_used['datapipeline']['set_status']=['datapipeline:SetStatus']
        for p in ['datapipeline:SetStatus']:
            res = {}
            for nm in ["objectIds","status","pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "SetStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_task_status(self, *args, **kwargs):
        __protego_used['datapipeline']['set_task_status']=['datapipeline:SetTaskStatus']
        for p in ['datapipeline:SetTaskStatus']:
            res = {}
            for nm in ["taskId","taskStatus"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "SetTaskStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def validate_pipeline_definition(self, *args, **kwargs):
        __protego_used['datapipeline']['validate_pipeline_definition']=['datapipeline:ValidatePipelineDefinition']
        for p in ['datapipeline:ValidatePipelineDefinition']:
            res = {}
            for nm in ["pipelineObjects","pipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datapipeline'].append({'action': "ValidatePipelineDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class datasync:
    def __init__(self, region_name=__default_region):
        __protego_used['datasync']= __protego_used.get('datasync', {})
        __protego_resource_map['datasync']=__protego_resource_map.get('datasync', [])
        self.region = region_name
    def cancel_task_execution(self, *args, **kwargs):
        __protego_used['datasync']['cancel_task_execution']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["TaskExecutionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "CancelTaskExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_agent(self, *args, **kwargs):
        __protego_used['datasync']['create_agent']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["ActivationKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "CreateAgent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_location_efs(self, *args, **kwargs):
        __protego_used['datasync']['create_location_efs']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["Ec2Config","EfsFilesystemArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "CreateLocationEfs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_location_nfs(self, *args, **kwargs):
        __protego_used['datasync']['create_location_nfs']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["ServerHostname","Subdirectory","OnPremConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "CreateLocationNfs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_location_s3(self, *args, **kwargs):
        __protego_used['datasync']['create_location_s3']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["S3BucketArn","S3Config"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "CreateLocationS3", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_location_smb(self, *args, **kwargs):
        __protego_used['datasync']['create_location_smb']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["ServerHostname","Subdirectory","AgentArns","Password","User"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "CreateLocationSmb", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_task(self, *args, **kwargs):
        __protego_used['datasync']['create_task']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["DestinationLocationArn","SourceLocationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "CreateTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_agent(self, *args, **kwargs):
        __protego_used['datasync']['delete_agent']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["AgentArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "DeleteAgent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_location(self, *args, **kwargs):
        __protego_used['datasync']['delete_location']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["LocationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "DeleteLocation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_task(self, *args, **kwargs):
        __protego_used['datasync']['delete_task']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["TaskArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "DeleteTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_agent(self, *args, **kwargs):
        __protego_used['datasync']['describe_agent']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["AgentArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "DescribeAgent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_location_efs(self, *args, **kwargs):
        __protego_used['datasync']['describe_location_efs']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["LocationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "DescribeLocationEfs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_location_nfs(self, *args, **kwargs):
        __protego_used['datasync']['describe_location_nfs']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["LocationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "DescribeLocationNfs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_location_s3(self, *args, **kwargs):
        __protego_used['datasync']['describe_location_s3']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["LocationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "DescribeLocationS3", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_location_smb(self, *args, **kwargs):
        __protego_used['datasync']['describe_location_smb']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["LocationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "DescribeLocationSmb", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_task(self, *args, **kwargs):
        __protego_used['datasync']['describe_task']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["TaskArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "DescribeTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_task_execution(self, *args, **kwargs):
        __protego_used['datasync']['describe_task_execution']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["TaskExecutionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "DescribeTaskExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_agents(self, *args, **kwargs):
        __protego_used['datasync']['list_agents']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "ListAgents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_locations(self, *args, **kwargs):
        __protego_used['datasync']['list_locations']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "ListLocations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['datasync']['list_tags_for_resource']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_task_executions(self, *args, **kwargs):
        __protego_used['datasync']['list_task_executions']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "ListTaskExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tasks(self, *args, **kwargs):
        __protego_used['datasync']['list_tasks']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "ListTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_task_execution(self, *args, **kwargs):
        __protego_used['datasync']['start_task_execution']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["TaskArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "StartTaskExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['datasync']['tag_resource']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['datasync']['untag_resource']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["ResourceArn","Keys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_agent(self, *args, **kwargs):
        __protego_used['datasync']['update_agent']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["AgentArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "UpdateAgent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_task(self, *args, **kwargs):
        __protego_used['datasync']['update_task']=['datasync:*']
        for p in ['datasync:*']:
            res = {}
            for nm in ["TaskArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['datasync'].append({'action': "UpdateTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class dax:
    def __init__(self, region_name=__default_region):
        __protego_used['dax']= __protego_used.get('dax', {})
        __protego_resource_map['dax']=__protego_resource_map.get('dax', [])
        self.region = region_name
    def create_cluster(self, *args, **kwargs):
        __protego_used['dax']['create_cluster']=['dax:CreateCluster']
        for p in ['dax:CreateCluster']:
            res = {}
            for nm in ["ReplicationFactor","NodeType","IamRoleArn","ClusterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "CreateCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_parameter_group(self, *args, **kwargs):
        __protego_used['dax']['create_parameter_group']=['dax:CreateParameterGroup']
        for p in ['dax:CreateParameterGroup']:
            res = {}
            for nm in ["ParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "CreateParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_subnet_group(self, *args, **kwargs):
        __protego_used['dax']['create_subnet_group']=['dax:CreateSubnetGroup']
        for p in ['dax:CreateSubnetGroup']:
            res = {}
            for nm in ["SubnetIds","SubnetGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "CreateSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def decrease_replication_factor(self, *args, **kwargs):
        __protego_used['dax']['decrease_replication_factor']=['dax:DecreaseReplicationFactor']
        for p in ['dax:DecreaseReplicationFactor']:
            res = {}
            for nm in ["ClusterName","NewReplicationFactor"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "DecreaseReplicationFactor", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cluster(self, *args, **kwargs):
        __protego_used['dax']['delete_cluster']=['dax:DeleteCluster']
        for p in ['dax:DeleteCluster']:
            res = {}
            for nm in ["ClusterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "DeleteCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_parameter_group(self, *args, **kwargs):
        __protego_used['dax']['delete_parameter_group']=['dax:DeleteParameterGroup']
        for p in ['dax:DeleteParameterGroup']:
            res = {}
            for nm in ["ParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "DeleteParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_subnet_group(self, *args, **kwargs):
        __protego_used['dax']['delete_subnet_group']=['dax:DeleteSubnetGroup']
        for p in ['dax:DeleteSubnetGroup']:
            res = {}
            for nm in ["SubnetGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "DeleteSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_clusters(self, *args, **kwargs):
        __protego_used['dax']['describe_clusters']=['dax:DescribeClusters']
        for p in ['dax:DescribeClusters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "DescribeClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_default_parameters(self, *args, **kwargs):
        __protego_used['dax']['describe_default_parameters']=['dax:DescribeDefaultParameters']
        for p in ['dax:DescribeDefaultParameters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "DescribeDefaultParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_events(self, *args, **kwargs):
        __protego_used['dax']['describe_events']=['dax:DescribeEvents']
        for p in ['dax:DescribeEvents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "DescribeEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_parameter_groups(self, *args, **kwargs):
        __protego_used['dax']['describe_parameter_groups']=['dax:DescribeParameterGroups']
        for p in ['dax:DescribeParameterGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "DescribeParameterGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_parameters(self, *args, **kwargs):
        __protego_used['dax']['describe_parameters']=['dax:DescribeParameters']
        for p in ['dax:DescribeParameters']:
            res = {}
            for nm in ["ParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "DescribeParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_subnet_groups(self, *args, **kwargs):
        __protego_used['dax']['describe_subnet_groups']=['dax:DescribeSubnetGroups']
        for p in ['dax:DescribeSubnetGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "DescribeSubnetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def increase_replication_factor(self, *args, **kwargs):
        __protego_used['dax']['increase_replication_factor']=['dax:IncreaseReplicationFactor']
        for p in ['dax:IncreaseReplicationFactor']:
            res = {}
            for nm in ["ClusterName","NewReplicationFactor"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "IncreaseReplicationFactor", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags(self, *args, **kwargs):
        __protego_used['dax']['list_tags']=['dax:ListTags']
        for p in ['dax:ListTags']:
            res = {}
            for nm in ["ResourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "ListTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_node(self, *args, **kwargs):
        __protego_used['dax']['reboot_node']=['dax:RebootNode']
        for p in ['dax:RebootNode']:
            res = {}
            for nm in ["NodeId","ClusterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "RebootNode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['dax']['tag_resource']=['dax:TagResource']
        for p in ['dax:TagResource']:
            res = {}
            for nm in ["ResourceName","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['dax']['untag_resource']=['dax:UntagResource']
        for p in ['dax:UntagResource']:
            res = {}
            for nm in ["ResourceName","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_cluster(self, *args, **kwargs):
        __protego_used['dax']['update_cluster']=['dax:UpdateCluster']
        for p in ['dax:UpdateCluster']:
            res = {}
            for nm in ["ClusterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "UpdateCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_parameter_group(self, *args, **kwargs):
        __protego_used['dax']['update_parameter_group']=['dax:UpdateParameterGroup']
        for p in ['dax:UpdateParameterGroup']:
            res = {}
            for nm in ["ParameterNameValues","ParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "UpdateParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_subnet_group(self, *args, **kwargs):
        __protego_used['dax']['update_subnet_group']=['dax:UpdateSubnetGroup']
        for p in ['dax:UpdateSubnetGroup']:
            res = {}
            for nm in ["SubnetGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dax'].append({'action': "UpdateSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class detective:
    def __init__(self, region_name=__default_region):
        __protego_used['detective']= __protego_used.get('detective', {})
        __protego_resource_map['detective']=__protego_resource_map.get('detective', [])
        self.region = region_name
    def accept_invitation(self, *args, **kwargs):
        __protego_used['detective']['accept_invitation']=['detective:*']
        for p in ['detective:*']:
            res = {}
            for nm in ["GraphArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['detective'].append({'action': "AcceptInvitation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_graph(self, *args, **kwargs):
        __protego_used['detective']['create_graph']=['detective:*']
        for p in ['detective:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['detective'].append({'action': "CreateGraph", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_members(self, *args, **kwargs):
        __protego_used['detective']['create_members']=['detective:*']
        for p in ['detective:*']:
            res = {}
            for nm in ["Accounts","GraphArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['detective'].append({'action': "CreateMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_graph(self, *args, **kwargs):
        __protego_used['detective']['delete_graph']=['detective:*']
        for p in ['detective:*']:
            res = {}
            for nm in ["GraphArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['detective'].append({'action': "DeleteGraph", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_members(self, *args, **kwargs):
        __protego_used['detective']['delete_members']=['detective:*']
        for p in ['detective:*']:
            res = {}
            for nm in ["GraphArn","AccountIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['detective'].append({'action': "DeleteMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_membership(self, *args, **kwargs):
        __protego_used['detective']['disassociate_membership']=['detective:*']
        for p in ['detective:*']:
            res = {}
            for nm in ["GraphArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['detective'].append({'action': "DisassociateMembership", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_members(self, *args, **kwargs):
        __protego_used['detective']['get_members']=['detective:*']
        for p in ['detective:*']:
            res = {}
            for nm in ["GraphArn","AccountIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['detective'].append({'action': "GetMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_graphs(self, *args, **kwargs):
        __protego_used['detective']['list_graphs']=['detective:*']
        for p in ['detective:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['detective'].append({'action': "ListGraphs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_invitations(self, *args, **kwargs):
        __protego_used['detective']['list_invitations']=['detective:*']
        for p in ['detective:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['detective'].append({'action': "ListInvitations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_members(self, *args, **kwargs):
        __protego_used['detective']['list_members']=['detective:*']
        for p in ['detective:*']:
            res = {}
            for nm in ["GraphArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['detective'].append({'action': "ListMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_invitation(self, *args, **kwargs):
        __protego_used['detective']['reject_invitation']=['detective:*']
        for p in ['detective:*']:
            res = {}
            for nm in ["GraphArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['detective'].append({'action': "RejectInvitation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class devicefarm:
    def __init__(self, region_name=__default_region):
        __protego_used['devicefarm']= __protego_used.get('devicefarm', {})
        __protego_resource_map['devicefarm']=__protego_resource_map.get('devicefarm', [])
        self.region = region_name
    def create_device_pool(self, *args, **kwargs):
        __protego_used['devicefarm']['create_device_pool']=['devicefarm:CreateDevicePool']
        for p in ['devicefarm:CreateDevicePool']:
            res = {}
            for nm in ["rules","name","projectArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "CreateDevicePool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_instance_profile(self, *args, **kwargs):
        __protego_used['devicefarm']['create_instance_profile']=['devicefarm:CreateInstanceProfile']
        for p in ['devicefarm:CreateInstanceProfile']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "CreateInstanceProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_network_profile(self, *args, **kwargs):
        __protego_used['devicefarm']['create_network_profile']=['devicefarm:CreateNetworkProfile']
        for p in ['devicefarm:CreateNetworkProfile']:
            res = {}
            for nm in ["name","projectArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "CreateNetworkProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_project(self, *args, **kwargs):
        __protego_used['devicefarm']['create_project']=['devicefarm:CreateProject']
        for p in ['devicefarm:CreateProject']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "CreateProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_remote_access_session(self, *args, **kwargs):
        __protego_used['devicefarm']['create_remote_access_session']=['devicefarm:CreateRemoteAccessSession']
        for p in ['devicefarm:CreateRemoteAccessSession']:
            res = {}
            for nm in ["deviceArn","projectArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "CreateRemoteAccessSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_test_grid_project(self, *args, **kwargs):
        __protego_used['devicefarm']['create_test_grid_project']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "CreateTestGridProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_test_grid_url(self, *args, **kwargs):
        __protego_used['devicefarm']['create_test_grid_url']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["projectArn","expiresInSeconds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "CreateTestGridUrl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_upload(self, *args, **kwargs):
        __protego_used['devicefarm']['create_upload']=['devicefarm:CreateUpload']
        for p in ['devicefarm:CreateUpload']:
            res = {}
            for nm in ["name","projectArn","type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "CreateUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpce_configuration(self, *args, **kwargs):
        __protego_used['devicefarm']['create_vpce_configuration']=['devicefarm:CreateVPCEConfiguration']
        for p in ['devicefarm:CreateVPCEConfiguration']:
            res = {}
            for nm in ["serviceDnsName","vpceServiceName","vpceConfigurationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "CreateVPCEConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_device_pool(self, *args, **kwargs):
        __protego_used['devicefarm']['delete_device_pool']=['devicefarm:DeleteDevicePool']
        for p in ['devicefarm:DeleteDevicePool']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "DeleteDevicePool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_instance_profile(self, *args, **kwargs):
        __protego_used['devicefarm']['delete_instance_profile']=['devicefarm:DeleteInstanceProfile']
        for p in ['devicefarm:DeleteInstanceProfile']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "DeleteInstanceProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_network_profile(self, *args, **kwargs):
        __protego_used['devicefarm']['delete_network_profile']=['devicefarm:DeleteNetworkProfile']
        for p in ['devicefarm:DeleteNetworkProfile']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "DeleteNetworkProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_project(self, *args, **kwargs):
        __protego_used['devicefarm']['delete_project']=['devicefarm:DeleteProject']
        for p in ['devicefarm:DeleteProject']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "DeleteProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_remote_access_session(self, *args, **kwargs):
        __protego_used['devicefarm']['delete_remote_access_session']=['devicefarm:DeleteRemoteAccessSession']
        for p in ['devicefarm:DeleteRemoteAccessSession']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "DeleteRemoteAccessSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_run(self, *args, **kwargs):
        __protego_used['devicefarm']['delete_run']=['devicefarm:DeleteRun']
        for p in ['devicefarm:DeleteRun']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "DeleteRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_test_grid_project(self, *args, **kwargs):
        __protego_used['devicefarm']['delete_test_grid_project']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["projectArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "DeleteTestGridProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_upload(self, *args, **kwargs):
        __protego_used['devicefarm']['delete_upload']=['devicefarm:DeleteUpload']
        for p in ['devicefarm:DeleteUpload']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "DeleteUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpce_configuration(self, *args, **kwargs):
        __protego_used['devicefarm']['delete_vpce_configuration']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "DeleteVPCEConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account_settings(self, *args, **kwargs):
        __protego_used['devicefarm']['get_account_settings']=['devicefarm:GetAccountSettings']
        for p in ['devicefarm:GetAccountSettings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetAccountSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_device(self, *args, **kwargs):
        __protego_used['devicefarm']['get_device']=['devicefarm:GetDevice']
        for p in ['devicefarm:GetDevice']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_device_instance(self, *args, **kwargs):
        __protego_used['devicefarm']['get_device_instance']=['devicefarm:GetDeviceInstance']
        for p in ['devicefarm:GetDeviceInstance']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetDeviceInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_device_pool(self, *args, **kwargs):
        __protego_used['devicefarm']['get_device_pool']=['devicefarm:GetDevicePool']
        for p in ['devicefarm:GetDevicePool']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetDevicePool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_device_pool_compatibility(self, *args, **kwargs):
        __protego_used['devicefarm']['get_device_pool_compatibility']=['devicefarm:GetDevicePoolCompatibility']
        for p in ['devicefarm:GetDevicePoolCompatibility']:
            res = {}
            for nm in ["devicePoolArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetDevicePoolCompatibility", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instance_profile(self, *args, **kwargs):
        __protego_used['devicefarm']['get_instance_profile']=['devicefarm:GetInstanceProfile']
        for p in ['devicefarm:GetInstanceProfile']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetInstanceProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job(self, *args, **kwargs):
        __protego_used['devicefarm']['get_job']=['devicefarm:GetJob']
        for p in ['devicefarm:GetJob']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_network_profile(self, *args, **kwargs):
        __protego_used['devicefarm']['get_network_profile']=['devicefarm:GetNetworkProfile']
        for p in ['devicefarm:GetNetworkProfile']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetNetworkProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_offering_status(self, *args, **kwargs):
        __protego_used['devicefarm']['get_offering_status']=['devicefarm:GetOfferingStatus']
        for p in ['devicefarm:GetOfferingStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetOfferingStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_project(self, *args, **kwargs):
        __protego_used['devicefarm']['get_project']=['devicefarm:GetProject']
        for p in ['devicefarm:GetProject']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_remote_access_session(self, *args, **kwargs):
        __protego_used['devicefarm']['get_remote_access_session']=['devicefarm:GetRemoteAccessSession']
        for p in ['devicefarm:GetRemoteAccessSession']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetRemoteAccessSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_run(self, *args, **kwargs):
        __protego_used['devicefarm']['get_run']=['devicefarm:GetRun']
        for p in ['devicefarm:GetRun']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_suite(self, *args, **kwargs):
        __protego_used['devicefarm']['get_suite']=['devicefarm:GetSuite']
        for p in ['devicefarm:GetSuite']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetSuite", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_test(self, *args, **kwargs):
        __protego_used['devicefarm']['get_test']=['devicefarm:GetTest']
        for p in ['devicefarm:GetTest']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetTest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_test_grid_project(self, *args, **kwargs):
        __protego_used['devicefarm']['get_test_grid_project']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["projectArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetTestGridProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_test_grid_session(self, *args, **kwargs):
        __protego_used['devicefarm']['get_test_grid_session']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetTestGridSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_upload(self, *args, **kwargs):
        __protego_used['devicefarm']['get_upload']=['devicefarm:GetUpload']
        for p in ['devicefarm:GetUpload']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_vpce_configuration(self, *args, **kwargs):
        __protego_used['devicefarm']['get_vpce_configuration']=['devicefarm:GetVPCEConfiguration']
        for p in ['devicefarm:GetVPCEConfiguration']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "GetVPCEConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def install_to_remote_access_session(self, *args, **kwargs):
        __protego_used['devicefarm']['install_to_remote_access_session']=['devicefarm:InstallToRemoteAccessSession']
        for p in ['devicefarm:InstallToRemoteAccessSession']:
            res = {}
            for nm in ["remoteAccessSessionArn","appArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "InstallToRemoteAccessSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_artifacts(self, *args, **kwargs):
        __protego_used['devicefarm']['list_artifacts']=['devicefarm:ListArtifacts']
        for p in ['devicefarm:ListArtifacts']:
            res = {}
            for nm in ["arn","type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListArtifacts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_device_instances(self, *args, **kwargs):
        __protego_used['devicefarm']['list_device_instances']=['devicefarm:ListDeviceInstances']
        for p in ['devicefarm:ListDeviceInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListDeviceInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_device_pools(self, *args, **kwargs):
        __protego_used['devicefarm']['list_device_pools']=['devicefarm:ListDevicePools']
        for p in ['devicefarm:ListDevicePools']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListDevicePools", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_devices(self, *args, **kwargs):
        __protego_used['devicefarm']['list_devices']=['devicefarm:ListDevices']
        for p in ['devicefarm:ListDevices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListDevices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_instance_profiles(self, *args, **kwargs):
        __protego_used['devicefarm']['list_instance_profiles']=['devicefarm:ListInstanceProfiles']
        for p in ['devicefarm:ListInstanceProfiles']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListInstanceProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs(self, *args, **kwargs):
        __protego_used['devicefarm']['list_jobs']=['devicefarm:ListJobs']
        for p in ['devicefarm:ListJobs']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_network_profiles(self, *args, **kwargs):
        __protego_used['devicefarm']['list_network_profiles']=['devicefarm:ListNetworkProfiles']
        for p in ['devicefarm:ListNetworkProfiles']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListNetworkProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_offering_promotions(self, *args, **kwargs):
        __protego_used['devicefarm']['list_offering_promotions']=['devicefarm:ListOfferingPromotions']
        for p in ['devicefarm:ListOfferingPromotions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListOfferingPromotions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_offering_transactions(self, *args, **kwargs):
        __protego_used['devicefarm']['list_offering_transactions']=['devicefarm:ListOfferingTransactions']
        for p in ['devicefarm:ListOfferingTransactions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListOfferingTransactions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_offerings(self, *args, **kwargs):
        __protego_used['devicefarm']['list_offerings']=['devicefarm:ListOfferings']
        for p in ['devicefarm:ListOfferings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListOfferings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_projects(self, *args, **kwargs):
        __protego_used['devicefarm']['list_projects']=['devicefarm:ListProjects']
        for p in ['devicefarm:ListProjects']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListProjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_remote_access_sessions(self, *args, **kwargs):
        __protego_used['devicefarm']['list_remote_access_sessions']=['devicefarm:ListRemoteAccessSessions']
        for p in ['devicefarm:ListRemoteAccessSessions']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListRemoteAccessSessions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_runs(self, *args, **kwargs):
        __protego_used['devicefarm']['list_runs']=['devicefarm:ListRuns']
        for p in ['devicefarm:ListRuns']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListRuns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_samples(self, *args, **kwargs):
        __protego_used['devicefarm']['list_samples']=['devicefarm:ListSamples']
        for p in ['devicefarm:ListSamples']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListSamples", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_suites(self, *args, **kwargs):
        __protego_used['devicefarm']['list_suites']=['devicefarm:ListSuites']
        for p in ['devicefarm:ListSuites']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListSuites", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['devicefarm']['list_tags_for_resource']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_test_grid_projects(self, *args, **kwargs):
        __protego_used['devicefarm']['list_test_grid_projects']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListTestGridProjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_test_grid_session_actions(self, *args, **kwargs):
        __protego_used['devicefarm']['list_test_grid_session_actions']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["sessionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListTestGridSessionActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_test_grid_session_artifacts(self, *args, **kwargs):
        __protego_used['devicefarm']['list_test_grid_session_artifacts']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["sessionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListTestGridSessionArtifacts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_test_grid_sessions(self, *args, **kwargs):
        __protego_used['devicefarm']['list_test_grid_sessions']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["projectArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListTestGridSessions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tests(self, *args, **kwargs):
        __protego_used['devicefarm']['list_tests']=['devicefarm:ListTests']
        for p in ['devicefarm:ListTests']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListTests", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_unique_problems(self, *args, **kwargs):
        __protego_used['devicefarm']['list_unique_problems']=['devicefarm:ListUniqueProblems']
        for p in ['devicefarm:ListUniqueProblems']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListUniqueProblems", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_uploads(self, *args, **kwargs):
        __protego_used['devicefarm']['list_uploads']=['devicefarm:ListUploads']
        for p in ['devicefarm:ListUploads']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListUploads", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_vpce_configurations(self, *args, **kwargs):
        __protego_used['devicefarm']['list_vpce_configurations']=['devicefarm:ListVPCEConfigurations']
        for p in ['devicefarm:ListVPCEConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ListVPCEConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def purchase_offering(self, *args, **kwargs):
        __protego_used['devicefarm']['purchase_offering']=['devicefarm:PurchaseOffering']
        for p in ['devicefarm:PurchaseOffering']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "PurchaseOffering", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def renew_offering(self, *args, **kwargs):
        __protego_used['devicefarm']['renew_offering']=['devicefarm:RenewOffering']
        for p in ['devicefarm:RenewOffering']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "RenewOffering", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def schedule_run(self, *args, **kwargs):
        __protego_used['devicefarm']['schedule_run']=['devicefarm:ScheduleRun']
        for p in ['devicefarm:ScheduleRun']:
            res = {}
            for nm in ["projectArn","test"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "ScheduleRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_job(self, *args, **kwargs):
        __protego_used['devicefarm']['stop_job']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "StopJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_remote_access_session(self, *args, **kwargs):
        __protego_used['devicefarm']['stop_remote_access_session']=['devicefarm:StopRemoteAccessSession']
        for p in ['devicefarm:StopRemoteAccessSession']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "StopRemoteAccessSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_run(self, *args, **kwargs):
        __protego_used['devicefarm']['stop_run']=['devicefarm:StopRun']
        for p in ['devicefarm:StopRun']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "StopRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['devicefarm']['tag_resource']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['devicefarm']['untag_resource']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_device_instance(self, *args, **kwargs):
        __protego_used['devicefarm']['update_device_instance']=['devicefarm:UpdateDeviceInstance']
        for p in ['devicefarm:UpdateDeviceInstance']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "UpdateDeviceInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_device_pool(self, *args, **kwargs):
        __protego_used['devicefarm']['update_device_pool']=['devicefarm:UpdateDevicePool']
        for p in ['devicefarm:UpdateDevicePool']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "UpdateDevicePool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_instance_profile(self, *args, **kwargs):
        __protego_used['devicefarm']['update_instance_profile']=['devicefarm:UpdateInstanceProfile']
        for p in ['devicefarm:UpdateInstanceProfile']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "UpdateInstanceProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_network_profile(self, *args, **kwargs):
        __protego_used['devicefarm']['update_network_profile']=['devicefarm:UpdateNetworkProfile']
        for p in ['devicefarm:UpdateNetworkProfile']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "UpdateNetworkProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_project(self, *args, **kwargs):
        __protego_used['devicefarm']['update_project']=['devicefarm:UpdateProject']
        for p in ['devicefarm:UpdateProject']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "UpdateProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_test_grid_project(self, *args, **kwargs):
        __protego_used['devicefarm']['update_test_grid_project']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["projectArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "UpdateTestGridProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_upload(self, *args, **kwargs):
        __protego_used['devicefarm']['update_upload']=['devicefarm:*']
        for p in ['devicefarm:*']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "UpdateUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_vpce_configuration(self, *args, **kwargs):
        __protego_used['devicefarm']['update_vpce_configuration']=['devicefarm:UpdateVPCEConfiguration']
        for p in ['devicefarm:UpdateVPCEConfiguration']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['devicefarm'].append({'action': "UpdateVPCEConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class directconnect:
    def __init__(self, region_name=__default_region):
        __protego_used['directconnect']= __protego_used.get('directconnect', {})
        __protego_resource_map['directconnect']=__protego_resource_map.get('directconnect', [])
        self.region = region_name
    def accept_direct_connect_gateway_association_proposal(self, *args, **kwargs):
        __protego_used['directconnect']['accept_direct_connect_gateway_association_proposal']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["associatedGatewayOwnerAccount","directConnectGatewayId","proposalId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "AcceptDirectConnectGatewayAssociationProposal", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def allocate_connection_on_interconnect(self, *args, **kwargs):
        __protego_used['directconnect']['allocate_connection_on_interconnect']=['directconnect:AllocateConnectionOnInterconnect']
        for p in ['directconnect:AllocateConnectionOnInterconnect']:
            res = {}
            for nm in ["vlan","bandwidth","ownerAccount","connectionName","interconnectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "AllocateConnectionOnInterconnect", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def allocate_hosted_connection(self, *args, **kwargs):
        __protego_used['directconnect']['allocate_hosted_connection']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["vlan","bandwidth","ownerAccount","connectionName","connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "AllocateHostedConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def allocate_private_virtual_interface(self, *args, **kwargs):
        __protego_used['directconnect']['allocate_private_virtual_interface']=['directconnect:AllocatePrivateVirtualInterface']
        for p in ['directconnect:AllocatePrivateVirtualInterface']:
            res = {}
            for nm in ["newPrivateVirtualInterfaceAllocation","connectionId","ownerAccount"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "AllocatePrivateVirtualInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def allocate_public_virtual_interface(self, *args, **kwargs):
        __protego_used['directconnect']['allocate_public_virtual_interface']=['directconnect:AllocatePublicVirtualInterface']
        for p in ['directconnect:AllocatePublicVirtualInterface']:
            res = {}
            for nm in ["connectionId","newPublicVirtualInterfaceAllocation","ownerAccount"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "AllocatePublicVirtualInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def allocate_transit_virtual_interface(self, *args, **kwargs):
        __protego_used['directconnect']['allocate_transit_virtual_interface']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["newTransitVirtualInterfaceAllocation","connectionId","ownerAccount"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "AllocateTransitVirtualInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_connection_with_lag(self, *args, **kwargs):
        __protego_used['directconnect']['associate_connection_with_lag']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["lagId","connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "AssociateConnectionWithLag", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_hosted_connection(self, *args, **kwargs):
        __protego_used['directconnect']['associate_hosted_connection']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["connectionId","parentConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "AssociateHostedConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_virtual_interface(self, *args, **kwargs):
        __protego_used['directconnect']['associate_virtual_interface']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["virtualInterfaceId","connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "AssociateVirtualInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def confirm_connection(self, *args, **kwargs):
        __protego_used['directconnect']['confirm_connection']=['directconnect:ConfirmConnection']
        for p in ['directconnect:ConfirmConnection']:
            res = {}
            for nm in ["connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "ConfirmConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def confirm_private_virtual_interface(self, *args, **kwargs):
        __protego_used['directconnect']['confirm_private_virtual_interface']=['directconnect:ConfirmPrivateVirtualInterface']
        for p in ['directconnect:ConfirmPrivateVirtualInterface']:
            res = {}
            for nm in ["virtualInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "ConfirmPrivateVirtualInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def confirm_public_virtual_interface(self, *args, **kwargs):
        __protego_used['directconnect']['confirm_public_virtual_interface']=['directconnect:ConfirmPublicVirtualInterface']
        for p in ['directconnect:ConfirmPublicVirtualInterface']:
            res = {}
            for nm in ["virtualInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "ConfirmPublicVirtualInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def confirm_transit_virtual_interface(self, *args, **kwargs):
        __protego_used['directconnect']['confirm_transit_virtual_interface']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["virtualInterfaceId","directConnectGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "ConfirmTransitVirtualInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_bgp_peer(self, *args, **kwargs):
        __protego_used['directconnect']['create_bgp_peer']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "CreateBGPPeer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_connection(self, *args, **kwargs):
        __protego_used['directconnect']['create_connection']=['directconnect:CreateConnection']
        for p in ['directconnect:CreateConnection']:
            res = {}
            for nm in ["location","bandwidth","connectionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "CreateConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_direct_connect_gateway(self, *args, **kwargs):
        __protego_used['directconnect']['create_direct_connect_gateway']=['directconnect:CreateDirectConnectGateway']
        for p in ['directconnect:CreateDirectConnectGateway']:
            res = {}
            for nm in ["directConnectGatewayName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "CreateDirectConnectGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_direct_connect_gateway_association(self, *args, **kwargs):
        __protego_used['directconnect']['create_direct_connect_gateway_association']=['directconnect:CreateDirectConnectGatewayAssociation']
        for p in ['directconnect:CreateDirectConnectGatewayAssociation']:
            res = {}
            for nm in ["directConnectGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "CreateDirectConnectGatewayAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_direct_connect_gateway_association_proposal(self, *args, **kwargs):
        __protego_used['directconnect']['create_direct_connect_gateway_association_proposal']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["gatewayId","directConnectGatewayId","directConnectGatewayOwnerAccount"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "CreateDirectConnectGatewayAssociationProposal", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_interconnect(self, *args, **kwargs):
        __protego_used['directconnect']['create_interconnect']=['directconnect:CreateInterconnect']
        for p in ['directconnect:CreateInterconnect']:
            res = {}
            for nm in ["location","bandwidth","interconnectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "CreateInterconnect", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_lag(self, *args, **kwargs):
        __protego_used['directconnect']['create_lag']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["numberOfConnections","lagName","connectionsBandwidth","location"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "CreateLag", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_private_virtual_interface(self, *args, **kwargs):
        __protego_used['directconnect']['create_private_virtual_interface']=['directconnect:CreatePrivateVirtualInterface']
        for p in ['directconnect:CreatePrivateVirtualInterface']:
            res = {}
            for nm in ["newPrivateVirtualInterface","connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "CreatePrivateVirtualInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_public_virtual_interface(self, *args, **kwargs):
        __protego_used['directconnect']['create_public_virtual_interface']=['directconnect:CreatePublicVirtualInterface']
        for p in ['directconnect:CreatePublicVirtualInterface']:
            res = {}
            for nm in ["newPublicVirtualInterface","connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "CreatePublicVirtualInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_transit_virtual_interface(self, *args, **kwargs):
        __protego_used['directconnect']['create_transit_virtual_interface']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["newTransitVirtualInterface","connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "CreateTransitVirtualInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bgp_peer(self, *args, **kwargs):
        __protego_used['directconnect']['delete_bgp_peer']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DeleteBGPPeer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_connection(self, *args, **kwargs):
        __protego_used['directconnect']['delete_connection']=['directconnect:DeleteConnection']
        for p in ['directconnect:DeleteConnection']:
            res = {}
            for nm in ["connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DeleteConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_direct_connect_gateway(self, *args, **kwargs):
        __protego_used['directconnect']['delete_direct_connect_gateway']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["directConnectGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DeleteDirectConnectGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_direct_connect_gateway_association(self, *args, **kwargs):
        __protego_used['directconnect']['delete_direct_connect_gateway_association']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DeleteDirectConnectGatewayAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_direct_connect_gateway_association_proposal(self, *args, **kwargs):
        __protego_used['directconnect']['delete_direct_connect_gateway_association_proposal']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["proposalId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DeleteDirectConnectGatewayAssociationProposal", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_interconnect(self, *args, **kwargs):
        __protego_used['directconnect']['delete_interconnect']=['directconnect:DeleteInterconnect']
        for p in ['directconnect:DeleteInterconnect']:
            res = {}
            for nm in ["interconnectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DeleteInterconnect", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_lag(self, *args, **kwargs):
        __protego_used['directconnect']['delete_lag']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["lagId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DeleteLag", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_virtual_interface(self, *args, **kwargs):
        __protego_used['directconnect']['delete_virtual_interface']=['directconnect:DeleteVirtualInterface']
        for p in ['directconnect:DeleteVirtualInterface']:
            res = {}
            for nm in ["virtualInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DeleteVirtualInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_connection_loa(self, *args, **kwargs):
        __protego_used['directconnect']['describe_connection_loa']=['directconnect:DescribeConnectionLoa']
        for p in ['directconnect:DescribeConnectionLoa']:
            res = {}
            for nm in ["connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeConnectionLoa", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_connections(self, *args, **kwargs):
        __protego_used['directconnect']['describe_connections']=['directconnect:DescribeConnections']
        for p in ['directconnect:DescribeConnections']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_connections_on_interconnect(self, *args, **kwargs):
        __protego_used['directconnect']['describe_connections_on_interconnect']=['directconnect:DescribeConnectionsOnInterconnect']
        for p in ['directconnect:DescribeConnectionsOnInterconnect']:
            res = {}
            for nm in ["interconnectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeConnectionsOnInterconnect", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_direct_connect_gateway_association_proposals(self, *args, **kwargs):
        __protego_used['directconnect']['describe_direct_connect_gateway_association_proposals']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeDirectConnectGatewayAssociationProposals", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_direct_connect_gateway_associations(self, *args, **kwargs):
        __protego_used['directconnect']['describe_direct_connect_gateway_associations']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeDirectConnectGatewayAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_direct_connect_gateway_attachments(self, *args, **kwargs):
        __protego_used['directconnect']['describe_direct_connect_gateway_attachments']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeDirectConnectGatewayAttachments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_direct_connect_gateways(self, *args, **kwargs):
        __protego_used['directconnect']['describe_direct_connect_gateways']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeDirectConnectGateways", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_hosted_connections(self, *args, **kwargs):
        __protego_used['directconnect']['describe_hosted_connections']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeHostedConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_interconnect_loa(self, *args, **kwargs):
        __protego_used['directconnect']['describe_interconnect_loa']=['directconnect:DescribeInterconnectLoa']
        for p in ['directconnect:DescribeInterconnectLoa']:
            res = {}
            for nm in ["interconnectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeInterconnectLoa", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_interconnects(self, *args, **kwargs):
        __protego_used['directconnect']['describe_interconnects']=['directconnect:DescribeInterconnects']
        for p in ['directconnect:DescribeInterconnects']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeInterconnects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_lags(self, *args, **kwargs):
        __protego_used['directconnect']['describe_lags']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeLags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_loa(self, *args, **kwargs):
        __protego_used['directconnect']['describe_loa']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeLoa", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_locations(self, *args, **kwargs):
        __protego_used['directconnect']['describe_locations']=['directconnect:DescribeLocations']
        for p in ['directconnect:DescribeLocations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeLocations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tags(self, *args, **kwargs):
        __protego_used['directconnect']['describe_tags']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["resourceArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_virtual_gateways(self, *args, **kwargs):
        __protego_used['directconnect']['describe_virtual_gateways']=['directconnect:DescribeVirtualGateways']
        for p in ['directconnect:DescribeVirtualGateways']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeVirtualGateways", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_virtual_interfaces(self, *args, **kwargs):
        __protego_used['directconnect']['describe_virtual_interfaces']=['directconnect:DescribeVirtualInterfaces']
        for p in ['directconnect:DescribeVirtualInterfaces']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DescribeVirtualInterfaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_connection_from_lag(self, *args, **kwargs):
        __protego_used['directconnect']['disassociate_connection_from_lag']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["lagId","connectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "DisassociateConnectionFromLag", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['directconnect']['tag_resource']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['directconnect']['untag_resource']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_direct_connect_gateway_association(self, *args, **kwargs):
        __protego_used['directconnect']['update_direct_connect_gateway_association']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "UpdateDirectConnectGatewayAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_lag(self, *args, **kwargs):
        __protego_used['directconnect']['update_lag']=['directconnect:*']
        for p in ['directconnect:*']:
            res = {}
            for nm in ["lagId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "UpdateLag", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_virtual_interface_attributes(self, *args, **kwargs):
        __protego_used['directconnect']['update_virtual_interface_attributes']=['directconnect:UpdateVirtualInterfaceAttributes']
        for p in ['directconnect:UpdateVirtualInterfaceAttributes']:
            res = {}
            for nm in ["virtualInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['directconnect'].append({'action': "UpdateVirtualInterfaceAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class discovery:
    def __init__(self, region_name=__default_region):
        __protego_used['discovery']= __protego_used.get('discovery', {})
        __protego_resource_map['discovery']=__protego_resource_map.get('discovery', [])
        self.region = region_name
    def associate_configuration_items_to_application(self, *args, **kwargs):
        __protego_used['discovery']['associate_configuration_items_to_application']=['discovery:AssociateConfigurationItemsToApplication']
        for p in ['discovery:AssociateConfigurationItemsToApplication']:
            res = {}
            for nm in ["configurationIds","applicationConfigurationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "AssociateConfigurationItemsToApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_delete_import_data(self, *args, **kwargs):
        __protego_used['discovery']['batch_delete_import_data']=['discovery:BatchDeleteImportData']
        for p in ['discovery:BatchDeleteImportData']:
            res = {}
            for nm in ["importTaskIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "BatchDeleteImportData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_application(self, *args, **kwargs):
        __protego_used['discovery']['create_application']=['discovery:CreateApplication']
        for p in ['discovery:CreateApplication']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "CreateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_tags(self, *args, **kwargs):
        __protego_used['discovery']['create_tags']=['discovery:CreateTags']
        for p in ['discovery:CreateTags']:
            res = {}
            for nm in ["configurationIds","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "CreateTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_applications(self, *args, **kwargs):
        __protego_used['discovery']['delete_applications']=['discovery:DeleteApplications']
        for p in ['discovery:DeleteApplications']:
            res = {}
            for nm in ["configurationIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "DeleteApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tags(self, *args, **kwargs):
        __protego_used['discovery']['delete_tags']=['discovery:DeleteTags']
        for p in ['discovery:DeleteTags']:
            res = {}
            for nm in ["configurationIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "DeleteTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_agents(self, *args, **kwargs):
        __protego_used['discovery']['describe_agents']=['discovery:DescribeAgents']
        for p in ['discovery:DescribeAgents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "DescribeAgents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configurations(self, *args, **kwargs):
        __protego_used['discovery']['describe_configurations']=['discovery:DescribeConfigurations']
        for p in ['discovery:DescribeConfigurations']:
            res = {}
            for nm in ["configurationIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "DescribeConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_continuous_exports(self, *args, **kwargs):
        __protego_used['discovery']['describe_continuous_exports']=['discovery:*']
        for p in ['discovery:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "DescribeContinuousExports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_export_configurations(self, *args, **kwargs):
        __protego_used['discovery']['describe_export_configurations']=['discovery:DescribeExportConfigurations']
        for p in ['discovery:DescribeExportConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "DescribeExportConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_export_tasks(self, *args, **kwargs):
        __protego_used['discovery']['describe_export_tasks']=['discovery:*']
        for p in ['discovery:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "DescribeExportTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_import_tasks(self, *args, **kwargs):
        __protego_used['discovery']['describe_import_tasks']=['discovery:DescribeImportTasks']
        for p in ['discovery:DescribeImportTasks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "DescribeImportTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tags(self, *args, **kwargs):
        __protego_used['discovery']['describe_tags']=['discovery:DescribeTags']
        for p in ['discovery:DescribeTags']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "DescribeTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_configuration_items_from_application(self, *args, **kwargs):
        __protego_used['discovery']['disassociate_configuration_items_from_application']=['discovery:DisassociateConfigurationItemsFromApplication']
        for p in ['discovery:DisassociateConfigurationItemsFromApplication']:
            res = {}
            for nm in ["configurationIds","applicationConfigurationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "DisassociateConfigurationItemsFromApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_configurations(self, *args, **kwargs):
        __protego_used['discovery']['export_configurations']=['discovery:ExportConfigurations']
        for p in ['discovery:ExportConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "ExportConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_discovery_summary(self, *args, **kwargs):
        __protego_used['discovery']['get_discovery_summary']=['discovery:GetDiscoverySummary']
        for p in ['discovery:GetDiscoverySummary']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "GetDiscoverySummary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_configurations(self, *args, **kwargs):
        __protego_used['discovery']['list_configurations']=['discovery:ListConfigurations']
        for p in ['discovery:ListConfigurations']:
            res = {}
            for nm in ["configurationType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "ListConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_server_neighbors(self, *args, **kwargs):
        __protego_used['discovery']['list_server_neighbors']=['discovery:ListServerNeighbors']
        for p in ['discovery:ListServerNeighbors']:
            res = {}
            for nm in ["configurationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "ListServerNeighbors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_continuous_export(self, *args, **kwargs):
        __protego_used['discovery']['start_continuous_export']=['discovery:*']
        for p in ['discovery:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "StartContinuousExport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_data_collection_by_agent_ids(self, *args, **kwargs):
        __protego_used['discovery']['start_data_collection_by_agent_ids']=['discovery:StartDataCollectionByAgentIds']
        for p in ['discovery:StartDataCollectionByAgentIds']:
            res = {}
            for nm in ["agentIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "StartDataCollectionByAgentIds", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_export_task(self, *args, **kwargs):
        __protego_used['discovery']['start_export_task']=['discovery:StartExportTask']
        for p in ['discovery:StartExportTask']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "StartExportTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_import_task(self, *args, **kwargs):
        __protego_used['discovery']['start_import_task']=['discovery:StartImportTask']
        for p in ['discovery:StartImportTask']:
            res = {}
            for nm in ["importUrl","name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "StartImportTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_continuous_export(self, *args, **kwargs):
        __protego_used['discovery']['stop_continuous_export']=['discovery:*']
        for p in ['discovery:*']:
            res = {}
            for nm in ["exportId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "StopContinuousExport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_data_collection_by_agent_ids(self, *args, **kwargs):
        __protego_used['discovery']['stop_data_collection_by_agent_ids']=['discovery:StopDataCollectionByAgentIds']
        for p in ['discovery:StopDataCollectionByAgentIds']:
            res = {}
            for nm in ["agentIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "StopDataCollectionByAgentIds", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_application(self, *args, **kwargs):
        __protego_used['discovery']['update_application']=['discovery:UpdateApplication']
        for p in ['discovery:UpdateApplication']:
            res = {}
            for nm in ["configurationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['discovery'].append({'action': "UpdateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class dlm:
    def __init__(self, region_name=__default_region):
        __protego_used['dlm']= __protego_used.get('dlm', {})
        __protego_resource_map['dlm']=__protego_resource_map.get('dlm', [])
        self.region = region_name
    def create_lifecycle_policy(self, *args, **kwargs):
        __protego_used['dlm']['create_lifecycle_policy']=['dlm:*']
        for p in ['dlm:*']:
            res = {}
            for nm in ["State","Description","ExecutionRoleArn","PolicyDetails"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dlm'].append({'action': "CreateLifecyclePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_lifecycle_policy(self, *args, **kwargs):
        __protego_used['dlm']['delete_lifecycle_policy']=['dlm:*']
        for p in ['dlm:*']:
            res = {}
            for nm in ["PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dlm'].append({'action': "DeleteLifecyclePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_lifecycle_policies(self, *args, **kwargs):
        __protego_used['dlm']['get_lifecycle_policies']=['dlm:*']
        for p in ['dlm:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dlm'].append({'action': "GetLifecyclePolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_lifecycle_policy(self, *args, **kwargs):
        __protego_used['dlm']['get_lifecycle_policy']=['dlm:*']
        for p in ['dlm:*']:
            res = {}
            for nm in ["PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dlm'].append({'action': "GetLifecyclePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['dlm']['list_tags_for_resource']=['dlm:*']
        for p in ['dlm:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dlm'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['dlm']['tag_resource']=['dlm:*']
        for p in ['dlm:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dlm'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['dlm']['untag_resource']=['dlm:*']
        for p in ['dlm:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dlm'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_lifecycle_policy(self, *args, **kwargs):
        __protego_used['dlm']['update_lifecycle_policy']=['dlm:*']
        for p in ['dlm:*']:
            res = {}
            for nm in ["PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dlm'].append({'action': "UpdateLifecyclePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class dms:
    def __init__(self, region_name=__default_region):
        __protego_used['dms']= __protego_used.get('dms', {})
        __protego_resource_map['dms']=__protego_resource_map.get('dms', [])
        self.region = region_name
    def add_tags_to_resource(self, *args, **kwargs):
        __protego_used['dms']['add_tags_to_resource']=['dms:AddTagsToResource']
        for p in ['dms:AddTagsToResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "AddTagsToResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def apply_pending_maintenance_action(self, *args, **kwargs):
        __protego_used['dms']['apply_pending_maintenance_action']=['dms:ApplyPendingMaintenanceAction']
        for p in ['dms:ApplyPendingMaintenanceAction']:
            res = {}
            for nm in ["ApplyAction","OptInType","ReplicationInstanceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "ApplyPendingMaintenanceAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_endpoint(self, *args, **kwargs):
        __protego_used['dms']['create_endpoint']=['dms:CreateEndpoint']
        for p in ['dms:CreateEndpoint']:
            res = {}
            for nm in ["EndpointType","EndpointIdentifier","EngineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "CreateEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_event_subscription(self, *args, **kwargs):
        __protego_used['dms']['create_event_subscription']=['dms:*']
        for p in ['dms:*']:
            res = {}
            for nm in ["SnsTopicArn","SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "CreateEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_replication_instance(self, *args, **kwargs):
        __protego_used['dms']['create_replication_instance']=['dms:CreateReplicationInstance']
        for p in ['dms:CreateReplicationInstance']:
            res = {}
            for nm in ["ReplicationInstanceIdentifier","ReplicationInstanceClass"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "CreateReplicationInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_replication_subnet_group(self, *args, **kwargs):
        __protego_used['dms']['create_replication_subnet_group']=['dms:CreateReplicationSubnetGroup']
        for p in ['dms:CreateReplicationSubnetGroup']:
            res = {}
            for nm in ["ReplicationSubnetGroupIdentifier","ReplicationSubnetGroupDescription","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "CreateReplicationSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_replication_task(self, *args, **kwargs):
        __protego_used['dms']['create_replication_task']=['dms:CreateReplicationTask']
        for p in ['dms:CreateReplicationTask']:
            res = {}
            for nm in ["ReplicationTaskIdentifier","SourceEndpointArn","MigrationType","TableMappings","TargetEndpointArn","ReplicationInstanceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "CreateReplicationTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_certificate(self, *args, **kwargs):
        __protego_used['dms']['delete_certificate']=['dms:*']
        for p in ['dms:*']:
            res = {}
            for nm in ["CertificateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DeleteCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_connection(self, *args, **kwargs):
        __protego_used['dms']['delete_connection']=['dms:*']
        for p in ['dms:*']:
            res = {}
            for nm in ["EndpointArn","ReplicationInstanceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DeleteConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_endpoint(self, *args, **kwargs):
        __protego_used['dms']['delete_endpoint']=['dms:DeleteEndpoint']
        for p in ['dms:DeleteEndpoint']:
            res = {}
            for nm in ["EndpointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DeleteEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_event_subscription(self, *args, **kwargs):
        __protego_used['dms']['delete_event_subscription']=['dms:DeleteEventSubscription']
        for p in ['dms:DeleteEventSubscription']:
            res = {}
            for nm in ["SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DeleteEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_replication_instance(self, *args, **kwargs):
        __protego_used['dms']['delete_replication_instance']=['dms:DeleteReplicationInstance']
        for p in ['dms:DeleteReplicationInstance']:
            res = {}
            for nm in ["ReplicationInstanceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DeleteReplicationInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_replication_subnet_group(self, *args, **kwargs):
        __protego_used['dms']['delete_replication_subnet_group']=['dms:DeleteReplicationSubnetGroup']
        for p in ['dms:DeleteReplicationSubnetGroup']:
            res = {}
            for nm in ["ReplicationSubnetGroupIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DeleteReplicationSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_replication_task(self, *args, **kwargs):
        __protego_used['dms']['delete_replication_task']=['dms:DeleteReplicationTask']
        for p in ['dms:DeleteReplicationTask']:
            res = {}
            for nm in ["ReplicationTaskArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DeleteReplicationTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_attributes(self, *args, **kwargs):
        __protego_used['dms']['describe_account_attributes']=['dms:DescribeAccountAttributes']
        for p in ['dms:DescribeAccountAttributes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeAccountAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_certificates(self, *args, **kwargs):
        __protego_used['dms']['describe_certificates']=['dms:DescribeCertificates']
        for p in ['dms:DescribeCertificates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_connections(self, *args, **kwargs):
        __protego_used['dms']['describe_connections']=['dms:DescribeConnections']
        for p in ['dms:DescribeConnections']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_endpoint_types(self, *args, **kwargs):
        __protego_used['dms']['describe_endpoint_types']=['dms:DescribeEndpointTypes']
        for p in ['dms:DescribeEndpointTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeEndpointTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_endpoints(self, *args, **kwargs):
        __protego_used['dms']['describe_endpoints']=['dms:DescribeEndpoints']
        for p in ['dms:DescribeEndpoints']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_categories(self, *args, **kwargs):
        __protego_used['dms']['describe_event_categories']=['dms:DescribeEventCategories']
        for p in ['dms:DescribeEventCategories']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeEventCategories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_subscriptions(self, *args, **kwargs):
        __protego_used['dms']['describe_event_subscriptions']=['dms:DescribeEventSubscriptions']
        for p in ['dms:DescribeEventSubscriptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeEventSubscriptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_events(self, *args, **kwargs):
        __protego_used['dms']['describe_events']=['dms:DescribeEvents']
        for p in ['dms:DescribeEvents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_orderable_replication_instances(self, *args, **kwargs):
        __protego_used['dms']['describe_orderable_replication_instances']=['dms:DescribeOrderableReplicationInstances']
        for p in ['dms:DescribeOrderableReplicationInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeOrderableReplicationInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_pending_maintenance_actions(self, *args, **kwargs):
        __protego_used['dms']['describe_pending_maintenance_actions']=['dms:*']
        for p in ['dms:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribePendingMaintenanceActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_refresh_schemas_status(self, *args, **kwargs):
        __protego_used['dms']['describe_refresh_schemas_status']=['dms:DescribeRefreshSchemasStatus']
        for p in ['dms:DescribeRefreshSchemasStatus']:
            res = {}
            for nm in ["EndpointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeRefreshSchemasStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_replication_instance_task_logs(self, *args, **kwargs):
        __protego_used['dms']['describe_replication_instance_task_logs']=['dms:*','dms:DescribeReplicationInstanceTaskLogs']
        for p in ['dms:*','dms:DescribeReplicationInstanceTaskLogs']:
            res = {}
            for nm in ["ReplicationInstanceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeReplicationInstanceTaskLogs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_replication_instances(self, *args, **kwargs):
        __protego_used['dms']['describe_replication_instances']=['dms:DescribeReplicationInstances']
        for p in ['dms:DescribeReplicationInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeReplicationInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_replication_subnet_groups(self, *args, **kwargs):
        __protego_used['dms']['describe_replication_subnet_groups']=['dms:DescribeReplicationSubnetGroups']
        for p in ['dms:DescribeReplicationSubnetGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeReplicationSubnetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_replication_task_assessment_results(self, *args, **kwargs):
        __protego_used['dms']['describe_replication_task_assessment_results']=['dms:DescribeReplicationTaskAssessmentResults','dms:*']
        for p in ['dms:DescribeReplicationTaskAssessmentResults','dms:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeReplicationTaskAssessmentResults", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_replication_tasks(self, *args, **kwargs):
        __protego_used['dms']['describe_replication_tasks']=['dms:DescribeReplicationTasks']
        for p in ['dms:DescribeReplicationTasks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeReplicationTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_schemas(self, *args, **kwargs):
        __protego_used['dms']['describe_schemas']=['dms:DescribeSchemas']
        for p in ['dms:DescribeSchemas']:
            res = {}
            for nm in ["EndpointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeSchemas", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_table_statistics(self, *args, **kwargs):
        __protego_used['dms']['describe_table_statistics']=['dms:DescribeTableStatistics']
        for p in ['dms:DescribeTableStatistics']:
            res = {}
            for nm in ["ReplicationTaskArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "DescribeTableStatistics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_certificate(self, *args, **kwargs):
        __protego_used['dms']['import_certificate']=['dms:*']
        for p in ['dms:*']:
            res = {}
            for nm in ["CertificateIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "ImportCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['dms']['list_tags_for_resource']=['dms:ListTagsForResource']
        for p in ['dms:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_endpoint(self, *args, **kwargs):
        __protego_used['dms']['modify_endpoint']=['dms:ModifyEndpoint']
        for p in ['dms:ModifyEndpoint']:
            res = {}
            for nm in ["EndpointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "ModifyEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_event_subscription(self, *args, **kwargs):
        __protego_used['dms']['modify_event_subscription']=['dms:ModifyEventSubscription']
        for p in ['dms:ModifyEventSubscription']:
            res = {}
            for nm in ["SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "ModifyEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_replication_instance(self, *args, **kwargs):
        __protego_used['dms']['modify_replication_instance']=['dms:ModifyReplicationInstance']
        for p in ['dms:ModifyReplicationInstance']:
            res = {}
            for nm in ["ReplicationInstanceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "ModifyReplicationInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_replication_subnet_group(self, *args, **kwargs):
        __protego_used['dms']['modify_replication_subnet_group']=['dms:ModifyReplicationSubnetGroup']
        for p in ['dms:ModifyReplicationSubnetGroup']:
            res = {}
            for nm in ["ReplicationSubnetGroupIdentifier","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "ModifyReplicationSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_replication_task(self, *args, **kwargs):
        __protego_used['dms']['modify_replication_task']=['dms:ModifyReplicationTask']
        for p in ['dms:ModifyReplicationTask']:
            res = {}
            for nm in ["ReplicationTaskArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "ModifyReplicationTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_replication_instance(self, *args, **kwargs):
        __protego_used['dms']['reboot_replication_instance']=['dms:*']
        for p in ['dms:*']:
            res = {}
            for nm in ["ReplicationInstanceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "RebootReplicationInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def refresh_schemas(self, *args, **kwargs):
        __protego_used['dms']['refresh_schemas']=['dms:RefreshSchemas']
        for p in ['dms:RefreshSchemas']:
            res = {}
            for nm in ["EndpointArn","ReplicationInstanceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "RefreshSchemas", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reload_tables(self, *args, **kwargs):
        __protego_used['dms']['reload_tables']=['dms:*']
        for p in ['dms:*']:
            res = {}
            for nm in ["TablesToReload","ReplicationTaskArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "ReloadTables", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_resource(self, *args, **kwargs):
        __protego_used['dms']['remove_tags_from_resource']=['dms:RemoveTagsFromResource']
        for p in ['dms:RemoveTagsFromResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "RemoveTagsFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_replication_task(self, *args, **kwargs):
        __protego_used['dms']['start_replication_task']=['dms:StartReplicationTask']
        for p in ['dms:StartReplicationTask']:
            res = {}
            for nm in ["ReplicationTaskArn","StartReplicationTaskType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "StartReplicationTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_replication_task_assessment(self, *args, **kwargs):
        __protego_used['dms']['start_replication_task_assessment']=['dms:*']
        for p in ['dms:*']:
            res = {}
            for nm in ["ReplicationTaskArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "StartReplicationTaskAssessment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_replication_task(self, *args, **kwargs):
        __protego_used['dms']['stop_replication_task']=['dms:StopReplicationTask']
        for p in ['dms:StopReplicationTask']:
            res = {}
            for nm in ["ReplicationTaskArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "StopReplicationTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_connection(self, *args, **kwargs):
        __protego_used['dms']['test_connection']=['dms:TestConnection']
        for p in ['dms:TestConnection']:
            res = {}
            for nm in ["EndpointArn","ReplicationInstanceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dms'].append({'action': "TestConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class docdb:
    def __init__(self, region_name=__default_region):
        __protego_used['docdb']= __protego_used.get('docdb', {})
        __protego_resource_map['docdb']=__protego_resource_map.get('docdb', [])
        self.region = region_name
    def add_tags_to_resource(self, *args, **kwargs):
        __protego_used['docdb']['add_tags_to_resource']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["ResourceName","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "AddTagsToResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def apply_pending_maintenance_action(self, *args, **kwargs):
        __protego_used['docdb']['apply_pending_maintenance_action']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["ResourceIdentifier","ApplyAction","OptInType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "ApplyPendingMaintenanceAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['docdb']['copy_db_cluster_parameter_group']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["SourceDBClusterParameterGroupIdentifier","TargetDBClusterParameterGroupIdentifier","TargetDBClusterParameterGroupDescription"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "CopyDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_db_cluster_snapshot(self, *args, **kwargs):
        __protego_used['docdb']['copy_db_cluster_snapshot']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["TargetDBClusterSnapshotIdentifier","SourceDBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "CopyDBClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_cluster(self, *args, **kwargs):
        __protego_used['docdb']['create_db_cluster']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["Engine","DBClusterIdentifier","MasterUserPassword","MasterUsername"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "CreateDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['docdb']['create_db_cluster_parameter_group']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBParameterGroupFamily","Description","DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "CreateDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_cluster_snapshot(self, *args, **kwargs):
        __protego_used['docdb']['create_db_cluster_snapshot']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBClusterIdentifier","DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "CreateDBClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_instance(self, *args, **kwargs):
        __protego_used['docdb']['create_db_instance']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBInstanceIdentifier","Engine","DBInstanceClass","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "CreateDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_subnet_group(self, *args, **kwargs):
        __protego_used['docdb']['create_db_subnet_group']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "CreateDBSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_cluster(self, *args, **kwargs):
        __protego_used['docdb']['delete_db_cluster']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DeleteDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['docdb']['delete_db_cluster_parameter_group']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DeleteDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_cluster_snapshot(self, *args, **kwargs):
        __protego_used['docdb']['delete_db_cluster_snapshot']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DeleteDBClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_instance(self, *args, **kwargs):
        __protego_used['docdb']['delete_db_instance']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DeleteDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_subnet_group(self, *args, **kwargs):
        __protego_used['docdb']['delete_db_subnet_group']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBSubnetGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DeleteDBSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_certificates(self, *args, **kwargs):
        __protego_used['docdb']['describe_certificates']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_parameter_groups(self, *args, **kwargs):
        __protego_used['docdb']['describe_db_cluster_parameter_groups']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeDBClusterParameterGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_parameters(self, *args, **kwargs):
        __protego_used['docdb']['describe_db_cluster_parameters']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeDBClusterParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_snapshot_attributes(self, *args, **kwargs):
        __protego_used['docdb']['describe_db_cluster_snapshot_attributes']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeDBClusterSnapshotAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_snapshots(self, *args, **kwargs):
        __protego_used['docdb']['describe_db_cluster_snapshots']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeDBClusterSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_clusters(self, *args, **kwargs):
        __protego_used['docdb']['describe_db_clusters']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeDBClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_engine_versions(self, *args, **kwargs):
        __protego_used['docdb']['describe_db_engine_versions']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeDBEngineVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_instances(self, *args, **kwargs):
        __protego_used['docdb']['describe_db_instances']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeDBInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_subnet_groups(self, *args, **kwargs):
        __protego_used['docdb']['describe_db_subnet_groups']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeDBSubnetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_engine_default_cluster_parameters(self, *args, **kwargs):
        __protego_used['docdb']['describe_engine_default_cluster_parameters']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBParameterGroupFamily"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeEngineDefaultClusterParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_categories(self, *args, **kwargs):
        __protego_used['docdb']['describe_event_categories']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeEventCategories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_events(self, *args, **kwargs):
        __protego_used['docdb']['describe_events']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_orderable_db_instance_options(self, *args, **kwargs):
        __protego_used['docdb']['describe_orderable_db_instance_options']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["Engine"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribeOrderableDBInstanceOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_pending_maintenance_actions(self, *args, **kwargs):
        __protego_used['docdb']['describe_pending_maintenance_actions']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "DescribePendingMaintenanceActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def failover_db_cluster(self, *args, **kwargs):
        __protego_used['docdb']['failover_db_cluster']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "FailoverDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['docdb']['list_tags_for_resource']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["ResourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_cluster(self, *args, **kwargs):
        __protego_used['docdb']['modify_db_cluster']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "ModifyDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['docdb']['modify_db_cluster_parameter_group']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["Parameters","DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "ModifyDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_cluster_snapshot_attribute(self, *args, **kwargs):
        __protego_used['docdb']['modify_db_cluster_snapshot_attribute']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["AttributeName","DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "ModifyDBClusterSnapshotAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_instance(self, *args, **kwargs):
        __protego_used['docdb']['modify_db_instance']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "ModifyDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_subnet_group(self, *args, **kwargs):
        __protego_used['docdb']['modify_db_subnet_group']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBSubnetGroupName","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "ModifyDBSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_db_instance(self, *args, **kwargs):
        __protego_used['docdb']['reboot_db_instance']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "RebootDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_resource(self, *args, **kwargs):
        __protego_used['docdb']['remove_tags_from_resource']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["ResourceName","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "RemoveTagsFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['docdb']['reset_db_cluster_parameter_group']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "ResetDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_db_cluster_from_snapshot(self, *args, **kwargs):
        __protego_used['docdb']['restore_db_cluster_from_snapshot']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["Engine","DBClusterIdentifier","SnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "RestoreDBClusterFromSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_db_cluster_to_point_in_time(self, *args, **kwargs):
        __protego_used['docdb']['restore_db_cluster_to_point_in_time']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["SourceDBClusterIdentifier","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "RestoreDBClusterToPointInTime", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_db_cluster(self, *args, **kwargs):
        __protego_used['docdb']['start_db_cluster']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "StartDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_db_cluster(self, *args, **kwargs):
        __protego_used['docdb']['stop_db_cluster']=['docdb:*']
        for p in ['docdb:*']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['docdb'].append({'action': "StopDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class ds:
    def __init__(self, region_name=__default_region):
        __protego_used['ds']= __protego_used.get('ds', {})
        __protego_resource_map['ds']=__protego_resource_map.get('ds', [])
        self.region = region_name
    def accept_shared_directory(self, *args, **kwargs):
        __protego_used['ds']['accept_shared_directory']=['ds:AcceptSharedDirectory']
        for p in ['ds:AcceptSharedDirectory']:
            res = {}
            for nm in ["SharedDirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "AcceptSharedDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_ip_routes(self, *args, **kwargs):
        __protego_used['ds']['add_ip_routes']=['ds:AddIpRoutes']
        for p in ['ds:AddIpRoutes']:
            res = {}
            for nm in ["IpRoutes","DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "AddIpRoutes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_tags_to_resource(self, *args, **kwargs):
        __protego_used['ds']['add_tags_to_resource']=['ds:AddTagsToResource']
        for p in ['ds:AddTagsToResource']:
            res = {}
            for nm in ["ResourceId","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "AddTagsToResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_schema_extension(self, *args, **kwargs):
        __protego_used['ds']['cancel_schema_extension']=['ds:CancelSchemaExtension']
        for p in ['ds:CancelSchemaExtension']:
            res = {}
            for nm in ["SchemaExtensionId","DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "CancelSchemaExtension", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def connect_directory(self, *args, **kwargs):
        __protego_used['ds']['connect_directory']=['ds:ConnectDirectory']
        for p in ['ds:ConnectDirectory']:
            res = {}
            for nm in ["ConnectSettings","Size","Password","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "ConnectDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_alias(self, *args, **kwargs):
        __protego_used['ds']['create_alias']=['ds:CreateAlias']
        for p in ['ds:CreateAlias']:
            res = {}
            for nm in ["Alias","DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "CreateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_computer(self, *args, **kwargs):
        __protego_used['ds']['create_computer']=['ds:CreateComputer']
        for p in ['ds:CreateComputer']:
            res = {}
            for nm in ["ComputerName","DirectoryId","Password"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "CreateComputer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_conditional_forwarder(self, *args, **kwargs):
        __protego_used['ds']['create_conditional_forwarder']=['ds:CreateConditionalForwarder']
        for p in ['ds:CreateConditionalForwarder']:
            res = {}
            for nm in ["DnsIpAddrs","DirectoryId","RemoteDomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "CreateConditionalForwarder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_directory(self, *args, **kwargs):
        __protego_used['ds']['create_directory']=['ds:CreateDirectory']
        for p in ['ds:CreateDirectory']:
            res = {}
            for nm in ["Size","Password","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "CreateDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_log_subscription(self, *args, **kwargs):
        __protego_used['ds']['create_log_subscription']=['ds:CreateLogSubscription']
        for p in ['ds:CreateLogSubscription']:
            res = {}
            for nm in ["DirectoryId","LogGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "CreateLogSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_microsoft_ad(self, *args, **kwargs):
        __protego_used['ds']['create_microsoft_ad']=['ds:CreateMicrosoftAD']
        for p in ['ds:CreateMicrosoftAD']:
            res = {}
            for nm in ["VpcSettings","Password","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "CreateMicrosoftAD", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_snapshot(self, *args, **kwargs):
        __protego_used['ds']['create_snapshot']=['ds:CreateSnapshot']
        for p in ['ds:CreateSnapshot']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "CreateSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_trust(self, *args, **kwargs):
        __protego_used['ds']['create_trust']=['ds:CreateTrust']
        for p in ['ds:CreateTrust']:
            res = {}
            for nm in ["TrustDirection","TrustPassword","DirectoryId","RemoteDomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "CreateTrust", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_conditional_forwarder(self, *args, **kwargs):
        __protego_used['ds']['delete_conditional_forwarder']=['ds:DeleteConditionalForwarder']
        for p in ['ds:DeleteConditionalForwarder']:
            res = {}
            for nm in ["DirectoryId","RemoteDomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DeleteConditionalForwarder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_directory(self, *args, **kwargs):
        __protego_used['ds']['delete_directory']=['ds:DeleteDirectory']
        for p in ['ds:DeleteDirectory']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DeleteDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_log_subscription(self, *args, **kwargs):
        __protego_used['ds']['delete_log_subscription']=['ds:DeleteLogSubscription']
        for p in ['ds:DeleteLogSubscription']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DeleteLogSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_snapshot(self, *args, **kwargs):
        __protego_used['ds']['delete_snapshot']=['ds:DeleteSnapshot']
        for p in ['ds:DeleteSnapshot']:
            res = {}
            for nm in ["SnapshotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DeleteSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_trust(self, *args, **kwargs):
        __protego_used['ds']['delete_trust']=['ds:DeleteTrust']
        for p in ['ds:DeleteTrust']:
            res = {}
            for nm in ["TrustId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DeleteTrust", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_certificate(self, *args, **kwargs):
        __protego_used['ds']['deregister_certificate']=['ds:*']
        for p in ['ds:*']:
            res = {}
            for nm in ["DirectoryId","CertificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DeregisterCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_event_topic(self, *args, **kwargs):
        __protego_used['ds']['deregister_event_topic']=['ds:DeregisterEventTopic']
        for p in ['ds:DeregisterEventTopic']:
            res = {}
            for nm in ["DirectoryId","TopicName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DeregisterEventTopic", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_certificate(self, *args, **kwargs):
        __protego_used['ds']['describe_certificate']=['ds:*']
        for p in ['ds:*']:
            res = {}
            for nm in ["DirectoryId","CertificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DescribeCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_conditional_forwarders(self, *args, **kwargs):
        __protego_used['ds']['describe_conditional_forwarders']=['ds:DescribeConditionalForwarders']
        for p in ['ds:DescribeConditionalForwarders']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DescribeConditionalForwarders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_directories(self, *args, **kwargs):
        __protego_used['ds']['describe_directories']=['ds:DescribeDirectories']
        for p in ['ds:DescribeDirectories']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DescribeDirectories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_domain_controllers(self, *args, **kwargs):
        __protego_used['ds']['describe_domain_controllers']=['ds:DescribeDomainControllers','ds:*']
        for p in ['ds:DescribeDomainControllers','ds:*']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DescribeDomainControllers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_topics(self, *args, **kwargs):
        __protego_used['ds']['describe_event_topics']=['ds:DescribeEventTopics']
        for p in ['ds:DescribeEventTopics']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DescribeEventTopics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_ldaps_settings(self, *args, **kwargs):
        __protego_used['ds']['describe_ldaps_settings']=['ds:*']
        for p in ['ds:*']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DescribeLDAPSSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_shared_directories(self, *args, **kwargs):
        __protego_used['ds']['describe_shared_directories']=['ds:DescribeSharedDirectories']
        for p in ['ds:DescribeSharedDirectories']:
            res = {}
            for nm in ["OwnerDirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DescribeSharedDirectories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_snapshots(self, *args, **kwargs):
        __protego_used['ds']['describe_snapshots']=['ds:DescribeSnapshots']
        for p in ['ds:DescribeSnapshots']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DescribeSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_trusts(self, *args, **kwargs):
        __protego_used['ds']['describe_trusts']=['ds:DescribeTrusts']
        for p in ['ds:DescribeTrusts']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DescribeTrusts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_ldaps(self, *args, **kwargs):
        __protego_used['ds']['disable_ldaps']=['ds:*']
        for p in ['ds:*']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DisableLDAPS", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_radius(self, *args, **kwargs):
        __protego_used['ds']['disable_radius']=['ds:DisableRadius']
        for p in ['ds:DisableRadius']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DisableRadius", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_sso(self, *args, **kwargs):
        __protego_used['ds']['disable_sso']=['ds:DisableSso']
        for p in ['ds:DisableSso']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "DisableSso", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_ldaps(self, *args, **kwargs):
        __protego_used['ds']['enable_ldaps']=['ds:*']
        for p in ['ds:*']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "EnableLDAPS", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_radius(self, *args, **kwargs):
        __protego_used['ds']['enable_radius']=['ds:EnableRadius']
        for p in ['ds:EnableRadius']:
            res = {}
            for nm in ["DirectoryId","RadiusSettings"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "EnableRadius", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_sso(self, *args, **kwargs):
        __protego_used['ds']['enable_sso']=['ds:EnableSso']
        for p in ['ds:EnableSso']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "EnableSso", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_directory_limits(self, *args, **kwargs):
        __protego_used['ds']['get_directory_limits']=['ds:GetDirectoryLimits']
        for p in ['ds:GetDirectoryLimits']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "GetDirectoryLimits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_snapshot_limits(self, *args, **kwargs):
        __protego_used['ds']['get_snapshot_limits']=['ds:GetSnapshotLimits']
        for p in ['ds:GetSnapshotLimits']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "GetSnapshotLimits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_certificates(self, *args, **kwargs):
        __protego_used['ds']['list_certificates']=['ds:*']
        for p in ['ds:*']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "ListCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_ip_routes(self, *args, **kwargs):
        __protego_used['ds']['list_ip_routes']=['ds:ListIpRoutes']
        for p in ['ds:ListIpRoutes']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "ListIpRoutes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_log_subscriptions(self, *args, **kwargs):
        __protego_used['ds']['list_log_subscriptions']=['ds:ListLogSubscriptions']
        for p in ['ds:ListLogSubscriptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "ListLogSubscriptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_schema_extensions(self, *args, **kwargs):
        __protego_used['ds']['list_schema_extensions']=['ds:ListSchemaExtensions']
        for p in ['ds:ListSchemaExtensions']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "ListSchemaExtensions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['ds']['list_tags_for_resource']=['ds:ListTagsForResource']
        for p in ['ds:ListTagsForResource']:
            res = {}
            for nm in ["ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_certificate(self, *args, **kwargs):
        __protego_used['ds']['register_certificate']=['ds:*']
        for p in ['ds:*']:
            res = {}
            for nm in ["DirectoryId","CertificateData"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "RegisterCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_event_topic(self, *args, **kwargs):
        __protego_used['ds']['register_event_topic']=['ds:RegisterEventTopic']
        for p in ['ds:RegisterEventTopic']:
            res = {}
            for nm in ["DirectoryId","TopicName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "RegisterEventTopic", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_shared_directory(self, *args, **kwargs):
        __protego_used['ds']['reject_shared_directory']=['ds:RejectSharedDirectory']
        for p in ['ds:RejectSharedDirectory']:
            res = {}
            for nm in ["SharedDirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "RejectSharedDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_ip_routes(self, *args, **kwargs):
        __protego_used['ds']['remove_ip_routes']=['ds:RemoveIpRoutes']
        for p in ['ds:RemoveIpRoutes']:
            res = {}
            for nm in ["DirectoryId","CidrIps"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "RemoveIpRoutes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_resource(self, *args, **kwargs):
        __protego_used['ds']['remove_tags_from_resource']=['ds:RemoveTagsFromResource']
        for p in ['ds:RemoveTagsFromResource']:
            res = {}
            for nm in ["ResourceId","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "RemoveTagsFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_user_password(self, *args, **kwargs):
        __protego_used['ds']['reset_user_password']=['ds:*']
        for p in ['ds:*']:
            res = {}
            for nm in ["NewPassword","DirectoryId","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "ResetUserPassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_from_snapshot(self, *args, **kwargs):
        __protego_used['ds']['restore_from_snapshot']=['ds:RestoreFromSnapshot']
        for p in ['ds:RestoreFromSnapshot']:
            res = {}
            for nm in ["SnapshotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "RestoreFromSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def share_directory(self, *args, **kwargs):
        __protego_used['ds']['share_directory']=['ds:ShareDirectory']
        for p in ['ds:ShareDirectory']:
            res = {}
            for nm in ["ShareMethod","ShareTarget","DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "ShareDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_schema_extension(self, *args, **kwargs):
        __protego_used['ds']['start_schema_extension']=['ds:StartSchemaExtension']
        for p in ['ds:StartSchemaExtension']:
            res = {}
            for nm in ["LdifContent","Description","DirectoryId","CreateSnapshotBeforeSchemaExtension"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "StartSchemaExtension", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unshare_directory(self, *args, **kwargs):
        __protego_used['ds']['unshare_directory']=['ds:UnshareDirectory']
        for p in ['ds:UnshareDirectory']:
            res = {}
            for nm in ["DirectoryId","UnshareTarget"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "UnshareDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_conditional_forwarder(self, *args, **kwargs):
        __protego_used['ds']['update_conditional_forwarder']=['ds:UpdateConditionalForwarder']
        for p in ['ds:UpdateConditionalForwarder']:
            res = {}
            for nm in ["DnsIpAddrs","DirectoryId","RemoteDomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "UpdateConditionalForwarder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_number_of_domain_controllers(self, *args, **kwargs):
        __protego_used['ds']['update_number_of_domain_controllers']=['ds:*']
        for p in ['ds:*']:
            res = {}
            for nm in ["DesiredNumber","DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "UpdateNumberOfDomainControllers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_radius(self, *args, **kwargs):
        __protego_used['ds']['update_radius']=['ds:UpdateRadius']
        for p in ['ds:UpdateRadius']:
            res = {}
            for nm in ["DirectoryId","RadiusSettings"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "UpdateRadius", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_trust(self, *args, **kwargs):
        __protego_used['ds']['update_trust']=['ds:*']
        for p in ['ds:*']:
            res = {}
            for nm in ["TrustId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "UpdateTrust", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def verify_trust(self, *args, **kwargs):
        __protego_used['ds']['verify_trust']=['ds:VerifyTrust']
        for p in ['ds:VerifyTrust']:
            res = {}
            for nm in ["TrustId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ds'].append({'action': "VerifyTrust", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class dynamodb:
    def __init__(self, region_name=__default_region):
        __protego_used['dynamodb']= __protego_used.get('dynamodb', {})
        __protego_resource_map['dynamodb']=__protego_resource_map.get('dynamodb', [])
        self.region = region_name
    def batch_get_item(self, *args, **kwargs):
        __protego_used['dynamodb']['batch_get_item']=['dynamodb:BatchGetItem']
        for p in ['dynamodb:BatchGetItem']:
            res = {}
            for nm in ["RequestItems"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "BatchGetItem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_write_item(self, *args, **kwargs):
        __protego_used['dynamodb']['batch_write_item']=['dynamodb:BatchWriteItem']
        for p in ['dynamodb:BatchWriteItem']:
            res = {}
            for nm in ["RequestItems"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "BatchWriteItem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_backup(self, *args, **kwargs):
        __protego_used['dynamodb']['create_backup']=['dynamodb:CreateBackup']
        for p in ['dynamodb:CreateBackup']:
            res = {}
            for nm in ["BackupName","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "CreateBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_global_table(self, *args, **kwargs):
        __protego_used['dynamodb']['create_global_table']=['dynamodb:CreateGlobalTable','dynamodb:CreateGlobalTable']
        for p in ['dynamodb:CreateGlobalTable','dynamodb:CreateGlobalTable']:
            res = {}
            for nm in ["ReplicationGroup","GlobalTableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "CreateGlobalTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_table(self, *args, **kwargs):
        __protego_used['dynamodb']['create_table']=['dynamodb:CreateTable']
        for p in ['dynamodb:CreateTable']:
            res = {}
            for nm in ["KeySchema","AttributeDefinitions","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "CreateTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_backup(self, *args, **kwargs):
        __protego_used['dynamodb']['delete_backup']=['dynamodb:DeleteBackup']
        for p in ['dynamodb:DeleteBackup']:
            res = {}
            for nm in ["BackupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DeleteBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_item(self, *args, **kwargs):
        __protego_used['dynamodb']['delete_item']=['dynamodb:DeleteItem']
        for p in ['dynamodb:DeleteItem']:
            res = {}
            for nm in ["Key","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DeleteItem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_table(self, *args, **kwargs):
        __protego_used['dynamodb']['delete_table']=['dynamodb:DeleteTable']
        for p in ['dynamodb:DeleteTable']:
            res = {}
            for nm in ["TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DeleteTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_backup(self, *args, **kwargs):
        __protego_used['dynamodb']['describe_backup']=['dynamodb:DescribeBackup']
        for p in ['dynamodb:DescribeBackup']:
            res = {}
            for nm in ["BackupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DescribeBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_continuous_backups(self, *args, **kwargs):
        __protego_used['dynamodb']['describe_continuous_backups']=['dynamodb:DescribeContinuousBackups']
        for p in ['dynamodb:DescribeContinuousBackups']:
            res = {}
            for nm in ["TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DescribeContinuousBackups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_contributor_insights(self, *args, **kwargs):
        __protego_used['dynamodb']['describe_contributor_insights']=['dynamodb:*']
        for p in ['dynamodb:*']:
            res = {}
            for nm in ["TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DescribeContributorInsights", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_endpoints(self, *args, **kwargs):
        __protego_used['dynamodb']['describe_endpoints']=['dynamodb:*']
        for p in ['dynamodb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DescribeEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_global_table(self, *args, **kwargs):
        __protego_used['dynamodb']['describe_global_table']=['dynamodb:DescribeGlobalTable']
        for p in ['dynamodb:DescribeGlobalTable']:
            res = {}
            for nm in ["GlobalTableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DescribeGlobalTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_global_table_settings(self, *args, **kwargs):
        __protego_used['dynamodb']['describe_global_table_settings']=['dynamodb:DescribeGlobalTableSettings']
        for p in ['dynamodb:DescribeGlobalTableSettings']:
            res = {}
            for nm in ["GlobalTableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DescribeGlobalTableSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_limits(self, *args, **kwargs):
        __protego_used['dynamodb']['describe_limits']=['dynamodb:DescribeLimits']
        for p in ['dynamodb:DescribeLimits']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DescribeLimits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_table(self, *args, **kwargs):
        __protego_used['dynamodb']['describe_table']=['dynamodb:DescribeTable']
        for p in ['dynamodb:DescribeTable']:
            res = {}
            for nm in ["TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DescribeTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_table_replica_auto_scaling(self, *args, **kwargs):
        __protego_used['dynamodb']['describe_table_replica_auto_scaling']=['dynamodb:*']
        for p in ['dynamodb:*']:
            res = {}
            for nm in ["TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DescribeTableReplicaAutoScaling", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_time_to_live(self, *args, **kwargs):
        __protego_used['dynamodb']['describe_time_to_live']=['dynamodb:DescribeTimeToLive']
        for p in ['dynamodb:DescribeTimeToLive']:
            res = {}
            for nm in ["TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "DescribeTimeToLive", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_item(self, *args, **kwargs):
        __protego_used['dynamodb']['get_item']=['dynamodb:GetItem']
        for p in ['dynamodb:GetItem']:
            res = {}
            for nm in ["Key","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "GetItem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_backups(self, *args, **kwargs):
        __protego_used['dynamodb']['list_backups']=['dynamodb:ListBackups']
        for p in ['dynamodb:ListBackups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "ListBackups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_contributor_insights(self, *args, **kwargs):
        __protego_used['dynamodb']['list_contributor_insights']=['dynamodb:*']
        for p in ['dynamodb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "ListContributorInsights", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_global_tables(self, *args, **kwargs):
        __protego_used['dynamodb']['list_global_tables']=['dynamodb:ListGlobalTables']
        for p in ['dynamodb:ListGlobalTables']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "ListGlobalTables", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tables(self, *args, **kwargs):
        __protego_used['dynamodb']['list_tables']=['dynamodb:ListTables']
        for p in ['dynamodb:ListTables']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "ListTables", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_of_resource(self, *args, **kwargs):
        __protego_used['dynamodb']['list_tags_of_resource']=['dynamodb:ListTagsOfResource']
        for p in ['dynamodb:ListTagsOfResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "ListTagsOfResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_item(self, *args, **kwargs):
        __protego_used['dynamodb']['put_item']=['dynamodb:PutItem']
        for p in ['dynamodb:PutItem']:
            res = {}
            for nm in ["TableName","Item"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "PutItem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def query(self, *args, **kwargs):
        __protego_used['dynamodb']['query']=['dynamodb:Query','dynamodb:Query']
        for p in ['dynamodb:Query','dynamodb:Query']:
            res = {}
            for nm in ["TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "Query", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_table_from_backup(self, *args, **kwargs):
        __protego_used['dynamodb']['restore_table_from_backup']=['dynamodb:RestoreTableFromBackup','dynamodb:RestoreTableFromBackup']
        for p in ['dynamodb:RestoreTableFromBackup','dynamodb:RestoreTableFromBackup']:
            res = {}
            for nm in ["TargetTableName","BackupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "RestoreTableFromBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_table_to_point_in_time(self, *args, **kwargs):
        __protego_used['dynamodb']['restore_table_to_point_in_time']=['dynamodb:RestoreTableToPointInTime','dynamodb:RestoreTableToPointInTime']
        for p in ['dynamodb:RestoreTableToPointInTime','dynamodb:RestoreTableToPointInTime']:
            res = {}
            for nm in ["SourceTableName","TargetTableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "RestoreTableToPointInTime", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def scan(self, *args, **kwargs):
        __protego_used['dynamodb']['scan']=['dynamodb:Scan','dynamodb:Scan']
        for p in ['dynamodb:Scan','dynamodb:Scan']:
            res = {}
            for nm in ["TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "Scan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['dynamodb']['tag_resource']=['dynamodb:TagResource']
        for p in ['dynamodb:TagResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def transact_get_items(self, *args, **kwargs):
        __protego_used['dynamodb']['transact_get_items']=['dynamodb:*']
        for p in ['dynamodb:*']:
            res = {}
            for nm in ["TransactItems"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "TransactGetItems", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def transact_write_items(self, *args, **kwargs):
        __protego_used['dynamodb']['transact_write_items']=['dynamodb:*']
        for p in ['dynamodb:*']:
            res = {}
            for nm in ["TransactItems"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "TransactWriteItems", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['dynamodb']['untag_resource']=['dynamodb:UntagResource']
        for p in ['dynamodb:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_continuous_backups(self, *args, **kwargs):
        __protego_used['dynamodb']['update_continuous_backups']=['dynamodb:UpdateContinuousBackups']
        for p in ['dynamodb:UpdateContinuousBackups']:
            res = {}
            for nm in ["TableName","PointInTimeRecoverySpecification"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "UpdateContinuousBackups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_contributor_insights(self, *args, **kwargs):
        __protego_used['dynamodb']['update_contributor_insights']=['dynamodb:*']
        for p in ['dynamodb:*']:
            res = {}
            for nm in ["ContributorInsightsAction","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "UpdateContributorInsights", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_global_table(self, *args, **kwargs):
        __protego_used['dynamodb']['update_global_table']=['dynamodb:UpdateGlobalTable','dynamodb:UpdateGlobalTable']
        for p in ['dynamodb:UpdateGlobalTable','dynamodb:UpdateGlobalTable']:
            res = {}
            for nm in ["GlobalTableName","ReplicaUpdates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "UpdateGlobalTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_global_table_settings(self, *args, **kwargs):
        __protego_used['dynamodb']['update_global_table_settings']=['dynamodb:UpdateGlobalTableSettings']
        for p in ['dynamodb:UpdateGlobalTableSettings']:
            res = {}
            for nm in ["GlobalTableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "UpdateGlobalTableSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_item(self, *args, **kwargs):
        __protego_used['dynamodb']['update_item']=['dynamodb:UpdateItem']
        for p in ['dynamodb:UpdateItem']:
            res = {}
            for nm in ["Key","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "UpdateItem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_table(self, *args, **kwargs):
        __protego_used['dynamodb']['update_table']=['dynamodb:UpdateTable']
        for p in ['dynamodb:UpdateTable']:
            res = {}
            for nm in ["TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "UpdateTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_table_replica_auto_scaling(self, *args, **kwargs):
        __protego_used['dynamodb']['update_table_replica_auto_scaling']=['dynamodb:*']
        for p in ['dynamodb:*']:
            res = {}
            for nm in ["TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "UpdateTableReplicaAutoScaling", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_time_to_live(self, *args, **kwargs):
        __protego_used['dynamodb']['update_time_to_live']=['dynamodb:UpdateTimeToLive']
        for p in ['dynamodb:UpdateTimeToLive']:
            res = {}
            for nm in ["TimeToLiveSpecification","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodb'].append({'action': "UpdateTimeToLive", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class dynamodbstreams:
    def __init__(self, region_name=__default_region):
        __protego_used['dynamodbstreams']= __protego_used.get('dynamodbstreams', {})
        __protego_resource_map['dynamodbstreams']=__protego_resource_map.get('dynamodbstreams', [])
        self.region = region_name
    def describe_stream(self, *args, **kwargs):
        __protego_used['dynamodbstreams']['describe_stream']=['dynamodb:DescribeStream']
        for p in ['dynamodb:DescribeStream']:
            res = {}
            for nm in ["StreamArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodbstreams'].append({'action': "DescribeStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_records(self, *args, **kwargs):
        __protego_used['dynamodbstreams']['get_records']=['dynamodb:GetRecords']
        for p in ['dynamodb:GetRecords']:
            res = {}
            for nm in ["ShardIterator"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodbstreams'].append({'action': "GetRecords", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_shard_iterator(self, *args, **kwargs):
        __protego_used['dynamodbstreams']['get_shard_iterator']=['dynamodb:GetShardIterator']
        for p in ['dynamodb:GetShardIterator']:
            res = {}
            for nm in ["ShardId","StreamArn","ShardIteratorType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodbstreams'].append({'action': "GetShardIterator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_streams(self, *args, **kwargs):
        __protego_used['dynamodbstreams']['list_streams']=['dynamodb:ListStreams']
        for p in ['dynamodb:ListStreams']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['dynamodbstreams'].append({'action': "ListStreams", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class ebs:
    def __init__(self, region_name=__default_region):
        __protego_used['ebs']= __protego_used.get('ebs', {})
        __protego_resource_map['ebs']=__protego_resource_map.get('ebs', [])
        self.region = region_name
    def get_snapshot_block(self, *args, **kwargs):
        __protego_used['ebs']['get_snapshot_block']=['ebs:*']
        for p in ['ebs:*']:
            res = {}
            for nm in ["BlockToken","SnapshotId","BlockIndex"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ebs'].append({'action': "GetSnapshotBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_changed_blocks(self, *args, **kwargs):
        __protego_used['ebs']['list_changed_blocks']=['ebs:*']
        for p in ['ebs:*']:
            res = {}
            for nm in ["SecondSnapshotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ebs'].append({'action': "ListChangedBlocks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_snapshot_blocks(self, *args, **kwargs):
        __protego_used['ebs']['list_snapshot_blocks']=['ebs:*']
        for p in ['ebs:*']:
            res = {}
            for nm in ["SnapshotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ebs'].append({'action': "ListSnapshotBlocks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class ec2:
    def __init__(self, region_name=__default_region):
        __protego_used['ec2']= __protego_used.get('ec2', {})
        __protego_resource_map['ec2']=__protego_resource_map.get('ec2', [])
        self.region = region_name
    def accept_reserved_instances_exchange_quote(self, *args, **kwargs):
        __protego_used['ec2']['accept_reserved_instances_exchange_quote']=['ec2:AcceptReservedInstancesExchangeQuote']
        for p in ['ec2:AcceptReservedInstancesExchangeQuote']:
            res = {}
            for nm in ["ReservedInstanceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AcceptReservedInstancesExchangeQuote", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def accept_transit_gateway_peering_attachment(self, *args, **kwargs):
        __protego_used['ec2']['accept_transit_gateway_peering_attachment']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TransitGatewayAttachmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AcceptTransitGatewayPeeringAttachment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def accept_transit_gateway_vpc_attachment(self, *args, **kwargs):
        __protego_used['ec2']['accept_transit_gateway_vpc_attachment']=['ec2:AcceptTransitGatewayVpcAttachment']
        for p in ['ec2:AcceptTransitGatewayVpcAttachment']:
            res = {}
            for nm in ["TransitGatewayAttachmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AcceptTransitGatewayVpcAttachment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def accept_vpc_endpoint_connections(self, *args, **kwargs):
        __protego_used['ec2']['accept_vpc_endpoint_connections']=['ec2:AcceptVpcEndpointConnections']
        for p in ['ec2:AcceptVpcEndpointConnections']:
            res = {}
            for nm in ["VpcEndpointIds","ServiceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AcceptVpcEndpointConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def accept_vpc_peering_connection(self, *args, **kwargs):
        __protego_used['ec2']['accept_vpc_peering_connection']=['ec2:AcceptVpcPeeringConnection','ec2:AcceptVpcPeeringConnection']
        for p in ['ec2:AcceptVpcPeeringConnection','ec2:AcceptVpcPeeringConnection']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AcceptVpcPeeringConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def advertise_byoip_cidr(self, *args, **kwargs):
        __protego_used['ec2']['advertise_byoip_cidr']=['ec2:AdvertiseByoipCidr']
        for p in ['ec2:AdvertiseByoipCidr']:
            res = {}
            for nm in ["Cidr"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AdvertiseByoipCidr", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def allocate_address(self, *args, **kwargs):
        __protego_used['ec2']['allocate_address']=['ec2:AllocateAddress']
        for p in ['ec2:AllocateAddress']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AllocateAddress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def allocate_hosts(self, *args, **kwargs):
        __protego_used['ec2']['allocate_hosts']=['ec2:AllocateHosts']
        for p in ['ec2:AllocateHosts']:
            res = {}
            for nm in ["Quantity","AvailabilityZone"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AllocateHosts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def apply_security_groups_to_client_vpn_target_network(self, *args, **kwargs):
        __protego_used['ec2']['apply_security_groups_to_client_vpn_target_network']=['ec2:ApplySecurityGroupsToClientVpnTargetNetwork','ec2:ApplySecurityGroupsToClientVpnTargetNetwork','ec2:ApplySecurityGroupsToClientVpnTargetNetwork']
        for p in ['ec2:ApplySecurityGroupsToClientVpnTargetNetwork','ec2:ApplySecurityGroupsToClientVpnTargetNetwork','ec2:ApplySecurityGroupsToClientVpnTargetNetwork']:
            res = {}
            for nm in ["SecurityGroupIds","ClientVpnEndpointId","VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ApplySecurityGroupsToClientVpnTargetNetwork", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def assign_ipv6_addresses(self, *args, **kwargs):
        __protego_used['ec2']['assign_ipv6_addresses']=['ec2:AssignIpv6Addresses']
        for p in ['ec2:AssignIpv6Addresses']:
            res = {}
            for nm in ["NetworkInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AssignIpv6Addresses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def assign_private_ip_addresses(self, *args, **kwargs):
        __protego_used['ec2']['assign_private_ip_addresses']=['ec2:AssignPrivateIpAddresses']
        for p in ['ec2:AssignPrivateIpAddresses']:
            res = {}
            for nm in ["NetworkInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AssignPrivateIpAddresses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_address(self, *args, **kwargs):
        __protego_used['ec2']['associate_address']=['ec2:AssociateAddress']
        for p in ['ec2:AssociateAddress']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AssociateAddress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_client_vpn_target_network(self, *args, **kwargs):
        __protego_used['ec2']['associate_client_vpn_target_network']=['ec2:AssociateClientVpnTargetNetwork','ec2:AssociateClientVpnTargetNetwork']
        for p in ['ec2:AssociateClientVpnTargetNetwork','ec2:AssociateClientVpnTargetNetwork']:
            res = {}
            for nm in ["ClientVpnEndpointId","SubnetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AssociateClientVpnTargetNetwork", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_dhcp_options(self, *args, **kwargs):
        __protego_used['ec2']['associate_dhcp_options']=['ec2:AssociateDhcpOptions']
        for p in ['ec2:AssociateDhcpOptions']:
            res = {}
            for nm in ["DhcpOptionsId","VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AssociateDhcpOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_iam_instance_profile(self, *args, **kwargs):
        __protego_used['ec2']['associate_iam_instance_profile']=['ec2:AssociateIamInstanceProfile']
        for p in ['ec2:AssociateIamInstanceProfile']:
            res = {}
            for nm in ["IamInstanceProfile","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AssociateIamInstanceProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_route_table(self, *args, **kwargs):
        __protego_used['ec2']['associate_route_table']=['ec2:AssociateRouteTable']
        for p in ['ec2:AssociateRouteTable']:
            res = {}
            for nm in ["RouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AssociateRouteTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_subnet_cidr_block(self, *args, **kwargs):
        __protego_used['ec2']['associate_subnet_cidr_block']=['ec2:AssociateSubnetCidrBlock']
        for p in ['ec2:AssociateSubnetCidrBlock']:
            res = {}
            for nm in ["SubnetId","Ipv6CidrBlock"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AssociateSubnetCidrBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_transit_gateway_multicast_domain(self, *args, **kwargs):
        __protego_used['ec2']['associate_transit_gateway_multicast_domain']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AssociateTransitGatewayMulticastDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_transit_gateway_route_table(self, *args, **kwargs):
        __protego_used['ec2']['associate_transit_gateway_route_table']=['ec2:AssociateTransitGatewayRouteTable','ec2:AssociateTransitGatewayRouteTable']
        for p in ['ec2:AssociateTransitGatewayRouteTable','ec2:AssociateTransitGatewayRouteTable']:
            res = {}
            for nm in ["TransitGatewayAttachmentId","TransitGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AssociateTransitGatewayRouteTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_vpc_cidr_block(self, *args, **kwargs):
        __protego_used['ec2']['associate_vpc_cidr_block']=['ec2:AssociateVpcCidrBlock']
        for p in ['ec2:AssociateVpcCidrBlock']:
            res = {}
            for nm in ["VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AssociateVpcCidrBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_classic_link_vpc(self, *args, **kwargs):
        __protego_used['ec2']['attach_classic_link_vpc']=['ec2:AttachClassicLinkVpc','ec2:AttachClassicLinkVpc','ec2:AttachClassicLinkVpc']
        for p in ['ec2:AttachClassicLinkVpc','ec2:AttachClassicLinkVpc','ec2:AttachClassicLinkVpc']:
            res = {}
            for nm in ["Groups","InstanceId","VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AttachClassicLinkVpc", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_internet_gateway(self, *args, **kwargs):
        __protego_used['ec2']['attach_internet_gateway']=['ec2:AttachInternetGateway']
        for p in ['ec2:AttachInternetGateway']:
            res = {}
            for nm in ["InternetGatewayId","VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AttachInternetGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_network_interface(self, *args, **kwargs):
        __protego_used['ec2']['attach_network_interface']=['ec2:AttachNetworkInterface']
        for p in ['ec2:AttachNetworkInterface']:
            res = {}
            for nm in ["DeviceIndex","NetworkInterfaceId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AttachNetworkInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_volume(self, *args, **kwargs):
        __protego_used['ec2']['attach_volume']=['ec2:AttachVolume','ec2:AttachVolume']
        for p in ['ec2:AttachVolume','ec2:AttachVolume']:
            res = {}
            for nm in ["VolumeId","InstanceId","Device"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AttachVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_vpn_gateway(self, *args, **kwargs):
        __protego_used['ec2']['attach_vpn_gateway']=['ec2:AttachVpnGateway']
        for p in ['ec2:AttachVpnGateway']:
            res = {}
            for nm in ["VpnGatewayId","VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AttachVpnGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def authorize_client_vpn_ingress(self, *args, **kwargs):
        __protego_used['ec2']['authorize_client_vpn_ingress']=['ec2:AuthorizeClientVpnIngress']
        for p in ['ec2:AuthorizeClientVpnIngress']:
            res = {}
            for nm in ["ClientVpnEndpointId","TargetNetworkCidr"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AuthorizeClientVpnIngress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def authorize_security_group_egress(self, *args, **kwargs):
        __protego_used['ec2']['authorize_security_group_egress']=['ec2:AuthorizeSecurityGroupEgress']
        for p in ['ec2:AuthorizeSecurityGroupEgress']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AuthorizeSecurityGroupEgress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def authorize_security_group_ingress(self, *args, **kwargs):
        __protego_used['ec2']['authorize_security_group_ingress']=['ec2:AuthorizeSecurityGroupIngress']
        for p in ['ec2:AuthorizeSecurityGroupIngress']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "AuthorizeSecurityGroupIngress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def bundle_instance(self, *args, **kwargs):
        __protego_used['ec2']['bundle_instance']=['ec2:BundleInstance']
        for p in ['ec2:BundleInstance']:
            res = {}
            for nm in ["Storage","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "BundleInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_bundle_task(self, *args, **kwargs):
        __protego_used['ec2']['cancel_bundle_task']=['ec2:CancelBundleTask']
        for p in ['ec2:CancelBundleTask']:
            res = {}
            for nm in ["BundleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CancelBundleTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_capacity_reservation(self, *args, **kwargs):
        __protego_used['ec2']['cancel_capacity_reservation']=['ec2:CancelCapacityReservation']
        for p in ['ec2:CancelCapacityReservation']:
            res = {}
            for nm in ["CapacityReservationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CancelCapacityReservation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_conversion_task(self, *args, **kwargs):
        __protego_used['ec2']['cancel_conversion_task']=['ec2:CancelConversionTask']
        for p in ['ec2:CancelConversionTask']:
            res = {}
            for nm in ["ConversionTaskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CancelConversionTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_export_task(self, *args, **kwargs):
        __protego_used['ec2']['cancel_export_task']=['ec2:CancelExportTask']
        for p in ['ec2:CancelExportTask']:
            res = {}
            for nm in ["ExportTaskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CancelExportTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_import_task(self, *args, **kwargs):
        __protego_used['ec2']['cancel_import_task']=['ec2:CancelImportTask']
        for p in ['ec2:CancelImportTask']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CancelImportTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_reserved_instances_listing(self, *args, **kwargs):
        __protego_used['ec2']['cancel_reserved_instances_listing']=['ec2:CancelReservedInstancesListing']
        for p in ['ec2:CancelReservedInstancesListing']:
            res = {}
            for nm in ["ReservedInstancesListingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CancelReservedInstancesListing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_spot_fleet_requests(self, *args, **kwargs):
        __protego_used['ec2']['cancel_spot_fleet_requests']=['ec2:CancelSpotFleetRequests']
        for p in ['ec2:CancelSpotFleetRequests']:
            res = {}
            for nm in ["SpotFleetRequestIds","TerminateInstances"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CancelSpotFleetRequests", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_spot_instance_requests(self, *args, **kwargs):
        __protego_used['ec2']['cancel_spot_instance_requests']=['ec2:CancelSpotInstanceRequests']
        for p in ['ec2:CancelSpotInstanceRequests']:
            res = {}
            for nm in ["SpotInstanceRequestIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CancelSpotInstanceRequests", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def confirm_product_instance(self, *args, **kwargs):
        __protego_used['ec2']['confirm_product_instance']=['ec2:ConfirmProductInstance']
        for p in ['ec2:ConfirmProductInstance']:
            res = {}
            for nm in ["ProductCode","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ConfirmProductInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_fpga_image(self, *args, **kwargs):
        __protego_used['ec2']['copy_fpga_image']=['ec2:CopyFpgaImage']
        for p in ['ec2:CopyFpgaImage']:
            res = {}
            for nm in ["SourceFpgaImageId","SourceRegion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CopyFpgaImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_image(self, *args, **kwargs):
        __protego_used['ec2']['copy_image']=['ec2:CopyImage']
        for p in ['ec2:CopyImage']:
            res = {}
            for nm in ["SourceImageId","Name","SourceRegion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CopyImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_snapshot(self, *args, **kwargs):
        __protego_used['ec2']['copy_snapshot']=['ec2:CopySnapshot']
        for p in ['ec2:CopySnapshot']:
            res = {}
            for nm in ["SourceSnapshotId","SourceRegion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CopySnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_capacity_reservation(self, *args, **kwargs):
        __protego_used['ec2']['create_capacity_reservation']=['ec2:CreateCapacityReservation']
        for p in ['ec2:CreateCapacityReservation']:
            res = {}
            for nm in ["InstanceCount","InstanceType","InstancePlatform"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateCapacityReservation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_client_vpn_endpoint(self, *args, **kwargs):
        __protego_used['ec2']['create_client_vpn_endpoint']=['ec2:CreateClientVpnEndpoint']
        for p in ['ec2:CreateClientVpnEndpoint']:
            res = {}
            for nm in ["ServerCertificateArn","ClientCidrBlock","ConnectionLogOptions","AuthenticationOptions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateClientVpnEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_client_vpn_route(self, *args, **kwargs):
        __protego_used['ec2']['create_client_vpn_route']=['ec2:CreateClientVpnRoute','ec2:CreateClientVpnRoute']
        for p in ['ec2:CreateClientVpnRoute','ec2:CreateClientVpnRoute']:
            res = {}
            for nm in ["DestinationCidrBlock","TargetVpcSubnetId","ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateClientVpnRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_customer_gateway(self, *args, **kwargs):
        __protego_used['ec2']['create_customer_gateway']=['ec2:CreateCustomerGateway']
        for p in ['ec2:CreateCustomerGateway']:
            res = {}
            for nm in ["BgpAsn","Type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateCustomerGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_default_subnet(self, *args, **kwargs):
        __protego_used['ec2']['create_default_subnet']=['ec2:CreateDefaultSubnet']
        for p in ['ec2:CreateDefaultSubnet']:
            res = {}
            for nm in ["AvailabilityZone"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateDefaultSubnet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_default_vpc(self, *args, **kwargs):
        __protego_used['ec2']['create_default_vpc']=['ec2:CreateDefaultVpc']
        for p in ['ec2:CreateDefaultVpc']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateDefaultVpc", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dhcp_options(self, *args, **kwargs):
        __protego_used['ec2']['create_dhcp_options']=['ec2:CreateDhcpOptions']
        for p in ['ec2:CreateDhcpOptions']:
            res = {}
            for nm in ["DhcpConfigurations"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateDhcpOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_egress_only_internet_gateway(self, *args, **kwargs):
        __protego_used['ec2']['create_egress_only_internet_gateway']=['ec2:CreateEgressOnlyInternetGateway']
        for p in ['ec2:CreateEgressOnlyInternetGateway']:
            res = {}
            for nm in ["VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateEgressOnlyInternetGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_fleet(self, *args, **kwargs):
        __protego_used['ec2']['create_fleet']=['ec2:CreateFleet']
        for p in ['ec2:CreateFleet']:
            res = {}
            for nm in ["TargetCapacitySpecification","LaunchTemplateConfigs"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_flow_logs(self, *args, **kwargs):
        __protego_used['ec2']['create_flow_logs']=['ec2:CreateFlowLogs']
        for p in ['ec2:CreateFlowLogs']:
            res = {}
            for nm in ["TrafficType","ResourceType","ResourceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateFlowLogs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_fpga_image(self, *args, **kwargs):
        __protego_used['ec2']['create_fpga_image']=['ec2:CreateFpgaImage']
        for p in ['ec2:CreateFpgaImage']:
            res = {}
            for nm in ["InputStorageLocation"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateFpgaImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_image(self, *args, **kwargs):
        __protego_used['ec2']['create_image']=['ec2:CreateImage']
        for p in ['ec2:CreateImage']:
            res = {}
            for nm in ["InstanceId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_instance_export_task(self, *args, **kwargs):
        __protego_used['ec2']['create_instance_export_task']=['ec2:CreateInstanceExportTask']
        for p in ['ec2:CreateInstanceExportTask']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateInstanceExportTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_internet_gateway(self, *args, **kwargs):
        __protego_used['ec2']['create_internet_gateway']=['ec2:CreateInternetGateway']
        for p in ['ec2:CreateInternetGateway']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateInternetGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_key_pair(self, *args, **kwargs):
        __protego_used['ec2']['create_key_pair']=['ec2:CreateKeyPair']
        for p in ['ec2:CreateKeyPair']:
            res = {}
            for nm in ["KeyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateKeyPair", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_launch_template(self, *args, **kwargs):
        __protego_used['ec2']['create_launch_template']=['ec2:CreateLaunchTemplate']
        for p in ['ec2:CreateLaunchTemplate']:
            res = {}
            for nm in ["LaunchTemplateName","LaunchTemplateData"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateLaunchTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_launch_template_version(self, *args, **kwargs):
        __protego_used['ec2']['create_launch_template_version']=['ec2:CreateLaunchTemplateVersion']
        for p in ['ec2:CreateLaunchTemplateVersion']:
            res = {}
            for nm in ["LaunchTemplateData"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateLaunchTemplateVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_local_gateway_route(self, *args, **kwargs):
        __protego_used['ec2']['create_local_gateway_route']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["DestinationCidrBlock","LocalGatewayVirtualInterfaceGroupId","LocalGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateLocalGatewayRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_local_gateway_route_table_vpc_association(self, *args, **kwargs):
        __protego_used['ec2']['create_local_gateway_route_table_vpc_association']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["LocalGatewayRouteTableId","VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateLocalGatewayRouteTableVpcAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_nat_gateway(self, *args, **kwargs):
        __protego_used['ec2']['create_nat_gateway']=['ec2:CreateNatGateway']
        for p in ['ec2:CreateNatGateway']:
            res = {}
            for nm in ["SubnetId","AllocationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateNatGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_network_acl(self, *args, **kwargs):
        __protego_used['ec2']['create_network_acl']=['ec2:CreateNetworkAcl']
        for p in ['ec2:CreateNetworkAcl']:
            res = {}
            for nm in ["VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateNetworkAcl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_network_acl_entry(self, *args, **kwargs):
        __protego_used['ec2']['create_network_acl_entry']=['ec2:CreateNetworkAclEntry']
        for p in ['ec2:CreateNetworkAclEntry']:
            res = {}
            for nm in ["RuleNumber","Egress","Protocol","NetworkAclId","RuleAction"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateNetworkAclEntry", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_network_interface(self, *args, **kwargs):
        __protego_used['ec2']['create_network_interface']=['ec2:CreateNetworkInterface']
        for p in ['ec2:CreateNetworkInterface']:
            res = {}
            for nm in ["SubnetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateNetworkInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_network_interface_permission(self, *args, **kwargs):
        __protego_used['ec2']['create_network_interface_permission']=['ec2:CreateNetworkInterfacePermission']
        for p in ['ec2:CreateNetworkInterfacePermission']:
            res = {}
            for nm in ["NetworkInterfaceId","Permission"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateNetworkInterfacePermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_placement_group(self, *args, **kwargs):
        __protego_used['ec2']['create_placement_group']=['ec2:CreatePlacementGroup']
        for p in ['ec2:CreatePlacementGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreatePlacementGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_reserved_instances_listing(self, *args, **kwargs):
        __protego_used['ec2']['create_reserved_instances_listing']=['ec2:CreateReservedInstancesListing']
        for p in ['ec2:CreateReservedInstancesListing']:
            res = {}
            for nm in ["ReservedInstancesId","PriceSchedules","InstanceCount","ClientToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateReservedInstancesListing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_route(self, *args, **kwargs):
        __protego_used['ec2']['create_route']=['ec2:CreateRoute']
        for p in ['ec2:CreateRoute']:
            res = {}
            for nm in ["RouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_route_table(self, *args, **kwargs):
        __protego_used['ec2']['create_route_table']=['ec2:CreateRouteTable']
        for p in ['ec2:CreateRouteTable']:
            res = {}
            for nm in ["VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateRouteTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_security_group(self, *args, **kwargs):
        __protego_used['ec2']['create_security_group']=['ec2:CreateSecurityGroup']
        for p in ['ec2:CreateSecurityGroup']:
            res = {}
            for nm in ["GroupName","Description"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_snapshot(self, *args, **kwargs):
        __protego_used['ec2']['create_snapshot']=['ec2:CreateSnapshot','ec2:CreateSnapshot']
        for p in ['ec2:CreateSnapshot','ec2:CreateSnapshot']:
            res = {}
            for nm in ["VolumeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_snapshots(self, *args, **kwargs):
        __protego_used['ec2']['create_snapshots']=['ec2:CreateSnapshots']
        for p in ['ec2:CreateSnapshots']:
            res = {}
            for nm in ["InstanceSpecification"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_spot_datafeed_subscription(self, *args, **kwargs):
        __protego_used['ec2']['create_spot_datafeed_subscription']=['ec2:CreateSpotDatafeedSubscription']
        for p in ['ec2:CreateSpotDatafeedSubscription']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateSpotDatafeedSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_subnet(self, *args, **kwargs):
        __protego_used['ec2']['create_subnet']=['ec2:CreateSubnet']
        for p in ['ec2:CreateSubnet']:
            res = {}
            for nm in ["CidrBlock","VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateSubnet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_tags(self, *args, **kwargs):
        __protego_used['ec2']['create_tags']=['ec2:CreateTags']
        for p in ['ec2:CreateTags']:
            res = {}
            for nm in ["Resources","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_traffic_mirror_filter(self, *args, **kwargs):
        __protego_used['ec2']['create_traffic_mirror_filter']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateTrafficMirrorFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_traffic_mirror_filter_rule(self, *args, **kwargs):
        __protego_used['ec2']['create_traffic_mirror_filter_rule']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["RuleNumber","DestinationCidrBlock","SourceCidrBlock","TrafficMirrorFilterId","TrafficDirection","RuleAction"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateTrafficMirrorFilterRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_traffic_mirror_session(self, *args, **kwargs):
        __protego_used['ec2']['create_traffic_mirror_session']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["NetworkInterfaceId","TrafficMirrorFilterId","TrafficMirrorTargetId","SessionNumber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateTrafficMirrorSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_traffic_mirror_target(self, *args, **kwargs):
        __protego_used['ec2']['create_traffic_mirror_target']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateTrafficMirrorTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_transit_gateway(self, *args, **kwargs):
        __protego_used['ec2']['create_transit_gateway']=['ec2:CreateTransitGateway']
        for p in ['ec2:CreateTransitGateway']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateTransitGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_transit_gateway_multicast_domain(self, *args, **kwargs):
        __protego_used['ec2']['create_transit_gateway_multicast_domain']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TransitGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateTransitGatewayMulticastDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_transit_gateway_peering_attachment(self, *args, **kwargs):
        __protego_used['ec2']['create_transit_gateway_peering_attachment']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["PeerRegion","PeerAccountId","TransitGatewayId","PeerTransitGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateTransitGatewayPeeringAttachment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_transit_gateway_route(self, *args, **kwargs):
        __protego_used['ec2']['create_transit_gateway_route']=['ec2:CreateTransitGatewayRoute','ec2:CreateTransitGatewayRoute']
        for p in ['ec2:CreateTransitGatewayRoute','ec2:CreateTransitGatewayRoute']:
            res = {}
            for nm in ["DestinationCidrBlock","TransitGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateTransitGatewayRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_transit_gateway_route_table(self, *args, **kwargs):
        __protego_used['ec2']['create_transit_gateway_route_table']=['ec2:CreateTransitGatewayRouteTable','ec2:CreateTransitGatewayRouteTable']
        for p in ['ec2:CreateTransitGatewayRouteTable','ec2:CreateTransitGatewayRouteTable']:
            res = {}
            for nm in ["TransitGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateTransitGatewayRouteTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_transit_gateway_vpc_attachment(self, *args, **kwargs):
        __protego_used['ec2']['create_transit_gateway_vpc_attachment']=['ec2:CreateTransitGatewayVpcAttachment','ec2:CreateTransitGatewayVpcAttachment','ec2:CreateTransitGatewayVpcAttachment','ec2:CreateTransitGatewayVpcAttachment']
        for p in ['ec2:CreateTransitGatewayVpcAttachment','ec2:CreateTransitGatewayVpcAttachment','ec2:CreateTransitGatewayVpcAttachment','ec2:CreateTransitGatewayVpcAttachment']:
            res = {}
            for nm in ["VpcId","TransitGatewayId","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateTransitGatewayVpcAttachment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_volume(self, *args, **kwargs):
        __protego_used['ec2']['create_volume']=['ec2:CreateVolume']
        for p in ['ec2:CreateVolume']:
            res = {}
            for nm in ["AvailabilityZone"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpc(self, *args, **kwargs):
        __protego_used['ec2']['create_vpc']=['ec2:CreateVpc']
        for p in ['ec2:CreateVpc']:
            res = {}
            for nm in ["CidrBlock"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateVpc", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpc_endpoint(self, *args, **kwargs):
        __protego_used['ec2']['create_vpc_endpoint']=['ec2:CreateVpcEndpoint']
        for p in ['ec2:CreateVpcEndpoint']:
            res = {}
            for nm in ["ServiceName","VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateVpcEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpc_endpoint_connection_notification(self, *args, **kwargs):
        __protego_used['ec2']['create_vpc_endpoint_connection_notification']=['ec2:CreateVpcEndpointConnectionNotification']
        for p in ['ec2:CreateVpcEndpointConnectionNotification']:
            res = {}
            for nm in ["ConnectionEvents","ConnectionNotificationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateVpcEndpointConnectionNotification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpc_endpoint_service_configuration(self, *args, **kwargs):
        __protego_used['ec2']['create_vpc_endpoint_service_configuration']=['ec2:CreateVpcEndpointServiceConfiguration']
        for p in ['ec2:CreateVpcEndpointServiceConfiguration']:
            res = {}
            for nm in ["NetworkLoadBalancerArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateVpcEndpointServiceConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpc_peering_connection(self, *args, **kwargs):
        __protego_used['ec2']['create_vpc_peering_connection']=['ec2:CreateVpcPeeringConnection','ec2:CreateVpcPeeringConnection']
        for p in ['ec2:CreateVpcPeeringConnection','ec2:CreateVpcPeeringConnection']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateVpcPeeringConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpn_connection(self, *args, **kwargs):
        __protego_used['ec2']['create_vpn_connection']=['ec2:CreateVpnConnection']
        for p in ['ec2:CreateVpnConnection']:
            res = {}
            for nm in ["CustomerGatewayId","Type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateVpnConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpn_connection_route(self, *args, **kwargs):
        __protego_used['ec2']['create_vpn_connection_route']=['ec2:CreateVpnConnectionRoute']
        for p in ['ec2:CreateVpnConnectionRoute']:
            res = {}
            for nm in ["DestinationCidrBlock","VpnConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateVpnConnectionRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpn_gateway(self, *args, **kwargs):
        __protego_used['ec2']['create_vpn_gateway']=['ec2:CreateVpnGateway']
        for p in ['ec2:CreateVpnGateway']:
            res = {}
            for nm in ["Type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "CreateVpnGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_client_vpn_endpoint(self, *args, **kwargs):
        __protego_used['ec2']['delete_client_vpn_endpoint']=['ec2:DeleteClientVpnEndpoint']
        for p in ['ec2:DeleteClientVpnEndpoint']:
            res = {}
            for nm in ["ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteClientVpnEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_client_vpn_route(self, *args, **kwargs):
        __protego_used['ec2']['delete_client_vpn_route']=['ec2:DeleteClientVpnRoute','ec2:DeleteClientVpnRoute']
        for p in ['ec2:DeleteClientVpnRoute','ec2:DeleteClientVpnRoute']:
            res = {}
            for nm in ["DestinationCidrBlock","ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteClientVpnRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_customer_gateway(self, *args, **kwargs):
        __protego_used['ec2']['delete_customer_gateway']=['ec2:DeleteCustomerGateway']
        for p in ['ec2:DeleteCustomerGateway']:
            res = {}
            for nm in ["CustomerGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteCustomerGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dhcp_options(self, *args, **kwargs):
        __protego_used['ec2']['delete_dhcp_options']=['ec2:DeleteDhcpOptions']
        for p in ['ec2:DeleteDhcpOptions']:
            res = {}
            for nm in ["DhcpOptionsId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteDhcpOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_egress_only_internet_gateway(self, *args, **kwargs):
        __protego_used['ec2']['delete_egress_only_internet_gateway']=['ec2:DeleteEgressOnlyInternetGateway']
        for p in ['ec2:DeleteEgressOnlyInternetGateway']:
            res = {}
            for nm in ["EgressOnlyInternetGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteEgressOnlyInternetGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_fleets(self, *args, **kwargs):
        __protego_used['ec2']['delete_fleets']=['ec2:DeleteFleets']
        for p in ['ec2:DeleteFleets']:
            res = {}
            for nm in ["FleetIds","TerminateInstances"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteFleets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_flow_logs(self, *args, **kwargs):
        __protego_used['ec2']['delete_flow_logs']=['ec2:DeleteFlowLogs']
        for p in ['ec2:DeleteFlowLogs']:
            res = {}
            for nm in ["FlowLogIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteFlowLogs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_fpga_image(self, *args, **kwargs):
        __protego_used['ec2']['delete_fpga_image']=['ec2:DeleteFpgaImage']
        for p in ['ec2:DeleteFpgaImage']:
            res = {}
            for nm in ["FpgaImageId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteFpgaImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_internet_gateway(self, *args, **kwargs):
        __protego_used['ec2']['delete_internet_gateway']=['ec2:DeleteInternetGateway']
        for p in ['ec2:DeleteInternetGateway']:
            res = {}
            for nm in ["InternetGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteInternetGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_key_pair(self, *args, **kwargs):
        __protego_used['ec2']['delete_key_pair']=['ec2:DeleteKeyPair']
        for p in ['ec2:DeleteKeyPair']:
            res = {}
            for nm in ["KeyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteKeyPair", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_launch_template(self, *args, **kwargs):
        __protego_used['ec2']['delete_launch_template']=['ec2:DeleteLaunchTemplate']
        for p in ['ec2:DeleteLaunchTemplate']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteLaunchTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_launch_template_versions(self, *args, **kwargs):
        __protego_used['ec2']['delete_launch_template_versions']=['ec2:DeleteLaunchTemplateVersions']
        for p in ['ec2:DeleteLaunchTemplateVersions']:
            res = {}
            for nm in ["Versions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteLaunchTemplateVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_local_gateway_route(self, *args, **kwargs):
        __protego_used['ec2']['delete_local_gateway_route']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["DestinationCidrBlock","LocalGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteLocalGatewayRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_local_gateway_route_table_vpc_association(self, *args, **kwargs):
        __protego_used['ec2']['delete_local_gateway_route_table_vpc_association']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["LocalGatewayRouteTableVpcAssociationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteLocalGatewayRouteTableVpcAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_nat_gateway(self, *args, **kwargs):
        __protego_used['ec2']['delete_nat_gateway']=['ec2:DeleteNatGateway']
        for p in ['ec2:DeleteNatGateway']:
            res = {}
            for nm in ["NatGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteNatGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_network_acl(self, *args, **kwargs):
        __protego_used['ec2']['delete_network_acl']=['ec2:DeleteNetworkAcl']
        for p in ['ec2:DeleteNetworkAcl']:
            res = {}
            for nm in ["NetworkAclId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteNetworkAcl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_network_acl_entry(self, *args, **kwargs):
        __protego_used['ec2']['delete_network_acl_entry']=['ec2:DeleteNetworkAclEntry']
        for p in ['ec2:DeleteNetworkAclEntry']:
            res = {}
            for nm in ["Egress","RuleNumber","NetworkAclId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteNetworkAclEntry", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_network_interface(self, *args, **kwargs):
        __protego_used['ec2']['delete_network_interface']=['ec2:DeleteNetworkInterface']
        for p in ['ec2:DeleteNetworkInterface']:
            res = {}
            for nm in ["NetworkInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteNetworkInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_network_interface_permission(self, *args, **kwargs):
        __protego_used['ec2']['delete_network_interface_permission']=['ec2:DeleteNetworkInterfacePermission']
        for p in ['ec2:DeleteNetworkInterfacePermission']:
            res = {}
            for nm in ["NetworkInterfacePermissionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteNetworkInterfacePermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_placement_group(self, *args, **kwargs):
        __protego_used['ec2']['delete_placement_group']=['ec2:DeletePlacementGroup']
        for p in ['ec2:DeletePlacementGroup']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeletePlacementGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_queued_reserved_instances(self, *args, **kwargs):
        __protego_used['ec2']['delete_queued_reserved_instances']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["ReservedInstancesIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteQueuedReservedInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_route(self, *args, **kwargs):
        __protego_used['ec2']['delete_route']=['ec2:DeleteRoute']
        for p in ['ec2:DeleteRoute']:
            res = {}
            for nm in ["RouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_route_table(self, *args, **kwargs):
        __protego_used['ec2']['delete_route_table']=['ec2:DeleteRouteTable']
        for p in ['ec2:DeleteRouteTable']:
            res = {}
            for nm in ["RouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteRouteTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_security_group(self, *args, **kwargs):
        __protego_used['ec2']['delete_security_group']=['ec2:DeleteSecurityGroup']
        for p in ['ec2:DeleteSecurityGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_snapshot(self, *args, **kwargs):
        __protego_used['ec2']['delete_snapshot']=['ec2:DeleteSnapshot']
        for p in ['ec2:DeleteSnapshot']:
            res = {}
            for nm in ["SnapshotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_spot_datafeed_subscription(self, *args, **kwargs):
        __protego_used['ec2']['delete_spot_datafeed_subscription']=['ec2:DeleteSpotDatafeedSubscription']
        for p in ['ec2:DeleteSpotDatafeedSubscription']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteSpotDatafeedSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_subnet(self, *args, **kwargs):
        __protego_used['ec2']['delete_subnet']=['ec2:DeleteSubnet']
        for p in ['ec2:DeleteSubnet']:
            res = {}
            for nm in ["SubnetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteSubnet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tags(self, *args, **kwargs):
        __protego_used['ec2']['delete_tags']=['ec2:DeleteTags']
        for p in ['ec2:DeleteTags']:
            res = {}
            for nm in ["Resources"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_traffic_mirror_filter(self, *args, **kwargs):
        __protego_used['ec2']['delete_traffic_mirror_filter']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TrafficMirrorFilterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteTrafficMirrorFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_traffic_mirror_filter_rule(self, *args, **kwargs):
        __protego_used['ec2']['delete_traffic_mirror_filter_rule']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TrafficMirrorFilterRuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteTrafficMirrorFilterRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_traffic_mirror_session(self, *args, **kwargs):
        __protego_used['ec2']['delete_traffic_mirror_session']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TrafficMirrorSessionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteTrafficMirrorSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_traffic_mirror_target(self, *args, **kwargs):
        __protego_used['ec2']['delete_traffic_mirror_target']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TrafficMirrorTargetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteTrafficMirrorTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_transit_gateway(self, *args, **kwargs):
        __protego_used['ec2']['delete_transit_gateway']=['ec2:DeleteTransitGateway']
        for p in ['ec2:DeleteTransitGateway']:
            res = {}
            for nm in ["TransitGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteTransitGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_transit_gateway_multicast_domain(self, *args, **kwargs):
        __protego_used['ec2']['delete_transit_gateway_multicast_domain']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TransitGatewayMulticastDomainId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteTransitGatewayMulticastDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_transit_gateway_peering_attachment(self, *args, **kwargs):
        __protego_used['ec2']['delete_transit_gateway_peering_attachment']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TransitGatewayAttachmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteTransitGatewayPeeringAttachment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_transit_gateway_route(self, *args, **kwargs):
        __protego_used['ec2']['delete_transit_gateway_route']=['ec2:DeleteTransitGatewayRoute']
        for p in ['ec2:DeleteTransitGatewayRoute']:
            res = {}
            for nm in ["DestinationCidrBlock","TransitGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteTransitGatewayRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_transit_gateway_route_table(self, *args, **kwargs):
        __protego_used['ec2']['delete_transit_gateway_route_table']=['ec2:DeleteTransitGatewayRouteTable']
        for p in ['ec2:DeleteTransitGatewayRouteTable']:
            res = {}
            for nm in ["TransitGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteTransitGatewayRouteTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_transit_gateway_vpc_attachment(self, *args, **kwargs):
        __protego_used['ec2']['delete_transit_gateway_vpc_attachment']=['ec2:DeleteTransitGatewayVpcAttachment']
        for p in ['ec2:DeleteTransitGatewayVpcAttachment']:
            res = {}
            for nm in ["TransitGatewayAttachmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteTransitGatewayVpcAttachment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_volume(self, *args, **kwargs):
        __protego_used['ec2']['delete_volume']=['ec2:DeleteVolume']
        for p in ['ec2:DeleteVolume']:
            res = {}
            for nm in ["VolumeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpc(self, *args, **kwargs):
        __protego_used['ec2']['delete_vpc']=['ec2:DeleteVpc']
        for p in ['ec2:DeleteVpc']:
            res = {}
            for nm in ["VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteVpc", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpc_endpoint_connection_notifications(self, *args, **kwargs):
        __protego_used['ec2']['delete_vpc_endpoint_connection_notifications']=['ec2:DeleteVpcEndpointConnectionNotifications']
        for p in ['ec2:DeleteVpcEndpointConnectionNotifications']:
            res = {}
            for nm in ["ConnectionNotificationIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteVpcEndpointConnectionNotifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpc_endpoint_service_configurations(self, *args, **kwargs):
        __protego_used['ec2']['delete_vpc_endpoint_service_configurations']=['ec2:DeleteVpcEndpointServiceConfigurations']
        for p in ['ec2:DeleteVpcEndpointServiceConfigurations']:
            res = {}
            for nm in ["ServiceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteVpcEndpointServiceConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpc_endpoints(self, *args, **kwargs):
        __protego_used['ec2']['delete_vpc_endpoints']=['ec2:DeleteVpcEndpoints']
        for p in ['ec2:DeleteVpcEndpoints']:
            res = {}
            for nm in ["VpcEndpointIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteVpcEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpc_peering_connection(self, *args, **kwargs):
        __protego_used['ec2']['delete_vpc_peering_connection']=['ec2:DeleteVpcPeeringConnection']
        for p in ['ec2:DeleteVpcPeeringConnection']:
            res = {}
            for nm in ["VpcPeeringConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteVpcPeeringConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpn_connection(self, *args, **kwargs):
        __protego_used['ec2']['delete_vpn_connection']=['ec2:DeleteVpnConnection']
        for p in ['ec2:DeleteVpnConnection']:
            res = {}
            for nm in ["VpnConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteVpnConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpn_connection_route(self, *args, **kwargs):
        __protego_used['ec2']['delete_vpn_connection_route']=['ec2:DeleteVpnConnectionRoute']
        for p in ['ec2:DeleteVpnConnectionRoute']:
            res = {}
            for nm in ["DestinationCidrBlock","VpnConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteVpnConnectionRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpn_gateway(self, *args, **kwargs):
        __protego_used['ec2']['delete_vpn_gateway']=['ec2:DeleteVpnGateway']
        for p in ['ec2:DeleteVpnGateway']:
            res = {}
            for nm in ["VpnGatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeleteVpnGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deprovision_byoip_cidr(self, *args, **kwargs):
        __protego_used['ec2']['deprovision_byoip_cidr']=['ec2:DeprovisionByoipCidr']
        for p in ['ec2:DeprovisionByoipCidr']:
            res = {}
            for nm in ["Cidr"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeprovisionByoipCidr", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_image(self, *args, **kwargs):
        __protego_used['ec2']['deregister_image']=['ec2:DeregisterImage']
        for p in ['ec2:DeregisterImage']:
            res = {}
            for nm in ["ImageId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeregisterImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_transit_gateway_multicast_group_members(self, *args, **kwargs):
        __protego_used['ec2']['deregister_transit_gateway_multicast_group_members']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeregisterTransitGatewayMulticastGroupMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_transit_gateway_multicast_group_sources(self, *args, **kwargs):
        __protego_used['ec2']['deregister_transit_gateway_multicast_group_sources']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DeregisterTransitGatewayMulticastGroupSources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_attributes(self, *args, **kwargs):
        __protego_used['ec2']['describe_account_attributes']=['ec2:DescribeAccountAttributes']
        for p in ['ec2:DescribeAccountAttributes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeAccountAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_addresses(self, *args, **kwargs):
        __protego_used['ec2']['describe_addresses']=['ec2:DescribeAddresses']
        for p in ['ec2:DescribeAddresses']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeAddresses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_aggregate_id_format(self, *args, **kwargs):
        __protego_used['ec2']['describe_aggregate_id_format']=['ec2:DescribeAggregateIdFormat']
        for p in ['ec2:DescribeAggregateIdFormat']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeAggregateIdFormat", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_availability_zones(self, *args, **kwargs):
        __protego_used['ec2']['describe_availability_zones']=['ec2:DescribeAvailabilityZones']
        for p in ['ec2:DescribeAvailabilityZones']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeAvailabilityZones", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_bundle_tasks(self, *args, **kwargs):
        __protego_used['ec2']['describe_bundle_tasks']=['ec2:DescribeBundleTasks']
        for p in ['ec2:DescribeBundleTasks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeBundleTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_byoip_cidrs(self, *args, **kwargs):
        __protego_used['ec2']['describe_byoip_cidrs']=['ec2:DescribeByoipCidrs']
        for p in ['ec2:DescribeByoipCidrs']:
            res = {}
            for nm in ["MaxResults"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeByoipCidrs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_capacity_reservations(self, *args, **kwargs):
        __protego_used['ec2']['describe_capacity_reservations']=['ec2:DescribeCapacityReservations']
        for p in ['ec2:DescribeCapacityReservations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeCapacityReservations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_classic_link_instances(self, *args, **kwargs):
        __protego_used['ec2']['describe_classic_link_instances']=['ec2:DescribeClassicLinkInstances']
        for p in ['ec2:DescribeClassicLinkInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeClassicLinkInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_client_vpn_authorization_rules(self, *args, **kwargs):
        __protego_used['ec2']['describe_client_vpn_authorization_rules']=['ec2:DescribeClientVpnAuthorizationRules']
        for p in ['ec2:DescribeClientVpnAuthorizationRules']:
            res = {}
            for nm in ["ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeClientVpnAuthorizationRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_client_vpn_connections(self, *args, **kwargs):
        __protego_used['ec2']['describe_client_vpn_connections']=['ec2:DescribeClientVpnConnections']
        for p in ['ec2:DescribeClientVpnConnections']:
            res = {}
            for nm in ["ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeClientVpnConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_client_vpn_endpoints(self, *args, **kwargs):
        __protego_used['ec2']['describe_client_vpn_endpoints']=['ec2:DescribeClientVpnEndpoints']
        for p in ['ec2:DescribeClientVpnEndpoints']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeClientVpnEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_client_vpn_routes(self, *args, **kwargs):
        __protego_used['ec2']['describe_client_vpn_routes']=['ec2:DescribeClientVpnRoutes']
        for p in ['ec2:DescribeClientVpnRoutes']:
            res = {}
            for nm in ["ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeClientVpnRoutes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_client_vpn_target_networks(self, *args, **kwargs):
        __protego_used['ec2']['describe_client_vpn_target_networks']=['ec2:DescribeClientVpnTargetNetworks']
        for p in ['ec2:DescribeClientVpnTargetNetworks']:
            res = {}
            for nm in ["ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeClientVpnTargetNetworks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_coip_pools(self, *args, **kwargs):
        __protego_used['ec2']['describe_coip_pools']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeCoipPools", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_conversion_tasks(self, *args, **kwargs):
        __protego_used['ec2']['describe_conversion_tasks']=['ec2:DescribeConversionTasks']
        for p in ['ec2:DescribeConversionTasks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeConversionTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_customer_gateways(self, *args, **kwargs):
        __protego_used['ec2']['describe_customer_gateways']=['ec2:DescribeCustomerGateways']
        for p in ['ec2:DescribeCustomerGateways']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeCustomerGateways", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dhcp_options(self, *args, **kwargs):
        __protego_used['ec2']['describe_dhcp_options']=['ec2:DescribeDhcpOptions']
        for p in ['ec2:DescribeDhcpOptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeDhcpOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_egress_only_internet_gateways(self, *args, **kwargs):
        __protego_used['ec2']['describe_egress_only_internet_gateways']=['ec2:DescribeEgressOnlyInternetGateways']
        for p in ['ec2:DescribeEgressOnlyInternetGateways']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeEgressOnlyInternetGateways", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_elastic_gpus(self, *args, **kwargs):
        __protego_used['ec2']['describe_elastic_gpus']=['ec2:DescribeElasticGpus']
        for p in ['ec2:DescribeElasticGpus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeElasticGpus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_export_image_tasks(self, *args, **kwargs):
        __protego_used['ec2']['describe_export_image_tasks']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeExportImageTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_export_tasks(self, *args, **kwargs):
        __protego_used['ec2']['describe_export_tasks']=['ec2:DescribeExportTasks']
        for p in ['ec2:DescribeExportTasks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeExportTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fast_snapshot_restores(self, *args, **kwargs):
        __protego_used['ec2']['describe_fast_snapshot_restores']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeFastSnapshotRestores", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fleet_history(self, *args, **kwargs):
        __protego_used['ec2']['describe_fleet_history']=['ec2:DescribeFleetHistory']
        for p in ['ec2:DescribeFleetHistory']:
            res = {}
            for nm in ["StartTime","FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeFleetHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fleet_instances(self, *args, **kwargs):
        __protego_used['ec2']['describe_fleet_instances']=['ec2:DescribeFleetInstances']
        for p in ['ec2:DescribeFleetInstances']:
            res = {}
            for nm in ["FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeFleetInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fleets(self, *args, **kwargs):
        __protego_used['ec2']['describe_fleets']=['ec2:DescribeFleets']
        for p in ['ec2:DescribeFleets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeFleets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_flow_logs(self, *args, **kwargs):
        __protego_used['ec2']['describe_flow_logs']=['ec2:DescribeFlowLogs']
        for p in ['ec2:DescribeFlowLogs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeFlowLogs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fpga_image_attribute(self, *args, **kwargs):
        __protego_used['ec2']['describe_fpga_image_attribute']=['ec2:DescribeFpgaImageAttribute']
        for p in ['ec2:DescribeFpgaImageAttribute']:
            res = {}
            for nm in ["FpgaImageId","Attribute"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeFpgaImageAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fpga_images(self, *args, **kwargs):
        __protego_used['ec2']['describe_fpga_images']=['ec2:DescribeFpgaImages']
        for p in ['ec2:DescribeFpgaImages']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeFpgaImages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_host_reservation_offerings(self, *args, **kwargs):
        __protego_used['ec2']['describe_host_reservation_offerings']=['ec2:DescribeHostReservationOfferings']
        for p in ['ec2:DescribeHostReservationOfferings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeHostReservationOfferings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_host_reservations(self, *args, **kwargs):
        __protego_used['ec2']['describe_host_reservations']=['ec2:DescribeHostReservations']
        for p in ['ec2:DescribeHostReservations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeHostReservations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_hosts(self, *args, **kwargs):
        __protego_used['ec2']['describe_hosts']=['ec2:DescribeHosts']
        for p in ['ec2:DescribeHosts']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeHosts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_iam_instance_profile_associations(self, *args, **kwargs):
        __protego_used['ec2']['describe_iam_instance_profile_associations']=['ec2:DescribeIamInstanceProfileAssociations']
        for p in ['ec2:DescribeIamInstanceProfileAssociations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeIamInstanceProfileAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_id_format(self, *args, **kwargs):
        __protego_used['ec2']['describe_id_format']=['ec2:DescribeIdFormat']
        for p in ['ec2:DescribeIdFormat']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeIdFormat", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_identity_id_format(self, *args, **kwargs):
        __protego_used['ec2']['describe_identity_id_format']=['ec2:DescribeIdentityIdFormat']
        for p in ['ec2:DescribeIdentityIdFormat']:
            res = {}
            for nm in ["PrincipalArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeIdentityIdFormat", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_image_attribute(self, *args, **kwargs):
        __protego_used['ec2']['describe_image_attribute']=['ec2:DescribeImageAttribute']
        for p in ['ec2:DescribeImageAttribute']:
            res = {}
            for nm in ["ImageId","Attribute"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeImageAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_images(self, *args, **kwargs):
        __protego_used['ec2']['describe_images']=['ec2:DescribeImages']
        for p in ['ec2:DescribeImages']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeImages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_import_image_tasks(self, *args, **kwargs):
        __protego_used['ec2']['describe_import_image_tasks']=['ec2:DescribeImportImageTasks']
        for p in ['ec2:DescribeImportImageTasks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeImportImageTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_import_snapshot_tasks(self, *args, **kwargs):
        __protego_used['ec2']['describe_import_snapshot_tasks']=['ec2:DescribeImportSnapshotTasks']
        for p in ['ec2:DescribeImportSnapshotTasks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeImportSnapshotTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instance_attribute(self, *args, **kwargs):
        __protego_used['ec2']['describe_instance_attribute']=['ec2:DescribeInstanceAttribute']
        for p in ['ec2:DescribeInstanceAttribute']:
            res = {}
            for nm in ["InstanceId","Attribute"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeInstanceAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instance_credit_specifications(self, *args, **kwargs):
        __protego_used['ec2']['describe_instance_credit_specifications']=['ec2:DescribeInstanceCreditSpecifications']
        for p in ['ec2:DescribeInstanceCreditSpecifications']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeInstanceCreditSpecifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instance_status(self, *args, **kwargs):
        __protego_used['ec2']['describe_instance_status']=['ec2:DescribeInstanceStatus']
        for p in ['ec2:DescribeInstanceStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeInstanceStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instance_type_offerings(self, *args, **kwargs):
        __protego_used['ec2']['describe_instance_type_offerings']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeInstanceTypeOfferings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instance_types(self, *args, **kwargs):
        __protego_used['ec2']['describe_instance_types']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeInstanceTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instances(self, *args, **kwargs):
        __protego_used['ec2']['describe_instances']=['ec2:DescribeInstances']
        for p in ['ec2:DescribeInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_internet_gateways(self, *args, **kwargs):
        __protego_used['ec2']['describe_internet_gateways']=['ec2:DescribeInternetGateways']
        for p in ['ec2:DescribeInternetGateways']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeInternetGateways", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_key_pairs(self, *args, **kwargs):
        __protego_used['ec2']['describe_key_pairs']=['ec2:DescribeKeyPairs']
        for p in ['ec2:DescribeKeyPairs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeKeyPairs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_launch_template_versions(self, *args, **kwargs):
        __protego_used['ec2']['describe_launch_template_versions']=['ec2:DescribeLaunchTemplateVersions']
        for p in ['ec2:DescribeLaunchTemplateVersions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeLaunchTemplateVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_launch_templates(self, *args, **kwargs):
        __protego_used['ec2']['describe_launch_templates']=['ec2:DescribeLaunchTemplates']
        for p in ['ec2:DescribeLaunchTemplates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeLaunchTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_local_gateway_route_table_virtual_interface_group_associations(self, *args, **kwargs):
        __protego_used['ec2']['describe_local_gateway_route_table_virtual_interface_group_associations']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_local_gateway_route_table_vpc_associations(self, *args, **kwargs):
        __protego_used['ec2']['describe_local_gateway_route_table_vpc_associations']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeLocalGatewayRouteTableVpcAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_local_gateway_route_tables(self, *args, **kwargs):
        __protego_used['ec2']['describe_local_gateway_route_tables']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeLocalGatewayRouteTables", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_local_gateway_virtual_interface_groups(self, *args, **kwargs):
        __protego_used['ec2']['describe_local_gateway_virtual_interface_groups']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeLocalGatewayVirtualInterfaceGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_local_gateway_virtual_interfaces(self, *args, **kwargs):
        __protego_used['ec2']['describe_local_gateway_virtual_interfaces']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeLocalGatewayVirtualInterfaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_local_gateways(self, *args, **kwargs):
        __protego_used['ec2']['describe_local_gateways']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeLocalGateways", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_moving_addresses(self, *args, **kwargs):
        __protego_used['ec2']['describe_moving_addresses']=['ec2:DescribeMovingAddresses']
        for p in ['ec2:DescribeMovingAddresses']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeMovingAddresses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_nat_gateways(self, *args, **kwargs):
        __protego_used['ec2']['describe_nat_gateways']=['ec2:DescribeNatGateways']
        for p in ['ec2:DescribeNatGateways']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeNatGateways", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_network_acls(self, *args, **kwargs):
        __protego_used['ec2']['describe_network_acls']=['ec2:DescribeNetworkAcls']
        for p in ['ec2:DescribeNetworkAcls']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeNetworkAcls", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_network_interface_attribute(self, *args, **kwargs):
        __protego_used['ec2']['describe_network_interface_attribute']=['ec2:DescribeNetworkInterfaceAttribute']
        for p in ['ec2:DescribeNetworkInterfaceAttribute']:
            res = {}
            for nm in ["NetworkInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeNetworkInterfaceAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_network_interface_permissions(self, *args, **kwargs):
        __protego_used['ec2']['describe_network_interface_permissions']=['ec2:DescribeNetworkInterfacePermissions']
        for p in ['ec2:DescribeNetworkInterfacePermissions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeNetworkInterfacePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_network_interfaces(self, *args, **kwargs):
        __protego_used['ec2']['describe_network_interfaces']=['ec2:DescribeNetworkInterfaces']
        for p in ['ec2:DescribeNetworkInterfaces']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeNetworkInterfaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_placement_groups(self, *args, **kwargs):
        __protego_used['ec2']['describe_placement_groups']=['ec2:DescribePlacementGroups']
        for p in ['ec2:DescribePlacementGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribePlacementGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_prefix_lists(self, *args, **kwargs):
        __protego_used['ec2']['describe_prefix_lists']=['ec2:DescribePrefixLists']
        for p in ['ec2:DescribePrefixLists']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribePrefixLists", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_principal_id_format(self, *args, **kwargs):
        __protego_used['ec2']['describe_principal_id_format']=['ec2:DescribePrincipalIdFormat']
        for p in ['ec2:DescribePrincipalIdFormat']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribePrincipalIdFormat", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_public_ipv4_pools(self, *args, **kwargs):
        __protego_used['ec2']['describe_public_ipv4_pools']=['ec2:DescribePublicIpv4Pools']
        for p in ['ec2:DescribePublicIpv4Pools']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribePublicIpv4Pools", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_regions(self, *args, **kwargs):
        __protego_used['ec2']['describe_regions']=['ec2:DescribeRegions']
        for p in ['ec2:DescribeRegions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeRegions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_instances(self, *args, **kwargs):
        __protego_used['ec2']['describe_reserved_instances']=['ec2:DescribeReservedInstances']
        for p in ['ec2:DescribeReservedInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeReservedInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_instances_listings(self, *args, **kwargs):
        __protego_used['ec2']['describe_reserved_instances_listings']=['ec2:DescribeReservedInstancesListings']
        for p in ['ec2:DescribeReservedInstancesListings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeReservedInstancesListings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_instances_modifications(self, *args, **kwargs):
        __protego_used['ec2']['describe_reserved_instances_modifications']=['ec2:DescribeReservedInstancesModifications']
        for p in ['ec2:DescribeReservedInstancesModifications']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeReservedInstancesModifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_instances_offerings(self, *args, **kwargs):
        __protego_used['ec2']['describe_reserved_instances_offerings']=['ec2:DescribeReservedInstancesOfferings']
        for p in ['ec2:DescribeReservedInstancesOfferings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeReservedInstancesOfferings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_route_tables(self, *args, **kwargs):
        __protego_used['ec2']['describe_route_tables']=['ec2:DescribeRouteTables']
        for p in ['ec2:DescribeRouteTables']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeRouteTables", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scheduled_instance_availability(self, *args, **kwargs):
        __protego_used['ec2']['describe_scheduled_instance_availability']=['ec2:DescribeScheduledInstanceAvailability']
        for p in ['ec2:DescribeScheduledInstanceAvailability']:
            res = {}
            for nm in ["Recurrence","FirstSlotStartTimeRange"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeScheduledInstanceAvailability", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scheduled_instances(self, *args, **kwargs):
        __protego_used['ec2']['describe_scheduled_instances']=['ec2:DescribeScheduledInstances']
        for p in ['ec2:DescribeScheduledInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeScheduledInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_security_group_references(self, *args, **kwargs):
        __protego_used['ec2']['describe_security_group_references']=['ec2:DescribeSecurityGroupReferences']
        for p in ['ec2:DescribeSecurityGroupReferences']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeSecurityGroupReferences", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_security_groups(self, *args, **kwargs):
        __protego_used['ec2']['describe_security_groups']=['ec2:DescribeSecurityGroups']
        for p in ['ec2:DescribeSecurityGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeSecurityGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_snapshot_attribute(self, *args, **kwargs):
        __protego_used['ec2']['describe_snapshot_attribute']=['ec2:DescribeSnapshotAttribute']
        for p in ['ec2:DescribeSnapshotAttribute']:
            res = {}
            for nm in ["SnapshotId","Attribute"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeSnapshotAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_snapshots(self, *args, **kwargs):
        __protego_used['ec2']['describe_snapshots']=['ec2:DescribeSnapshots']
        for p in ['ec2:DescribeSnapshots']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_spot_datafeed_subscription(self, *args, **kwargs):
        __protego_used['ec2']['describe_spot_datafeed_subscription']=['ec2:DescribeSpotDatafeedSubscription']
        for p in ['ec2:DescribeSpotDatafeedSubscription']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeSpotDatafeedSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_spot_fleet_instances(self, *args, **kwargs):
        __protego_used['ec2']['describe_spot_fleet_instances']=['ec2:DescribeSpotFleetInstances']
        for p in ['ec2:DescribeSpotFleetInstances']:
            res = {}
            for nm in ["SpotFleetRequestId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeSpotFleetInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_spot_fleet_request_history(self, *args, **kwargs):
        __protego_used['ec2']['describe_spot_fleet_request_history']=['ec2:DescribeSpotFleetRequestHistory']
        for p in ['ec2:DescribeSpotFleetRequestHistory']:
            res = {}
            for nm in ["SpotFleetRequestId","StartTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeSpotFleetRequestHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_spot_fleet_requests(self, *args, **kwargs):
        __protego_used['ec2']['describe_spot_fleet_requests']=['ec2:DescribeSpotFleetRequests']
        for p in ['ec2:DescribeSpotFleetRequests']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeSpotFleetRequests", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_spot_instance_requests(self, *args, **kwargs):
        __protego_used['ec2']['describe_spot_instance_requests']=['ec2:DescribeSpotInstanceRequests']
        for p in ['ec2:DescribeSpotInstanceRequests']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeSpotInstanceRequests", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_spot_price_history(self, *args, **kwargs):
        __protego_used['ec2']['describe_spot_price_history']=['ec2:DescribeSpotPriceHistory']
        for p in ['ec2:DescribeSpotPriceHistory']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeSpotPriceHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stale_security_groups(self, *args, **kwargs):
        __protego_used['ec2']['describe_stale_security_groups']=['ec2:DescribeStaleSecurityGroups']
        for p in ['ec2:DescribeStaleSecurityGroups']:
            res = {}
            for nm in ["VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeStaleSecurityGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_subnets(self, *args, **kwargs):
        __protego_used['ec2']['describe_subnets']=['ec2:DescribeSubnets']
        for p in ['ec2:DescribeSubnets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeSubnets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tags(self, *args, **kwargs):
        __protego_used['ec2']['describe_tags']=['ec2:DescribeTags']
        for p in ['ec2:DescribeTags']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_traffic_mirror_filters(self, *args, **kwargs):
        __protego_used['ec2']['describe_traffic_mirror_filters']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeTrafficMirrorFilters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_traffic_mirror_sessions(self, *args, **kwargs):
        __protego_used['ec2']['describe_traffic_mirror_sessions']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeTrafficMirrorSessions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_traffic_mirror_targets(self, *args, **kwargs):
        __protego_used['ec2']['describe_traffic_mirror_targets']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeTrafficMirrorTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_transit_gateway_attachments(self, *args, **kwargs):
        __protego_used['ec2']['describe_transit_gateway_attachments']=['ec2:DescribeTransitGatewayAttachments']
        for p in ['ec2:DescribeTransitGatewayAttachments']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeTransitGatewayAttachments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_transit_gateway_multicast_domains(self, *args, **kwargs):
        __protego_used['ec2']['describe_transit_gateway_multicast_domains']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeTransitGatewayMulticastDomains", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_transit_gateway_peering_attachments(self, *args, **kwargs):
        __protego_used['ec2']['describe_transit_gateway_peering_attachments']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeTransitGatewayPeeringAttachments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_transit_gateway_route_tables(self, *args, **kwargs):
        __protego_used['ec2']['describe_transit_gateway_route_tables']=['ec2:DescribeTransitGatewayRouteTables']
        for p in ['ec2:DescribeTransitGatewayRouteTables']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeTransitGatewayRouteTables", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_transit_gateway_vpc_attachments(self, *args, **kwargs):
        __protego_used['ec2']['describe_transit_gateway_vpc_attachments']=['ec2:DescribeTransitGatewayVpcAttachments']
        for p in ['ec2:DescribeTransitGatewayVpcAttachments']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeTransitGatewayVpcAttachments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_transit_gateways(self, *args, **kwargs):
        __protego_used['ec2']['describe_transit_gateways']=['ec2:DescribeTransitGateways']
        for p in ['ec2:DescribeTransitGateways']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeTransitGateways", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_volume_attribute(self, *args, **kwargs):
        __protego_used['ec2']['describe_volume_attribute']=['ec2:DescribeVolumeAttribute']
        for p in ['ec2:DescribeVolumeAttribute']:
            res = {}
            for nm in ["VolumeId","Attribute"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVolumeAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_volume_status(self, *args, **kwargs):
        __protego_used['ec2']['describe_volume_status']=['ec2:DescribeVolumeStatus']
        for p in ['ec2:DescribeVolumeStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVolumeStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_volumes(self, *args, **kwargs):
        __protego_used['ec2']['describe_volumes']=['ec2:DescribeVolumes']
        for p in ['ec2:DescribeVolumes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVolumes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_volumes_modifications(self, *args, **kwargs):
        __protego_used['ec2']['describe_volumes_modifications']=['ec2:DescribeVolumesModifications']
        for p in ['ec2:DescribeVolumesModifications']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVolumesModifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_attribute(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpc_attribute']=['ec2:DescribeVpcAttribute']
        for p in ['ec2:DescribeVpcAttribute']:
            res = {}
            for nm in ["VpcId","Attribute"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpcAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_classic_link(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpc_classic_link']=['ec2:DescribeVpcClassicLink']
        for p in ['ec2:DescribeVpcClassicLink']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpcClassicLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_classic_link_dns_support(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpc_classic_link_dns_support']=['ec2:DescribeVpcClassicLinkDnsSupport']
        for p in ['ec2:DescribeVpcClassicLinkDnsSupport']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpcClassicLinkDnsSupport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_endpoint_connection_notifications(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpc_endpoint_connection_notifications']=['ec2:DescribeVpcEndpointConnectionNotifications']
        for p in ['ec2:DescribeVpcEndpointConnectionNotifications']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpcEndpointConnectionNotifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_endpoint_connections(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpc_endpoint_connections']=['ec2:DescribeVpcEndpointConnections']
        for p in ['ec2:DescribeVpcEndpointConnections']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpcEndpointConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_endpoint_service_configurations(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpc_endpoint_service_configurations']=['ec2:DescribeVpcEndpointServiceConfigurations']
        for p in ['ec2:DescribeVpcEndpointServiceConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpcEndpointServiceConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_endpoint_service_permissions(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpc_endpoint_service_permissions']=['ec2:DescribeVpcEndpointServicePermissions']
        for p in ['ec2:DescribeVpcEndpointServicePermissions']:
            res = {}
            for nm in ["ServiceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpcEndpointServicePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_endpoint_services(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpc_endpoint_services']=['ec2:DescribeVpcEndpointServices']
        for p in ['ec2:DescribeVpcEndpointServices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpcEndpointServices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_endpoints(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpc_endpoints']=['ec2:DescribeVpcEndpoints']
        for p in ['ec2:DescribeVpcEndpoints']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpcEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_peering_connections(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpc_peering_connections']=['ec2:DescribeVpcPeeringConnections']
        for p in ['ec2:DescribeVpcPeeringConnections']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpcPeeringConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpcs(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpcs']=['ec2:DescribeVpcs']
        for p in ['ec2:DescribeVpcs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpcs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpn_connections(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpn_connections']=['ec2:DescribeVpnConnections']
        for p in ['ec2:DescribeVpnConnections']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpnConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpn_gateways(self, *args, **kwargs):
        __protego_used['ec2']['describe_vpn_gateways']=['ec2:DescribeVpnGateways']
        for p in ['ec2:DescribeVpnGateways']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DescribeVpnGateways", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_classic_link_vpc(self, *args, **kwargs):
        __protego_used['ec2']['detach_classic_link_vpc']=['ec2:DetachClassicLinkVpc','ec2:DetachClassicLinkVpc']
        for p in ['ec2:DetachClassicLinkVpc','ec2:DetachClassicLinkVpc']:
            res = {}
            for nm in ["VpcId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DetachClassicLinkVpc", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_internet_gateway(self, *args, **kwargs):
        __protego_used['ec2']['detach_internet_gateway']=['ec2:DetachInternetGateway']
        for p in ['ec2:DetachInternetGateway']:
            res = {}
            for nm in ["InternetGatewayId","VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DetachInternetGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_network_interface(self, *args, **kwargs):
        __protego_used['ec2']['detach_network_interface']=['ec2:DetachNetworkInterface']
        for p in ['ec2:DetachNetworkInterface']:
            res = {}
            for nm in ["AttachmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DetachNetworkInterface", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_volume(self, *args, **kwargs):
        __protego_used['ec2']['detach_volume']=['ec2:DetachVolume','ec2:DetachVolume']
        for p in ['ec2:DetachVolume','ec2:DetachVolume']:
            res = {}
            for nm in ["VolumeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DetachVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_vpn_gateway(self, *args, **kwargs):
        __protego_used['ec2']['detach_vpn_gateway']=['ec2:DetachVpnGateway']
        for p in ['ec2:DetachVpnGateway']:
            res = {}
            for nm in ["VpnGatewayId","VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DetachVpnGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_ebs_encryption_by_default(self, *args, **kwargs):
        __protego_used['ec2']['disable_ebs_encryption_by_default']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisableEbsEncryptionByDefault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_fast_snapshot_restores(self, *args, **kwargs):
        __protego_used['ec2']['disable_fast_snapshot_restores']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["AvailabilityZones","SourceSnapshotIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisableFastSnapshotRestores", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_transit_gateway_route_table_propagation(self, *args, **kwargs):
        __protego_used['ec2']['disable_transit_gateway_route_table_propagation']=['ec2:DisableTransitGatewayRouteTablePropagation','ec2:DisableTransitGatewayRouteTablePropagation']
        for p in ['ec2:DisableTransitGatewayRouteTablePropagation','ec2:DisableTransitGatewayRouteTablePropagation']:
            res = {}
            for nm in ["TransitGatewayAttachmentId","TransitGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisableTransitGatewayRouteTablePropagation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_vgw_route_propagation(self, *args, **kwargs):
        __protego_used['ec2']['disable_vgw_route_propagation']=['ec2:DisableVgwRoutePropagation']
        for p in ['ec2:DisableVgwRoutePropagation']:
            res = {}
            for nm in ["RouteTableId","GatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisableVgwRoutePropagation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_vpc_classic_link(self, *args, **kwargs):
        __protego_used['ec2']['disable_vpc_classic_link']=['ec2:DisableVpcClassicLink']
        for p in ['ec2:DisableVpcClassicLink']:
            res = {}
            for nm in ["VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisableVpcClassicLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_vpc_classic_link_dns_support(self, *args, **kwargs):
        __protego_used['ec2']['disable_vpc_classic_link_dns_support']=['ec2:DisableVpcClassicLinkDnsSupport']
        for p in ['ec2:DisableVpcClassicLinkDnsSupport']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisableVpcClassicLinkDnsSupport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_address(self, *args, **kwargs):
        __protego_used['ec2']['disassociate_address']=['ec2:DisassociateAddress']
        for p in ['ec2:DisassociateAddress']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisassociateAddress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_client_vpn_target_network(self, *args, **kwargs):
        __protego_used['ec2']['disassociate_client_vpn_target_network']=['ec2:DisassociateClientVpnTargetNetwork']
        for p in ['ec2:DisassociateClientVpnTargetNetwork']:
            res = {}
            for nm in ["AssociationId","ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisassociateClientVpnTargetNetwork", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_iam_instance_profile(self, *args, **kwargs):
        __protego_used['ec2']['disassociate_iam_instance_profile']=['ec2:DisassociateIamInstanceProfile']
        for p in ['ec2:DisassociateIamInstanceProfile']:
            res = {}
            for nm in ["AssociationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisassociateIamInstanceProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_route_table(self, *args, **kwargs):
        __protego_used['ec2']['disassociate_route_table']=['ec2:DisassociateRouteTable']
        for p in ['ec2:DisassociateRouteTable']:
            res = {}
            for nm in ["AssociationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisassociateRouteTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_subnet_cidr_block(self, *args, **kwargs):
        __protego_used['ec2']['disassociate_subnet_cidr_block']=['ec2:DisassociateSubnetCidrBlock']
        for p in ['ec2:DisassociateSubnetCidrBlock']:
            res = {}
            for nm in ["AssociationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisassociateSubnetCidrBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_transit_gateway_multicast_domain(self, *args, **kwargs):
        __protego_used['ec2']['disassociate_transit_gateway_multicast_domain']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisassociateTransitGatewayMulticastDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_transit_gateway_route_table(self, *args, **kwargs):
        __protego_used['ec2']['disassociate_transit_gateway_route_table']=['ec2:DisassociateTransitGatewayRouteTable','ec2:DisassociateTransitGatewayRouteTable']
        for p in ['ec2:DisassociateTransitGatewayRouteTable','ec2:DisassociateTransitGatewayRouteTable']:
            res = {}
            for nm in ["TransitGatewayAttachmentId","TransitGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisassociateTransitGatewayRouteTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_vpc_cidr_block(self, *args, **kwargs):
        __protego_used['ec2']['disassociate_vpc_cidr_block']=['ec2:DisassociateVpcCidrBlock']
        for p in ['ec2:DisassociateVpcCidrBlock']:
            res = {}
            for nm in ["AssociationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "DisassociateVpcCidrBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_ebs_encryption_by_default(self, *args, **kwargs):
        __protego_used['ec2']['enable_ebs_encryption_by_default']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "EnableEbsEncryptionByDefault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_fast_snapshot_restores(self, *args, **kwargs):
        __protego_used['ec2']['enable_fast_snapshot_restores']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["AvailabilityZones","SourceSnapshotIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "EnableFastSnapshotRestores", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_transit_gateway_route_table_propagation(self, *args, **kwargs):
        __protego_used['ec2']['enable_transit_gateway_route_table_propagation']=['ec2:EnableTransitGatewayRouteTablePropagation','ec2:EnableTransitGatewayRouteTablePropagation']
        for p in ['ec2:EnableTransitGatewayRouteTablePropagation','ec2:EnableTransitGatewayRouteTablePropagation']:
            res = {}
            for nm in ["TransitGatewayAttachmentId","TransitGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "EnableTransitGatewayRouteTablePropagation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_vgw_route_propagation(self, *args, **kwargs):
        __protego_used['ec2']['enable_vgw_route_propagation']=['ec2:EnableVgwRoutePropagation']
        for p in ['ec2:EnableVgwRoutePropagation']:
            res = {}
            for nm in ["RouteTableId","GatewayId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "EnableVgwRoutePropagation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_volume_io(self, *args, **kwargs):
        __protego_used['ec2']['enable_volume_io']=['ec2:EnableVolumeIO']
        for p in ['ec2:EnableVolumeIO']:
            res = {}
            for nm in ["VolumeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "EnableVolumeIO", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_vpc_classic_link(self, *args, **kwargs):
        __protego_used['ec2']['enable_vpc_classic_link']=['ec2:EnableVpcClassicLink']
        for p in ['ec2:EnableVpcClassicLink']:
            res = {}
            for nm in ["VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "EnableVpcClassicLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_vpc_classic_link_dns_support(self, *args, **kwargs):
        __protego_used['ec2']['enable_vpc_classic_link_dns_support']=['ec2:EnableVpcClassicLinkDnsSupport']
        for p in ['ec2:EnableVpcClassicLinkDnsSupport']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "EnableVpcClassicLinkDnsSupport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_client_vpn_client_certificate_revocation_list(self, *args, **kwargs):
        __protego_used['ec2']['export_client_vpn_client_certificate_revocation_list']=['ec2:ExportClientVpnClientCertificateRevocationList']
        for p in ['ec2:ExportClientVpnClientCertificateRevocationList']:
            res = {}
            for nm in ["ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ExportClientVpnClientCertificateRevocationList", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_client_vpn_client_configuration(self, *args, **kwargs):
        __protego_used['ec2']['export_client_vpn_client_configuration']=['ec2:ExportClientVpnClientConfiguration']
        for p in ['ec2:ExportClientVpnClientConfiguration']:
            res = {}
            for nm in ["ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ExportClientVpnClientConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_image(self, *args, **kwargs):
        __protego_used['ec2']['export_image']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["DiskImageFormat","ImageId","S3ExportLocation"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ExportImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_transit_gateway_routes(self, *args, **kwargs):
        __protego_used['ec2']['export_transit_gateway_routes']=['ec2:ExportTransitGatewayRoutes']
        for p in ['ec2:ExportTransitGatewayRoutes']:
            res = {}
            for nm in ["S3Bucket","TransitGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ExportTransitGatewayRoutes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_capacity_reservation_usage(self, *args, **kwargs):
        __protego_used['ec2']['get_capacity_reservation_usage']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["CapacityReservationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetCapacityReservationUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_coip_pool_usage(self, *args, **kwargs):
        __protego_used['ec2']['get_coip_pool_usage']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["PoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetCoipPoolUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_console_output(self, *args, **kwargs):
        __protego_used['ec2']['get_console_output']=['ec2:GetConsoleOutput']
        for p in ['ec2:GetConsoleOutput']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetConsoleOutput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_console_screenshot(self, *args, **kwargs):
        __protego_used['ec2']['get_console_screenshot']=['ec2:GetConsoleScreenshot']
        for p in ['ec2:GetConsoleScreenshot']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetConsoleScreenshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_default_credit_specification(self, *args, **kwargs):
        __protego_used['ec2']['get_default_credit_specification']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["InstanceFamily"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetDefaultCreditSpecification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ebs_default_kms_key_id(self, *args, **kwargs):
        __protego_used['ec2']['get_ebs_default_kms_key_id']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetEbsDefaultKmsKeyId", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ebs_encryption_by_default(self, *args, **kwargs):
        __protego_used['ec2']['get_ebs_encryption_by_default']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetEbsEncryptionByDefault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_host_reservation_purchase_preview(self, *args, **kwargs):
        __protego_used['ec2']['get_host_reservation_purchase_preview']=['ec2:GetHostReservationPurchasePreview']
        for p in ['ec2:GetHostReservationPurchasePreview']:
            res = {}
            for nm in ["OfferingId","HostIdSet"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetHostReservationPurchasePreview", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_launch_template_data(self, *args, **kwargs):
        __protego_used['ec2']['get_launch_template_data']=['ec2:GetLaunchTemplateData']
        for p in ['ec2:GetLaunchTemplateData']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetLaunchTemplateData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_password_data(self, *args, **kwargs):
        __protego_used['ec2']['get_password_data']=['ec2:GetPasswordData']
        for p in ['ec2:GetPasswordData']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetPasswordData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_reserved_instances_exchange_quote(self, *args, **kwargs):
        __protego_used['ec2']['get_reserved_instances_exchange_quote']=['ec2:GetReservedInstancesExchangeQuote']
        for p in ['ec2:GetReservedInstancesExchangeQuote']:
            res = {}
            for nm in ["ReservedInstanceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetReservedInstancesExchangeQuote", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_transit_gateway_attachment_propagations(self, *args, **kwargs):
        __protego_used['ec2']['get_transit_gateway_attachment_propagations']=['ec2:GetTransitGatewayAttachmentPropagations']
        for p in ['ec2:GetTransitGatewayAttachmentPropagations']:
            res = {}
            for nm in ["TransitGatewayAttachmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetTransitGatewayAttachmentPropagations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_transit_gateway_multicast_domain_associations(self, *args, **kwargs):
        __protego_used['ec2']['get_transit_gateway_multicast_domain_associations']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetTransitGatewayMulticastDomainAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_transit_gateway_route_table_associations(self, *args, **kwargs):
        __protego_used['ec2']['get_transit_gateway_route_table_associations']=['ec2:GetTransitGatewayRouteTableAssociations']
        for p in ['ec2:GetTransitGatewayRouteTableAssociations']:
            res = {}
            for nm in ["TransitGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetTransitGatewayRouteTableAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_transit_gateway_route_table_propagations(self, *args, **kwargs):
        __protego_used['ec2']['get_transit_gateway_route_table_propagations']=['ec2:GetTransitGatewayRouteTablePropagations']
        for p in ['ec2:GetTransitGatewayRouteTablePropagations']:
            res = {}
            for nm in ["TransitGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "GetTransitGatewayRouteTablePropagations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_client_vpn_client_certificate_revocation_list(self, *args, **kwargs):
        __protego_used['ec2']['import_client_vpn_client_certificate_revocation_list']=['ec2:ImportClientVpnClientCertificateRevocationList']
        for p in ['ec2:ImportClientVpnClientCertificateRevocationList']:
            res = {}
            for nm in ["CertificateRevocationList","ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ImportClientVpnClientCertificateRevocationList", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_image(self, *args, **kwargs):
        __protego_used['ec2']['import_image']=['ec2:ImportImage']
        for p in ['ec2:ImportImage']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ImportImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_instance(self, *args, **kwargs):
        __protego_used['ec2']['import_instance']=['ec2:ImportInstance']
        for p in ['ec2:ImportInstance']:
            res = {}
            for nm in ["Platform"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ImportInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_key_pair(self, *args, **kwargs):
        __protego_used['ec2']['import_key_pair']=['ec2:ImportKeyPair']
        for p in ['ec2:ImportKeyPair']:
            res = {}
            for nm in ["KeyName","PublicKeyMaterial"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ImportKeyPair", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_snapshot(self, *args, **kwargs):
        __protego_used['ec2']['import_snapshot']=['ec2:ImportSnapshot']
        for p in ['ec2:ImportSnapshot']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ImportSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_volume(self, *args, **kwargs):
        __protego_used['ec2']['import_volume']=['ec2:ImportVolume']
        for p in ['ec2:ImportVolume']:
            res = {}
            for nm in ["Volume","AvailabilityZone","Image"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ImportVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_capacity_reservation(self, *args, **kwargs):
        __protego_used['ec2']['modify_capacity_reservation']=['ec2:ModifyCapacityReservation']
        for p in ['ec2:ModifyCapacityReservation']:
            res = {}
            for nm in ["CapacityReservationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyCapacityReservation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_client_vpn_endpoint(self, *args, **kwargs):
        __protego_used['ec2']['modify_client_vpn_endpoint']=['ec2:ModifyClientVpnEndpoint']
        for p in ['ec2:ModifyClientVpnEndpoint']:
            res = {}
            for nm in ["ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyClientVpnEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_default_credit_specification(self, *args, **kwargs):
        __protego_used['ec2']['modify_default_credit_specification']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["InstanceFamily","CpuCredits"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyDefaultCreditSpecification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_ebs_default_kms_key_id(self, *args, **kwargs):
        __protego_used['ec2']['modify_ebs_default_kms_key_id']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["KmsKeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyEbsDefaultKmsKeyId", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_fleet(self, *args, **kwargs):
        __protego_used['ec2']['modify_fleet']=['ec2:ModifyFleet']
        for p in ['ec2:ModifyFleet']:
            res = {}
            for nm in ["TargetCapacitySpecification","FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_fpga_image_attribute(self, *args, **kwargs):
        __protego_used['ec2']['modify_fpga_image_attribute']=['ec2:ModifyFpgaImageAttribute']
        for p in ['ec2:ModifyFpgaImageAttribute']:
            res = {}
            for nm in ["FpgaImageId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyFpgaImageAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_hosts(self, *args, **kwargs):
        __protego_used['ec2']['modify_hosts']=['ec2:ModifyHosts']
        for p in ['ec2:ModifyHosts']:
            res = {}
            for nm in ["HostIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyHosts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_id_format(self, *args, **kwargs):
        __protego_used['ec2']['modify_id_format']=['ec2:ModifyIdFormat']
        for p in ['ec2:ModifyIdFormat']:
            res = {}
            for nm in ["Resource","UseLongIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyIdFormat", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_identity_id_format(self, *args, **kwargs):
        __protego_used['ec2']['modify_identity_id_format']=['ec2:ModifyIdentityIdFormat']
        for p in ['ec2:ModifyIdentityIdFormat']:
            res = {}
            for nm in ["PrincipalArn","Resource","UseLongIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyIdentityIdFormat", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_image_attribute(self, *args, **kwargs):
        __protego_used['ec2']['modify_image_attribute']=['ec2:ModifyImageAttribute']
        for p in ['ec2:ModifyImageAttribute']:
            res = {}
            for nm in ["ImageId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyImageAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_instance_attribute(self, *args, **kwargs):
        __protego_used['ec2']['modify_instance_attribute']=['ec2:ModifyInstanceAttribute']
        for p in ['ec2:ModifyInstanceAttribute']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyInstanceAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_instance_capacity_reservation_attributes(self, *args, **kwargs):
        __protego_used['ec2']['modify_instance_capacity_reservation_attributes']=['ec2:ModifyInstanceCapacityReservationAttributes']
        for p in ['ec2:ModifyInstanceCapacityReservationAttributes']:
            res = {}
            for nm in ["CapacityReservationSpecification","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyInstanceCapacityReservationAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_instance_credit_specification(self, *args, **kwargs):
        __protego_used['ec2']['modify_instance_credit_specification']=['ec2:ModifyInstanceCreditSpecification']
        for p in ['ec2:ModifyInstanceCreditSpecification']:
            res = {}
            for nm in ["InstanceCreditSpecifications"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyInstanceCreditSpecification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_instance_event_start_time(self, *args, **kwargs):
        __protego_used['ec2']['modify_instance_event_start_time']=['ec2:ModifyInstanceEventStartTime']
        for p in ['ec2:ModifyInstanceEventStartTime']:
            res = {}
            for nm in ["InstanceEventId","NotBefore","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyInstanceEventStartTime", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_instance_metadata_options(self, *args, **kwargs):
        __protego_used['ec2']['modify_instance_metadata_options']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyInstanceMetadataOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_instance_placement(self, *args, **kwargs):
        __protego_used['ec2']['modify_instance_placement']=['ec2:ModifyInstancePlacement']
        for p in ['ec2:ModifyInstancePlacement']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyInstancePlacement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_launch_template(self, *args, **kwargs):
        __protego_used['ec2']['modify_launch_template']=['ec2:ModifyLaunchTemplate']
        for p in ['ec2:ModifyLaunchTemplate']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyLaunchTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_network_interface_attribute(self, *args, **kwargs):
        __protego_used['ec2']['modify_network_interface_attribute']=['ec2:ModifyNetworkInterfaceAttribute']
        for p in ['ec2:ModifyNetworkInterfaceAttribute']:
            res = {}
            for nm in ["NetworkInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyNetworkInterfaceAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_reserved_instances(self, *args, **kwargs):
        __protego_used['ec2']['modify_reserved_instances']=['ec2:ModifyReservedInstances']
        for p in ['ec2:ModifyReservedInstances']:
            res = {}
            for nm in ["ReservedInstancesIds","TargetConfigurations"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyReservedInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_snapshot_attribute(self, *args, **kwargs):
        __protego_used['ec2']['modify_snapshot_attribute']=['ec2:ModifySnapshotAttribute']
        for p in ['ec2:ModifySnapshotAttribute']:
            res = {}
            for nm in ["SnapshotId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifySnapshotAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_spot_fleet_request(self, *args, **kwargs):
        __protego_used['ec2']['modify_spot_fleet_request']=['ec2:ModifySpotFleetRequest']
        for p in ['ec2:ModifySpotFleetRequest']:
            res = {}
            for nm in ["SpotFleetRequestId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifySpotFleetRequest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_subnet_attribute(self, *args, **kwargs):
        __protego_used['ec2']['modify_subnet_attribute']=['ec2:ModifySubnetAttribute']
        for p in ['ec2:ModifySubnetAttribute']:
            res = {}
            for nm in ["SubnetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifySubnetAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_traffic_mirror_filter_network_services(self, *args, **kwargs):
        __protego_used['ec2']['modify_traffic_mirror_filter_network_services']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TrafficMirrorFilterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyTrafficMirrorFilterNetworkServices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_traffic_mirror_filter_rule(self, *args, **kwargs):
        __protego_used['ec2']['modify_traffic_mirror_filter_rule']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TrafficMirrorFilterRuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyTrafficMirrorFilterRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_traffic_mirror_session(self, *args, **kwargs):
        __protego_used['ec2']['modify_traffic_mirror_session']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TrafficMirrorSessionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyTrafficMirrorSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_transit_gateway_vpc_attachment(self, *args, **kwargs):
        __protego_used['ec2']['modify_transit_gateway_vpc_attachment']=['ec2:ModifyTransitGatewayVpcAttachment','ec2:ModifyTransitGatewayVpcAttachment']
        for p in ['ec2:ModifyTransitGatewayVpcAttachment','ec2:ModifyTransitGatewayVpcAttachment']:
            res = {}
            for nm in ["TransitGatewayAttachmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyTransitGatewayVpcAttachment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_volume(self, *args, **kwargs):
        __protego_used['ec2']['modify_volume']=['ec2:ModifyVolume']
        for p in ['ec2:ModifyVolume']:
            res = {}
            for nm in ["VolumeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_volume_attribute(self, *args, **kwargs):
        __protego_used['ec2']['modify_volume_attribute']=['ec2:ModifyVolumeAttribute']
        for p in ['ec2:ModifyVolumeAttribute']:
            res = {}
            for nm in ["VolumeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVolumeAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_vpc_attribute(self, *args, **kwargs):
        __protego_used['ec2']['modify_vpc_attribute']=['ec2:ModifyVpcAttribute']
        for p in ['ec2:ModifyVpcAttribute']:
            res = {}
            for nm in ["VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVpcAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_vpc_endpoint(self, *args, **kwargs):
        __protego_used['ec2']['modify_vpc_endpoint']=['ec2:ModifyVpcEndpoint']
        for p in ['ec2:ModifyVpcEndpoint']:
            res = {}
            for nm in ["VpcEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVpcEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_vpc_endpoint_connection_notification(self, *args, **kwargs):
        __protego_used['ec2']['modify_vpc_endpoint_connection_notification']=['ec2:ModifyVpcEndpointConnectionNotification']
        for p in ['ec2:ModifyVpcEndpointConnectionNotification']:
            res = {}
            for nm in ["ConnectionNotificationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVpcEndpointConnectionNotification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_vpc_endpoint_service_configuration(self, *args, **kwargs):
        __protego_used['ec2']['modify_vpc_endpoint_service_configuration']=['ec2:ModifyVpcEndpointServiceConfiguration']
        for p in ['ec2:ModifyVpcEndpointServiceConfiguration']:
            res = {}
            for nm in ["ServiceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVpcEndpointServiceConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_vpc_endpoint_service_permissions(self, *args, **kwargs):
        __protego_used['ec2']['modify_vpc_endpoint_service_permissions']=['ec2:ModifyVpcEndpointServicePermissions']
        for p in ['ec2:ModifyVpcEndpointServicePermissions']:
            res = {}
            for nm in ["ServiceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVpcEndpointServicePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_vpc_peering_connection_options(self, *args, **kwargs):
        __protego_used['ec2']['modify_vpc_peering_connection_options']=['ec2:ModifyVpcPeeringConnectionOptions']
        for p in ['ec2:ModifyVpcPeeringConnectionOptions']:
            res = {}
            for nm in ["VpcPeeringConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVpcPeeringConnectionOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_vpc_tenancy(self, *args, **kwargs):
        __protego_used['ec2']['modify_vpc_tenancy']=['ec2:ModifyVpcTenancy']
        for p in ['ec2:ModifyVpcTenancy']:
            res = {}
            for nm in ["InstanceTenancy","VpcId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVpcTenancy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_vpn_connection(self, *args, **kwargs):
        __protego_used['ec2']['modify_vpn_connection']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["VpnConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVpnConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_vpn_tunnel_certificate(self, *args, **kwargs):
        __protego_used['ec2']['modify_vpn_tunnel_certificate']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["VpnTunnelOutsideIpAddress","VpnConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVpnTunnelCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_vpn_tunnel_options(self, *args, **kwargs):
        __protego_used['ec2']['modify_vpn_tunnel_options']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TunnelOptions","VpnTunnelOutsideIpAddress","VpnConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ModifyVpnTunnelOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def monitor_instances(self, *args, **kwargs):
        __protego_used['ec2']['monitor_instances']=['ec2:MonitorInstances']
        for p in ['ec2:MonitorInstances']:
            res = {}
            for nm in ["InstanceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "MonitorInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def move_address_to_vpc(self, *args, **kwargs):
        __protego_used['ec2']['move_address_to_vpc']=['ec2:MoveAddressToVpc']
        for p in ['ec2:MoveAddressToVpc']:
            res = {}
            for nm in ["PublicIp"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "MoveAddressToVpc", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def provision_byoip_cidr(self, *args, **kwargs):
        __protego_used['ec2']['provision_byoip_cidr']=['ec2:ProvisionByoipCidr']
        for p in ['ec2:ProvisionByoipCidr']:
            res = {}
            for nm in ["Cidr"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ProvisionByoipCidr", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def purchase_host_reservation(self, *args, **kwargs):
        __protego_used['ec2']['purchase_host_reservation']=['ec2:PurchaseHostReservation']
        for p in ['ec2:PurchaseHostReservation']:
            res = {}
            for nm in ["OfferingId","HostIdSet"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "PurchaseHostReservation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def purchase_reserved_instances_offering(self, *args, **kwargs):
        __protego_used['ec2']['purchase_reserved_instances_offering']=['ec2:PurchaseReservedInstancesOffering']
        for p in ['ec2:PurchaseReservedInstancesOffering']:
            res = {}
            for nm in ["InstanceCount","ReservedInstancesOfferingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "PurchaseReservedInstancesOffering", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def purchase_scheduled_instances(self, *args, **kwargs):
        __protego_used['ec2']['purchase_scheduled_instances']=['ec2:PurchaseScheduledInstances']
        for p in ['ec2:PurchaseScheduledInstances']:
            res = {}
            for nm in ["PurchaseRequests"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "PurchaseScheduledInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_instances(self, *args, **kwargs):
        __protego_used['ec2']['reboot_instances']=['ec2:RebootInstances']
        for p in ['ec2:RebootInstances']:
            res = {}
            for nm in ["InstanceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RebootInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_image(self, *args, **kwargs):
        __protego_used['ec2']['register_image']=['ec2:RegisterImage']
        for p in ['ec2:RegisterImage']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RegisterImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_transit_gateway_multicast_group_members(self, *args, **kwargs):
        __protego_used['ec2']['register_transit_gateway_multicast_group_members']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RegisterTransitGatewayMulticastGroupMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_transit_gateway_multicast_group_sources(self, *args, **kwargs):
        __protego_used['ec2']['register_transit_gateway_multicast_group_sources']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RegisterTransitGatewayMulticastGroupSources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_transit_gateway_peering_attachment(self, *args, **kwargs):
        __protego_used['ec2']['reject_transit_gateway_peering_attachment']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["TransitGatewayAttachmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RejectTransitGatewayPeeringAttachment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_transit_gateway_vpc_attachment(self, *args, **kwargs):
        __protego_used['ec2']['reject_transit_gateway_vpc_attachment']=['ec2:RejectTransitGatewayVpcAttachment']
        for p in ['ec2:RejectTransitGatewayVpcAttachment']:
            res = {}
            for nm in ["TransitGatewayAttachmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RejectTransitGatewayVpcAttachment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_vpc_endpoint_connections(self, *args, **kwargs):
        __protego_used['ec2']['reject_vpc_endpoint_connections']=['ec2:RejectVpcEndpointConnections']
        for p in ['ec2:RejectVpcEndpointConnections']:
            res = {}
            for nm in ["VpcEndpointIds","ServiceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RejectVpcEndpointConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_vpc_peering_connection(self, *args, **kwargs):
        __protego_used['ec2']['reject_vpc_peering_connection']=['ec2:RejectVpcPeeringConnection']
        for p in ['ec2:RejectVpcPeeringConnection']:
            res = {}
            for nm in ["VpcPeeringConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RejectVpcPeeringConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def release_address(self, *args, **kwargs):
        __protego_used['ec2']['release_address']=['ec2:ReleaseAddress']
        for p in ['ec2:ReleaseAddress']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ReleaseAddress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def release_hosts(self, *args, **kwargs):
        __protego_used['ec2']['release_hosts']=['ec2:ReleaseHosts']
        for p in ['ec2:ReleaseHosts']:
            res = {}
            for nm in ["HostIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ReleaseHosts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def replace_iam_instance_profile_association(self, *args, **kwargs):
        __protego_used['ec2']['replace_iam_instance_profile_association']=['ec2:ReplaceIamInstanceProfileAssociation']
        for p in ['ec2:ReplaceIamInstanceProfileAssociation']:
            res = {}
            for nm in ["AssociationId","IamInstanceProfile"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ReplaceIamInstanceProfileAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def replace_network_acl_association(self, *args, **kwargs):
        __protego_used['ec2']['replace_network_acl_association']=['ec2:ReplaceNetworkAclAssociation']
        for p in ['ec2:ReplaceNetworkAclAssociation']:
            res = {}
            for nm in ["AssociationId","NetworkAclId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ReplaceNetworkAclAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def replace_network_acl_entry(self, *args, **kwargs):
        __protego_used['ec2']['replace_network_acl_entry']=['ec2:ReplaceNetworkAclEntry']
        for p in ['ec2:ReplaceNetworkAclEntry']:
            res = {}
            for nm in ["RuleNumber","Egress","Protocol","NetworkAclId","RuleAction"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ReplaceNetworkAclEntry", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def replace_route(self, *args, **kwargs):
        __protego_used['ec2']['replace_route']=['ec2:ReplaceRoute']
        for p in ['ec2:ReplaceRoute']:
            res = {}
            for nm in ["RouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ReplaceRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def replace_route_table_association(self, *args, **kwargs):
        __protego_used['ec2']['replace_route_table_association']=['ec2:ReplaceRouteTableAssociation']
        for p in ['ec2:ReplaceRouteTableAssociation']:
            res = {}
            for nm in ["AssociationId","RouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ReplaceRouteTableAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def replace_transit_gateway_route(self, *args, **kwargs):
        __protego_used['ec2']['replace_transit_gateway_route']=['ec2:ReplaceTransitGatewayRoute','ec2:ReplaceTransitGatewayRoute']
        for p in ['ec2:ReplaceTransitGatewayRoute','ec2:ReplaceTransitGatewayRoute']:
            res = {}
            for nm in ["DestinationCidrBlock","TransitGatewayRouteTableId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ReplaceTransitGatewayRoute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def report_instance_status(self, *args, **kwargs):
        __protego_used['ec2']['report_instance_status']=['ec2:ReportInstanceStatus']
        for p in ['ec2:ReportInstanceStatus']:
            res = {}
            for nm in ["ReasonCodes","Instances","Status"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ReportInstanceStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def request_spot_fleet(self, *args, **kwargs):
        __protego_used['ec2']['request_spot_fleet']=['ec2:RequestSpotFleet']
        for p in ['ec2:RequestSpotFleet']:
            res = {}
            for nm in ["SpotFleetRequestConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RequestSpotFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def request_spot_instances(self, *args, **kwargs):
        __protego_used['ec2']['request_spot_instances']=['ec2:RequestSpotInstances']
        for p in ['ec2:RequestSpotInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RequestSpotInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_ebs_default_kms_key_id(self, *args, **kwargs):
        __protego_used['ec2']['reset_ebs_default_kms_key_id']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ResetEbsDefaultKmsKeyId", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_fpga_image_attribute(self, *args, **kwargs):
        __protego_used['ec2']['reset_fpga_image_attribute']=['ec2:ResetFpgaImageAttribute']
        for p in ['ec2:ResetFpgaImageAttribute']:
            res = {}
            for nm in ["FpgaImageId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ResetFpgaImageAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_image_attribute(self, *args, **kwargs):
        __protego_used['ec2']['reset_image_attribute']=['ec2:ResetImageAttribute']
        for p in ['ec2:ResetImageAttribute']:
            res = {}
            for nm in ["ImageId","Attribute"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ResetImageAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_instance_attribute(self, *args, **kwargs):
        __protego_used['ec2']['reset_instance_attribute']=['ec2:ResetInstanceAttribute']
        for p in ['ec2:ResetInstanceAttribute']:
            res = {}
            for nm in ["InstanceId","Attribute"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ResetInstanceAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_network_interface_attribute(self, *args, **kwargs):
        __protego_used['ec2']['reset_network_interface_attribute']=['ec2:ResetNetworkInterfaceAttribute']
        for p in ['ec2:ResetNetworkInterfaceAttribute']:
            res = {}
            for nm in ["NetworkInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ResetNetworkInterfaceAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_snapshot_attribute(self, *args, **kwargs):
        __protego_used['ec2']['reset_snapshot_attribute']=['ec2:ResetSnapshotAttribute']
        for p in ['ec2:ResetSnapshotAttribute']:
            res = {}
            for nm in ["SnapshotId","Attribute"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "ResetSnapshotAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_address_to_classic(self, *args, **kwargs):
        __protego_used['ec2']['restore_address_to_classic']=['ec2:RestoreAddressToClassic']
        for p in ['ec2:RestoreAddressToClassic']:
            res = {}
            for nm in ["PublicIp"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RestoreAddressToClassic", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_client_vpn_ingress(self, *args, **kwargs):
        __protego_used['ec2']['revoke_client_vpn_ingress']=['ec2:RevokeClientVpnIngress']
        for p in ['ec2:RevokeClientVpnIngress']:
            res = {}
            for nm in ["ClientVpnEndpointId","TargetNetworkCidr"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RevokeClientVpnIngress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_security_group_egress(self, *args, **kwargs):
        __protego_used['ec2']['revoke_security_group_egress']=['ec2:RevokeSecurityGroupEgress']
        for p in ['ec2:RevokeSecurityGroupEgress']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RevokeSecurityGroupEgress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_security_group_ingress(self, *args, **kwargs):
        __protego_used['ec2']['revoke_security_group_ingress']=['ec2:RevokeSecurityGroupIngress']
        for p in ['ec2:RevokeSecurityGroupIngress']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RevokeSecurityGroupIngress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def run_instances(self, *args, **kwargs):
        __protego_used['ec2']['run_instances']=['ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances']
        for p in ['ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances']:
            res = {}
            for nm in ["MaxCount","MinCount"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RunInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def run_scheduled_instances(self, *args, **kwargs):
        __protego_used['ec2']['run_scheduled_instances']=['ec2:RunScheduledInstances']
        for p in ['ec2:RunScheduledInstances']:
            res = {}
            for nm in ["LaunchSpecification","ScheduledInstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "RunScheduledInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_local_gateway_routes(self, *args, **kwargs):
        __protego_used['ec2']['search_local_gateway_routes']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["LocalGatewayRouteTableId","Filters"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "SearchLocalGatewayRoutes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_transit_gateway_multicast_groups(self, *args, **kwargs):
        __protego_used['ec2']['search_transit_gateway_multicast_groups']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "SearchTransitGatewayMulticastGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_transit_gateway_routes(self, *args, **kwargs):
        __protego_used['ec2']['search_transit_gateway_routes']=['ec2:SearchTransitGatewayRoutes']
        for p in ['ec2:SearchTransitGatewayRoutes']:
            res = {}
            for nm in ["TransitGatewayRouteTableId","Filters"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "SearchTransitGatewayRoutes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_diagnostic_interrupt(self, *args, **kwargs):
        __protego_used['ec2']['send_diagnostic_interrupt']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "SendDiagnosticInterrupt", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_instances(self, *args, **kwargs):
        __protego_used['ec2']['start_instances']=['ec2:StartInstances']
        for p in ['ec2:StartInstances']:
            res = {}
            for nm in ["InstanceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "StartInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_vpc_endpoint_service_private_dns_verification(self, *args, **kwargs):
        __protego_used['ec2']['start_vpc_endpoint_service_private_dns_verification']=['ec2:*']
        for p in ['ec2:*']:
            res = {}
            for nm in ["ServiceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "StartVpcEndpointServicePrivateDnsVerification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_instances(self, *args, **kwargs):
        __protego_used['ec2']['stop_instances']=['ec2:StopInstances']
        for p in ['ec2:StopInstances']:
            res = {}
            for nm in ["InstanceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "StopInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def terminate_client_vpn_connections(self, *args, **kwargs):
        __protego_used['ec2']['terminate_client_vpn_connections']=['ec2:TerminateClientVpnConnections']
        for p in ['ec2:TerminateClientVpnConnections']:
            res = {}
            for nm in ["ClientVpnEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "TerminateClientVpnConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def terminate_instances(self, *args, **kwargs):
        __protego_used['ec2']['terminate_instances']=['ec2:TerminateInstances']
        for p in ['ec2:TerminateInstances']:
            res = {}
            for nm in ["InstanceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "TerminateInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unassign_ipv6_addresses(self, *args, **kwargs):
        __protego_used['ec2']['unassign_ipv6_addresses']=['ec2:UnassignIpv6Addresses']
        for p in ['ec2:UnassignIpv6Addresses']:
            res = {}
            for nm in ["Ipv6Addresses","NetworkInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "UnassignIpv6Addresses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unassign_private_ip_addresses(self, *args, **kwargs):
        __protego_used['ec2']['unassign_private_ip_addresses']=['ec2:UnassignPrivateIpAddresses']
        for p in ['ec2:UnassignPrivateIpAddresses']:
            res = {}
            for nm in ["NetworkInterfaceId","PrivateIpAddresses"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "UnassignPrivateIpAddresses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unmonitor_instances(self, *args, **kwargs):
        __protego_used['ec2']['unmonitor_instances']=['ec2:UnmonitorInstances']
        for p in ['ec2:UnmonitorInstances']:
            res = {}
            for nm in ["InstanceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "UnmonitorInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_security_group_rule_descriptions_egress(self, *args, **kwargs):
        __protego_used['ec2']['update_security_group_rule_descriptions_egress']=['ec2:UpdateSecurityGroupRuleDescriptionsEgress']
        for p in ['ec2:UpdateSecurityGroupRuleDescriptionsEgress']:
            res = {}
            for nm in ["IpPermissions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "UpdateSecurityGroupRuleDescriptionsEgress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_security_group_rule_descriptions_ingress(self, *args, **kwargs):
        __protego_used['ec2']['update_security_group_rule_descriptions_ingress']=['ec2:UpdateSecurityGroupRuleDescriptionsIngress']
        for p in ['ec2:UpdateSecurityGroupRuleDescriptionsIngress']:
            res = {}
            for nm in ["IpPermissions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "UpdateSecurityGroupRuleDescriptionsIngress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def withdraw_byoip_cidr(self, *args, **kwargs):
        __protego_used['ec2']['withdraw_byoip_cidr']=['ec2:WithdrawByoipCidr']
        for p in ['ec2:WithdrawByoipCidr']:
            res = {}
            for nm in ["Cidr"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2'].append({'action': "WithdrawByoipCidr", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class ec2_instance_connect:
    def __init__(self, region_name=__default_region):
        __protego_used['ec2-instance-connect']= __protego_used.get('ec2-instance-connect', {})
        __protego_resource_map['ec2-instance-connect']=__protego_resource_map.get('ec2-instance-connect', [])
        self.region = region_name
    def send_ssh_public_key(self, *args, **kwargs):
        __protego_used['ec2-instance-connect']['send_ssh_public_key']=['ec2-instance-connect:*']
        for p in ['ec2-instance-connect:*']:
            res = {}
            for nm in ["AvailabilityZone","InstanceOSUser","SSHPublicKey","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ec2-instance-connect'].append({'action': "SendSSHPublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class ecr:
    def __init__(self, region_name=__default_region):
        __protego_used['ecr']= __protego_used.get('ecr', {})
        __protego_resource_map['ecr']=__protego_resource_map.get('ecr', [])
        self.region = region_name
    def batch_check_layer_availability(self, *args, **kwargs):
        __protego_used['ecr']['batch_check_layer_availability']=['ecr:BatchCheckLayerAvailability']
        for p in ['ecr:BatchCheckLayerAvailability']:
            res = {}
            for nm in ["layerDigests","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "BatchCheckLayerAvailability", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_delete_image(self, *args, **kwargs):
        __protego_used['ecr']['batch_delete_image']=['ecr:BatchDeleteImage']
        for p in ['ecr:BatchDeleteImage']:
            res = {}
            for nm in ["repositoryName","imageIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "BatchDeleteImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_image(self, *args, **kwargs):
        __protego_used['ecr']['batch_get_image']=['ecr:BatchGetImage']
        for p in ['ecr:BatchGetImage']:
            res = {}
            for nm in ["repositoryName","imageIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "BatchGetImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def complete_layer_upload(self, *args, **kwargs):
        __protego_used['ecr']['complete_layer_upload']=['ecr:CompleteLayerUpload']
        for p in ['ecr:CompleteLayerUpload']:
            res = {}
            for nm in ["uploadId","layerDigests","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "CompleteLayerUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_repository(self, *args, **kwargs):
        __protego_used['ecr']['create_repository']=['ecr:CreateRepository']
        for p in ['ecr:CreateRepository']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "CreateRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_lifecycle_policy(self, *args, **kwargs):
        __protego_used['ecr']['delete_lifecycle_policy']=['ecr:*']
        for p in ['ecr:*']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "DeleteLifecyclePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_repository(self, *args, **kwargs):
        __protego_used['ecr']['delete_repository']=['ecr:DeleteRepository']
        for p in ['ecr:DeleteRepository']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "DeleteRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_repository_policy(self, *args, **kwargs):
        __protego_used['ecr']['delete_repository_policy']=['ecr:DeleteRepositoryPolicy']
        for p in ['ecr:DeleteRepositoryPolicy']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "DeleteRepositoryPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_image_scan_findings(self, *args, **kwargs):
        __protego_used['ecr']['describe_image_scan_findings']=['ecr:*']
        for p in ['ecr:*']:
            res = {}
            for nm in ["repositoryName","imageId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "DescribeImageScanFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_images(self, *args, **kwargs):
        __protego_used['ecr']['describe_images']=['ecr:DescribeImages']
        for p in ['ecr:DescribeImages']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "DescribeImages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_repositories(self, *args, **kwargs):
        __protego_used['ecr']['describe_repositories']=['ecr:DescribeRepositories']
        for p in ['ecr:DescribeRepositories']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "DescribeRepositories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_authorization_token(self, *args, **kwargs):
        __protego_used['ecr']['get_authorization_token']=['ecr:GetAuthorizationToken']
        for p in ['ecr:GetAuthorizationToken']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "GetAuthorizationToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_download_url_for_layer(self, *args, **kwargs):
        __protego_used['ecr']['get_download_url_for_layer']=['ecr:GetDownloadUrlForLayer']
        for p in ['ecr:GetDownloadUrlForLayer']:
            res = {}
            for nm in ["repositoryName","layerDigest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "GetDownloadUrlForLayer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_lifecycle_policy(self, *args, **kwargs):
        __protego_used['ecr']['get_lifecycle_policy']=['ecr:*']
        for p in ['ecr:*']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "GetLifecyclePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_lifecycle_policy_preview(self, *args, **kwargs):
        __protego_used['ecr']['get_lifecycle_policy_preview']=['ecr:*']
        for p in ['ecr:*']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "GetLifecyclePolicyPreview", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_repository_policy(self, *args, **kwargs):
        __protego_used['ecr']['get_repository_policy']=['ecr:GetRepositoryPolicy']
        for p in ['ecr:GetRepositoryPolicy']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "GetRepositoryPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def initiate_layer_upload(self, *args, **kwargs):
        __protego_used['ecr']['initiate_layer_upload']=['ecr:InitiateLayerUpload']
        for p in ['ecr:InitiateLayerUpload']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "InitiateLayerUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_images(self, *args, **kwargs):
        __protego_used['ecr']['list_images']=['ecr:ListImages']
        for p in ['ecr:ListImages']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "ListImages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['ecr']['list_tags_for_resource']=['ecr:ListTagsForResource']
        for p in ['ecr:ListTagsForResource']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_image(self, *args, **kwargs):
        __protego_used['ecr']['put_image']=['ecr:PutImage']
        for p in ['ecr:PutImage']:
            res = {}
            for nm in ["imageManifest","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "PutImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_image_scanning_configuration(self, *args, **kwargs):
        __protego_used['ecr']['put_image_scanning_configuration']=['ecr:*']
        for p in ['ecr:*']:
            res = {}
            for nm in ["repositoryName","imageScanningConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "PutImageScanningConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_image_tag_mutability(self, *args, **kwargs):
        __protego_used['ecr']['put_image_tag_mutability']=['ecr:*']
        for p in ['ecr:*']:
            res = {}
            for nm in ["repositoryName","imageTagMutability"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "PutImageTagMutability", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_lifecycle_policy(self, *args, **kwargs):
        __protego_used['ecr']['put_lifecycle_policy']=['ecr:*']
        for p in ['ecr:*']:
            res = {}
            for nm in ["lifecyclePolicyText","repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "PutLifecyclePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_repository_policy(self, *args, **kwargs):
        __protego_used['ecr']['set_repository_policy']=['ecr:SetRepositoryPolicy']
        for p in ['ecr:SetRepositoryPolicy']:
            res = {}
            for nm in ["repositoryName","policyText"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "SetRepositoryPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_image_scan(self, *args, **kwargs):
        __protego_used['ecr']['start_image_scan']=['ecr:*']
        for p in ['ecr:*']:
            res = {}
            for nm in ["repositoryName","imageId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "StartImageScan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_lifecycle_policy_preview(self, *args, **kwargs):
        __protego_used['ecr']['start_lifecycle_policy_preview']=['ecr:*']
        for p in ['ecr:*']:
            res = {}
            for nm in ["repositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "StartLifecyclePolicyPreview", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['ecr']['tag_resource']=['ecr:TagResource']
        for p in ['ecr:TagResource']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['ecr']['untag_resource']=['ecr:UntagResource']
        for p in ['ecr:UntagResource']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_layer_part(self, *args, **kwargs):
        __protego_used['ecr']['upload_layer_part']=['ecr:UploadLayerPart']
        for p in ['ecr:UploadLayerPart']:
            res = {}
            for nm in ["partLastByte","layerPartBlob","repositoryName","uploadId","partFirstByte"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecr'].append({'action': "UploadLayerPart", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class ecs:
    def __init__(self, region_name=__default_region):
        __protego_used['ecs']= __protego_used.get('ecs', {})
        __protego_resource_map['ecs']=__protego_resource_map.get('ecs', [])
        self.region = region_name
    def create_capacity_provider(self, *args, **kwargs):
        __protego_used['ecs']['create_capacity_provider']=['ecs:*']
        for p in ['ecs:*']:
            res = {}
            for nm in ["autoScalingGroupProvider","name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "CreateCapacityProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cluster(self, *args, **kwargs):
        __protego_used['ecs']['create_cluster']=['ecs:CreateCluster']
        for p in ['ecs:CreateCluster']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "CreateCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_service(self, *args, **kwargs):
        __protego_used['ecs']['create_service']=['ecs:CreateService']
        for p in ['ecs:CreateService']:
            res = {}
            for nm in ["serviceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "CreateService", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_task_set(self, *args, **kwargs):
        __protego_used['ecs']['create_task_set']=['ecs:CreateTaskSet']
        for p in ['ecs:CreateTaskSet']:
            res = {}
            for nm in ["service","cluster","taskDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "CreateTaskSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_account_setting(self, *args, **kwargs):
        __protego_used['ecs']['delete_account_setting']=['ecs:DeleteAccountSetting']
        for p in ['ecs:DeleteAccountSetting']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DeleteAccountSetting", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_attributes(self, *args, **kwargs):
        __protego_used['ecs']['delete_attributes']=['ecs:*']
        for p in ['ecs:*']:
            res = {}
            for nm in ["attributes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DeleteAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cluster(self, *args, **kwargs):
        __protego_used['ecs']['delete_cluster']=['ecs:DeleteCluster']
        for p in ['ecs:DeleteCluster']:
            res = {}
            for nm in ["cluster"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DeleteCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_service(self, *args, **kwargs):
        __protego_used['ecs']['delete_service']=['ecs:DeleteService']
        for p in ['ecs:DeleteService']:
            res = {}
            for nm in ["service"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DeleteService", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_task_set(self, *args, **kwargs):
        __protego_used['ecs']['delete_task_set']=['ecs:DeleteTaskSet']
        for p in ['ecs:DeleteTaskSet']:
            res = {}
            for nm in ["taskSet","service","cluster"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DeleteTaskSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_container_instance(self, *args, **kwargs):
        __protego_used['ecs']['deregister_container_instance']=['ecs:DeregisterContainerInstance']
        for p in ['ecs:DeregisterContainerInstance']:
            res = {}
            for nm in ["containerInstance"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DeregisterContainerInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_task_definition(self, *args, **kwargs):
        __protego_used['ecs']['deregister_task_definition']=['ecs:DeregisterTaskDefinition']
        for p in ['ecs:DeregisterTaskDefinition']:
            res = {}
            for nm in ["taskDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DeregisterTaskDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_capacity_providers(self, *args, **kwargs):
        __protego_used['ecs']['describe_capacity_providers']=['ecs:*']
        for p in ['ecs:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DescribeCapacityProviders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_clusters(self, *args, **kwargs):
        __protego_used['ecs']['describe_clusters']=['ecs:DescribeClusters']
        for p in ['ecs:DescribeClusters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DescribeClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_container_instances(self, *args, **kwargs):
        __protego_used['ecs']['describe_container_instances']=['ecs:DescribeContainerInstances']
        for p in ['ecs:DescribeContainerInstances']:
            res = {}
            for nm in ["containerInstances"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DescribeContainerInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_services(self, *args, **kwargs):
        __protego_used['ecs']['describe_services']=['ecs:DescribeServices']
        for p in ['ecs:DescribeServices']:
            res = {}
            for nm in ["services"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DescribeServices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_task_definition(self, *args, **kwargs):
        __protego_used['ecs']['describe_task_definition']=['ecs:DescribeTaskDefinition']
        for p in ['ecs:DescribeTaskDefinition']:
            res = {}
            for nm in ["taskDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DescribeTaskDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_task_sets(self, *args, **kwargs):
        __protego_used['ecs']['describe_task_sets']=['ecs:DescribeTaskSets']
        for p in ['ecs:DescribeTaskSets']:
            res = {}
            for nm in ["service","cluster"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DescribeTaskSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tasks(self, *args, **kwargs):
        __protego_used['ecs']['describe_tasks']=['ecs:DescribeTasks']
        for p in ['ecs:DescribeTasks']:
            res = {}
            for nm in ["tasks"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DescribeTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def discover_poll_endpoint(self, *args, **kwargs):
        __protego_used['ecs']['discover_poll_endpoint']=['ecs:DiscoverPollEndpoint']
        for p in ['ecs:DiscoverPollEndpoint']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "DiscoverPollEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_account_settings(self, *args, **kwargs):
        __protego_used['ecs']['list_account_settings']=['ecs:ListAccountSettings']
        for p in ['ecs:ListAccountSettings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "ListAccountSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_attributes(self, *args, **kwargs):
        __protego_used['ecs']['list_attributes']=['ecs:*']
        for p in ['ecs:*']:
            res = {}
            for nm in ["targetType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "ListAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_clusters(self, *args, **kwargs):
        __protego_used['ecs']['list_clusters']=['ecs:ListClusters']
        for p in ['ecs:ListClusters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "ListClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_container_instances(self, *args, **kwargs):
        __protego_used['ecs']['list_container_instances']=['ecs:ListContainerInstances']
        for p in ['ecs:ListContainerInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "ListContainerInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_services(self, *args, **kwargs):
        __protego_used['ecs']['list_services']=['ecs:ListServices']
        for p in ['ecs:ListServices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "ListServices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['ecs']['list_tags_for_resource']=['ecs:ListTagsForResource']
        for p in ['ecs:ListTagsForResource']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_task_definition_families(self, *args, **kwargs):
        __protego_used['ecs']['list_task_definition_families']=['ecs:ListTaskDefinitionFamilies']
        for p in ['ecs:ListTaskDefinitionFamilies']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "ListTaskDefinitionFamilies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_task_definitions(self, *args, **kwargs):
        __protego_used['ecs']['list_task_definitions']=['ecs:ListTaskDefinitions']
        for p in ['ecs:ListTaskDefinitions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "ListTaskDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tasks(self, *args, **kwargs):
        __protego_used['ecs']['list_tasks']=['ecs:ListTasks']
        for p in ['ecs:ListTasks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "ListTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_account_setting(self, *args, **kwargs):
        __protego_used['ecs']['put_account_setting']=['ecs:PutAccountSetting']
        for p in ['ecs:PutAccountSetting']:
            res = {}
            for nm in ["name","value"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "PutAccountSetting", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_account_setting_default(self, *args, **kwargs):
        __protego_used['ecs']['put_account_setting_default']=['ecs:PutAccountSettingDefault']
        for p in ['ecs:PutAccountSettingDefault']:
            res = {}
            for nm in ["name","value"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "PutAccountSettingDefault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_attributes(self, *args, **kwargs):
        __protego_used['ecs']['put_attributes']=['ecs:*']
        for p in ['ecs:*']:
            res = {}
            for nm in ["attributes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "PutAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_cluster_capacity_providers(self, *args, **kwargs):
        __protego_used['ecs']['put_cluster_capacity_providers']=['ecs:*']
        for p in ['ecs:*']:
            res = {}
            for nm in ["capacityProviders","cluster","defaultCapacityProviderStrategy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "PutClusterCapacityProviders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_container_instance(self, *args, **kwargs):
        __protego_used['ecs']['register_container_instance']=['ecs:RegisterContainerInstance']
        for p in ['ecs:RegisterContainerInstance']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "RegisterContainerInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_task_definition(self, *args, **kwargs):
        __protego_used['ecs']['register_task_definition']=['ecs:RegisterTaskDefinition']
        for p in ['ecs:RegisterTaskDefinition']:
            res = {}
            for nm in ["family","containerDefinitions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "RegisterTaskDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def run_task(self, *args, **kwargs):
        __protego_used['ecs']['run_task']=['ecs:RunTask']
        for p in ['ecs:RunTask']:
            res = {}
            for nm in ["taskDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "RunTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_task(self, *args, **kwargs):
        __protego_used['ecs']['start_task']=['ecs:StartTask']
        for p in ['ecs:StartTask']:
            res = {}
            for nm in ["containerInstances","taskDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "StartTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_task(self, *args, **kwargs):
        __protego_used['ecs']['stop_task']=['ecs:StopTask']
        for p in ['ecs:StopTask']:
            res = {}
            for nm in ["task"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "StopTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def submit_attachment_state_changes(self, *args, **kwargs):
        __protego_used['ecs']['submit_attachment_state_changes']=['ecs:*']
        for p in ['ecs:*']:
            res = {}
            for nm in ["attachments"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "SubmitAttachmentStateChanges", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def submit_container_state_change(self, *args, **kwargs):
        __protego_used['ecs']['submit_container_state_change']=['ecs:SubmitContainerStateChange']
        for p in ['ecs:SubmitContainerStateChange']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "SubmitContainerStateChange", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def submit_task_state_change(self, *args, **kwargs):
        __protego_used['ecs']['submit_task_state_change']=['ecs:SubmitTaskStateChange']
        for p in ['ecs:SubmitTaskStateChange']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "SubmitTaskStateChange", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['ecs']['tag_resource']=['ecs:TagResource']
        for p in ['ecs:TagResource']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['ecs']['untag_resource']=['ecs:UntagResource']
        for p in ['ecs:UntagResource']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_cluster_settings(self, *args, **kwargs):
        __protego_used['ecs']['update_cluster_settings']=['ecs:*']
        for p in ['ecs:*']:
            res = {}
            for nm in ["cluster","settings"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "UpdateClusterSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_container_agent(self, *args, **kwargs):
        __protego_used['ecs']['update_container_agent']=['ecs:UpdateContainerAgent']
        for p in ['ecs:UpdateContainerAgent']:
            res = {}
            for nm in ["containerInstance"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "UpdateContainerAgent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_container_instances_state(self, *args, **kwargs):
        __protego_used['ecs']['update_container_instances_state']=['ecs:UpdateContainerInstancesState']
        for p in ['ecs:UpdateContainerInstancesState']:
            res = {}
            for nm in ["status","containerInstances"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "UpdateContainerInstancesState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_service(self, *args, **kwargs):
        __protego_used['ecs']['update_service']=['ecs:UpdateService']
        for p in ['ecs:UpdateService']:
            res = {}
            for nm in ["service"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "UpdateService", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_service_primary_task_set(self, *args, **kwargs):
        __protego_used['ecs']['update_service_primary_task_set']=['ecs:UpdateServicePrimaryTaskSet']
        for p in ['ecs:UpdateServicePrimaryTaskSet']:
            res = {}
            for nm in ["primaryTaskSet","service","cluster"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "UpdateServicePrimaryTaskSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_task_set(self, *args, **kwargs):
        __protego_used['ecs']['update_task_set']=['ecs:UpdateTaskSet']
        for p in ['ecs:UpdateTaskSet']:
            res = {}
            for nm in ["taskSet","service","cluster","scale"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ecs'].append({'action': "UpdateTaskSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class efs:
    def __init__(self, region_name=__default_region):
        __protego_used['efs']= __protego_used.get('efs', {})
        __protego_resource_map['efs']=__protego_resource_map.get('efs', [])
        self.region = region_name
    def create_file_system(self, *args, **kwargs):
        __protego_used['efs']['create_file_system']=['elasticfilesystem:CreateFileSystem']
        for p in ['elasticfilesystem:CreateFileSystem']:
            res = {}
            for nm in ["CreationToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "CreateFileSystem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_mount_target(self, *args, **kwargs):
        __protego_used['efs']['create_mount_target']=['elasticfilesystem:CreateMountTarget']
        for p in ['elasticfilesystem:CreateMountTarget']:
            res = {}
            for nm in ["SubnetId","FileSystemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "CreateMountTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_tags(self, *args, **kwargs):
        __protego_used['efs']['create_tags']=['elasticfilesystem:CreateTags']
        for p in ['elasticfilesystem:CreateTags']:
            res = {}
            for nm in ["FileSystemId","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "CreateTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_file_system(self, *args, **kwargs):
        __protego_used['efs']['delete_file_system']=['elasticfilesystem:DeleteFileSystem']
        for p in ['elasticfilesystem:DeleteFileSystem']:
            res = {}
            for nm in ["FileSystemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "DeleteFileSystem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_mount_target(self, *args, **kwargs):
        __protego_used['efs']['delete_mount_target']=['elasticfilesystem:DeleteMountTarget']
        for p in ['elasticfilesystem:DeleteMountTarget']:
            res = {}
            for nm in ["MountTargetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "DeleteMountTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tags(self, *args, **kwargs):
        __protego_used['efs']['delete_tags']=['elasticfilesystem:DeleteTags']
        for p in ['elasticfilesystem:DeleteTags']:
            res = {}
            for nm in ["TagKeys","FileSystemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "DeleteTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_file_systems(self, *args, **kwargs):
        __protego_used['efs']['describe_file_systems']=['elasticfilesystem:DescribeFileSystems']
        for p in ['elasticfilesystem:DescribeFileSystems']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "DescribeFileSystems", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_lifecycle_configuration(self, *args, **kwargs):
        __protego_used['efs']['describe_lifecycle_configuration']=['elasticfilesystem:DescribeLifecycleConfiguration']
        for p in ['elasticfilesystem:DescribeLifecycleConfiguration']:
            res = {}
            for nm in ["FileSystemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "DescribeLifecycleConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_mount_target_security_groups(self, *args, **kwargs):
        __protego_used['efs']['describe_mount_target_security_groups']=['elasticfilesystem:DescribeMountTargetSecurityGroups']
        for p in ['elasticfilesystem:DescribeMountTargetSecurityGroups']:
            res = {}
            for nm in ["MountTargetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "DescribeMountTargetSecurityGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_mount_targets(self, *args, **kwargs):
        __protego_used['efs']['describe_mount_targets']=['elasticfilesystem:DescribeMountTargets']
        for p in ['elasticfilesystem:DescribeMountTargets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "DescribeMountTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tags(self, *args, **kwargs):
        __protego_used['efs']['describe_tags']=['elasticfilesystem:DescribeTags']
        for p in ['elasticfilesystem:DescribeTags']:
            res = {}
            for nm in ["FileSystemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "DescribeTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_mount_target_security_groups(self, *args, **kwargs):
        __protego_used['efs']['modify_mount_target_security_groups']=['elasticfilesystem:ModifyMountTargetSecurityGroups']
        for p in ['elasticfilesystem:ModifyMountTargetSecurityGroups']:
            res = {}
            for nm in ["MountTargetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "ModifyMountTargetSecurityGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_lifecycle_configuration(self, *args, **kwargs):
        __protego_used['efs']['put_lifecycle_configuration']=['elasticfilesystem:PutLifecycleConfiguration']
        for p in ['elasticfilesystem:PutLifecycleConfiguration']:
            res = {}
            for nm in ["LifecyclePolicies","FileSystemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "PutLifecycleConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_file_system(self, *args, **kwargs):
        __protego_used['efs']['update_file_system']=['elasticfilesystem:*']
        for p in ['elasticfilesystem:*']:
            res = {}
            for nm in ["FileSystemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['efs'].append({'action': "UpdateFileSystem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class eks:
    def __init__(self, region_name=__default_region):
        __protego_used['eks']= __protego_used.get('eks', {})
        __protego_resource_map['eks']=__protego_resource_map.get('eks', [])
        self.region = region_name
    def create_cluster(self, *args, **kwargs):
        __protego_used['eks']['create_cluster']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["resourcesVpcConfig","name","roleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "CreateCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_fargate_profile(self, *args, **kwargs):
        __protego_used['eks']['create_fargate_profile']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["podExecutionRoleArn","clusterName","fargateProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "CreateFargateProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_nodegroup(self, *args, **kwargs):
        __protego_used['eks']['create_nodegroup']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["nodeRole","clusterName","subnets","nodegroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "CreateNodegroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cluster(self, *args, **kwargs):
        __protego_used['eks']['delete_cluster']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "DeleteCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_fargate_profile(self, *args, **kwargs):
        __protego_used['eks']['delete_fargate_profile']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["clusterName","fargateProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "DeleteFargateProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_nodegroup(self, *args, **kwargs):
        __protego_used['eks']['delete_nodegroup']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["clusterName","nodegroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "DeleteNodegroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster(self, *args, **kwargs):
        __protego_used['eks']['describe_cluster']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "DescribeCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fargate_profile(self, *args, **kwargs):
        __protego_used['eks']['describe_fargate_profile']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["clusterName","fargateProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "DescribeFargateProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_nodegroup(self, *args, **kwargs):
        __protego_used['eks']['describe_nodegroup']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["clusterName","nodegroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "DescribeNodegroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_update(self, *args, **kwargs):
        __protego_used['eks']['describe_update']=['eks:DescribeUpdate']
        for p in ['eks:DescribeUpdate']:
            res = {}
            for nm in ["name","updateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "DescribeUpdate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_clusters(self, *args, **kwargs):
        __protego_used['eks']['list_clusters']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "ListClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_fargate_profiles(self, *args, **kwargs):
        __protego_used['eks']['list_fargate_profiles']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["clusterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "ListFargateProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_nodegroups(self, *args, **kwargs):
        __protego_used['eks']['list_nodegroups']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["clusterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "ListNodegroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['eks']['list_tags_for_resource']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_updates(self, *args, **kwargs):
        __protego_used['eks']['list_updates']=['eks:ListUpdates']
        for p in ['eks:ListUpdates']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "ListUpdates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['eks']['tag_resource']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['eks']['untag_resource']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_cluster_config(self, *args, **kwargs):
        __protego_used['eks']['update_cluster_config']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "UpdateClusterConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_cluster_version(self, *args, **kwargs):
        __protego_used['eks']['update_cluster_version']=['eks:UpdateClusterVersion']
        for p in ['eks:UpdateClusterVersion']:
            res = {}
            for nm in ["name","version"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "UpdateClusterVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_nodegroup_config(self, *args, **kwargs):
        __protego_used['eks']['update_nodegroup_config']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["clusterName","nodegroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "UpdateNodegroupConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_nodegroup_version(self, *args, **kwargs):
        __protego_used['eks']['update_nodegroup_version']=['eks:*']
        for p in ['eks:*']:
            res = {}
            for nm in ["clusterName","nodegroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['eks'].append({'action': "UpdateNodegroupVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class elastic_inference:
    def __init__(self, region_name=__default_region):
        __protego_used['elastic-inference']= __protego_used.get('elastic-inference', {})
        __protego_resource_map['elastic-inference']=__protego_resource_map.get('elastic-inference', [])
        self.region = region_name
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['elastic-inference']['list_tags_for_resource']=['elastic-inference:*']
        for p in ['elastic-inference:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastic-inference'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['elastic-inference']['tag_resource']=['elastic-inference:*']
        for p in ['elastic-inference:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastic-inference'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['elastic-inference']['untag_resource']=['elastic-inference:*']
        for p in ['elastic-inference:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastic-inference'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class elasticache:
    def __init__(self, region_name=__default_region):
        __protego_used['elasticache']= __protego_used.get('elasticache', {})
        __protego_resource_map['elasticache']=__protego_resource_map.get('elasticache', [])
        self.region = region_name
    def add_tags_to_resource(self, *args, **kwargs):
        __protego_used['elasticache']['add_tags_to_resource']=['elasticache:AddTagsToResource']
        for p in ['elasticache:AddTagsToResource']:
            res = {}
            for nm in ["ResourceName","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "AddTagsToResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def authorize_cache_security_group_ingress(self, *args, **kwargs):
        __protego_used['elasticache']['authorize_cache_security_group_ingress']=['elasticache:AuthorizeCacheSecurityGroupIngress']
        for p in ['elasticache:AuthorizeCacheSecurityGroupIngress']:
            res = {}
            for nm in ["EC2SecurityGroupOwnerId","EC2SecurityGroupName","CacheSecurityGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "AuthorizeCacheSecurityGroupIngress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_apply_update_action(self, *args, **kwargs):
        __protego_used['elasticache']['batch_apply_update_action']=['elasticache:*']
        for p in ['elasticache:*']:
            res = {}
            for nm in ["ServiceUpdateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "BatchApplyUpdateAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_stop_update_action(self, *args, **kwargs):
        __protego_used['elasticache']['batch_stop_update_action']=['elasticache:*']
        for p in ['elasticache:*']:
            res = {}
            for nm in ["ServiceUpdateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "BatchStopUpdateAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def complete_migration(self, *args, **kwargs):
        __protego_used['elasticache']['complete_migration']=['elasticache:*']
        for p in ['elasticache:*']:
            res = {}
            for nm in ["ReplicationGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "CompleteMigration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_snapshot(self, *args, **kwargs):
        __protego_used['elasticache']['copy_snapshot']=['elasticache:CopySnapshot']
        for p in ['elasticache:CopySnapshot']:
            res = {}
            for nm in ["TargetSnapshotName","SourceSnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "CopySnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cache_cluster(self, *args, **kwargs):
        __protego_used['elasticache']['create_cache_cluster']=['elasticache:CreateCacheCluster']
        for p in ['elasticache:CreateCacheCluster']:
            res = {}
            for nm in ["CacheClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "CreateCacheCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cache_parameter_group(self, *args, **kwargs):
        __protego_used['elasticache']['create_cache_parameter_group']=['elasticache:CreateCacheParameterGroup']
        for p in ['elasticache:CreateCacheParameterGroup']:
            res = {}
            for nm in ["Description","CacheParameterGroupFamily","CacheParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "CreateCacheParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cache_security_group(self, *args, **kwargs):
        __protego_used['elasticache']['create_cache_security_group']=['elasticache:CreateCacheSecurityGroup']
        for p in ['elasticache:CreateCacheSecurityGroup']:
            res = {}
            for nm in ["Description","CacheSecurityGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "CreateCacheSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cache_subnet_group(self, *args, **kwargs):
        __protego_used['elasticache']['create_cache_subnet_group']=['elasticache:CreateCacheSubnetGroup']
        for p in ['elasticache:CreateCacheSubnetGroup']:
            res = {}
            for nm in ["SubnetIds","CacheSubnetGroupName","CacheSubnetGroupDescription"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "CreateCacheSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_replication_group(self, *args, **kwargs):
        __protego_used['elasticache']['create_replication_group']=['elasticache:CreateReplicationGroup']
        for p in ['elasticache:CreateReplicationGroup']:
            res = {}
            for nm in ["ReplicationGroupDescription","ReplicationGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "CreateReplicationGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_snapshot(self, *args, **kwargs):
        __protego_used['elasticache']['create_snapshot']=['elasticache:CreateSnapshot']
        for p in ['elasticache:CreateSnapshot']:
            res = {}
            for nm in ["SnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "CreateSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def decrease_replica_count(self, *args, **kwargs):
        __protego_used['elasticache']['decrease_replica_count']=['elasticache:DecreaseReplicaCount']
        for p in ['elasticache:DecreaseReplicaCount']:
            res = {}
            for nm in ["ApplyImmediately","ReplicationGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DecreaseReplicaCount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cache_cluster(self, *args, **kwargs):
        __protego_used['elasticache']['delete_cache_cluster']=['elasticache:DeleteCacheCluster']
        for p in ['elasticache:DeleteCacheCluster']:
            res = {}
            for nm in ["CacheClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DeleteCacheCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cache_parameter_group(self, *args, **kwargs):
        __protego_used['elasticache']['delete_cache_parameter_group']=['elasticache:DeleteCacheParameterGroup']
        for p in ['elasticache:DeleteCacheParameterGroup']:
            res = {}
            for nm in ["CacheParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DeleteCacheParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cache_security_group(self, *args, **kwargs):
        __protego_used['elasticache']['delete_cache_security_group']=['elasticache:DeleteCacheSecurityGroup']
        for p in ['elasticache:DeleteCacheSecurityGroup']:
            res = {}
            for nm in ["CacheSecurityGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DeleteCacheSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cache_subnet_group(self, *args, **kwargs):
        __protego_used['elasticache']['delete_cache_subnet_group']=['elasticache:DeleteCacheSubnetGroup']
        for p in ['elasticache:DeleteCacheSubnetGroup']:
            res = {}
            for nm in ["CacheSubnetGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DeleteCacheSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_replication_group(self, *args, **kwargs):
        __protego_used['elasticache']['delete_replication_group']=['elasticache:DeleteReplicationGroup']
        for p in ['elasticache:DeleteReplicationGroup']:
            res = {}
            for nm in ["ReplicationGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DeleteReplicationGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_snapshot(self, *args, **kwargs):
        __protego_used['elasticache']['delete_snapshot']=['elasticache:DeleteSnapshot']
        for p in ['elasticache:DeleteSnapshot']:
            res = {}
            for nm in ["SnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DeleteSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cache_clusters(self, *args, **kwargs):
        __protego_used['elasticache']['describe_cache_clusters']=['elasticache:DescribeCacheClusters']
        for p in ['elasticache:DescribeCacheClusters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeCacheClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cache_engine_versions(self, *args, **kwargs):
        __protego_used['elasticache']['describe_cache_engine_versions']=['elasticache:DescribeCacheEngineVersions']
        for p in ['elasticache:DescribeCacheEngineVersions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeCacheEngineVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cache_parameter_groups(self, *args, **kwargs):
        __protego_used['elasticache']['describe_cache_parameter_groups']=['elasticache:DescribeCacheParameterGroups']
        for p in ['elasticache:DescribeCacheParameterGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeCacheParameterGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cache_parameters(self, *args, **kwargs):
        __protego_used['elasticache']['describe_cache_parameters']=['elasticache:DescribeCacheParameters']
        for p in ['elasticache:DescribeCacheParameters']:
            res = {}
            for nm in ["CacheParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeCacheParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cache_security_groups(self, *args, **kwargs):
        __protego_used['elasticache']['describe_cache_security_groups']=['elasticache:DescribeCacheSecurityGroups']
        for p in ['elasticache:DescribeCacheSecurityGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeCacheSecurityGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cache_subnet_groups(self, *args, **kwargs):
        __protego_used['elasticache']['describe_cache_subnet_groups']=['elasticache:DescribeCacheSubnetGroups']
        for p in ['elasticache:DescribeCacheSubnetGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeCacheSubnetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_engine_default_parameters(self, *args, **kwargs):
        __protego_used['elasticache']['describe_engine_default_parameters']=['elasticache:DescribeEngineDefaultParameters']
        for p in ['elasticache:DescribeEngineDefaultParameters']:
            res = {}
            for nm in ["CacheParameterGroupFamily"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeEngineDefaultParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_events(self, *args, **kwargs):
        __protego_used['elasticache']['describe_events']=['elasticache:DescribeEvents']
        for p in ['elasticache:DescribeEvents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_replication_groups(self, *args, **kwargs):
        __protego_used['elasticache']['describe_replication_groups']=['elasticache:DescribeReplicationGroups']
        for p in ['elasticache:DescribeReplicationGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeReplicationGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_cache_nodes(self, *args, **kwargs):
        __protego_used['elasticache']['describe_reserved_cache_nodes']=['elasticache:DescribeReservedCacheNodes']
        for p in ['elasticache:DescribeReservedCacheNodes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeReservedCacheNodes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_cache_nodes_offerings(self, *args, **kwargs):
        __protego_used['elasticache']['describe_reserved_cache_nodes_offerings']=['elasticache:DescribeReservedCacheNodesOfferings']
        for p in ['elasticache:DescribeReservedCacheNodesOfferings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeReservedCacheNodesOfferings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_service_updates(self, *args, **kwargs):
        __protego_used['elasticache']['describe_service_updates']=['elasticache:*']
        for p in ['elasticache:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeServiceUpdates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_snapshots(self, *args, **kwargs):
        __protego_used['elasticache']['describe_snapshots']=['elasticache:DescribeSnapshots']
        for p in ['elasticache:DescribeSnapshots']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_update_actions(self, *args, **kwargs):
        __protego_used['elasticache']['describe_update_actions']=['elasticache:*']
        for p in ['elasticache:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "DescribeUpdateActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def increase_replica_count(self, *args, **kwargs):
        __protego_used['elasticache']['increase_replica_count']=['elasticache:IncreaseReplicaCount']
        for p in ['elasticache:IncreaseReplicaCount']:
            res = {}
            for nm in ["ApplyImmediately","ReplicationGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "IncreaseReplicaCount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_allowed_node_type_modifications(self, *args, **kwargs):
        __protego_used['elasticache']['list_allowed_node_type_modifications']=['elasticache:ListAllowedNodeTypeModifications']
        for p in ['elasticache:ListAllowedNodeTypeModifications']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "ListAllowedNodeTypeModifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['elasticache']['list_tags_for_resource']=['elasticache:ListTagsForResource']
        for p in ['elasticache:ListTagsForResource']:
            res = {}
            for nm in ["ResourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cache_cluster(self, *args, **kwargs):
        __protego_used['elasticache']['modify_cache_cluster']=['elasticache:ModifyCacheCluster']
        for p in ['elasticache:ModifyCacheCluster']:
            res = {}
            for nm in ["CacheClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "ModifyCacheCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cache_parameter_group(self, *args, **kwargs):
        __protego_used['elasticache']['modify_cache_parameter_group']=['elasticache:ModifyCacheParameterGroup']
        for p in ['elasticache:ModifyCacheParameterGroup']:
            res = {}
            for nm in ["ParameterNameValues","CacheParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "ModifyCacheParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cache_subnet_group(self, *args, **kwargs):
        __protego_used['elasticache']['modify_cache_subnet_group']=['elasticache:ModifyCacheSubnetGroup']
        for p in ['elasticache:ModifyCacheSubnetGroup']:
            res = {}
            for nm in ["CacheSubnetGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "ModifyCacheSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_replication_group(self, *args, **kwargs):
        __protego_used['elasticache']['modify_replication_group']=['elasticache:ModifyReplicationGroup']
        for p in ['elasticache:ModifyReplicationGroup']:
            res = {}
            for nm in ["ReplicationGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "ModifyReplicationGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_replication_group_shard_configuration(self, *args, **kwargs):
        __protego_used['elasticache']['modify_replication_group_shard_configuration']=['elasticache:*']
        for p in ['elasticache:*']:
            res = {}
            for nm in ["ApplyImmediately","NodeGroupCount","ReplicationGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "ModifyReplicationGroupShardConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def purchase_reserved_cache_nodes_offering(self, *args, **kwargs):
        __protego_used['elasticache']['purchase_reserved_cache_nodes_offering']=['elasticache:PurchaseReservedCacheNodesOffering']
        for p in ['elasticache:PurchaseReservedCacheNodesOffering']:
            res = {}
            for nm in ["ReservedCacheNodesOfferingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "PurchaseReservedCacheNodesOffering", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_cache_cluster(self, *args, **kwargs):
        __protego_used['elasticache']['reboot_cache_cluster']=['elasticache:RebootCacheCluster']
        for p in ['elasticache:RebootCacheCluster']:
            res = {}
            for nm in ["CacheNodeIdsToReboot","CacheClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "RebootCacheCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_resource(self, *args, **kwargs):
        __protego_used['elasticache']['remove_tags_from_resource']=['elasticache:RemoveTagsFromResource']
        for p in ['elasticache:RemoveTagsFromResource']:
            res = {}
            for nm in ["ResourceName","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "RemoveTagsFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_cache_parameter_group(self, *args, **kwargs):
        __protego_used['elasticache']['reset_cache_parameter_group']=['elasticache:ResetCacheParameterGroup']
        for p in ['elasticache:ResetCacheParameterGroup']:
            res = {}
            for nm in ["CacheParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "ResetCacheParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_cache_security_group_ingress(self, *args, **kwargs):
        __protego_used['elasticache']['revoke_cache_security_group_ingress']=['elasticache:RevokeCacheSecurityGroupIngress']
        for p in ['elasticache:RevokeCacheSecurityGroupIngress']:
            res = {}
            for nm in ["EC2SecurityGroupOwnerId","EC2SecurityGroupName","CacheSecurityGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "RevokeCacheSecurityGroupIngress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_migration(self, *args, **kwargs):
        __protego_used['elasticache']['start_migration']=['elasticache:*']
        for p in ['elasticache:*']:
            res = {}
            for nm in ["CustomerNodeEndpointList","ReplicationGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "StartMigration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_failover(self, *args, **kwargs):
        __protego_used['elasticache']['test_failover']=['elasticache:TestFailover']
        for p in ['elasticache:TestFailover']:
            res = {}
            for nm in ["NodeGroupId","ReplicationGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticache'].append({'action': "TestFailover", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class elasticbeanstalk:
    def __init__(self, region_name=__default_region):
        __protego_used['elasticbeanstalk']= __protego_used.get('elasticbeanstalk', {})
        __protego_resource_map['elasticbeanstalk']=__protego_resource_map.get('elasticbeanstalk', [])
        self.region = region_name
    def abort_environment_update(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['abort_environment_update']=['elasticbeanstalk:AbortEnvironmentUpdate']
        for p in ['elasticbeanstalk:AbortEnvironmentUpdate']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "AbortEnvironmentUpdate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def apply_environment_managed_action(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['apply_environment_managed_action']=['elasticbeanstalk:ApplyEnvironmentManagedAction']
        for p in ['elasticbeanstalk:ApplyEnvironmentManagedAction']:
            res = {}
            for nm in ["ActionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "ApplyEnvironmentManagedAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def check_dns_availability(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['check_dns_availability']=['elasticbeanstalk:CheckDNSAvailability']
        for p in ['elasticbeanstalk:CheckDNSAvailability']:
            res = {}
            for nm in ["CNAMEPrefix"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "CheckDNSAvailability", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def compose_environments(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['compose_environments']=['elasticbeanstalk:ComposeEnvironments','elasticbeanstalk:ComposeEnvironments']
        for p in ['elasticbeanstalk:ComposeEnvironments','elasticbeanstalk:ComposeEnvironments']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "ComposeEnvironments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_application(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['create_application']=['elasticbeanstalk:CreateApplication']
        for p in ['elasticbeanstalk:CreateApplication']:
            res = {}
            for nm in ["ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "CreateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_application_version(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['create_application_version']=['elasticbeanstalk:CreateApplicationVersion','elasticbeanstalk:CreateApplicationVersion']
        for p in ['elasticbeanstalk:CreateApplicationVersion','elasticbeanstalk:CreateApplicationVersion']:
            res = {}
            for nm in ["VersionLabel","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "CreateApplicationVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_configuration_template(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['create_configuration_template']=['elasticbeanstalk:CreateConfigurationTemplate']
        for p in ['elasticbeanstalk:CreateConfigurationTemplate']:
            res = {}
            for nm in ["TemplateName","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "CreateConfigurationTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_environment(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['create_environment']=['elasticbeanstalk:CreateEnvironment']
        for p in ['elasticbeanstalk:CreateEnvironment']:
            res = {}
            for nm in ["ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "CreateEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_platform_version(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['create_platform_version']=['elasticbeanstalk:CreatePlatformVersion']
        for p in ['elasticbeanstalk:CreatePlatformVersion']:
            res = {}
            for nm in ["PlatformName","PlatformVersion","PlatformDefinitionBundle"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "CreatePlatformVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_storage_location(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['create_storage_location']=['elasticbeanstalk:CreateStorageLocation']
        for p in ['elasticbeanstalk:CreateStorageLocation']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "CreateStorageLocation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['delete_application']=['elasticbeanstalk:DeleteApplication']
        for p in ['elasticbeanstalk:DeleteApplication']:
            res = {}
            for nm in ["ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DeleteApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application_version(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['delete_application_version']=['elasticbeanstalk:DeleteApplicationVersion']
        for p in ['elasticbeanstalk:DeleteApplicationVersion']:
            res = {}
            for nm in ["VersionLabel","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DeleteApplicationVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_template(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['delete_configuration_template']=['elasticbeanstalk:DeleteConfigurationTemplate']
        for p in ['elasticbeanstalk:DeleteConfigurationTemplate']:
            res = {}
            for nm in ["TemplateName","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DeleteConfigurationTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_environment_configuration(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['delete_environment_configuration']=['elasticbeanstalk:DeleteEnvironmentConfiguration']
        for p in ['elasticbeanstalk:DeleteEnvironmentConfiguration']:
            res = {}
            for nm in ["EnvironmentName","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DeleteEnvironmentConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_platform_version(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['delete_platform_version']=['elasticbeanstalk:DeletePlatformVersion']
        for p in ['elasticbeanstalk:DeletePlatformVersion']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DeletePlatformVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_attributes(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_account_attributes']=['elasticbeanstalk:*']
        for p in ['elasticbeanstalk:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeAccountAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_application_versions(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_application_versions']=['elasticbeanstalk:DescribeApplicationVersions']
        for p in ['elasticbeanstalk:DescribeApplicationVersions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeApplicationVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_applications(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_applications']=['elasticbeanstalk:DescribeApplications']
        for p in ['elasticbeanstalk:DescribeApplications']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configuration_options(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_configuration_options']=['elasticbeanstalk:DescribeConfigurationOptions','elasticbeanstalk:DescribeConfigurationOptions','elasticbeanstalk:DescribeConfigurationOptions']
        for p in ['elasticbeanstalk:DescribeConfigurationOptions','elasticbeanstalk:DescribeConfigurationOptions','elasticbeanstalk:DescribeConfigurationOptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeConfigurationOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configuration_settings(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_configuration_settings']=['elasticbeanstalk:DescribeConfigurationSettings','elasticbeanstalk:DescribeConfigurationSettings']
        for p in ['elasticbeanstalk:DescribeConfigurationSettings','elasticbeanstalk:DescribeConfigurationSettings']:
            res = {}
            for nm in ["ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeConfigurationSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_environment_health(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_environment_health']=['elasticbeanstalk:DescribeEnvironmentHealth']
        for p in ['elasticbeanstalk:DescribeEnvironmentHealth']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeEnvironmentHealth", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_environment_managed_action_history(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_environment_managed_action_history']=['elasticbeanstalk:DescribeEnvironmentManagedActionHistory']
        for p in ['elasticbeanstalk:DescribeEnvironmentManagedActionHistory']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeEnvironmentManagedActionHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_environment_managed_actions(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_environment_managed_actions']=['elasticbeanstalk:DescribeEnvironmentManagedActions']
        for p in ['elasticbeanstalk:DescribeEnvironmentManagedActions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeEnvironmentManagedActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_environment_resources(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_environment_resources']=['elasticbeanstalk:DescribeEnvironmentResources']
        for p in ['elasticbeanstalk:DescribeEnvironmentResources']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeEnvironmentResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_environments(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_environments']=['elasticbeanstalk:DescribeEnvironments']
        for p in ['elasticbeanstalk:DescribeEnvironments']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeEnvironments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_events(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_events']=['elasticbeanstalk:DescribeEvents','elasticbeanstalk:DescribeEvents','elasticbeanstalk:DescribeEvents','elasticbeanstalk:DescribeEvents']
        for p in ['elasticbeanstalk:DescribeEvents','elasticbeanstalk:DescribeEvents','elasticbeanstalk:DescribeEvents','elasticbeanstalk:DescribeEvents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instances_health(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_instances_health']=['elasticbeanstalk:DescribeInstancesHealth']
        for p in ['elasticbeanstalk:DescribeInstancesHealth']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribeInstancesHealth", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_platform_version(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['describe_platform_version']=['elasticbeanstalk:DescribePlatformVersion']
        for p in ['elasticbeanstalk:DescribePlatformVersion']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "DescribePlatformVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_available_solution_stacks(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['list_available_solution_stacks']=['elasticbeanstalk:ListAvailableSolutionStacks']
        for p in ['elasticbeanstalk:ListAvailableSolutionStacks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "ListAvailableSolutionStacks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_platform_versions(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['list_platform_versions']=['elasticbeanstalk:ListPlatformVersions']
        for p in ['elasticbeanstalk:ListPlatformVersions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "ListPlatformVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['list_tags_for_resource']=['elasticbeanstalk:*']
        for p in ['elasticbeanstalk:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def rebuild_environment(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['rebuild_environment']=['elasticbeanstalk:RebuildEnvironment']
        for p in ['elasticbeanstalk:RebuildEnvironment']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "RebuildEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def request_environment_info(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['request_environment_info']=['elasticbeanstalk:RequestEnvironmentInfo']
        for p in ['elasticbeanstalk:RequestEnvironmentInfo']:
            res = {}
            for nm in ["InfoType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "RequestEnvironmentInfo", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restart_app_server(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['restart_app_server']=['elasticbeanstalk:RestartAppServer']
        for p in ['elasticbeanstalk:RestartAppServer']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "RestartAppServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def retrieve_environment_info(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['retrieve_environment_info']=['elasticbeanstalk:RetrieveEnvironmentInfo']
        for p in ['elasticbeanstalk:RetrieveEnvironmentInfo']:
            res = {}
            for nm in ["InfoType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "RetrieveEnvironmentInfo", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def swap_environment_cnames(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['swap_environment_cnames']=['elasticbeanstalk:SwapEnvironmentCNAMEs']
        for p in ['elasticbeanstalk:SwapEnvironmentCNAMEs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "SwapEnvironmentCNAMEs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def terminate_environment(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['terminate_environment']=['elasticbeanstalk:TerminateEnvironment']
        for p in ['elasticbeanstalk:TerminateEnvironment']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "TerminateEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_application(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['update_application']=['elasticbeanstalk:UpdateApplication']
        for p in ['elasticbeanstalk:UpdateApplication']:
            res = {}
            for nm in ["ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "UpdateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_application_resource_lifecycle(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['update_application_resource_lifecycle']=['elasticbeanstalk:UpdateApplicationResourceLifecycle']
        for p in ['elasticbeanstalk:UpdateApplicationResourceLifecycle']:
            res = {}
            for nm in ["ResourceLifecycleConfig","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "UpdateApplicationResourceLifecycle", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_application_version(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['update_application_version']=['elasticbeanstalk:UpdateApplicationVersion']
        for p in ['elasticbeanstalk:UpdateApplicationVersion']:
            res = {}
            for nm in ["VersionLabel","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "UpdateApplicationVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_configuration_template(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['update_configuration_template']=['elasticbeanstalk:UpdateConfigurationTemplate']
        for p in ['elasticbeanstalk:UpdateConfigurationTemplate']:
            res = {}
            for nm in ["TemplateName","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "UpdateConfigurationTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_environment(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['update_environment']=['elasticbeanstalk:UpdateEnvironment']
        for p in ['elasticbeanstalk:UpdateEnvironment']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "UpdateEnvironment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_tags_for_resource(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['update_tags_for_resource']=['elasticbeanstalk:*']
        for p in ['elasticbeanstalk:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "UpdateTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def validate_configuration_settings(self, *args, **kwargs):
        __protego_used['elasticbeanstalk']['validate_configuration_settings']=['elasticbeanstalk:ValidateConfigurationSettings','elasticbeanstalk:ValidateConfigurationSettings']
        for p in ['elasticbeanstalk:ValidateConfigurationSettings','elasticbeanstalk:ValidateConfigurationSettings']:
            res = {}
            for nm in ["OptionSettings","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elasticbeanstalk'].append({'action': "ValidateConfigurationSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class elastictranscoder:
    def __init__(self, region_name=__default_region):
        __protego_used['elastictranscoder']= __protego_used.get('elastictranscoder', {})
        __protego_resource_map['elastictranscoder']=__protego_resource_map.get('elastictranscoder', [])
        self.region = region_name
    def cancel_job(self, *args, **kwargs):
        __protego_used['elastictranscoder']['cancel_job']=['elastictranscoder:CancelJob']
        for p in ['elastictranscoder:CancelJob']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "CancelJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_job(self, *args, **kwargs):
        __protego_used['elastictranscoder']['create_job']=['elastictranscoder:CreateJob','elastictranscoder:CreateJob']
        for p in ['elastictranscoder:CreateJob','elastictranscoder:CreateJob']:
            res = {}
            for nm in ["PipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "CreateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_pipeline(self, *args, **kwargs):
        __protego_used['elastictranscoder']['create_pipeline']=['elastictranscoder:CreatePipeline']
        for p in ['elastictranscoder:CreatePipeline']:
            res = {}
            for nm in ["Role","InputBucket","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "CreatePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_preset(self, *args, **kwargs):
        __protego_used['elastictranscoder']['create_preset']=['elastictranscoder:CreatePreset']
        for p in ['elastictranscoder:CreatePreset']:
            res = {}
            for nm in ["Container","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "CreatePreset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_pipeline(self, *args, **kwargs):
        __protego_used['elastictranscoder']['delete_pipeline']=['elastictranscoder:DeletePipeline']
        for p in ['elastictranscoder:DeletePipeline']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "DeletePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_preset(self, *args, **kwargs):
        __protego_used['elastictranscoder']['delete_preset']=['elastictranscoder:DeletePreset']
        for p in ['elastictranscoder:DeletePreset']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "DeletePreset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs_by_pipeline(self, *args, **kwargs):
        __protego_used['elastictranscoder']['list_jobs_by_pipeline']=['elastictranscoder:ListJobsByPipeline']
        for p in ['elastictranscoder:ListJobsByPipeline']:
            res = {}
            for nm in ["PipelineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "ListJobsByPipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs_by_status(self, *args, **kwargs):
        __protego_used['elastictranscoder']['list_jobs_by_status']=['elastictranscoder:ListJobsByStatus']
        for p in ['elastictranscoder:ListJobsByStatus']:
            res = {}
            for nm in ["Status"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "ListJobsByStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_pipelines(self, *args, **kwargs):
        __protego_used['elastictranscoder']['list_pipelines']=['elastictranscoder:ListPipelines']
        for p in ['elastictranscoder:ListPipelines']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "ListPipelines", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_presets(self, *args, **kwargs):
        __protego_used['elastictranscoder']['list_presets']=['elastictranscoder:ListPresets']
        for p in ['elastictranscoder:ListPresets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "ListPresets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def read_job(self, *args, **kwargs):
        __protego_used['elastictranscoder']['read_job']=['elastictranscoder:ReadJob']
        for p in ['elastictranscoder:ReadJob']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "ReadJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def read_pipeline(self, *args, **kwargs):
        __protego_used['elastictranscoder']['read_pipeline']=['elastictranscoder:ReadPipeline']
        for p in ['elastictranscoder:ReadPipeline']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "ReadPipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def read_preset(self, *args, **kwargs):
        __protego_used['elastictranscoder']['read_preset']=['elastictranscoder:ReadPreset']
        for p in ['elastictranscoder:ReadPreset']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "ReadPreset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_role(self, *args, **kwargs):
        __protego_used['elastictranscoder']['test_role']=['elastictranscoder:TestRole']
        for p in ['elastictranscoder:TestRole']:
            res = {}
            for nm in ["Topics","OutputBucket","Role","InputBucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "TestRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_pipeline(self, *args, **kwargs):
        __protego_used['elastictranscoder']['update_pipeline']=['elastictranscoder:UpdatePipeline']
        for p in ['elastictranscoder:UpdatePipeline']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "UpdatePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_pipeline_notifications(self, *args, **kwargs):
        __protego_used['elastictranscoder']['update_pipeline_notifications']=['elastictranscoder:UpdatePipelineNotifications']
        for p in ['elastictranscoder:UpdatePipelineNotifications']:
            res = {}
            for nm in ["Notifications","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "UpdatePipelineNotifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_pipeline_status(self, *args, **kwargs):
        __protego_used['elastictranscoder']['update_pipeline_status']=['elastictranscoder:UpdatePipelineStatus']
        for p in ['elastictranscoder:UpdatePipelineStatus']:
            res = {}
            for nm in ["Status","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elastictranscoder'].append({'action': "UpdatePipelineStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class elb:
    def __init__(self, region_name=__default_region):
        __protego_used['elb']= __protego_used.get('elb', {})
        __protego_resource_map['elb']=__protego_resource_map.get('elb', [])
        self.region = region_name
    def add_tags(self, *args, **kwargs):
        __protego_used['elb']['add_tags']=['elasticloadbalancing:AddTags']
        for p in ['elasticloadbalancing:AddTags']:
            res = {}
            for nm in ["LoadBalancerNames","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "AddTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def apply_security_groups_to_load_balancer(self, *args, **kwargs):
        __protego_used['elb']['apply_security_groups_to_load_balancer']=['elasticloadbalancing:ApplySecurityGroupsToLoadBalancer']
        for p in ['elasticloadbalancing:ApplySecurityGroupsToLoadBalancer']:
            res = {}
            for nm in ["SecurityGroups","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "ApplySecurityGroupsToLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_load_balancer_to_subnets(self, *args, **kwargs):
        __protego_used['elb']['attach_load_balancer_to_subnets']=['elasticloadbalancing:AttachLoadBalancerToSubnets']
        for p in ['elasticloadbalancing:AttachLoadBalancerToSubnets']:
            res = {}
            for nm in ["LoadBalancerName","Subnets"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "AttachLoadBalancerToSubnets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def configure_health_check(self, *args, **kwargs):
        __protego_used['elb']['configure_health_check']=['elasticloadbalancing:ConfigureHealthCheck']
        for p in ['elasticloadbalancing:ConfigureHealthCheck']:
            res = {}
            for nm in ["HealthCheck","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "ConfigureHealthCheck", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_app_cookie_stickiness_policy(self, *args, **kwargs):
        __protego_used['elb']['create_app_cookie_stickiness_policy']=['elasticloadbalancing:CreateAppCookieStickinessPolicy']
        for p in ['elasticloadbalancing:CreateAppCookieStickinessPolicy']:
            res = {}
            for nm in ["PolicyName","LoadBalancerName","CookieName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "CreateAppCookieStickinessPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_lb_cookie_stickiness_policy(self, *args, **kwargs):
        __protego_used['elb']['create_lb_cookie_stickiness_policy']=['elasticloadbalancing:CreateLBCookieStickinessPolicy']
        for p in ['elasticloadbalancing:CreateLBCookieStickinessPolicy']:
            res = {}
            for nm in ["PolicyName","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "CreateLBCookieStickinessPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_load_balancer(self, *args, **kwargs):
        __protego_used['elb']['create_load_balancer']=['elasticloadbalancing:CreateLoadBalancer']
        for p in ['elasticloadbalancing:CreateLoadBalancer']:
            res = {}
            for nm in ["Listeners","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "CreateLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_load_balancer_listeners(self, *args, **kwargs):
        __protego_used['elb']['create_load_balancer_listeners']=['elasticloadbalancing:CreateLoadBalancerListeners']
        for p in ['elasticloadbalancing:CreateLoadBalancerListeners']:
            res = {}
            for nm in ["Listeners","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "CreateLoadBalancerListeners", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_load_balancer_policy(self, *args, **kwargs):
        __protego_used['elb']['create_load_balancer_policy']=['elasticloadbalancing:CreateLoadBalancerPolicy']
        for p in ['elasticloadbalancing:CreateLoadBalancerPolicy']:
            res = {}
            for nm in ["PolicyTypeName","PolicyName","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "CreateLoadBalancerPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_load_balancer(self, *args, **kwargs):
        __protego_used['elb']['delete_load_balancer']=['elasticloadbalancing:DeleteLoadBalancer']
        for p in ['elasticloadbalancing:DeleteLoadBalancer']:
            res = {}
            for nm in ["LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DeleteLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_load_balancer_listeners(self, *args, **kwargs):
        __protego_used['elb']['delete_load_balancer_listeners']=['elasticloadbalancing:DeleteLoadBalancerListeners']
        for p in ['elasticloadbalancing:DeleteLoadBalancerListeners']:
            res = {}
            for nm in ["LoadBalancerPorts","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DeleteLoadBalancerListeners", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_load_balancer_policy(self, *args, **kwargs):
        __protego_used['elb']['delete_load_balancer_policy']=['elasticloadbalancing:DeleteLoadBalancerPolicy']
        for p in ['elasticloadbalancing:DeleteLoadBalancerPolicy']:
            res = {}
            for nm in ["PolicyName","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DeleteLoadBalancerPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_instances_from_load_balancer(self, *args, **kwargs):
        __protego_used['elb']['deregister_instances_from_load_balancer']=['elasticloadbalancing:DeregisterInstancesFromLoadBalancer']
        for p in ['elasticloadbalancing:DeregisterInstancesFromLoadBalancer']:
            res = {}
            for nm in ["Instances","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DeregisterInstancesFromLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_limits(self, *args, **kwargs):
        __protego_used['elb']['describe_account_limits']=['elb:*']
        for p in ['elb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DescribeAccountLimits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instance_health(self, *args, **kwargs):
        __protego_used['elb']['describe_instance_health']=['elasticloadbalancing:DescribeInstanceHealth']
        for p in ['elasticloadbalancing:DescribeInstanceHealth']:
            res = {}
            for nm in ["LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DescribeInstanceHealth", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_load_balancer_attributes(self, *args, **kwargs):
        __protego_used['elb']['describe_load_balancer_attributes']=['elasticloadbalancing:DescribeLoadBalancerAttributes']
        for p in ['elasticloadbalancing:DescribeLoadBalancerAttributes']:
            res = {}
            for nm in ["LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DescribeLoadBalancerAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_load_balancer_policies(self, *args, **kwargs):
        __protego_used['elb']['describe_load_balancer_policies']=['elasticloadbalancing:DescribeLoadBalancerPolicies']
        for p in ['elasticloadbalancing:DescribeLoadBalancerPolicies']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DescribeLoadBalancerPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_load_balancer_policy_types(self, *args, **kwargs):
        __protego_used['elb']['describe_load_balancer_policy_types']=['elasticloadbalancing:DescribeLoadBalancerPolicyTypes']
        for p in ['elasticloadbalancing:DescribeLoadBalancerPolicyTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DescribeLoadBalancerPolicyTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_load_balancers(self, *args, **kwargs):
        __protego_used['elb']['describe_load_balancers']=['elasticloadbalancing:DescribeLoadBalancers']
        for p in ['elasticloadbalancing:DescribeLoadBalancers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DescribeLoadBalancers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tags(self, *args, **kwargs):
        __protego_used['elb']['describe_tags']=['elasticloadbalancing:DescribeTags']
        for p in ['elasticloadbalancing:DescribeTags']:
            res = {}
            for nm in ["LoadBalancerNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DescribeTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_load_balancer_from_subnets(self, *args, **kwargs):
        __protego_used['elb']['detach_load_balancer_from_subnets']=['elasticloadbalancing:DetachLoadBalancerFromSubnets']
        for p in ['elasticloadbalancing:DetachLoadBalancerFromSubnets']:
            res = {}
            for nm in ["LoadBalancerName","Subnets"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DetachLoadBalancerFromSubnets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_availability_zones_for_load_balancer(self, *args, **kwargs):
        __protego_used['elb']['disable_availability_zones_for_load_balancer']=['elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer']
        for p in ['elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer']:
            res = {}
            for nm in ["AvailabilityZones","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "DisableAvailabilityZonesForLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_availability_zones_for_load_balancer(self, *args, **kwargs):
        __protego_used['elb']['enable_availability_zones_for_load_balancer']=['elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer']
        for p in ['elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer']:
            res = {}
            for nm in ["AvailabilityZones","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "EnableAvailabilityZonesForLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_load_balancer_attributes(self, *args, **kwargs):
        __protego_used['elb']['modify_load_balancer_attributes']=['elasticloadbalancing:ModifyLoadBalancerAttributes']
        for p in ['elasticloadbalancing:ModifyLoadBalancerAttributes']:
            res = {}
            for nm in ["LoadBalancerAttributes","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "ModifyLoadBalancerAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_instances_with_load_balancer(self, *args, **kwargs):
        __protego_used['elb']['register_instances_with_load_balancer']=['elasticloadbalancing:RegisterInstancesWithLoadBalancer']
        for p in ['elasticloadbalancing:RegisterInstancesWithLoadBalancer']:
            res = {}
            for nm in ["Instances","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "RegisterInstancesWithLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags(self, *args, **kwargs):
        __protego_used['elb']['remove_tags']=['elasticloadbalancing:RemoveTags']
        for p in ['elasticloadbalancing:RemoveTags']:
            res = {}
            for nm in ["LoadBalancerNames","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "RemoveTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_load_balancer_listener_ssl_certificate(self, *args, **kwargs):
        __protego_used['elb']['set_load_balancer_listener_ssl_certificate']=['elasticloadbalancing:SetLoadBalancerListenerSSLCertificate']
        for p in ['elasticloadbalancing:SetLoadBalancerListenerSSLCertificate']:
            res = {}
            for nm in ["SSLCertificateId","LoadBalancerPort","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "SetLoadBalancerListenerSSLCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_load_balancer_policies_for_backend_server(self, *args, **kwargs):
        __protego_used['elb']['set_load_balancer_policies_for_backend_server']=['elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer']
        for p in ['elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer']:
            res = {}
            for nm in ["PolicyNames","InstancePort","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "SetLoadBalancerPoliciesForBackendServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_load_balancer_policies_of_listener(self, *args, **kwargs):
        __protego_used['elb']['set_load_balancer_policies_of_listener']=['elasticloadbalancing:SetLoadBalancerPoliciesOfListener']
        for p in ['elasticloadbalancing:SetLoadBalancerPoliciesOfListener']:
            res = {}
            for nm in ["PolicyNames","LoadBalancerPort","LoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elb'].append({'action': "SetLoadBalancerPoliciesOfListener", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class elbv2:
    def __init__(self, region_name=__default_region):
        __protego_used['elbv2']= __protego_used.get('elbv2', {})
        __protego_resource_map['elbv2']=__protego_resource_map.get('elbv2', [])
        self.region = region_name
    def add_listener_certificates(self, *args, **kwargs):
        __protego_used['elbv2']['add_listener_certificates']=['elasticloadbalancing:*']
        for p in ['elasticloadbalancing:*']:
            res = {}
            for nm in ["ListenerArn","Certificates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "AddListenerCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_tags(self, *args, **kwargs):
        __protego_used['elbv2']['add_tags']=['elasticloadbalancing:AddTags']
        for p in ['elasticloadbalancing:AddTags']:
            res = {}
            for nm in ["ResourceArns","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "AddTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_listener(self, *args, **kwargs):
        __protego_used['elbv2']['create_listener']=['elasticloadbalancing:CreateListener','elasticloadbalancing:CreateListener']
        for p in ['elasticloadbalancing:CreateListener','elasticloadbalancing:CreateListener']:
            res = {}
            for nm in ["LoadBalancerArn","Port","Protocol","DefaultActions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "CreateListener", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_load_balancer(self, *args, **kwargs):
        __protego_used['elbv2']['create_load_balancer']=['elasticloadbalancing:CreateLoadBalancer','elasticloadbalancing:CreateLoadBalancer']
        for p in ['elasticloadbalancing:CreateLoadBalancer','elasticloadbalancing:CreateLoadBalancer']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "CreateLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_rule(self, *args, **kwargs):
        __protego_used['elbv2']['create_rule']=['elasticloadbalancing:CreateRule']
        for p in ['elasticloadbalancing:CreateRule']:
            res = {}
            for nm in ["ListenerArn","Actions","Priority","Conditions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "CreateRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_target_group(self, *args, **kwargs):
        __protego_used['elbv2']['create_target_group']=['elasticloadbalancing:CreateTargetGroup']
        for p in ['elasticloadbalancing:CreateTargetGroup']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "CreateTargetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_listener(self, *args, **kwargs):
        __protego_used['elbv2']['delete_listener']=['elasticloadbalancing:DeleteListener']
        for p in ['elasticloadbalancing:DeleteListener']:
            res = {}
            for nm in ["ListenerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DeleteListener", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_load_balancer(self, *args, **kwargs):
        __protego_used['elbv2']['delete_load_balancer']=['elasticloadbalancing:DeleteLoadBalancer','elasticloadbalancing:DeleteLoadBalancer']
        for p in ['elasticloadbalancing:DeleteLoadBalancer','elasticloadbalancing:DeleteLoadBalancer']:
            res = {}
            for nm in ["LoadBalancerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DeleteLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_rule(self, *args, **kwargs):
        __protego_used['elbv2']['delete_rule']=['elasticloadbalancing:DeleteRule']
        for p in ['elasticloadbalancing:DeleteRule']:
            res = {}
            for nm in ["RuleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DeleteRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_target_group(self, *args, **kwargs):
        __protego_used['elbv2']['delete_target_group']=['elasticloadbalancing:DeleteTargetGroup']
        for p in ['elasticloadbalancing:DeleteTargetGroup']:
            res = {}
            for nm in ["TargetGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DeleteTargetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_targets(self, *args, **kwargs):
        __protego_used['elbv2']['deregister_targets']=['elasticloadbalancing:DeregisterTargets']
        for p in ['elasticloadbalancing:DeregisterTargets']:
            res = {}
            for nm in ["TargetGroupArn","Targets"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DeregisterTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_limits(self, *args, **kwargs):
        __protego_used['elbv2']['describe_account_limits']=['elasticloadbalancing:*']
        for p in ['elasticloadbalancing:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DescribeAccountLimits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_listener_certificates(self, *args, **kwargs):
        __protego_used['elbv2']['describe_listener_certificates']=['elasticloadbalancing:*']
        for p in ['elasticloadbalancing:*']:
            res = {}
            for nm in ["ListenerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DescribeListenerCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_listeners(self, *args, **kwargs):
        __protego_used['elbv2']['describe_listeners']=['elasticloadbalancing:DescribeListeners']
        for p in ['elasticloadbalancing:DescribeListeners']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DescribeListeners", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_load_balancer_attributes(self, *args, **kwargs):
        __protego_used['elbv2']['describe_load_balancer_attributes']=['elasticloadbalancing:DescribeLoadBalancerAttributes']
        for p in ['elasticloadbalancing:DescribeLoadBalancerAttributes']:
            res = {}
            for nm in ["LoadBalancerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DescribeLoadBalancerAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_load_balancers(self, *args, **kwargs):
        __protego_used['elbv2']['describe_load_balancers']=['elasticloadbalancing:DescribeLoadBalancers']
        for p in ['elasticloadbalancing:DescribeLoadBalancers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DescribeLoadBalancers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_rules(self, *args, **kwargs):
        __protego_used['elbv2']['describe_rules']=['elasticloadbalancing:DescribeRules']
        for p in ['elasticloadbalancing:DescribeRules']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DescribeRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_ssl_policies(self, *args, **kwargs):
        __protego_used['elbv2']['describe_ssl_policies']=['elasticloadbalancing:DescribeSSLPolicies']
        for p in ['elasticloadbalancing:DescribeSSLPolicies']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DescribeSSLPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tags(self, *args, **kwargs):
        __protego_used['elbv2']['describe_tags']=['elasticloadbalancing:DescribeTags']
        for p in ['elasticloadbalancing:DescribeTags']:
            res = {}
            for nm in ["ResourceArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DescribeTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_target_group_attributes(self, *args, **kwargs):
        __protego_used['elbv2']['describe_target_group_attributes']=['elasticloadbalancing:DescribeTargetGroupAttributes']
        for p in ['elasticloadbalancing:DescribeTargetGroupAttributes']:
            res = {}
            for nm in ["TargetGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DescribeTargetGroupAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_target_groups(self, *args, **kwargs):
        __protego_used['elbv2']['describe_target_groups']=['elasticloadbalancing:DescribeTargetGroups']
        for p in ['elasticloadbalancing:DescribeTargetGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DescribeTargetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_target_health(self, *args, **kwargs):
        __protego_used['elbv2']['describe_target_health']=['elasticloadbalancing:DescribeTargetHealth']
        for p in ['elasticloadbalancing:DescribeTargetHealth']:
            res = {}
            for nm in ["TargetGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "DescribeTargetHealth", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_listener(self, *args, **kwargs):
        __protego_used['elbv2']['modify_listener']=['elasticloadbalancing:ModifyListener']
        for p in ['elasticloadbalancing:ModifyListener']:
            res = {}
            for nm in ["ListenerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "ModifyListener", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_load_balancer_attributes(self, *args, **kwargs):
        __protego_used['elbv2']['modify_load_balancer_attributes']=['elasticloadbalancing:ModifyLoadBalancerAttributes','elasticloadbalancing:ModifyLoadBalancerAttributes']
        for p in ['elasticloadbalancing:ModifyLoadBalancerAttributes','elasticloadbalancing:ModifyLoadBalancerAttributes']:
            res = {}
            for nm in ["LoadBalancerArn","Attributes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "ModifyLoadBalancerAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_rule(self, *args, **kwargs):
        __protego_used['elbv2']['modify_rule']=['elasticloadbalancing:ModifyRule']
        for p in ['elasticloadbalancing:ModifyRule']:
            res = {}
            for nm in ["RuleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "ModifyRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_target_group(self, *args, **kwargs):
        __protego_used['elbv2']['modify_target_group']=['elasticloadbalancing:ModifyTargetGroup']
        for p in ['elasticloadbalancing:ModifyTargetGroup']:
            res = {}
            for nm in ["TargetGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "ModifyTargetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_target_group_attributes(self, *args, **kwargs):
        __protego_used['elbv2']['modify_target_group_attributes']=['elasticloadbalancing:ModifyTargetGroupAttributes']
        for p in ['elasticloadbalancing:ModifyTargetGroupAttributes']:
            res = {}
            for nm in ["TargetGroupArn","Attributes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "ModifyTargetGroupAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_targets(self, *args, **kwargs):
        __protego_used['elbv2']['register_targets']=['elasticloadbalancing:RegisterTargets']
        for p in ['elasticloadbalancing:RegisterTargets']:
            res = {}
            for nm in ["TargetGroupArn","Targets"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "RegisterTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_listener_certificates(self, *args, **kwargs):
        __protego_used['elbv2']['remove_listener_certificates']=['elasticloadbalancing:*']
        for p in ['elasticloadbalancing:*']:
            res = {}
            for nm in ["ListenerArn","Certificates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "RemoveListenerCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags(self, *args, **kwargs):
        __protego_used['elbv2']['remove_tags']=['elasticloadbalancing:RemoveTags']
        for p in ['elasticloadbalancing:RemoveTags']:
            res = {}
            for nm in ["ResourceArns","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "RemoveTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_ip_address_type(self, *args, **kwargs):
        __protego_used['elbv2']['set_ip_address_type']=['elasticloadbalancing:SetIpAddressType','elasticloadbalancing:SetIpAddressType']
        for p in ['elasticloadbalancing:SetIpAddressType','elasticloadbalancing:SetIpAddressType']:
            res = {}
            for nm in ["LoadBalancerArn","IpAddressType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "SetIpAddressType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_rule_priorities(self, *args, **kwargs):
        __protego_used['elbv2']['set_rule_priorities']=['elasticloadbalancing:SetRulePriorities']
        for p in ['elasticloadbalancing:SetRulePriorities']:
            res = {}
            for nm in ["RulePriorities"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "SetRulePriorities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_security_groups(self, *args, **kwargs):
        __protego_used['elbv2']['set_security_groups']=['elasticloadbalancing:SetSecurityGroups','elasticloadbalancing:SetSecurityGroups']
        for p in ['elasticloadbalancing:SetSecurityGroups','elasticloadbalancing:SetSecurityGroups']:
            res = {}
            for nm in ["LoadBalancerArn","SecurityGroups"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "SetSecurityGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_subnets(self, *args, **kwargs):
        __protego_used['elbv2']['set_subnets']=['elasticloadbalancing:SetSubnets','elasticloadbalancing:SetSubnets']
        for p in ['elasticloadbalancing:SetSubnets','elasticloadbalancing:SetSubnets']:
            res = {}
            for nm in ["LoadBalancerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['elbv2'].append({'action': "SetSubnets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class emr:
    def __init__(self, region_name=__default_region):
        __protego_used['emr']= __protego_used.get('emr', {})
        __protego_resource_map['emr']=__protego_resource_map.get('emr', [])
        self.region = region_name
    def add_instance_fleet(self, *args, **kwargs):
        __protego_used['emr']['add_instance_fleet']=['elasticmapreduce:*']
        for p in ['elasticmapreduce:*']:
            res = {}
            for nm in ["InstanceFleet","ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "AddInstanceFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_instance_groups(self, *args, **kwargs):
        __protego_used['emr']['add_instance_groups']=['elasticmapreduce:AddInstanceGroups']
        for p in ['elasticmapreduce:AddInstanceGroups']:
            res = {}
            for nm in ["JobFlowId","InstanceGroups"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "AddInstanceGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_job_flow_steps(self, *args, **kwargs):
        __protego_used['emr']['add_job_flow_steps']=['elasticmapreduce:AddJobFlowSteps']
        for p in ['elasticmapreduce:AddJobFlowSteps']:
            res = {}
            for nm in ["Steps","JobFlowId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "AddJobFlowSteps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_tags(self, *args, **kwargs):
        __protego_used['emr']['add_tags']=['elasticmapreduce:AddTags']
        for p in ['elasticmapreduce:AddTags']:
            res = {}
            for nm in ["ResourceId","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "AddTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_steps(self, *args, **kwargs):
        __protego_used['emr']['cancel_steps']=['elasticmapreduce:CancelSteps']
        for p in ['elasticmapreduce:CancelSteps']:
            res = {}
            for nm in ["StepIds","ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "CancelSteps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_security_configuration(self, *args, **kwargs):
        __protego_used['emr']['create_security_configuration']=['elasticmapreduce:CreateSecurityConfiguration']
        for p in ['elasticmapreduce:CreateSecurityConfiguration']:
            res = {}
            for nm in ["Name","SecurityConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "CreateSecurityConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_security_configuration(self, *args, **kwargs):
        __protego_used['emr']['delete_security_configuration']=['elasticmapreduce:DeleteSecurityConfiguration']
        for p in ['elasticmapreduce:DeleteSecurityConfiguration']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "DeleteSecurityConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster(self, *args, **kwargs):
        __protego_used['emr']['describe_cluster']=['elasticmapreduce:DescribeCluster']
        for p in ['elasticmapreduce:DescribeCluster']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "DescribeCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_job_flows(self, *args, **kwargs):
        __protego_used['emr']['describe_job_flows']=['elasticmapreduce:DescribeJobFlows']
        for p in ['elasticmapreduce:DescribeJobFlows']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "DescribeJobFlows", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_security_configuration(self, *args, **kwargs):
        __protego_used['emr']['describe_security_configuration']=['elasticmapreduce:DescribeSecurityConfiguration']
        for p in ['elasticmapreduce:DescribeSecurityConfiguration']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "DescribeSecurityConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_step(self, *args, **kwargs):
        __protego_used['emr']['describe_step']=['elasticmapreduce:DescribeStep']
        for p in ['elasticmapreduce:DescribeStep']:
            res = {}
            for nm in ["ClusterId","StepId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "DescribeStep", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_block_public_access_configuration(self, *args, **kwargs):
        __protego_used['emr']['get_block_public_access_configuration']=['emr:*']
        for p in ['emr:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "GetBlockPublicAccessConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_bootstrap_actions(self, *args, **kwargs):
        __protego_used['emr']['list_bootstrap_actions']=['elasticmapreduce:ListBootstrapActions']
        for p in ['elasticmapreduce:ListBootstrapActions']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "ListBootstrapActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_clusters(self, *args, **kwargs):
        __protego_used['emr']['list_clusters']=['elasticmapreduce:ListClusters']
        for p in ['elasticmapreduce:ListClusters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "ListClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_instance_fleets(self, *args, **kwargs):
        __protego_used['emr']['list_instance_fleets']=['elasticmapreduce:*']
        for p in ['elasticmapreduce:*']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "ListInstanceFleets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_instance_groups(self, *args, **kwargs):
        __protego_used['emr']['list_instance_groups']=['elasticmapreduce:ListInstanceGroups']
        for p in ['elasticmapreduce:ListInstanceGroups']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "ListInstanceGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_instances(self, *args, **kwargs):
        __protego_used['emr']['list_instances']=['elasticmapreduce:ListInstances']
        for p in ['elasticmapreduce:ListInstances']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "ListInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_security_configurations(self, *args, **kwargs):
        __protego_used['emr']['list_security_configurations']=['elasticmapreduce:ListSecurityConfigurations']
        for p in ['elasticmapreduce:ListSecurityConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "ListSecurityConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_steps(self, *args, **kwargs):
        __protego_used['emr']['list_steps']=['elasticmapreduce:ListSteps']
        for p in ['elasticmapreduce:ListSteps']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "ListSteps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cluster(self, *args, **kwargs):
        __protego_used['emr']['modify_cluster']=['emr:*']
        for p in ['emr:*']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "ModifyCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_instance_fleet(self, *args, **kwargs):
        __protego_used['emr']['modify_instance_fleet']=['elasticmapreduce:ModifyInstanceFleet']
        for p in ['elasticmapreduce:ModifyInstanceFleet']:
            res = {}
            for nm in ["InstanceFleet","ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "ModifyInstanceFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_instance_groups(self, *args, **kwargs):
        __protego_used['emr']['modify_instance_groups']=['elasticmapreduce:ModifyInstanceGroups']
        for p in ['elasticmapreduce:ModifyInstanceGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "ModifyInstanceGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_auto_scaling_policy(self, *args, **kwargs):
        __protego_used['emr']['put_auto_scaling_policy']=['elasticmapreduce:PutAutoScalingPolicy']
        for p in ['elasticmapreduce:PutAutoScalingPolicy']:
            res = {}
            for nm in ["AutoScalingPolicy","ClusterId","InstanceGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "PutAutoScalingPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_block_public_access_configuration(self, *args, **kwargs):
        __protego_used['emr']['put_block_public_access_configuration']=['emr:*']
        for p in ['emr:*']:
            res = {}
            for nm in ["BlockPublicAccessConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "PutBlockPublicAccessConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_auto_scaling_policy(self, *args, **kwargs):
        __protego_used['emr']['remove_auto_scaling_policy']=['elasticmapreduce:RemoveAutoScalingPolicy']
        for p in ['elasticmapreduce:RemoveAutoScalingPolicy']:
            res = {}
            for nm in ["ClusterId","InstanceGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "RemoveAutoScalingPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags(self, *args, **kwargs):
        __protego_used['emr']['remove_tags']=['elasticmapreduce:RemoveTags']
        for p in ['elasticmapreduce:RemoveTags']:
            res = {}
            for nm in ["ResourceId","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "RemoveTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def run_job_flow(self, *args, **kwargs):
        __protego_used['emr']['run_job_flow']=['elasticmapreduce:RunJobFlow']
        for p in ['elasticmapreduce:RunJobFlow']:
            res = {}
            for nm in ["Instances","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "RunJobFlow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_termination_protection(self, *args, **kwargs):
        __protego_used['emr']['set_termination_protection']=['elasticmapreduce:SetTerminationProtection']
        for p in ['elasticmapreduce:SetTerminationProtection']:
            res = {}
            for nm in ["JobFlowIds","TerminationProtected"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "SetTerminationProtection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_visible_to_all_users(self, *args, **kwargs):
        __protego_used['emr']['set_visible_to_all_users']=['elasticmapreduce:SetVisibleToAllUsers']
        for p in ['elasticmapreduce:SetVisibleToAllUsers']:
            res = {}
            for nm in ["JobFlowIds","VisibleToAllUsers"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "SetVisibleToAllUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def terminate_job_flows(self, *args, **kwargs):
        __protego_used['emr']['terminate_job_flows']=['elasticmapreduce:TerminateJobFlows']
        for p in ['elasticmapreduce:TerminateJobFlows']:
            res = {}
            for nm in ["JobFlowIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['emr'].append({'action': "TerminateJobFlows", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class es:
    def __init__(self, region_name=__default_region):
        __protego_used['es']= __protego_used.get('es', {})
        __protego_resource_map['es']=__protego_resource_map.get('es', [])
        self.region = region_name
    def add_tags(self, *args, **kwargs):
        __protego_used['es']['add_tags']=['es:AddTags']
        for p in ['es:AddTags']:
            res = {}
            for nm in ["TagList","ARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "AddTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_elasticsearch_service_software_update(self, *args, **kwargs):
        __protego_used['es']['cancel_elasticsearch_service_software_update']=['es:*']
        for p in ['es:*']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "CancelElasticsearchServiceSoftwareUpdate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_elasticsearch_domain(self, *args, **kwargs):
        __protego_used['es']['create_elasticsearch_domain']=['es:CreateElasticsearchDomain']
        for p in ['es:CreateElasticsearchDomain']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "CreateElasticsearchDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_elasticsearch_domain(self, *args, **kwargs):
        __protego_used['es']['delete_elasticsearch_domain']=['es:DeleteElasticsearchDomain']
        for p in ['es:DeleteElasticsearchDomain']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "DeleteElasticsearchDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_elasticsearch_service_role(self, *args, **kwargs):
        __protego_used['es']['delete_elasticsearch_service_role']=['es:DeleteElasticsearchServiceRole']
        for p in ['es:DeleteElasticsearchServiceRole']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "DeleteElasticsearchServiceRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_elasticsearch_domain(self, *args, **kwargs):
        __protego_used['es']['describe_elasticsearch_domain']=['es:DescribeElasticsearchDomain']
        for p in ['es:DescribeElasticsearchDomain']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "DescribeElasticsearchDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_elasticsearch_domain_config(self, *args, **kwargs):
        __protego_used['es']['describe_elasticsearch_domain_config']=['es:DescribeElasticsearchDomainConfig']
        for p in ['es:DescribeElasticsearchDomainConfig']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "DescribeElasticsearchDomainConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_elasticsearch_domains(self, *args, **kwargs):
        __protego_used['es']['describe_elasticsearch_domains']=['es:DescribeElasticsearchDomains']
        for p in ['es:DescribeElasticsearchDomains']:
            res = {}
            for nm in ["DomainNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "DescribeElasticsearchDomains", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_elasticsearch_instance_type_limits(self, *args, **kwargs):
        __protego_used['es']['describe_elasticsearch_instance_type_limits']=['es:DescribeElasticsearchInstanceTypeLimits']
        for p in ['es:DescribeElasticsearchInstanceTypeLimits']:
            res = {}
            for nm in ["ElasticsearchVersion","InstanceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "DescribeElasticsearchInstanceTypeLimits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_elasticsearch_instance_offerings(self, *args, **kwargs):
        __protego_used['es']['describe_reserved_elasticsearch_instance_offerings']=['es:*']
        for p in ['es:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "DescribeReservedElasticsearchInstanceOfferings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_elasticsearch_instances(self, *args, **kwargs):
        __protego_used['es']['describe_reserved_elasticsearch_instances']=['es:*']
        for p in ['es:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "DescribeReservedElasticsearchInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_compatible_elasticsearch_versions(self, *args, **kwargs):
        __protego_used['es']['get_compatible_elasticsearch_versions']=['es:*','es:GetCompatibleElasticsearchVersions']
        for p in ['es:*','es:GetCompatibleElasticsearchVersions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "GetCompatibleElasticsearchVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_upgrade_history(self, *args, **kwargs):
        __protego_used['es']['get_upgrade_history']=['es:GetUpgradeHistory','es:*']
        for p in ['es:GetUpgradeHistory','es:*']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "GetUpgradeHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_upgrade_status(self, *args, **kwargs):
        __protego_used['es']['get_upgrade_status']=['es:*','es:GetUpgradeStatus']
        for p in ['es:*','es:GetUpgradeStatus']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "GetUpgradeStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_domain_names(self, *args, **kwargs):
        __protego_used['es']['list_domain_names']=['es:ListDomainNames']
        for p in ['es:ListDomainNames']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "ListDomainNames", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_elasticsearch_instance_types(self, *args, **kwargs):
        __protego_used['es']['list_elasticsearch_instance_types']=['es:ListElasticsearchInstanceTypes']
        for p in ['es:ListElasticsearchInstanceTypes']:
            res = {}
            for nm in ["ElasticsearchVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "ListElasticsearchInstanceTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_elasticsearch_versions(self, *args, **kwargs):
        __protego_used['es']['list_elasticsearch_versions']=['es:ListElasticsearchVersions']
        for p in ['es:ListElasticsearchVersions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "ListElasticsearchVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags(self, *args, **kwargs):
        __protego_used['es']['list_tags']=['es:ListTags']
        for p in ['es:ListTags']:
            res = {}
            for nm in ["ARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "ListTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def purchase_reserved_elasticsearch_instance_offering(self, *args, **kwargs):
        __protego_used['es']['purchase_reserved_elasticsearch_instance_offering']=['es:*']
        for p in ['es:*']:
            res = {}
            for nm in ["ReservationName","ReservedElasticsearchInstanceOfferingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "PurchaseReservedElasticsearchInstanceOffering", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags(self, *args, **kwargs):
        __protego_used['es']['remove_tags']=['es:RemoveTags']
        for p in ['es:RemoveTags']:
            res = {}
            for nm in ["ARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "RemoveTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_elasticsearch_service_software_update(self, *args, **kwargs):
        __protego_used['es']['start_elasticsearch_service_software_update']=['es:*']
        for p in ['es:*']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "StartElasticsearchServiceSoftwareUpdate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_elasticsearch_domain_config(self, *args, **kwargs):
        __protego_used['es']['update_elasticsearch_domain_config']=['es:UpdateElasticsearchDomainConfig']
        for p in ['es:UpdateElasticsearchDomainConfig']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "UpdateElasticsearchDomainConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upgrade_elasticsearch_domain(self, *args, **kwargs):
        __protego_used['es']['upgrade_elasticsearch_domain']=['es:*']
        for p in ['es:*']:
            res = {}
            for nm in ["DomainName","TargetVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['es'].append({'action': "UpgradeElasticsearchDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class events:
    def __init__(self, region_name=__default_region):
        __protego_used['events']= __protego_used.get('events', {})
        __protego_resource_map['events']=__protego_resource_map.get('events', [])
        self.region = region_name
    def activate_event_source(self, *args, **kwargs):
        __protego_used['events']['activate_event_source']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "ActivateEventSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_event_bus(self, *args, **kwargs):
        __protego_used['events']['create_event_bus']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "CreateEventBus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_partner_event_source(self, *args, **kwargs):
        __protego_used['events']['create_partner_event_source']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["Account","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "CreatePartnerEventSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deactivate_event_source(self, *args, **kwargs):
        __protego_used['events']['deactivate_event_source']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "DeactivateEventSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_event_bus(self, *args, **kwargs):
        __protego_used['events']['delete_event_bus']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "DeleteEventBus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_partner_event_source(self, *args, **kwargs):
        __protego_used['events']['delete_partner_event_source']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["Account","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "DeletePartnerEventSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_rule(self, *args, **kwargs):
        __protego_used['events']['delete_rule']=['events:DeleteRule']
        for p in ['events:DeleteRule']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "DeleteRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_bus(self, *args, **kwargs):
        __protego_used['events']['describe_event_bus']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "DescribeEventBus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_source(self, *args, **kwargs):
        __protego_used['events']['describe_event_source']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "DescribeEventSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_partner_event_source(self, *args, **kwargs):
        __protego_used['events']['describe_partner_event_source']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "DescribePartnerEventSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_rule(self, *args, **kwargs):
        __protego_used['events']['describe_rule']=['events:DescribeRule']
        for p in ['events:DescribeRule']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "DescribeRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_rule(self, *args, **kwargs):
        __protego_used['events']['disable_rule']=['events:DisableRule']
        for p in ['events:DisableRule']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "DisableRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_rule(self, *args, **kwargs):
        __protego_used['events']['enable_rule']=['events:EnableRule']
        for p in ['events:EnableRule']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "EnableRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_event_buses(self, *args, **kwargs):
        __protego_used['events']['list_event_buses']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "ListEventBuses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_event_sources(self, *args, **kwargs):
        __protego_used['events']['list_event_sources']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "ListEventSources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_partner_event_source_accounts(self, *args, **kwargs):
        __protego_used['events']['list_partner_event_source_accounts']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["EventSourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "ListPartnerEventSourceAccounts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_partner_event_sources(self, *args, **kwargs):
        __protego_used['events']['list_partner_event_sources']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["NamePrefix"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "ListPartnerEventSources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_rule_names_by_target(self, *args, **kwargs):
        __protego_used['events']['list_rule_names_by_target']=['events:ListRuleNamesByTarget']
        for p in ['events:ListRuleNamesByTarget']:
            res = {}
            for nm in ["TargetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "ListRuleNamesByTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_rules(self, *args, **kwargs):
        __protego_used['events']['list_rules']=['events:ListRules']
        for p in ['events:ListRules']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "ListRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['events']['list_tags_for_resource']=['events:ListTagsForResource']
        for p in ['events:ListTagsForResource']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_targets_by_rule(self, *args, **kwargs):
        __protego_used['events']['list_targets_by_rule']=['events:ListTargetsByRule']
        for p in ['events:ListTargetsByRule']:
            res = {}
            for nm in ["Rule"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "ListTargetsByRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_events(self, *args, **kwargs):
        __protego_used['events']['put_events']=['events:PutEvents']
        for p in ['events:PutEvents']:
            res = {}
            for nm in ["Entries"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "PutEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_partner_events(self, *args, **kwargs):
        __protego_used['events']['put_partner_events']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["Entries"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "PutPartnerEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_permission(self, *args, **kwargs):
        __protego_used['events']['put_permission']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["StatementId","Action","Principal"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "PutPermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_rule(self, *args, **kwargs):
        __protego_used['events']['put_rule']=['events:PutRule']
        for p in ['events:PutRule']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "PutRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_targets(self, *args, **kwargs):
        __protego_used['events']['put_targets']=['events:PutTargets']
        for p in ['events:PutTargets']:
            res = {}
            for nm in ["Targets","Rule"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "PutTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_permission(self, *args, **kwargs):
        __protego_used['events']['remove_permission']=['events:*']
        for p in ['events:*']:
            res = {}
            for nm in ["StatementId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "RemovePermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_targets(self, *args, **kwargs):
        __protego_used['events']['remove_targets']=['events:RemoveTargets']
        for p in ['events:RemoveTargets']:
            res = {}
            for nm in ["Ids","Rule"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "RemoveTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['events']['tag_resource']=['events:TagResource']
        for p in ['events:TagResource']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_event_pattern(self, *args, **kwargs):
        __protego_used['events']['test_event_pattern']=['events:TestEventPattern']
        for p in ['events:TestEventPattern']:
            res = {}
            for nm in ["Event","EventPattern"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "TestEventPattern", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['events']['untag_resource']=['events:UntagResource']
        for p in ['events:UntagResource']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['events'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class firehose:
    def __init__(self, region_name=__default_region):
        __protego_used['firehose']= __protego_used.get('firehose', {})
        __protego_resource_map['firehose']=__protego_resource_map.get('firehose', [])
        self.region = region_name
    def create_delivery_stream(self, *args, **kwargs):
        __protego_used['firehose']['create_delivery_stream']=['firehose:CreateDeliveryStream']
        for p in ['firehose:CreateDeliveryStream']:
            res = {}
            for nm in ["DeliveryStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "CreateDeliveryStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_delivery_stream(self, *args, **kwargs):
        __protego_used['firehose']['delete_delivery_stream']=['firehose:DeleteDeliveryStream']
        for p in ['firehose:DeleteDeliveryStream']:
            res = {}
            for nm in ["DeliveryStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "DeleteDeliveryStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_delivery_stream(self, *args, **kwargs):
        __protego_used['firehose']['describe_delivery_stream']=['firehose:DescribeDeliveryStream']
        for p in ['firehose:DescribeDeliveryStream']:
            res = {}
            for nm in ["DeliveryStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "DescribeDeliveryStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_delivery_streams(self, *args, **kwargs):
        __protego_used['firehose']['list_delivery_streams']=['firehose:ListDeliveryStreams']
        for p in ['firehose:ListDeliveryStreams']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "ListDeliveryStreams", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_delivery_stream(self, *args, **kwargs):
        __protego_used['firehose']['list_tags_for_delivery_stream']=['firehose:ListTagsForDeliveryStream']
        for p in ['firehose:ListTagsForDeliveryStream']:
            res = {}
            for nm in ["DeliveryStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "ListTagsForDeliveryStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_record(self, *args, **kwargs):
        __protego_used['firehose']['put_record']=['firehose:PutRecord']
        for p in ['firehose:PutRecord']:
            res = {}
            for nm in ["Record","DeliveryStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "PutRecord", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_record_batch(self, *args, **kwargs):
        __protego_used['firehose']['put_record_batch']=['firehose:PutRecordBatch']
        for p in ['firehose:PutRecordBatch']:
            res = {}
            for nm in ["DeliveryStreamName","Records"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "PutRecordBatch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_delivery_stream_encryption(self, *args, **kwargs):
        __protego_used['firehose']['start_delivery_stream_encryption']=['firehose:StartDeliveryStreamEncryption']
        for p in ['firehose:StartDeliveryStreamEncryption']:
            res = {}
            for nm in ["DeliveryStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "StartDeliveryStreamEncryption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_delivery_stream_encryption(self, *args, **kwargs):
        __protego_used['firehose']['stop_delivery_stream_encryption']=['firehose:StopDeliveryStreamEncryption']
        for p in ['firehose:StopDeliveryStreamEncryption']:
            res = {}
            for nm in ["DeliveryStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "StopDeliveryStreamEncryption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_delivery_stream(self, *args, **kwargs):
        __protego_used['firehose']['tag_delivery_stream']=['firehose:TagDeliveryStream']
        for p in ['firehose:TagDeliveryStream']:
            res = {}
            for nm in ["DeliveryStreamName","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "TagDeliveryStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_delivery_stream(self, *args, **kwargs):
        __protego_used['firehose']['untag_delivery_stream']=['firehose:UntagDeliveryStream']
        for p in ['firehose:UntagDeliveryStream']:
            res = {}
            for nm in ["TagKeys","DeliveryStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "UntagDeliveryStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_destination(self, *args, **kwargs):
        __protego_used['firehose']['update_destination']=['firehose:UpdateDestination']
        for p in ['firehose:UpdateDestination']:
            res = {}
            for nm in ["CurrentDeliveryStreamVersionId","DestinationId","DeliveryStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['firehose'].append({'action': "UpdateDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class fms:
    def __init__(self, region_name=__default_region):
        __protego_used['fms']= __protego_used.get('fms', {})
        __protego_resource_map['fms']=__protego_resource_map.get('fms', [])
        self.region = region_name
    def associate_admin_account(self, *args, **kwargs):
        __protego_used['fms']['associate_admin_account']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in ["AdminAccount"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "AssociateAdminAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_notification_channel(self, *args, **kwargs):
        __protego_used['fms']['delete_notification_channel']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "DeleteNotificationChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_policy(self, *args, **kwargs):
        __protego_used['fms']['delete_policy']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in ["PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "DeletePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_admin_account(self, *args, **kwargs):
        __protego_used['fms']['disassociate_admin_account']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "DisassociateAdminAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_admin_account(self, *args, **kwargs):
        __protego_used['fms']['get_admin_account']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "GetAdminAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_compliance_detail(self, *args, **kwargs):
        __protego_used['fms']['get_compliance_detail']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in ["MemberAccount","PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "GetComplianceDetail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_notification_channel(self, *args, **kwargs):
        __protego_used['fms']['get_notification_channel']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "GetNotificationChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_policy(self, *args, **kwargs):
        __protego_used['fms']['get_policy']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in ["PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "GetPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_protection_status(self, *args, **kwargs):
        __protego_used['fms']['get_protection_status']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in ["PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "GetProtectionStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_compliance_status(self, *args, **kwargs):
        __protego_used['fms']['list_compliance_status']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in ["PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "ListComplianceStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_member_accounts(self, *args, **kwargs):
        __protego_used['fms']['list_member_accounts']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "ListMemberAccounts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_policies(self, *args, **kwargs):
        __protego_used['fms']['list_policies']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "ListPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['fms']['list_tags_for_resource']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_notification_channel(self, *args, **kwargs):
        __protego_used['fms']['put_notification_channel']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in ["SnsRoleName","SnsTopicArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "PutNotificationChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_policy(self, *args, **kwargs):
        __protego_used['fms']['put_policy']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in ["Policy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "PutPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['fms']['tag_resource']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in ["ResourceArn","TagList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['fms']['untag_resource']=['fms:*']
        for p in ['fms:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fms'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class forecast:
    def __init__(self, region_name=__default_region):
        __protego_used['forecast']= __protego_used.get('forecast', {})
        __protego_resource_map['forecast']=__protego_resource_map.get('forecast', [])
        self.region = region_name
    def create_dataset(self, *args, **kwargs):
        __protego_used['forecast']['create_dataset']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["DatasetType","Domain","Schema","DatasetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "CreateDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dataset_group(self, *args, **kwargs):
        __protego_used['forecast']['create_dataset_group']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["Domain","DatasetGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "CreateDatasetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dataset_import_job(self, *args, **kwargs):
        __protego_used['forecast']['create_dataset_import_job']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["DatasetImportJobName","DatasetArn","DataSource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "CreateDatasetImportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_forecast(self, *args, **kwargs):
        __protego_used['forecast']['create_forecast']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["ForecastName","PredictorArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "CreateForecast", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_forecast_export_job(self, *args, **kwargs):
        __protego_used['forecast']['create_forecast_export_job']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["ForecastArn","Destination","ForecastExportJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "CreateForecastExportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_predictor(self, *args, **kwargs):
        __protego_used['forecast']['create_predictor']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["InputDataConfig","PredictorName","FeaturizationConfig","ForecastHorizon"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "CreatePredictor", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dataset(self, *args, **kwargs):
        __protego_used['forecast']['delete_dataset']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["DatasetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DeleteDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dataset_group(self, *args, **kwargs):
        __protego_used['forecast']['delete_dataset_group']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["DatasetGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DeleteDatasetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dataset_import_job(self, *args, **kwargs):
        __protego_used['forecast']['delete_dataset_import_job']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["DatasetImportJobArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DeleteDatasetImportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_forecast(self, *args, **kwargs):
        __protego_used['forecast']['delete_forecast']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["ForecastArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DeleteForecast", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_forecast_export_job(self, *args, **kwargs):
        __protego_used['forecast']['delete_forecast_export_job']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["ForecastExportJobArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DeleteForecastExportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_predictor(self, *args, **kwargs):
        __protego_used['forecast']['delete_predictor']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["PredictorArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DeletePredictor", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dataset(self, *args, **kwargs):
        __protego_used['forecast']['describe_dataset']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["DatasetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DescribeDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dataset_group(self, *args, **kwargs):
        __protego_used['forecast']['describe_dataset_group']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["DatasetGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DescribeDatasetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dataset_import_job(self, *args, **kwargs):
        __protego_used['forecast']['describe_dataset_import_job']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["DatasetImportJobArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DescribeDatasetImportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_forecast(self, *args, **kwargs):
        __protego_used['forecast']['describe_forecast']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["ForecastArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DescribeForecast", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_forecast_export_job(self, *args, **kwargs):
        __protego_used['forecast']['describe_forecast_export_job']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["ForecastExportJobArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DescribeForecastExportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_predictor(self, *args, **kwargs):
        __protego_used['forecast']['describe_predictor']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["PredictorArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "DescribePredictor", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_accuracy_metrics(self, *args, **kwargs):
        __protego_used['forecast']['get_accuracy_metrics']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["PredictorArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "GetAccuracyMetrics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dataset_groups(self, *args, **kwargs):
        __protego_used['forecast']['list_dataset_groups']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "ListDatasetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dataset_import_jobs(self, *args, **kwargs):
        __protego_used['forecast']['list_dataset_import_jobs']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "ListDatasetImportJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_datasets(self, *args, **kwargs):
        __protego_used['forecast']['list_datasets']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "ListDatasets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_forecast_export_jobs(self, *args, **kwargs):
        __protego_used['forecast']['list_forecast_export_jobs']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "ListForecastExportJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_forecasts(self, *args, **kwargs):
        __protego_used['forecast']['list_forecasts']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "ListForecasts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_predictors(self, *args, **kwargs):
        __protego_used['forecast']['list_predictors']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "ListPredictors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_dataset_group(self, *args, **kwargs):
        __protego_used['forecast']['update_dataset_group']=['forecast:*']
        for p in ['forecast:*']:
            res = {}
            for nm in ["DatasetGroupArn","DatasetArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecast'].append({'action': "UpdateDatasetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class forecastquery:
    def __init__(self, region_name=__default_region):
        __protego_used['forecastquery']= __protego_used.get('forecastquery', {})
        __protego_resource_map['forecastquery']=__protego_resource_map.get('forecastquery', [])
        self.region = region_name
    def query_forecast(self, *args, **kwargs):
        __protego_used['forecastquery']['query_forecast']=['forecastquery:*']
        for p in ['forecastquery:*']:
            res = {}
            for nm in ["ForecastArn","Filters"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['forecastquery'].append({'action': "QueryForecast", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class frauddetector:
    def __init__(self, region_name=__default_region):
        __protego_used['frauddetector']= __protego_used.get('frauddetector', {})
        __protego_resource_map['frauddetector']=__protego_resource_map.get('frauddetector', [])
        self.region = region_name
    def batch_create_variable(self, *args, **kwargs):
        __protego_used['frauddetector']['batch_create_variable']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["variableEntries"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "BatchCreateVariable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_variable(self, *args, **kwargs):
        __protego_used['frauddetector']['batch_get_variable']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["names"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "BatchGetVariable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_detector_version(self, *args, **kwargs):
        __protego_used['frauddetector']['create_detector_version']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["rules","detectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "CreateDetectorVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_model_version(self, *args, **kwargs):
        __protego_used['frauddetector']['create_model_version']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["modelType","modelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "CreateModelVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_rule(self, *args, **kwargs):
        __protego_used['frauddetector']['create_rule']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["expression","language","outcomes","ruleId","detectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "CreateRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_variable(self, *args, **kwargs):
        __protego_used['frauddetector']['create_variable']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["defaultValue","name","dataType","dataSource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "CreateVariable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_detector_version(self, *args, **kwargs):
        __protego_used['frauddetector']['delete_detector_version']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["detectorVersionId","detectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "DeleteDetectorVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_event(self, *args, **kwargs):
        __protego_used['frauddetector']['delete_event']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["eventId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "DeleteEvent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_detector(self, *args, **kwargs):
        __protego_used['frauddetector']['describe_detector']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["detectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "DescribeDetector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_model_versions(self, *args, **kwargs):
        __protego_used['frauddetector']['describe_model_versions']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "DescribeModelVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_detector_version(self, *args, **kwargs):
        __protego_used['frauddetector']['get_detector_version']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["detectorVersionId","detectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "GetDetectorVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_detectors(self, *args, **kwargs):
        __protego_used['frauddetector']['get_detectors']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "GetDetectors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_external_models(self, *args, **kwargs):
        __protego_used['frauddetector']['get_external_models']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "GetExternalModels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_model_version(self, *args, **kwargs):
        __protego_used['frauddetector']['get_model_version']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["modelVersionNumber","modelType","modelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "GetModelVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_models(self, *args, **kwargs):
        __protego_used['frauddetector']['get_models']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "GetModels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_outcomes(self, *args, **kwargs):
        __protego_used['frauddetector']['get_outcomes']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "GetOutcomes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_prediction(self, *args, **kwargs):
        __protego_used['frauddetector']['get_prediction']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["detectorId","eventId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "GetPrediction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rules(self, *args, **kwargs):
        __protego_used['frauddetector']['get_rules']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["detectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "GetRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_variables(self, *args, **kwargs):
        __protego_used['frauddetector']['get_variables']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "GetVariables", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_detector(self, *args, **kwargs):
        __protego_used['frauddetector']['put_detector']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["detectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "PutDetector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_external_model(self, *args, **kwargs):
        __protego_used['frauddetector']['put_external_model']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["role","inputConfiguration","modelEndpointStatus","modelEndpoint","outputConfiguration","modelSource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "PutExternalModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_model(self, *args, **kwargs):
        __protego_used['frauddetector']['put_model']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["modelVariables","labelSchema","modelId","modelType","trainingDataSource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "PutModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_outcome(self, *args, **kwargs):
        __protego_used['frauddetector']['put_outcome']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "PutOutcome", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_detector_version(self, *args, **kwargs):
        __protego_used['frauddetector']['update_detector_version']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["rules","detectorVersionId","detectorId","externalModelEndpoints"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "UpdateDetectorVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_detector_version_metadata(self, *args, **kwargs):
        __protego_used['frauddetector']['update_detector_version_metadata']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["detectorVersionId","description","detectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "UpdateDetectorVersionMetadata", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_detector_version_status(self, *args, **kwargs):
        __protego_used['frauddetector']['update_detector_version_status']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["detectorVersionId","status","detectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "UpdateDetectorVersionStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_model_version(self, *args, **kwargs):
        __protego_used['frauddetector']['update_model_version']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["description","status","modelVersionNumber","modelId","modelType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "UpdateModelVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rule_metadata(self, *args, **kwargs):
        __protego_used['frauddetector']['update_rule_metadata']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["description","rule"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "UpdateRuleMetadata", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rule_version(self, *args, **kwargs):
        __protego_used['frauddetector']['update_rule_version']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["language","rule","expression","outcomes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "UpdateRuleVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_variable(self, *args, **kwargs):
        __protego_used['frauddetector']['update_variable']=['frauddetector:*']
        for p in ['frauddetector:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['frauddetector'].append({'action': "UpdateVariable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class fsx:
    def __init__(self, region_name=__default_region):
        __protego_used['fsx']= __protego_used.get('fsx', {})
        __protego_resource_map['fsx']=__protego_resource_map.get('fsx', [])
        self.region = region_name
    def cancel_data_repository_task(self, *args, **kwargs):
        __protego_used['fsx']['cancel_data_repository_task']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in ["TaskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "CancelDataRepositoryTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_backup(self, *args, **kwargs):
        __protego_used['fsx']['create_backup']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in ["FileSystemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "CreateBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_data_repository_task(self, *args, **kwargs):
        __protego_used['fsx']['create_data_repository_task']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in ["Type","Report","FileSystemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "CreateDataRepositoryTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_file_system(self, *args, **kwargs):
        __protego_used['fsx']['create_file_system']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in ["StorageCapacity","FileSystemType","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "CreateFileSystem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_file_system_from_backup(self, *args, **kwargs):
        __protego_used['fsx']['create_file_system_from_backup']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in ["BackupId","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "CreateFileSystemFromBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_backup(self, *args, **kwargs):
        __protego_used['fsx']['delete_backup']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in ["BackupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "DeleteBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_file_system(self, *args, **kwargs):
        __protego_used['fsx']['delete_file_system']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in ["FileSystemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "DeleteFileSystem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_backups(self, *args, **kwargs):
        __protego_used['fsx']['describe_backups']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "DescribeBackups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_data_repository_tasks(self, *args, **kwargs):
        __protego_used['fsx']['describe_data_repository_tasks']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "DescribeDataRepositoryTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_file_systems(self, *args, **kwargs):
        __protego_used['fsx']['describe_file_systems']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "DescribeFileSystems", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['fsx']['list_tags_for_resource']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['fsx']['tag_resource']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['fsx']['untag_resource']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_file_system(self, *args, **kwargs):
        __protego_used['fsx']['update_file_system']=['fsx:*']
        for p in ['fsx:*']:
            res = {}
            for nm in ["FileSystemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['fsx'].append({'action': "UpdateFileSystem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class gamelift:
    def __init__(self, region_name=__default_region):
        __protego_used['gamelift']= __protego_used.get('gamelift', {})
        __protego_resource_map['gamelift']=__protego_resource_map.get('gamelift', [])
        self.region = region_name
    def accept_match(self, *args, **kwargs):
        __protego_used['gamelift']['accept_match']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["PlayerIds","TicketId","AcceptanceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "AcceptMatch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_alias(self, *args, **kwargs):
        __protego_used['gamelift']['create_alias']=['gamelift:CreateAlias']
        for p in ['gamelift:CreateAlias']:
            res = {}
            for nm in ["RoutingStrategy","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_build(self, *args, **kwargs):
        __protego_used['gamelift']['create_build']=['gamelift:CreateBuild']
        for p in ['gamelift:CreateBuild']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreateBuild", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_fleet(self, *args, **kwargs):
        __protego_used['gamelift']['create_fleet']=['gamelift:CreateFleet']
        for p in ['gamelift:CreateFleet']:
            res = {}
            for nm in ["EC2InstanceType","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreateFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_game_session(self, *args, **kwargs):
        __protego_used['gamelift']['create_game_session']=['gamelift:CreateGameSession']
        for p in ['gamelift:CreateGameSession']:
            res = {}
            for nm in ["MaximumPlayerSessionCount"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreateGameSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_game_session_queue(self, *args, **kwargs):
        __protego_used['gamelift']['create_game_session_queue']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreateGameSessionQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_matchmaking_configuration(self, *args, **kwargs):
        __protego_used['gamelift']['create_matchmaking_configuration']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["AcceptanceRequired","GameSessionQueueArns","Name","RequestTimeoutSeconds","RuleSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreateMatchmakingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_matchmaking_rule_set(self, *args, **kwargs):
        __protego_used['gamelift']['create_matchmaking_rule_set']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["RuleSetBody","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreateMatchmakingRuleSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_player_session(self, *args, **kwargs):
        __protego_used['gamelift']['create_player_session']=['gamelift:CreatePlayerSession']
        for p in ['gamelift:CreatePlayerSession']:
            res = {}
            for nm in ["PlayerId","GameSessionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreatePlayerSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_player_sessions(self, *args, **kwargs):
        __protego_used['gamelift']['create_player_sessions']=['gamelift:CreatePlayerSessions']
        for p in ['gamelift:CreatePlayerSessions']:
            res = {}
            for nm in ["PlayerIds","GameSessionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreatePlayerSessions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_script(self, *args, **kwargs):
        __protego_used['gamelift']['create_script']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreateScript", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpc_peering_authorization(self, *args, **kwargs):
        __protego_used['gamelift']['create_vpc_peering_authorization']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["PeerVpcId","GameLiftAwsAccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreateVpcPeeringAuthorization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpc_peering_connection(self, *args, **kwargs):
        __protego_used['gamelift']['create_vpc_peering_connection']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["PeerVpcId","PeerVpcAwsAccountId","FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "CreateVpcPeeringConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_alias(self, *args, **kwargs):
        __protego_used['gamelift']['delete_alias']=['gamelift:DeleteAlias']
        for p in ['gamelift:DeleteAlias']:
            res = {}
            for nm in ["AliasId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DeleteAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_build(self, *args, **kwargs):
        __protego_used['gamelift']['delete_build']=['gamelift:DeleteBuild']
        for p in ['gamelift:DeleteBuild']:
            res = {}
            for nm in ["BuildId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DeleteBuild", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_fleet(self, *args, **kwargs):
        __protego_used['gamelift']['delete_fleet']=['gamelift:DeleteFleet']
        for p in ['gamelift:DeleteFleet']:
            res = {}
            for nm in ["FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DeleteFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_game_session_queue(self, *args, **kwargs):
        __protego_used['gamelift']['delete_game_session_queue']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DeleteGameSessionQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_matchmaking_configuration(self, *args, **kwargs):
        __protego_used['gamelift']['delete_matchmaking_configuration']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DeleteMatchmakingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_matchmaking_rule_set(self, *args, **kwargs):
        __protego_used['gamelift']['delete_matchmaking_rule_set']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DeleteMatchmakingRuleSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_scaling_policy(self, *args, **kwargs):
        __protego_used['gamelift']['delete_scaling_policy']=['gamelift:DeleteScalingPolicy']
        for p in ['gamelift:DeleteScalingPolicy']:
            res = {}
            for nm in ["FleetId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DeleteScalingPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_script(self, *args, **kwargs):
        __protego_used['gamelift']['delete_script']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["ScriptId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DeleteScript", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpc_peering_authorization(self, *args, **kwargs):
        __protego_used['gamelift']['delete_vpc_peering_authorization']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["PeerVpcId","GameLiftAwsAccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DeleteVpcPeeringAuthorization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpc_peering_connection(self, *args, **kwargs):
        __protego_used['gamelift']['delete_vpc_peering_connection']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["FleetId","VpcPeeringConnectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DeleteVpcPeeringConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_alias(self, *args, **kwargs):
        __protego_used['gamelift']['describe_alias']=['gamelift:DescribeAlias']
        for p in ['gamelift:DescribeAlias']:
            res = {}
            for nm in ["AliasId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_build(self, *args, **kwargs):
        __protego_used['gamelift']['describe_build']=['gamelift:DescribeBuild']
        for p in ['gamelift:DescribeBuild']:
            res = {}
            for nm in ["BuildId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeBuild", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_ec2_instance_limits(self, *args, **kwargs):
        __protego_used['gamelift']['describe_ec2_instance_limits']=['gamelift:DescribeEC2InstanceLimits']
        for p in ['gamelift:DescribeEC2InstanceLimits']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeEC2InstanceLimits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fleet_attributes(self, *args, **kwargs):
        __protego_used['gamelift']['describe_fleet_attributes']=['gamelift:DescribeFleetAttributes']
        for p in ['gamelift:DescribeFleetAttributes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeFleetAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fleet_capacity(self, *args, **kwargs):
        __protego_used['gamelift']['describe_fleet_capacity']=['gamelift:DescribeFleetCapacity']
        for p in ['gamelift:DescribeFleetCapacity']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeFleetCapacity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fleet_events(self, *args, **kwargs):
        __protego_used['gamelift']['describe_fleet_events']=['gamelift:DescribeFleetEvents']
        for p in ['gamelift:DescribeFleetEvents']:
            res = {}
            for nm in ["FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeFleetEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fleet_port_settings(self, *args, **kwargs):
        __protego_used['gamelift']['describe_fleet_port_settings']=['gamelift:DescribeFleetPortSettings']
        for p in ['gamelift:DescribeFleetPortSettings']:
            res = {}
            for nm in ["FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeFleetPortSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fleet_utilization(self, *args, **kwargs):
        __protego_used['gamelift']['describe_fleet_utilization']=['gamelift:DescribeFleetUtilization']
        for p in ['gamelift:DescribeFleetUtilization']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeFleetUtilization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_game_session_details(self, *args, **kwargs):
        __protego_used['gamelift']['describe_game_session_details']=['gamelift:DescribeGameSessionDetails']
        for p in ['gamelift:DescribeGameSessionDetails']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeGameSessionDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_game_session_placement(self, *args, **kwargs):
        __protego_used['gamelift']['describe_game_session_placement']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["PlacementId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeGameSessionPlacement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_game_session_queues(self, *args, **kwargs):
        __protego_used['gamelift']['describe_game_session_queues']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeGameSessionQueues", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_game_sessions(self, *args, **kwargs):
        __protego_used['gamelift']['describe_game_sessions']=['gamelift:DescribeGameSessions']
        for p in ['gamelift:DescribeGameSessions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeGameSessions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instances(self, *args, **kwargs):
        __protego_used['gamelift']['describe_instances']=['gamelift:DescribeInstances']
        for p in ['gamelift:DescribeInstances']:
            res = {}
            for nm in ["FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_matchmaking(self, *args, **kwargs):
        __protego_used['gamelift']['describe_matchmaking']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["TicketIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeMatchmaking", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_matchmaking_configurations(self, *args, **kwargs):
        __protego_used['gamelift']['describe_matchmaking_configurations']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeMatchmakingConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_matchmaking_rule_sets(self, *args, **kwargs):
        __protego_used['gamelift']['describe_matchmaking_rule_sets']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeMatchmakingRuleSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_player_sessions(self, *args, **kwargs):
        __protego_used['gamelift']['describe_player_sessions']=['gamelift:DescribePlayerSessions']
        for p in ['gamelift:DescribePlayerSessions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribePlayerSessions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_runtime_configuration(self, *args, **kwargs):
        __protego_used['gamelift']['describe_runtime_configuration']=['gamelift:DescribeRuntimeConfiguration']
        for p in ['gamelift:DescribeRuntimeConfiguration']:
            res = {}
            for nm in ["FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeRuntimeConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scaling_policies(self, *args, **kwargs):
        __protego_used['gamelift']['describe_scaling_policies']=['gamelift:DescribeScalingPolicies']
        for p in ['gamelift:DescribeScalingPolicies']:
            res = {}
            for nm in ["FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeScalingPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_script(self, *args, **kwargs):
        __protego_used['gamelift']['describe_script']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["ScriptId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeScript", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_peering_authorizations(self, *args, **kwargs):
        __protego_used['gamelift']['describe_vpc_peering_authorizations']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeVpcPeeringAuthorizations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vpc_peering_connections(self, *args, **kwargs):
        __protego_used['gamelift']['describe_vpc_peering_connections']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "DescribeVpcPeeringConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_game_session_log_url(self, *args, **kwargs):
        __protego_used['gamelift']['get_game_session_log_url']=['gamelift:GetGameSessionLogUrl']
        for p in ['gamelift:GetGameSessionLogUrl']:
            res = {}
            for nm in ["GameSessionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "GetGameSessionLogUrl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instance_access(self, *args, **kwargs):
        __protego_used['gamelift']['get_instance_access']=['gamelift:GetInstanceAccess']
        for p in ['gamelift:GetInstanceAccess']:
            res = {}
            for nm in ["InstanceId","FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "GetInstanceAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_aliases(self, *args, **kwargs):
        __protego_used['gamelift']['list_aliases']=['gamelift:ListAliases']
        for p in ['gamelift:ListAliases']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "ListAliases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_builds(self, *args, **kwargs):
        __protego_used['gamelift']['list_builds']=['gamelift:ListBuilds']
        for p in ['gamelift:ListBuilds']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "ListBuilds", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_fleets(self, *args, **kwargs):
        __protego_used['gamelift']['list_fleets']=['gamelift:ListFleets']
        for p in ['gamelift:ListFleets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "ListFleets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_scripts(self, *args, **kwargs):
        __protego_used['gamelift']['list_scripts']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "ListScripts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['gamelift']['list_tags_for_resource']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_scaling_policy(self, *args, **kwargs):
        __protego_used['gamelift']['put_scaling_policy']=['gamelift:PutScalingPolicy']
        for p in ['gamelift:PutScalingPolicy']:
            res = {}
            for nm in ["FleetId","MetricName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "PutScalingPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def request_upload_credentials(self, *args, **kwargs):
        __protego_used['gamelift']['request_upload_credentials']=['gamelift:RequestUploadCredentials']
        for p in ['gamelift:RequestUploadCredentials']:
            res = {}
            for nm in ["BuildId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "RequestUploadCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def resolve_alias(self, *args, **kwargs):
        __protego_used['gamelift']['resolve_alias']=['gamelift:ResolveAlias']
        for p in ['gamelift:ResolveAlias']:
            res = {}
            for nm in ["AliasId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "ResolveAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_game_sessions(self, *args, **kwargs):
        __protego_used['gamelift']['search_game_sessions']=['gamelift:SearchGameSessions']
        for p in ['gamelift:SearchGameSessions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "SearchGameSessions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_fleet_actions(self, *args, **kwargs):
        __protego_used['gamelift']['start_fleet_actions']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["Actions","FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "StartFleetActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_game_session_placement(self, *args, **kwargs):
        __protego_used['gamelift']['start_game_session_placement']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["MaximumPlayerSessionCount","PlacementId","GameSessionQueueName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "StartGameSessionPlacement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_match_backfill(self, *args, **kwargs):
        __protego_used['gamelift']['start_match_backfill']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["ConfigurationName","GameSessionArn","Players"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "StartMatchBackfill", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_matchmaking(self, *args, **kwargs):
        __protego_used['gamelift']['start_matchmaking']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["ConfigurationName","Players"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "StartMatchmaking", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_fleet_actions(self, *args, **kwargs):
        __protego_used['gamelift']['stop_fleet_actions']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["Actions","FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "StopFleetActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_game_session_placement(self, *args, **kwargs):
        __protego_used['gamelift']['stop_game_session_placement']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["PlacementId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "StopGameSessionPlacement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_matchmaking(self, *args, **kwargs):
        __protego_used['gamelift']['stop_matchmaking']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["TicketId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "StopMatchmaking", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['gamelift']['tag_resource']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['gamelift']['untag_resource']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_alias(self, *args, **kwargs):
        __protego_used['gamelift']['update_alias']=['gamelift:UpdateAlias']
        for p in ['gamelift:UpdateAlias']:
            res = {}
            for nm in ["AliasId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "UpdateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_build(self, *args, **kwargs):
        __protego_used['gamelift']['update_build']=['gamelift:UpdateBuild']
        for p in ['gamelift:UpdateBuild']:
            res = {}
            for nm in ["BuildId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "UpdateBuild", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_fleet_attributes(self, *args, **kwargs):
        __protego_used['gamelift']['update_fleet_attributes']=['gamelift:UpdateFleetAttributes']
        for p in ['gamelift:UpdateFleetAttributes']:
            res = {}
            for nm in ["FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "UpdateFleetAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_fleet_capacity(self, *args, **kwargs):
        __protego_used['gamelift']['update_fleet_capacity']=['gamelift:UpdateFleetCapacity']
        for p in ['gamelift:UpdateFleetCapacity']:
            res = {}
            for nm in ["FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "UpdateFleetCapacity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_fleet_port_settings(self, *args, **kwargs):
        __protego_used['gamelift']['update_fleet_port_settings']=['gamelift:UpdateFleetPortSettings']
        for p in ['gamelift:UpdateFleetPortSettings']:
            res = {}
            for nm in ["FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "UpdateFleetPortSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_game_session(self, *args, **kwargs):
        __protego_used['gamelift']['update_game_session']=['gamelift:UpdateGameSession']
        for p in ['gamelift:UpdateGameSession']:
            res = {}
            for nm in ["GameSessionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "UpdateGameSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_game_session_queue(self, *args, **kwargs):
        __protego_used['gamelift']['update_game_session_queue']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "UpdateGameSessionQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_matchmaking_configuration(self, *args, **kwargs):
        __protego_used['gamelift']['update_matchmaking_configuration']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "UpdateMatchmakingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_runtime_configuration(self, *args, **kwargs):
        __protego_used['gamelift']['update_runtime_configuration']=['gamelift:UpdateRuntimeConfiguration']
        for p in ['gamelift:UpdateRuntimeConfiguration']:
            res = {}
            for nm in ["RuntimeConfiguration","FleetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "UpdateRuntimeConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_script(self, *args, **kwargs):
        __protego_used['gamelift']['update_script']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["ScriptId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "UpdateScript", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def validate_matchmaking_rule_set(self, *args, **kwargs):
        __protego_used['gamelift']['validate_matchmaking_rule_set']=['gamelift:*']
        for p in ['gamelift:*']:
            res = {}
            for nm in ["RuleSetBody"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['gamelift'].append({'action': "ValidateMatchmakingRuleSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class glacier:
    def __init__(self, region_name=__default_region):
        __protego_used['glacier']= __protego_used.get('glacier', {})
        __protego_resource_map['glacier']=__protego_resource_map.get('glacier', [])
        self.region = region_name
    def abort_multipart_upload(self, *args, **kwargs):
        __protego_used['glacier']['abort_multipart_upload']=['glacier:AbortMultipartUpload']
        for p in ['glacier:AbortMultipartUpload']:
            res = {}
            for nm in ["uploadId","vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "AbortMultipartUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def abort_vault_lock(self, *args, **kwargs):
        __protego_used['glacier']['abort_vault_lock']=['glacier:AbortVaultLock']
        for p in ['glacier:AbortVaultLock']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "AbortVaultLock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_tags_to_vault(self, *args, **kwargs):
        __protego_used['glacier']['add_tags_to_vault']=['glacier:AddTagsToVault']
        for p in ['glacier:AddTagsToVault']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "AddTagsToVault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def complete_multipart_upload(self, *args, **kwargs):
        __protego_used['glacier']['complete_multipart_upload']=['glacier:CompleteMultipartUpload']
        for p in ['glacier:CompleteMultipartUpload']:
            res = {}
            for nm in ["uploadId","vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "CompleteMultipartUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def complete_vault_lock(self, *args, **kwargs):
        __protego_used['glacier']['complete_vault_lock']=['glacier:CompleteVaultLock']
        for p in ['glacier:CompleteVaultLock']:
            res = {}
            for nm in ["vaultName","accountId","lockId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "CompleteVaultLock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vault(self, *args, **kwargs):
        __protego_used['glacier']['create_vault']=['glacier:CreateVault']
        for p in ['glacier:CreateVault']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "CreateVault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_archive(self, *args, **kwargs):
        __protego_used['glacier']['delete_archive']=['glacier:DeleteArchive']
        for p in ['glacier:DeleteArchive']:
            res = {}
            for nm in ["archiveId","vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "DeleteArchive", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vault(self, *args, **kwargs):
        __protego_used['glacier']['delete_vault']=['glacier:DeleteVault']
        for p in ['glacier:DeleteVault']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "DeleteVault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vault_access_policy(self, *args, **kwargs):
        __protego_used['glacier']['delete_vault_access_policy']=['glacier:DeleteVaultAccessPolicy']
        for p in ['glacier:DeleteVaultAccessPolicy']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "DeleteVaultAccessPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vault_notifications(self, *args, **kwargs):
        __protego_used['glacier']['delete_vault_notifications']=['glacier:DeleteVaultNotifications']
        for p in ['glacier:DeleteVaultNotifications']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "DeleteVaultNotifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_job(self, *args, **kwargs):
        __protego_used['glacier']['describe_job']=['glacier:DescribeJob']
        for p in ['glacier:DescribeJob']:
            res = {}
            for nm in ["jobId","vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "DescribeJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vault(self, *args, **kwargs):
        __protego_used['glacier']['describe_vault']=['glacier:DescribeVault']
        for p in ['glacier:DescribeVault']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "DescribeVault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_data_retrieval_policy(self, *args, **kwargs):
        __protego_used['glacier']['get_data_retrieval_policy']=['glacier:GetDataRetrievalPolicy']
        for p in ['glacier:GetDataRetrievalPolicy']:
            res = {}
            for nm in ["accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "GetDataRetrievalPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job_output(self, *args, **kwargs):
        __protego_used['glacier']['get_job_output']=['glacier:GetJobOutput']
        for p in ['glacier:GetJobOutput']:
            res = {}
            for nm in ["jobId","vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "GetJobOutput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_vault_access_policy(self, *args, **kwargs):
        __protego_used['glacier']['get_vault_access_policy']=['glacier:GetVaultAccessPolicy']
        for p in ['glacier:GetVaultAccessPolicy']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "GetVaultAccessPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_vault_lock(self, *args, **kwargs):
        __protego_used['glacier']['get_vault_lock']=['glacier:GetVaultLock']
        for p in ['glacier:GetVaultLock']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "GetVaultLock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_vault_notifications(self, *args, **kwargs):
        __protego_used['glacier']['get_vault_notifications']=['glacier:GetVaultNotifications']
        for p in ['glacier:GetVaultNotifications']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "GetVaultNotifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def initiate_job(self, *args, **kwargs):
        __protego_used['glacier']['initiate_job']=['glacier:InitiateJob']
        for p in ['glacier:InitiateJob']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "InitiateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def initiate_multipart_upload(self, *args, **kwargs):
        __protego_used['glacier']['initiate_multipart_upload']=['glacier:InitiateMultipartUpload']
        for p in ['glacier:InitiateMultipartUpload']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "InitiateMultipartUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def initiate_vault_lock(self, *args, **kwargs):
        __protego_used['glacier']['initiate_vault_lock']=['glacier:InitiateVaultLock']
        for p in ['glacier:InitiateVaultLock']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "InitiateVaultLock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs(self, *args, **kwargs):
        __protego_used['glacier']['list_jobs']=['glacier:ListJobs']
        for p in ['glacier:ListJobs']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "ListJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_multipart_uploads(self, *args, **kwargs):
        __protego_used['glacier']['list_multipart_uploads']=['glacier:ListMultipartUploads']
        for p in ['glacier:ListMultipartUploads']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "ListMultipartUploads", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_parts(self, *args, **kwargs):
        __protego_used['glacier']['list_parts']=['glacier:ListParts']
        for p in ['glacier:ListParts']:
            res = {}
            for nm in ["uploadId","vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "ListParts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_provisioned_capacity(self, *args, **kwargs):
        __protego_used['glacier']['list_provisioned_capacity']=['glacier:ListProvisionedCapacity']
        for p in ['glacier:ListProvisionedCapacity']:
            res = {}
            for nm in ["accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "ListProvisionedCapacity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_vault(self, *args, **kwargs):
        __protego_used['glacier']['list_tags_for_vault']=['glacier:ListTagsForVault']
        for p in ['glacier:ListTagsForVault']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "ListTagsForVault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_vaults(self, *args, **kwargs):
        __protego_used['glacier']['list_vaults']=['glacier:ListVaults']
        for p in ['glacier:ListVaults']:
            res = {}
            for nm in ["accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "ListVaults", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def purchase_provisioned_capacity(self, *args, **kwargs):
        __protego_used['glacier']['purchase_provisioned_capacity']=['glacier:PurchaseProvisionedCapacity']
        for p in ['glacier:PurchaseProvisionedCapacity']:
            res = {}
            for nm in ["accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "PurchaseProvisionedCapacity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_vault(self, *args, **kwargs):
        __protego_used['glacier']['remove_tags_from_vault']=['glacier:RemoveTagsFromVault']
        for p in ['glacier:RemoveTagsFromVault']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "RemoveTagsFromVault", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_data_retrieval_policy(self, *args, **kwargs):
        __protego_used['glacier']['set_data_retrieval_policy']=['glacier:SetDataRetrievalPolicy']
        for p in ['glacier:SetDataRetrievalPolicy']:
            res = {}
            for nm in ["accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "SetDataRetrievalPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_vault_access_policy(self, *args, **kwargs):
        __protego_used['glacier']['set_vault_access_policy']=['glacier:SetVaultAccessPolicy']
        for p in ['glacier:SetVaultAccessPolicy']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "SetVaultAccessPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_vault_notifications(self, *args, **kwargs):
        __protego_used['glacier']['set_vault_notifications']=['glacier:SetVaultNotifications']
        for p in ['glacier:SetVaultNotifications']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "SetVaultNotifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_archive(self, *args, **kwargs):
        __protego_used['glacier']['upload_archive']=['glacier:UploadArchive']
        for p in ['glacier:UploadArchive']:
            res = {}
            for nm in ["vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "UploadArchive", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_multipart_part(self, *args, **kwargs):
        __protego_used['glacier']['upload_multipart_part']=['glacier:UploadMultipartPart']
        for p in ['glacier:UploadMultipartPart']:
            res = {}
            for nm in ["uploadId","vaultName","accountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glacier'].append({'action': "UploadMultipartPart", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class globalaccelerator:
    def __init__(self, region_name=__default_region):
        __protego_used['globalaccelerator']= __protego_used.get('globalaccelerator', {})
        __protego_resource_map['globalaccelerator']=__protego_resource_map.get('globalaccelerator', [])
        self.region = region_name
    def create_accelerator(self, *args, **kwargs):
        __protego_used['globalaccelerator']['create_accelerator']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["IdempotencyToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "CreateAccelerator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_endpoint_group(self, *args, **kwargs):
        __protego_used['globalaccelerator']['create_endpoint_group']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["ListenerArn","IdempotencyToken","EndpointGroupRegion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "CreateEndpointGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_listener(self, *args, **kwargs):
        __protego_used['globalaccelerator']['create_listener']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["IdempotencyToken","Protocol","AcceleratorArn","PortRanges"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "CreateListener", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_accelerator(self, *args, **kwargs):
        __protego_used['globalaccelerator']['delete_accelerator']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["AcceleratorArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "DeleteAccelerator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_endpoint_group(self, *args, **kwargs):
        __protego_used['globalaccelerator']['delete_endpoint_group']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["EndpointGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "DeleteEndpointGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_listener(self, *args, **kwargs):
        __protego_used['globalaccelerator']['delete_listener']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["ListenerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "DeleteListener", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_accelerator(self, *args, **kwargs):
        __protego_used['globalaccelerator']['describe_accelerator']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["AcceleratorArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "DescribeAccelerator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_accelerator_attributes(self, *args, **kwargs):
        __protego_used['globalaccelerator']['describe_accelerator_attributes']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["AcceleratorArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "DescribeAcceleratorAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_endpoint_group(self, *args, **kwargs):
        __protego_used['globalaccelerator']['describe_endpoint_group']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["EndpointGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "DescribeEndpointGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_listener(self, *args, **kwargs):
        __protego_used['globalaccelerator']['describe_listener']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["ListenerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "DescribeListener", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_accelerators(self, *args, **kwargs):
        __protego_used['globalaccelerator']['list_accelerators']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "ListAccelerators", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_endpoint_groups(self, *args, **kwargs):
        __protego_used['globalaccelerator']['list_endpoint_groups']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["ListenerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "ListEndpointGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_listeners(self, *args, **kwargs):
        __protego_used['globalaccelerator']['list_listeners']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["AcceleratorArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "ListListeners", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_accelerator(self, *args, **kwargs):
        __protego_used['globalaccelerator']['update_accelerator']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["AcceleratorArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "UpdateAccelerator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_accelerator_attributes(self, *args, **kwargs):
        __protego_used['globalaccelerator']['update_accelerator_attributes']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["AcceleratorArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "UpdateAcceleratorAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_endpoint_group(self, *args, **kwargs):
        __protego_used['globalaccelerator']['update_endpoint_group']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["EndpointGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "UpdateEndpointGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_listener(self, *args, **kwargs):
        __protego_used['globalaccelerator']['update_listener']=['globalaccelerator:*']
        for p in ['globalaccelerator:*']:
            res = {}
            for nm in ["ListenerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['globalaccelerator'].append({'action': "UpdateListener", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class glue:
    def __init__(self, region_name=__default_region):
        __protego_used['glue']= __protego_used.get('glue', {})
        __protego_resource_map['glue']=__protego_resource_map.get('glue', [])
        self.region = region_name
    def batch_create_partition(self, *args, **kwargs):
        __protego_used['glue']['batch_create_partition']=['glue:BatchCreatePartition']
        for p in ['glue:BatchCreatePartition']:
            res = {}
            for nm in ["PartitionInputList","DatabaseName","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchCreatePartition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_delete_connection(self, *args, **kwargs):
        __protego_used['glue']['batch_delete_connection']=['glue:BatchDeleteConnection']
        for p in ['glue:BatchDeleteConnection']:
            res = {}
            for nm in ["ConnectionNameList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchDeleteConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_delete_partition(self, *args, **kwargs):
        __protego_used['glue']['batch_delete_partition']=['glue:BatchDeletePartition']
        for p in ['glue:BatchDeletePartition']:
            res = {}
            for nm in ["PartitionsToDelete","DatabaseName","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchDeletePartition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_delete_table(self, *args, **kwargs):
        __protego_used['glue']['batch_delete_table']=['glue:BatchDeleteTable']
        for p in ['glue:BatchDeleteTable']:
            res = {}
            for nm in ["TablesToDelete","DatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchDeleteTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_delete_table_version(self, *args, **kwargs):
        __protego_used['glue']['batch_delete_table_version']=['glue:BatchDeleteTableVersion']
        for p in ['glue:BatchDeleteTableVersion']:
            res = {}
            for nm in ["VersionIds","DatabaseName","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchDeleteTableVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_crawlers(self, *args, **kwargs):
        __protego_used['glue']['batch_get_crawlers']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["CrawlerNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchGetCrawlers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_dev_endpoints(self, *args, **kwargs):
        __protego_used['glue']['batch_get_dev_endpoints']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["DevEndpointNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchGetDevEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_jobs(self, *args, **kwargs):
        __protego_used['glue']['batch_get_jobs']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["JobNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchGetJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_partition(self, *args, **kwargs):
        __protego_used['glue']['batch_get_partition']=['glue:BatchGetPartition']
        for p in ['glue:BatchGetPartition']:
            res = {}
            for nm in ["DatabaseName","TableName","PartitionsToGet"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchGetPartition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_triggers(self, *args, **kwargs):
        __protego_used['glue']['batch_get_triggers']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["TriggerNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchGetTriggers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_get_workflows(self, *args, **kwargs):
        __protego_used['glue']['batch_get_workflows']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["Names"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchGetWorkflows", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_stop_job_run(self, *args, **kwargs):
        __protego_used['glue']['batch_stop_job_run']=['glue:BatchStopJobRun']
        for p in ['glue:BatchStopJobRun']:
            res = {}
            for nm in ["JobRunIds","JobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "BatchStopJobRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_ml_task_run(self, *args, **kwargs):
        __protego_used['glue']['cancel_ml_task_run']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["TransformId","TaskRunId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CancelMLTaskRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_classifier(self, *args, **kwargs):
        __protego_used['glue']['create_classifier']=['glue:CreateClassifier']
        for p in ['glue:CreateClassifier']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateClassifier", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_connection(self, *args, **kwargs):
        __protego_used['glue']['create_connection']=['glue:CreateConnection']
        for p in ['glue:CreateConnection']:
            res = {}
            for nm in ["ConnectionInput"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_crawler(self, *args, **kwargs):
        __protego_used['glue']['create_crawler']=['glue:CreateCrawler']
        for p in ['glue:CreateCrawler']:
            res = {}
            for nm in ["Targets","Role","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateCrawler", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_database(self, *args, **kwargs):
        __protego_used['glue']['create_database']=['glue:CreateDatabase']
        for p in ['glue:CreateDatabase']:
            res = {}
            for nm in ["DatabaseInput"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateDatabase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dev_endpoint(self, *args, **kwargs):
        __protego_used['glue']['create_dev_endpoint']=['glue:CreateDevEndpoint']
        for p in ['glue:CreateDevEndpoint']:
            res = {}
            for nm in ["RoleArn","EndpointName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateDevEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_job(self, *args, **kwargs):
        __protego_used['glue']['create_job']=['glue:CreateJob']
        for p in ['glue:CreateJob']:
            res = {}
            for nm in ["Command","Role","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_ml_transform(self, *args, **kwargs):
        __protego_used['glue']['create_ml_transform']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["Parameters","InputRecordTables","Role","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateMLTransform", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_partition(self, *args, **kwargs):
        __protego_used['glue']['create_partition']=['glue:CreatePartition']
        for p in ['glue:CreatePartition']:
            res = {}
            for nm in ["PartitionInput","DatabaseName","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreatePartition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_script(self, *args, **kwargs):
        __protego_used['glue']['create_script']=['glue:CreateScript']
        for p in ['glue:CreateScript']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateScript", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_security_configuration(self, *args, **kwargs):
        __protego_used['glue']['create_security_configuration']=['glue:CreateSecurityConfiguration']
        for p in ['glue:CreateSecurityConfiguration']:
            res = {}
            for nm in ["EncryptionConfiguration","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateSecurityConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_table(self, *args, **kwargs):
        __protego_used['glue']['create_table']=['glue:CreateTable']
        for p in ['glue:CreateTable']:
            res = {}
            for nm in ["TableInput","DatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_trigger(self, *args, **kwargs):
        __protego_used['glue']['create_trigger']=['glue:CreateTrigger']
        for p in ['glue:CreateTrigger']:
            res = {}
            for nm in ["Actions","Type","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateTrigger", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user_defined_function(self, *args, **kwargs):
        __protego_used['glue']['create_user_defined_function']=['glue:CreateUserDefinedFunction']
        for p in ['glue:CreateUserDefinedFunction']:
            res = {}
            for nm in ["FunctionInput","DatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateUserDefinedFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_workflow(self, *args, **kwargs):
        __protego_used['glue']['create_workflow']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "CreateWorkflow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_classifier(self, *args, **kwargs):
        __protego_used['glue']['delete_classifier']=['glue:DeleteClassifier']
        for p in ['glue:DeleteClassifier']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteClassifier", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_connection(self, *args, **kwargs):
        __protego_used['glue']['delete_connection']=['glue:DeleteConnection']
        for p in ['glue:DeleteConnection']:
            res = {}
            for nm in ["ConnectionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_crawler(self, *args, **kwargs):
        __protego_used['glue']['delete_crawler']=['glue:DeleteCrawler']
        for p in ['glue:DeleteCrawler']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteCrawler", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_database(self, *args, **kwargs):
        __protego_used['glue']['delete_database']=['glue:DeleteDatabase']
        for p in ['glue:DeleteDatabase']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteDatabase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dev_endpoint(self, *args, **kwargs):
        __protego_used['glue']['delete_dev_endpoint']=['glue:DeleteDevEndpoint']
        for p in ['glue:DeleteDevEndpoint']:
            res = {}
            for nm in ["EndpointName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteDevEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_job(self, *args, **kwargs):
        __protego_used['glue']['delete_job']=['glue:DeleteJob']
        for p in ['glue:DeleteJob']:
            res = {}
            for nm in ["JobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ml_transform(self, *args, **kwargs):
        __protego_used['glue']['delete_ml_transform']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["TransformId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteMLTransform", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_partition(self, *args, **kwargs):
        __protego_used['glue']['delete_partition']=['glue:DeletePartition']
        for p in ['glue:DeletePartition']:
            res = {}
            for nm in ["PartitionValues","DatabaseName","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeletePartition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resource_policy(self, *args, **kwargs):
        __protego_used['glue']['delete_resource_policy']=['glue:DeleteResourcePolicy']
        for p in ['glue:DeleteResourcePolicy']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteResourcePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_security_configuration(self, *args, **kwargs):
        __protego_used['glue']['delete_security_configuration']=['glue:DeleteSecurityConfiguration']
        for p in ['glue:DeleteSecurityConfiguration']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteSecurityConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_table(self, *args, **kwargs):
        __protego_used['glue']['delete_table']=['glue:DeleteTable']
        for p in ['glue:DeleteTable']:
            res = {}
            for nm in ["DatabaseName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_table_version(self, *args, **kwargs):
        __protego_used['glue']['delete_table_version']=['glue:DeleteTableVersion']
        for p in ['glue:DeleteTableVersion']:
            res = {}
            for nm in ["VersionId","DatabaseName","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteTableVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_trigger(self, *args, **kwargs):
        __protego_used['glue']['delete_trigger']=['glue:DeleteTrigger']
        for p in ['glue:DeleteTrigger']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteTrigger", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_defined_function(self, *args, **kwargs):
        __protego_used['glue']['delete_user_defined_function']=['glue:DeleteUserDefinedFunction']
        for p in ['glue:DeleteUserDefinedFunction']:
            res = {}
            for nm in ["DatabaseName","FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteUserDefinedFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_workflow(self, *args, **kwargs):
        __protego_used['glue']['delete_workflow']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "DeleteWorkflow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_catalog_import_status(self, *args, **kwargs):
        __protego_used['glue']['get_catalog_import_status']=['glue:GetCatalogImportStatus']
        for p in ['glue:GetCatalogImportStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetCatalogImportStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_classifier(self, *args, **kwargs):
        __protego_used['glue']['get_classifier']=['glue:GetClassifier']
        for p in ['glue:GetClassifier']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetClassifier", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_classifiers(self, *args, **kwargs):
        __protego_used['glue']['get_classifiers']=['glue:GetClassifiers']
        for p in ['glue:GetClassifiers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetClassifiers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_connection(self, *args, **kwargs):
        __protego_used['glue']['get_connection']=['glue:GetConnection']
        for p in ['glue:GetConnection']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_connections(self, *args, **kwargs):
        __protego_used['glue']['get_connections']=['glue:GetConnections']
        for p in ['glue:GetConnections']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetConnections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_crawler(self, *args, **kwargs):
        __protego_used['glue']['get_crawler']=['glue:GetCrawler']
        for p in ['glue:GetCrawler']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetCrawler", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_crawler_metrics(self, *args, **kwargs):
        __protego_used['glue']['get_crawler_metrics']=['glue:GetCrawlerMetrics']
        for p in ['glue:GetCrawlerMetrics']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetCrawlerMetrics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_crawlers(self, *args, **kwargs):
        __protego_used['glue']['get_crawlers']=['glue:GetCrawlers']
        for p in ['glue:GetCrawlers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetCrawlers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_data_catalog_encryption_settings(self, *args, **kwargs):
        __protego_used['glue']['get_data_catalog_encryption_settings']=['glue:GetDataCatalogEncryptionSettings']
        for p in ['glue:GetDataCatalogEncryptionSettings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetDataCatalogEncryptionSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_database(self, *args, **kwargs):
        __protego_used['glue']['get_database']=['glue:GetDatabase']
        for p in ['glue:GetDatabase']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetDatabase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_databases(self, *args, **kwargs):
        __protego_used['glue']['get_databases']=['glue:GetDatabases']
        for p in ['glue:GetDatabases']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetDatabases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dataflow_graph(self, *args, **kwargs):
        __protego_used['glue']['get_dataflow_graph']=['glue:GetDataflowGraph']
        for p in ['glue:GetDataflowGraph']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetDataflowGraph", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dev_endpoint(self, *args, **kwargs):
        __protego_used['glue']['get_dev_endpoint']=['glue:GetDevEndpoint']
        for p in ['glue:GetDevEndpoint']:
            res = {}
            for nm in ["EndpointName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetDevEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dev_endpoints(self, *args, **kwargs):
        __protego_used['glue']['get_dev_endpoints']=['glue:GetDevEndpoints']
        for p in ['glue:GetDevEndpoints']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetDevEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job(self, *args, **kwargs):
        __protego_used['glue']['get_job']=['glue:GetJob']
        for p in ['glue:GetJob']:
            res = {}
            for nm in ["JobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job_bookmark(self, *args, **kwargs):
        __protego_used['glue']['get_job_bookmark']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["JobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetJobBookmark", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job_run(self, *args, **kwargs):
        __protego_used['glue']['get_job_run']=['glue:GetJobRun']
        for p in ['glue:GetJobRun']:
            res = {}
            for nm in ["RunId","JobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetJobRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job_runs(self, *args, **kwargs):
        __protego_used['glue']['get_job_runs']=['glue:GetJobRuns']
        for p in ['glue:GetJobRuns']:
            res = {}
            for nm in ["JobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetJobRuns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_jobs(self, *args, **kwargs):
        __protego_used['glue']['get_jobs']=['glue:GetJobs']
        for p in ['glue:GetJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ml_task_run(self, *args, **kwargs):
        __protego_used['glue']['get_ml_task_run']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["TransformId","TaskRunId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetMLTaskRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ml_task_runs(self, *args, **kwargs):
        __protego_used['glue']['get_ml_task_runs']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["TransformId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetMLTaskRuns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ml_transform(self, *args, **kwargs):
        __protego_used['glue']['get_ml_transform']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["TransformId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetMLTransform", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ml_transforms(self, *args, **kwargs):
        __protego_used['glue']['get_ml_transforms']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetMLTransforms", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_mapping(self, *args, **kwargs):
        __protego_used['glue']['get_mapping']=['glue:GetMapping']
        for p in ['glue:GetMapping']:
            res = {}
            for nm in ["Source"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_partition(self, *args, **kwargs):
        __protego_used['glue']['get_partition']=['glue:GetPartition']
        for p in ['glue:GetPartition']:
            res = {}
            for nm in ["PartitionValues","DatabaseName","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetPartition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_partitions(self, *args, **kwargs):
        __protego_used['glue']['get_partitions']=['glue:GetPartitions']
        for p in ['glue:GetPartitions']:
            res = {}
            for nm in ["DatabaseName","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetPartitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_plan(self, *args, **kwargs):
        __protego_used['glue']['get_plan']=['glue:GetPlan']
        for p in ['glue:GetPlan']:
            res = {}
            for nm in ["Mapping","Source"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource_policy(self, *args, **kwargs):
        __protego_used['glue']['get_resource_policy']=['glue:GetResourcePolicy']
        for p in ['glue:GetResourcePolicy']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetResourcePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_security_configuration(self, *args, **kwargs):
        __protego_used['glue']['get_security_configuration']=['glue:GetSecurityConfiguration']
        for p in ['glue:GetSecurityConfiguration']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetSecurityConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_security_configurations(self, *args, **kwargs):
        __protego_used['glue']['get_security_configurations']=['glue:GetSecurityConfigurations']
        for p in ['glue:GetSecurityConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetSecurityConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_table(self, *args, **kwargs):
        __protego_used['glue']['get_table']=['glue:GetTable']
        for p in ['glue:GetTable']:
            res = {}
            for nm in ["DatabaseName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_table_version(self, *args, **kwargs):
        __protego_used['glue']['get_table_version']=['glue:GetTableVersion']
        for p in ['glue:GetTableVersion']:
            res = {}
            for nm in ["DatabaseName","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetTableVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_table_versions(self, *args, **kwargs):
        __protego_used['glue']['get_table_versions']=['glue:GetTableVersions']
        for p in ['glue:GetTableVersions']:
            res = {}
            for nm in ["DatabaseName","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetTableVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_tables(self, *args, **kwargs):
        __protego_used['glue']['get_tables']=['glue:GetTables']
        for p in ['glue:GetTables']:
            res = {}
            for nm in ["DatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetTables", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_tags(self, *args, **kwargs):
        __protego_used['glue']['get_tags']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_trigger(self, *args, **kwargs):
        __protego_used['glue']['get_trigger']=['glue:GetTrigger']
        for p in ['glue:GetTrigger']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetTrigger", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_triggers(self, *args, **kwargs):
        __protego_used['glue']['get_triggers']=['glue:GetTriggers']
        for p in ['glue:GetTriggers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetTriggers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_user_defined_function(self, *args, **kwargs):
        __protego_used['glue']['get_user_defined_function']=['glue:GetUserDefinedFunction']
        for p in ['glue:GetUserDefinedFunction']:
            res = {}
            for nm in ["DatabaseName","FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetUserDefinedFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_user_defined_functions(self, *args, **kwargs):
        __protego_used['glue']['get_user_defined_functions']=['glue:GetUserDefinedFunctions']
        for p in ['glue:GetUserDefinedFunctions']:
            res = {}
            for nm in ["Pattern","DatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetUserDefinedFunctions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_workflow(self, *args, **kwargs):
        __protego_used['glue']['get_workflow']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetWorkflow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_workflow_run(self, *args, **kwargs):
        __protego_used['glue']['get_workflow_run']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["RunId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetWorkflowRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_workflow_run_properties(self, *args, **kwargs):
        __protego_used['glue']['get_workflow_run_properties']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["RunId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetWorkflowRunProperties", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_workflow_runs(self, *args, **kwargs):
        __protego_used['glue']['get_workflow_runs']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "GetWorkflowRuns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_catalog_to_glue(self, *args, **kwargs):
        __protego_used['glue']['import_catalog_to_glue']=['glue:ImportCatalogToGlue']
        for p in ['glue:ImportCatalogToGlue']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "ImportCatalogToGlue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_crawlers(self, *args, **kwargs):
        __protego_used['glue']['list_crawlers']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "ListCrawlers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dev_endpoints(self, *args, **kwargs):
        __protego_used['glue']['list_dev_endpoints']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "ListDevEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs(self, *args, **kwargs):
        __protego_used['glue']['list_jobs']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "ListJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_triggers(self, *args, **kwargs):
        __protego_used['glue']['list_triggers']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "ListTriggers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_workflows(self, *args, **kwargs):
        __protego_used['glue']['list_workflows']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "ListWorkflows", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_data_catalog_encryption_settings(self, *args, **kwargs):
        __protego_used['glue']['put_data_catalog_encryption_settings']=['glue:PutDataCatalogEncryptionSettings']
        for p in ['glue:PutDataCatalogEncryptionSettings']:
            res = {}
            for nm in ["DataCatalogEncryptionSettings"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "PutDataCatalogEncryptionSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_resource_policy(self, *args, **kwargs):
        __protego_used['glue']['put_resource_policy']=['glue:PutResourcePolicy']
        for p in ['glue:PutResourcePolicy']:
            res = {}
            for nm in ["PolicyInJson"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "PutResourcePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_workflow_run_properties(self, *args, **kwargs):
        __protego_used['glue']['put_workflow_run_properties']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["RunId","Name","RunProperties"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "PutWorkflowRunProperties", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_job_bookmark(self, *args, **kwargs):
        __protego_used['glue']['reset_job_bookmark']=['glue:ResetJobBookmark']
        for p in ['glue:ResetJobBookmark']:
            res = {}
            for nm in ["JobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "ResetJobBookmark", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_tables(self, *args, **kwargs):
        __protego_used['glue']['search_tables']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "SearchTables", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_crawler(self, *args, **kwargs):
        __protego_used['glue']['start_crawler']=['glue:StartCrawler']
        for p in ['glue:StartCrawler']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StartCrawler", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_crawler_schedule(self, *args, **kwargs):
        __protego_used['glue']['start_crawler_schedule']=['glue:StartCrawlerSchedule']
        for p in ['glue:StartCrawlerSchedule']:
            res = {}
            for nm in ["CrawlerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StartCrawlerSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_export_labels_task_run(self, *args, **kwargs):
        __protego_used['glue']['start_export_labels_task_run']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["TransformId","OutputS3Path"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StartExportLabelsTaskRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_import_labels_task_run(self, *args, **kwargs):
        __protego_used['glue']['start_import_labels_task_run']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["TransformId","InputS3Path"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StartImportLabelsTaskRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_job_run(self, *args, **kwargs):
        __protego_used['glue']['start_job_run']=['glue:StartJobRun']
        for p in ['glue:StartJobRun']:
            res = {}
            for nm in ["JobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StartJobRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_ml_evaluation_task_run(self, *args, **kwargs):
        __protego_used['glue']['start_ml_evaluation_task_run']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["TransformId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StartMLEvaluationTaskRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_ml_labeling_set_generation_task_run(self, *args, **kwargs):
        __protego_used['glue']['start_ml_labeling_set_generation_task_run']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["TransformId","OutputS3Path"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StartMLLabelingSetGenerationTaskRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_trigger(self, *args, **kwargs):
        __protego_used['glue']['start_trigger']=['glue:StartTrigger']
        for p in ['glue:StartTrigger']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StartTrigger", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_workflow_run(self, *args, **kwargs):
        __protego_used['glue']['start_workflow_run']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StartWorkflowRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_crawler(self, *args, **kwargs):
        __protego_used['glue']['stop_crawler']=['glue:StopCrawler']
        for p in ['glue:StopCrawler']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StopCrawler", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_crawler_schedule(self, *args, **kwargs):
        __protego_used['glue']['stop_crawler_schedule']=['glue:StopCrawlerSchedule']
        for p in ['glue:StopCrawlerSchedule']:
            res = {}
            for nm in ["CrawlerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StopCrawlerSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_trigger(self, *args, **kwargs):
        __protego_used['glue']['stop_trigger']=['glue:StopTrigger']
        for p in ['glue:StopTrigger']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "StopTrigger", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['glue']['tag_resource']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["ResourceArn","TagsToAdd"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['glue']['untag_resource']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["ResourceArn","TagsToRemove"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_classifier(self, *args, **kwargs):
        __protego_used['glue']['update_classifier']=['glue:UpdateClassifier']
        for p in ['glue:UpdateClassifier']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateClassifier", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_connection(self, *args, **kwargs):
        __protego_used['glue']['update_connection']=['glue:UpdateConnection']
        for p in ['glue:UpdateConnection']:
            res = {}
            for nm in ["ConnectionInput","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateConnection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_crawler(self, *args, **kwargs):
        __protego_used['glue']['update_crawler']=['glue:UpdateCrawler']
        for p in ['glue:UpdateCrawler']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateCrawler", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_crawler_schedule(self, *args, **kwargs):
        __protego_used['glue']['update_crawler_schedule']=['glue:UpdateCrawlerSchedule']
        for p in ['glue:UpdateCrawlerSchedule']:
            res = {}
            for nm in ["CrawlerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateCrawlerSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_database(self, *args, **kwargs):
        __protego_used['glue']['update_database']=['glue:UpdateDatabase']
        for p in ['glue:UpdateDatabase']:
            res = {}
            for nm in ["DatabaseInput","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateDatabase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_dev_endpoint(self, *args, **kwargs):
        __protego_used['glue']['update_dev_endpoint']=['glue:UpdateDevEndpoint']
        for p in ['glue:UpdateDevEndpoint']:
            res = {}
            for nm in ["EndpointName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateDevEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_job(self, *args, **kwargs):
        __protego_used['glue']['update_job']=['glue:UpdateJob']
        for p in ['glue:UpdateJob']:
            res = {}
            for nm in ["JobUpdate","JobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_ml_transform(self, *args, **kwargs):
        __protego_used['glue']['update_ml_transform']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["TransformId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateMLTransform", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_partition(self, *args, **kwargs):
        __protego_used['glue']['update_partition']=['glue:UpdatePartition']
        for p in ['glue:UpdatePartition']:
            res = {}
            for nm in ["PartitionValueList","DatabaseName","PartitionInput","TableName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdatePartition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_table(self, *args, **kwargs):
        __protego_used['glue']['update_table']=['glue:UpdateTable']
        for p in ['glue:UpdateTable']:
            res = {}
            for nm in ["TableInput","DatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateTable", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_trigger(self, *args, **kwargs):
        __protego_used['glue']['update_trigger']=['glue:UpdateTrigger']
        for p in ['glue:UpdateTrigger']:
            res = {}
            for nm in ["TriggerUpdate","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateTrigger", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_defined_function(self, *args, **kwargs):
        __protego_used['glue']['update_user_defined_function']=['glue:UpdateUserDefinedFunction']
        for p in ['glue:UpdateUserDefinedFunction']:
            res = {}
            for nm in ["FunctionInput","DatabaseName","FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateUserDefinedFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_workflow(self, *args, **kwargs):
        __protego_used['glue']['update_workflow']=['glue:*']
        for p in ['glue:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['glue'].append({'action': "UpdateWorkflow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class greengrass:
    def __init__(self, region_name=__default_region):
        __protego_used['greengrass']= __protego_used.get('greengrass', {})
        __protego_resource_map['greengrass']=__protego_resource_map.get('greengrass', [])
        self.region = region_name
    def associate_role_to_group(self, *args, **kwargs):
        __protego_used['greengrass']['associate_role_to_group']=['greengrass:AssociateRoleToGroup']
        for p in ['greengrass:AssociateRoleToGroup']:
            res = {}
            for nm in ["RoleArn","GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "AssociateRoleToGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_service_role_to_account(self, *args, **kwargs):
        __protego_used['greengrass']['associate_service_role_to_account']=['greengrass:AssociateServiceRoleToAccount']
        for p in ['greengrass:AssociateServiceRoleToAccount']:
            res = {}
            for nm in ["RoleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "AssociateServiceRoleToAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_connector_definition(self, *args, **kwargs):
        __protego_used['greengrass']['create_connector_definition']=['greengrass:CreateConnectorDefinition']
        for p in ['greengrass:CreateConnectorDefinition']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateConnectorDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_connector_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['create_connector_definition_version']=['greengrass:CreateConnectorDefinitionVersion']
        for p in ['greengrass:CreateConnectorDefinitionVersion']:
            res = {}
            for nm in ["ConnectorDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateConnectorDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_core_definition(self, *args, **kwargs):
        __protego_used['greengrass']['create_core_definition']=['greengrass:CreateCoreDefinition']
        for p in ['greengrass:CreateCoreDefinition']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateCoreDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_core_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['create_core_definition_version']=['greengrass:CreateCoreDefinitionVersion']
        for p in ['greengrass:CreateCoreDefinitionVersion']:
            res = {}
            for nm in ["CoreDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateCoreDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deployment(self, *args, **kwargs):
        __protego_used['greengrass']['create_deployment']=['greengrass:CreateDeployment']
        for p in ['greengrass:CreateDeployment']:
            res = {}
            for nm in ["GroupId","DeploymentType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_device_definition(self, *args, **kwargs):
        __protego_used['greengrass']['create_device_definition']=['greengrass:CreateDeviceDefinition']
        for p in ['greengrass:CreateDeviceDefinition']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateDeviceDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_device_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['create_device_definition_version']=['greengrass:CreateDeviceDefinitionVersion']
        for p in ['greengrass:CreateDeviceDefinitionVersion']:
            res = {}
            for nm in ["DeviceDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateDeviceDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_function_definition(self, *args, **kwargs):
        __protego_used['greengrass']['create_function_definition']=['greengrass:CreateFunctionDefinition']
        for p in ['greengrass:CreateFunctionDefinition']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateFunctionDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_function_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['create_function_definition_version']=['greengrass:CreateFunctionDefinitionVersion']
        for p in ['greengrass:CreateFunctionDefinitionVersion']:
            res = {}
            for nm in ["FunctionDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateFunctionDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_group(self, *args, **kwargs):
        __protego_used['greengrass']['create_group']=['greengrass:CreateGroup']
        for p in ['greengrass:CreateGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_group_certificate_authority(self, *args, **kwargs):
        __protego_used['greengrass']['create_group_certificate_authority']=['greengrass:CreateGroupCertificateAuthority']
        for p in ['greengrass:CreateGroupCertificateAuthority']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateGroupCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_group_version(self, *args, **kwargs):
        __protego_used['greengrass']['create_group_version']=['greengrass:CreateGroupVersion']
        for p in ['greengrass:CreateGroupVersion']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateGroupVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_logger_definition(self, *args, **kwargs):
        __protego_used['greengrass']['create_logger_definition']=['greengrass:CreateLoggerDefinition']
        for p in ['greengrass:CreateLoggerDefinition']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateLoggerDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_logger_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['create_logger_definition_version']=['greengrass:CreateLoggerDefinitionVersion']
        for p in ['greengrass:CreateLoggerDefinitionVersion']:
            res = {}
            for nm in ["LoggerDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateLoggerDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_resource_definition(self, *args, **kwargs):
        __protego_used['greengrass']['create_resource_definition']=['greengrass:CreateResourceDefinition']
        for p in ['greengrass:CreateResourceDefinition']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateResourceDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_resource_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['create_resource_definition_version']=['greengrass:CreateResourceDefinitionVersion']
        for p in ['greengrass:CreateResourceDefinitionVersion']:
            res = {}
            for nm in ["ResourceDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateResourceDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_software_update_job(self, *args, **kwargs):
        __protego_used['greengrass']['create_software_update_job']=['greengrass:CreateSoftwareUpdateJob']
        for p in ['greengrass:CreateSoftwareUpdateJob']:
            res = {}
            for nm in ["SoftwareToUpdate","S3UrlSignerRole","UpdateTargetsOperatingSystem","UpdateTargets","UpdateTargetsArchitecture"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateSoftwareUpdateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_subscription_definition(self, *args, **kwargs):
        __protego_used['greengrass']['create_subscription_definition']=['greengrass:CreateSubscriptionDefinition']
        for p in ['greengrass:CreateSubscriptionDefinition']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateSubscriptionDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_subscription_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['create_subscription_definition_version']=['greengrass:CreateSubscriptionDefinitionVersion']
        for p in ['greengrass:CreateSubscriptionDefinitionVersion']:
            res = {}
            for nm in ["SubscriptionDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "CreateSubscriptionDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_connector_definition(self, *args, **kwargs):
        __protego_used['greengrass']['delete_connector_definition']=['greengrass:DeleteConnectorDefinition']
        for p in ['greengrass:DeleteConnectorDefinition']:
            res = {}
            for nm in ["ConnectorDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "DeleteConnectorDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_core_definition(self, *args, **kwargs):
        __protego_used['greengrass']['delete_core_definition']=['greengrass:DeleteCoreDefinition']
        for p in ['greengrass:DeleteCoreDefinition']:
            res = {}
            for nm in ["CoreDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "DeleteCoreDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_device_definition(self, *args, **kwargs):
        __protego_used['greengrass']['delete_device_definition']=['greengrass:DeleteDeviceDefinition']
        for p in ['greengrass:DeleteDeviceDefinition']:
            res = {}
            for nm in ["DeviceDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "DeleteDeviceDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_function_definition(self, *args, **kwargs):
        __protego_used['greengrass']['delete_function_definition']=['greengrass:DeleteFunctionDefinition']
        for p in ['greengrass:DeleteFunctionDefinition']:
            res = {}
            for nm in ["FunctionDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "DeleteFunctionDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_group(self, *args, **kwargs):
        __protego_used['greengrass']['delete_group']=['greengrass:DeleteGroup']
        for p in ['greengrass:DeleteGroup']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "DeleteGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_logger_definition(self, *args, **kwargs):
        __protego_used['greengrass']['delete_logger_definition']=['greengrass:DeleteLoggerDefinition']
        for p in ['greengrass:DeleteLoggerDefinition']:
            res = {}
            for nm in ["LoggerDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "DeleteLoggerDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resource_definition(self, *args, **kwargs):
        __protego_used['greengrass']['delete_resource_definition']=['greengrass:DeleteResourceDefinition']
        for p in ['greengrass:DeleteResourceDefinition']:
            res = {}
            for nm in ["ResourceDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "DeleteResourceDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_subscription_definition(self, *args, **kwargs):
        __protego_used['greengrass']['delete_subscription_definition']=['greengrass:DeleteSubscriptionDefinition']
        for p in ['greengrass:DeleteSubscriptionDefinition']:
            res = {}
            for nm in ["SubscriptionDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "DeleteSubscriptionDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_role_from_group(self, *args, **kwargs):
        __protego_used['greengrass']['disassociate_role_from_group']=['greengrass:DisassociateRoleFromGroup']
        for p in ['greengrass:DisassociateRoleFromGroup']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "DisassociateRoleFromGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_service_role_from_account(self, *args, **kwargs):
        __protego_used['greengrass']['disassociate_service_role_from_account']=['greengrass:DisassociateServiceRoleFromAccount']
        for p in ['greengrass:DisassociateServiceRoleFromAccount']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "DisassociateServiceRoleFromAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_associated_role(self, *args, **kwargs):
        __protego_used['greengrass']['get_associated_role']=['greengrass:GetAssociatedRole']
        for p in ['greengrass:GetAssociatedRole']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetAssociatedRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bulk_deployment_status(self, *args, **kwargs):
        __protego_used['greengrass']['get_bulk_deployment_status']=['greengrass:GetBulkDeploymentStatus']
        for p in ['greengrass:GetBulkDeploymentStatus']:
            res = {}
            for nm in ["BulkDeploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetBulkDeploymentStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_connectivity_info(self, *args, **kwargs):
        __protego_used['greengrass']['get_connectivity_info']=['greengrass:GetConnectivityInfo']
        for p in ['greengrass:GetConnectivityInfo']:
            res = {}
            for nm in ["ThingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetConnectivityInfo", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_connector_definition(self, *args, **kwargs):
        __protego_used['greengrass']['get_connector_definition']=['greengrass:GetConnectorDefinition']
        for p in ['greengrass:GetConnectorDefinition']:
            res = {}
            for nm in ["ConnectorDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetConnectorDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_connector_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['get_connector_definition_version']=['greengrass:GetConnectorDefinitionVersion','greengrass:GetConnectorDefinitionVersion']
        for p in ['greengrass:GetConnectorDefinitionVersion','greengrass:GetConnectorDefinitionVersion']:
            res = {}
            for nm in ["ConnectorDefinitionId","ConnectorDefinitionVersionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetConnectorDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_core_definition(self, *args, **kwargs):
        __protego_used['greengrass']['get_core_definition']=['greengrass:GetCoreDefinition']
        for p in ['greengrass:GetCoreDefinition']:
            res = {}
            for nm in ["CoreDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetCoreDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_core_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['get_core_definition_version']=['greengrass:GetCoreDefinitionVersion','greengrass:GetCoreDefinitionVersion']
        for p in ['greengrass:GetCoreDefinitionVersion','greengrass:GetCoreDefinitionVersion']:
            res = {}
            for nm in ["CoreDefinitionVersionId","CoreDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetCoreDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployment_status(self, *args, **kwargs):
        __protego_used['greengrass']['get_deployment_status']=['greengrass:GetDeploymentStatus','greengrass:GetDeploymentStatus']
        for p in ['greengrass:GetDeploymentStatus','greengrass:GetDeploymentStatus']:
            res = {}
            for nm in ["DeploymentId","GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetDeploymentStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_device_definition(self, *args, **kwargs):
        __protego_used['greengrass']['get_device_definition']=['greengrass:GetDeviceDefinition']
        for p in ['greengrass:GetDeviceDefinition']:
            res = {}
            for nm in ["DeviceDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetDeviceDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_device_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['get_device_definition_version']=['greengrass:GetDeviceDefinitionVersion','greengrass:GetDeviceDefinitionVersion']
        for p in ['greengrass:GetDeviceDefinitionVersion','greengrass:GetDeviceDefinitionVersion']:
            res = {}
            for nm in ["DeviceDefinitionVersionId","DeviceDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetDeviceDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_function_definition(self, *args, **kwargs):
        __protego_used['greengrass']['get_function_definition']=['greengrass:GetFunctionDefinition']
        for p in ['greengrass:GetFunctionDefinition']:
            res = {}
            for nm in ["FunctionDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetFunctionDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_function_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['get_function_definition_version']=['greengrass:GetFunctionDefinitionVersion','greengrass:GetFunctionDefinitionVersion']
        for p in ['greengrass:GetFunctionDefinitionVersion','greengrass:GetFunctionDefinitionVersion']:
            res = {}
            for nm in ["FunctionDefinitionVersionId","FunctionDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetFunctionDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_group(self, *args, **kwargs):
        __protego_used['greengrass']['get_group']=['greengrass:GetGroup']
        for p in ['greengrass:GetGroup']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_group_certificate_authority(self, *args, **kwargs):
        __protego_used['greengrass']['get_group_certificate_authority']=['greengrass:GetGroupCertificateAuthority','greengrass:GetGroupCertificateAuthority']
        for p in ['greengrass:GetGroupCertificateAuthority','greengrass:GetGroupCertificateAuthority']:
            res = {}
            for nm in ["CertificateAuthorityId","GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetGroupCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_group_certificate_configuration(self, *args, **kwargs):
        __protego_used['greengrass']['get_group_certificate_configuration']=['greengrass:GetGroupCertificateConfiguration']
        for p in ['greengrass:GetGroupCertificateConfiguration']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetGroupCertificateConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_group_version(self, *args, **kwargs):
        __protego_used['greengrass']['get_group_version']=['greengrass:GetGroupVersion','greengrass:GetGroupVersion']
        for p in ['greengrass:GetGroupVersion','greengrass:GetGroupVersion']:
            res = {}
            for nm in ["GroupVersionId","GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetGroupVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_logger_definition(self, *args, **kwargs):
        __protego_used['greengrass']['get_logger_definition']=['greengrass:GetLoggerDefinition']
        for p in ['greengrass:GetLoggerDefinition']:
            res = {}
            for nm in ["LoggerDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetLoggerDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_logger_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['get_logger_definition_version']=['greengrass:GetLoggerDefinitionVersion','greengrass:GetLoggerDefinitionVersion']
        for p in ['greengrass:GetLoggerDefinitionVersion','greengrass:GetLoggerDefinitionVersion']:
            res = {}
            for nm in ["LoggerDefinitionId","LoggerDefinitionVersionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetLoggerDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource_definition(self, *args, **kwargs):
        __protego_used['greengrass']['get_resource_definition']=['greengrass:GetResourceDefinition']
        for p in ['greengrass:GetResourceDefinition']:
            res = {}
            for nm in ["ResourceDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetResourceDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['get_resource_definition_version']=['greengrass:GetResourceDefinitionVersion','greengrass:GetResourceDefinitionVersion']
        for p in ['greengrass:GetResourceDefinitionVersion','greengrass:GetResourceDefinitionVersion']:
            res = {}
            for nm in ["ResourceDefinitionId","ResourceDefinitionVersionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetResourceDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_service_role_for_account(self, *args, **kwargs):
        __protego_used['greengrass']['get_service_role_for_account']=['greengrass:GetServiceRoleForAccount']
        for p in ['greengrass:GetServiceRoleForAccount']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetServiceRoleForAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_subscription_definition(self, *args, **kwargs):
        __protego_used['greengrass']['get_subscription_definition']=['greengrass:GetSubscriptionDefinition']
        for p in ['greengrass:GetSubscriptionDefinition']:
            res = {}
            for nm in ["SubscriptionDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetSubscriptionDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_subscription_definition_version(self, *args, **kwargs):
        __protego_used['greengrass']['get_subscription_definition_version']=['greengrass:GetSubscriptionDefinitionVersion','greengrass:GetSubscriptionDefinitionVersion']
        for p in ['greengrass:GetSubscriptionDefinitionVersion','greengrass:GetSubscriptionDefinitionVersion']:
            res = {}
            for nm in ["SubscriptionDefinitionId","SubscriptionDefinitionVersionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "GetSubscriptionDefinitionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_bulk_deployment_detailed_reports(self, *args, **kwargs):
        __protego_used['greengrass']['list_bulk_deployment_detailed_reports']=['greengrass:ListBulkDeploymentDetailedReports']
        for p in ['greengrass:ListBulkDeploymentDetailedReports']:
            res = {}
            for nm in ["BulkDeploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListBulkDeploymentDetailedReports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_bulk_deployments(self, *args, **kwargs):
        __protego_used['greengrass']['list_bulk_deployments']=['greengrass:ListBulkDeployments']
        for p in ['greengrass:ListBulkDeployments']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListBulkDeployments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_connector_definition_versions(self, *args, **kwargs):
        __protego_used['greengrass']['list_connector_definition_versions']=['greengrass:ListConnectorDefinitionVersions']
        for p in ['greengrass:ListConnectorDefinitionVersions']:
            res = {}
            for nm in ["ConnectorDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListConnectorDefinitionVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_connector_definitions(self, *args, **kwargs):
        __protego_used['greengrass']['list_connector_definitions']=['greengrass:ListConnectorDefinitions']
        for p in ['greengrass:ListConnectorDefinitions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListConnectorDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_core_definition_versions(self, *args, **kwargs):
        __protego_used['greengrass']['list_core_definition_versions']=['greengrass:ListCoreDefinitionVersions']
        for p in ['greengrass:ListCoreDefinitionVersions']:
            res = {}
            for nm in ["CoreDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListCoreDefinitionVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_core_definitions(self, *args, **kwargs):
        __protego_used['greengrass']['list_core_definitions']=['greengrass:ListCoreDefinitions']
        for p in ['greengrass:ListCoreDefinitions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListCoreDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_deployments(self, *args, **kwargs):
        __protego_used['greengrass']['list_deployments']=['greengrass:ListDeployments']
        for p in ['greengrass:ListDeployments']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListDeployments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_device_definition_versions(self, *args, **kwargs):
        __protego_used['greengrass']['list_device_definition_versions']=['greengrass:ListDeviceDefinitionVersions']
        for p in ['greengrass:ListDeviceDefinitionVersions']:
            res = {}
            for nm in ["DeviceDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListDeviceDefinitionVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_device_definitions(self, *args, **kwargs):
        __protego_used['greengrass']['list_device_definitions']=['greengrass:ListDeviceDefinitions']
        for p in ['greengrass:ListDeviceDefinitions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListDeviceDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_function_definition_versions(self, *args, **kwargs):
        __protego_used['greengrass']['list_function_definition_versions']=['greengrass:ListFunctionDefinitionVersions']
        for p in ['greengrass:ListFunctionDefinitionVersions']:
            res = {}
            for nm in ["FunctionDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListFunctionDefinitionVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_function_definitions(self, *args, **kwargs):
        __protego_used['greengrass']['list_function_definitions']=['greengrass:ListFunctionDefinitions']
        for p in ['greengrass:ListFunctionDefinitions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListFunctionDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_group_certificate_authorities(self, *args, **kwargs):
        __protego_used['greengrass']['list_group_certificate_authorities']=['greengrass:ListGroupCertificateAuthorities']
        for p in ['greengrass:ListGroupCertificateAuthorities']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListGroupCertificateAuthorities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_group_versions(self, *args, **kwargs):
        __protego_used['greengrass']['list_group_versions']=['greengrass:ListGroupVersions']
        for p in ['greengrass:ListGroupVersions']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListGroupVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_groups(self, *args, **kwargs):
        __protego_used['greengrass']['list_groups']=['greengrass:ListGroups']
        for p in ['greengrass:ListGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_logger_definition_versions(self, *args, **kwargs):
        __protego_used['greengrass']['list_logger_definition_versions']=['greengrass:ListLoggerDefinitionVersions']
        for p in ['greengrass:ListLoggerDefinitionVersions']:
            res = {}
            for nm in ["LoggerDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListLoggerDefinitionVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_logger_definitions(self, *args, **kwargs):
        __protego_used['greengrass']['list_logger_definitions']=['greengrass:ListLoggerDefinitions']
        for p in ['greengrass:ListLoggerDefinitions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListLoggerDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resource_definition_versions(self, *args, **kwargs):
        __protego_used['greengrass']['list_resource_definition_versions']=['greengrass:ListResourceDefinitionVersions']
        for p in ['greengrass:ListResourceDefinitionVersions']:
            res = {}
            for nm in ["ResourceDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListResourceDefinitionVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resource_definitions(self, *args, **kwargs):
        __protego_used['greengrass']['list_resource_definitions']=['greengrass:ListResourceDefinitions']
        for p in ['greengrass:ListResourceDefinitions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListResourceDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_subscription_definition_versions(self, *args, **kwargs):
        __protego_used['greengrass']['list_subscription_definition_versions']=['greengrass:ListSubscriptionDefinitionVersions']
        for p in ['greengrass:ListSubscriptionDefinitionVersions']:
            res = {}
            for nm in ["SubscriptionDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListSubscriptionDefinitionVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_subscription_definitions(self, *args, **kwargs):
        __protego_used['greengrass']['list_subscription_definitions']=['greengrass:ListSubscriptionDefinitions']
        for p in ['greengrass:ListSubscriptionDefinitions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListSubscriptionDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['greengrass']['list_tags_for_resource']=['greengrass:ListTagsForResource']
        for p in ['greengrass:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_deployments(self, *args, **kwargs):
        __protego_used['greengrass']['reset_deployments']=['greengrass:ResetDeployments']
        for p in ['greengrass:ResetDeployments']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "ResetDeployments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_bulk_deployment(self, *args, **kwargs):
        __protego_used['greengrass']['start_bulk_deployment']=['greengrass:StartBulkDeployment']
        for p in ['greengrass:StartBulkDeployment']:
            res = {}
            for nm in ["InputFileUri","ExecutionRoleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "StartBulkDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_bulk_deployment(self, *args, **kwargs):
        __protego_used['greengrass']['stop_bulk_deployment']=['greengrass:StopBulkDeployment']
        for p in ['greengrass:StopBulkDeployment']:
            res = {}
            for nm in ["BulkDeploymentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "StopBulkDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['greengrass']['tag_resource']=['greengrass:TagResource']
        for p in ['greengrass:TagResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['greengrass']['untag_resource']=['greengrass:UntagResource']
        for p in ['greengrass:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_connectivity_info(self, *args, **kwargs):
        __protego_used['greengrass']['update_connectivity_info']=['greengrass:UpdateConnectivityInfo']
        for p in ['greengrass:UpdateConnectivityInfo']:
            res = {}
            for nm in ["ThingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "UpdateConnectivityInfo", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_connector_definition(self, *args, **kwargs):
        __protego_used['greengrass']['update_connector_definition']=['greengrass:UpdateConnectorDefinition']
        for p in ['greengrass:UpdateConnectorDefinition']:
            res = {}
            for nm in ["ConnectorDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "UpdateConnectorDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_core_definition(self, *args, **kwargs):
        __protego_used['greengrass']['update_core_definition']=['greengrass:UpdateCoreDefinition']
        for p in ['greengrass:UpdateCoreDefinition']:
            res = {}
            for nm in ["CoreDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "UpdateCoreDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_device_definition(self, *args, **kwargs):
        __protego_used['greengrass']['update_device_definition']=['greengrass:UpdateDeviceDefinition']
        for p in ['greengrass:UpdateDeviceDefinition']:
            res = {}
            for nm in ["DeviceDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "UpdateDeviceDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_function_definition(self, *args, **kwargs):
        __protego_used['greengrass']['update_function_definition']=['greengrass:UpdateFunctionDefinition']
        for p in ['greengrass:UpdateFunctionDefinition']:
            res = {}
            for nm in ["FunctionDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "UpdateFunctionDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_group(self, *args, **kwargs):
        __protego_used['greengrass']['update_group']=['greengrass:UpdateGroup']
        for p in ['greengrass:UpdateGroup']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "UpdateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_group_certificate_configuration(self, *args, **kwargs):
        __protego_used['greengrass']['update_group_certificate_configuration']=['greengrass:UpdateGroupCertificateConfiguration']
        for p in ['greengrass:UpdateGroupCertificateConfiguration']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "UpdateGroupCertificateConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_logger_definition(self, *args, **kwargs):
        __protego_used['greengrass']['update_logger_definition']=['greengrass:UpdateLoggerDefinition']
        for p in ['greengrass:UpdateLoggerDefinition']:
            res = {}
            for nm in ["LoggerDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "UpdateLoggerDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_resource_definition(self, *args, **kwargs):
        __protego_used['greengrass']['update_resource_definition']=['greengrass:UpdateResourceDefinition']
        for p in ['greengrass:UpdateResourceDefinition']:
            res = {}
            for nm in ["ResourceDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "UpdateResourceDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_subscription_definition(self, *args, **kwargs):
        __protego_used['greengrass']['update_subscription_definition']=['greengrass:UpdateSubscriptionDefinition']
        for p in ['greengrass:UpdateSubscriptionDefinition']:
            res = {}
            for nm in ["SubscriptionDefinitionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['greengrass'].append({'action': "UpdateSubscriptionDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class groundstation:
    def __init__(self, region_name=__default_region):
        __protego_used['groundstation']= __protego_used.get('groundstation', {})
        __protego_resource_map['groundstation']=__protego_resource_map.get('groundstation', [])
        self.region = region_name
    def cancel_contact(self, *args, **kwargs):
        __protego_used['groundstation']['cancel_contact']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["contactId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "CancelContact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_config(self, *args, **kwargs):
        __protego_used['groundstation']['create_config']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["configData","name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "CreateConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dataflow_endpoint_group(self, *args, **kwargs):
        __protego_used['groundstation']['create_dataflow_endpoint_group']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["endpointDetails"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "CreateDataflowEndpointGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_mission_profile(self, *args, **kwargs):
        __protego_used['groundstation']['create_mission_profile']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["trackingConfigArn","name","dataflowEdges","minimumViableContactDurationSeconds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "CreateMissionProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_config(self, *args, **kwargs):
        __protego_used['groundstation']['delete_config']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["configId","configType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "DeleteConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dataflow_endpoint_group(self, *args, **kwargs):
        __protego_used['groundstation']['delete_dataflow_endpoint_group']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["dataflowEndpointGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "DeleteDataflowEndpointGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_mission_profile(self, *args, **kwargs):
        __protego_used['groundstation']['delete_mission_profile']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["missionProfileId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "DeleteMissionProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_contact(self, *args, **kwargs):
        __protego_used['groundstation']['describe_contact']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["contactId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "DescribeContact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_config(self, *args, **kwargs):
        __protego_used['groundstation']['get_config']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["configId","configType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "GetConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dataflow_endpoint_group(self, *args, **kwargs):
        __protego_used['groundstation']['get_dataflow_endpoint_group']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["dataflowEndpointGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "GetDataflowEndpointGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_mission_profile(self, *args, **kwargs):
        __protego_used['groundstation']['get_mission_profile']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["missionProfileId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "GetMissionProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_configs(self, *args, **kwargs):
        __protego_used['groundstation']['list_configs']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "ListConfigs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_contacts(self, *args, **kwargs):
        __protego_used['groundstation']['list_contacts']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["startTime","endTime","statusList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "ListContacts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dataflow_endpoint_groups(self, *args, **kwargs):
        __protego_used['groundstation']['list_dataflow_endpoint_groups']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "ListDataflowEndpointGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_mission_profiles(self, *args, **kwargs):
        __protego_used['groundstation']['list_mission_profiles']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "ListMissionProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reserve_contact(self, *args, **kwargs):
        __protego_used['groundstation']['reserve_contact']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["satelliteArn","groundStation","startTime","missionProfileArn","endTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "ReserveContact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_config(self, *args, **kwargs):
        __protego_used['groundstation']['update_config']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["configId","configData","name","configType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "UpdateConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_mission_profile(self, *args, **kwargs):
        __protego_used['groundstation']['update_mission_profile']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["missionProfileId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "UpdateMissionProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_minute_usage(self, *args, **kwargs):
        __protego_used['groundstation']['get_minute_usage']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["month","year"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "GetMinuteUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_satellite(self, *args, **kwargs):
        __protego_used['groundstation']['get_satellite']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["satelliteId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "GetSatellite", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_ground_stations(self, *args, **kwargs):
        __protego_used['groundstation']['list_ground_stations']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "ListGroundStations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_satellites(self, *args, **kwargs):
        __protego_used['groundstation']['list_satellites']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "ListSatellites", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['groundstation']['list_tags_for_resource']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['groundstation']['tag_resource']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['groundstation']['untag_resource']=['groundstation:*']
        for p in ['groundstation:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['groundstation'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class guardduty:
    def __init__(self, region_name=__default_region):
        __protego_used['guardduty']= __protego_used.get('guardduty', {})
        __protego_resource_map['guardduty']=__protego_resource_map.get('guardduty', [])
        self.region = region_name
    def accept_invitation(self, *args, **kwargs):
        __protego_used['guardduty']['accept_invitation']=['guardduty:AcceptInvitation']
        for p in ['guardduty:AcceptInvitation']:
            res = {}
            for nm in ["MasterId","DetectorId","InvitationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "AcceptInvitation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def archive_findings(self, *args, **kwargs):
        __protego_used['guardduty']['archive_findings']=['guardduty:ArchiveFindings']
        for p in ['guardduty:ArchiveFindings']:
            res = {}
            for nm in ["DetectorId","FindingIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "ArchiveFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_detector(self, *args, **kwargs):
        __protego_used['guardduty']['create_detector']=['guardduty:CreateDetector']
        for p in ['guardduty:CreateDetector']:
            res = {}
            for nm in ["Enable"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "CreateDetector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_filter(self, *args, **kwargs):
        __protego_used['guardduty']['create_filter']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["DetectorId","FindingCriteria","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "CreateFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_ip_set(self, *args, **kwargs):
        __protego_used['guardduty']['create_ip_set']=['guardduty:CreateIPSet']
        for p in ['guardduty:CreateIPSet']:
            res = {}
            for nm in ["Format","DetectorId","Name","Activate","Location"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "CreateIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_members(self, *args, **kwargs):
        __protego_used['guardduty']['create_members']=['guardduty:CreateMembers']
        for p in ['guardduty:CreateMembers']:
            res = {}
            for nm in ["DetectorId","AccountDetails"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "CreateMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_publishing_destination(self, *args, **kwargs):
        __protego_used['guardduty']['create_publishing_destination']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["DetectorId","DestinationProperties","DestinationType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "CreatePublishingDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_sample_findings(self, *args, **kwargs):
        __protego_used['guardduty']['create_sample_findings']=['guardduty:CreateSampleFindings']
        for p in ['guardduty:CreateSampleFindings']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "CreateSampleFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_threat_intel_set(self, *args, **kwargs):
        __protego_used['guardduty']['create_threat_intel_set']=['guardduty:CreateThreatIntelSet']
        for p in ['guardduty:CreateThreatIntelSet']:
            res = {}
            for nm in ["Format","DetectorId","Name","Activate","Location"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "CreateThreatIntelSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def decline_invitations(self, *args, **kwargs):
        __protego_used['guardduty']['decline_invitations']=['guardduty:DeclineInvitations']
        for p in ['guardduty:DeclineInvitations']:
            res = {}
            for nm in ["AccountIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "DeclineInvitations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_detector(self, *args, **kwargs):
        __protego_used['guardduty']['delete_detector']=['guardduty:DeleteDetector']
        for p in ['guardduty:DeleteDetector']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "DeleteDetector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_filter(self, *args, **kwargs):
        __protego_used['guardduty']['delete_filter']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["DetectorId","FilterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "DeleteFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ip_set(self, *args, **kwargs):
        __protego_used['guardduty']['delete_ip_set']=['guardduty:DeleteIPSet','guardduty:DeleteIPSet']
        for p in ['guardduty:DeleteIPSet','guardduty:DeleteIPSet']:
            res = {}
            for nm in ["DetectorId","IpSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "DeleteIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_invitations(self, *args, **kwargs):
        __protego_used['guardduty']['delete_invitations']=['guardduty:DeleteInvitations']
        for p in ['guardduty:DeleteInvitations']:
            res = {}
            for nm in ["AccountIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "DeleteInvitations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_members(self, *args, **kwargs):
        __protego_used['guardduty']['delete_members']=['guardduty:DeleteMembers']
        for p in ['guardduty:DeleteMembers']:
            res = {}
            for nm in ["AccountIds","DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "DeleteMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_publishing_destination(self, *args, **kwargs):
        __protego_used['guardduty']['delete_publishing_destination']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["DestinationId","DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "DeletePublishingDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_threat_intel_set(self, *args, **kwargs):
        __protego_used['guardduty']['delete_threat_intel_set']=['guardduty:DeleteThreatIntelSet','guardduty:DeleteThreatIntelSet']
        for p in ['guardduty:DeleteThreatIntelSet','guardduty:DeleteThreatIntelSet']:
            res = {}
            for nm in ["DetectorId","ThreatIntelSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "DeleteThreatIntelSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_publishing_destination(self, *args, **kwargs):
        __protego_used['guardduty']['describe_publishing_destination']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["DestinationId","DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "DescribePublishingDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_from_master_account(self, *args, **kwargs):
        __protego_used['guardduty']['disassociate_from_master_account']=['guardduty:DisassociateFromMasterAccount']
        for p in ['guardduty:DisassociateFromMasterAccount']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "DisassociateFromMasterAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_members(self, *args, **kwargs):
        __protego_used['guardduty']['disassociate_members']=['guardduty:DisassociateMembers']
        for p in ['guardduty:DisassociateMembers']:
            res = {}
            for nm in ["AccountIds","DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "DisassociateMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_detector(self, *args, **kwargs):
        __protego_used['guardduty']['get_detector']=['guardduty:GetDetector']
        for p in ['guardduty:GetDetector']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "GetDetector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_filter(self, *args, **kwargs):
        __protego_used['guardduty']['get_filter']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["DetectorId","FilterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "GetFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_findings(self, *args, **kwargs):
        __protego_used['guardduty']['get_findings']=['guardduty:GetFindings']
        for p in ['guardduty:GetFindings']:
            res = {}
            for nm in ["DetectorId","FindingIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "GetFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_findings_statistics(self, *args, **kwargs):
        __protego_used['guardduty']['get_findings_statistics']=['guardduty:GetFindingsStatistics']
        for p in ['guardduty:GetFindingsStatistics']:
            res = {}
            for nm in ["DetectorId","FindingStatisticTypes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "GetFindingsStatistics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ip_set(self, *args, **kwargs):
        __protego_used['guardduty']['get_ip_set']=['guardduty:GetIPSet','guardduty:GetIPSet']
        for p in ['guardduty:GetIPSet','guardduty:GetIPSet']:
            res = {}
            for nm in ["DetectorId","IpSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "GetIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_invitations_count(self, *args, **kwargs):
        __protego_used['guardduty']['get_invitations_count']=['guardduty:GetInvitationsCount']
        for p in ['guardduty:GetInvitationsCount']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "GetInvitationsCount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_master_account(self, *args, **kwargs):
        __protego_used['guardduty']['get_master_account']=['guardduty:GetMasterAccount']
        for p in ['guardduty:GetMasterAccount']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "GetMasterAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_members(self, *args, **kwargs):
        __protego_used['guardduty']['get_members']=['guardduty:GetMembers']
        for p in ['guardduty:GetMembers']:
            res = {}
            for nm in ["AccountIds","DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "GetMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_threat_intel_set(self, *args, **kwargs):
        __protego_used['guardduty']['get_threat_intel_set']=['guardduty:GetThreatIntelSet','guardduty:GetThreatIntelSet']
        for p in ['guardduty:GetThreatIntelSet','guardduty:GetThreatIntelSet']:
            res = {}
            for nm in ["DetectorId","ThreatIntelSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "GetThreatIntelSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def invite_members(self, *args, **kwargs):
        __protego_used['guardduty']['invite_members']=['guardduty:InviteMembers']
        for p in ['guardduty:InviteMembers']:
            res = {}
            for nm in ["AccountIds","DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "InviteMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_detectors(self, *args, **kwargs):
        __protego_used['guardduty']['list_detectors']=['guardduty:ListDetectors']
        for p in ['guardduty:ListDetectors']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "ListDetectors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_filters(self, *args, **kwargs):
        __protego_used['guardduty']['list_filters']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "ListFilters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_findings(self, *args, **kwargs):
        __protego_used['guardduty']['list_findings']=['guardduty:ListFindings']
        for p in ['guardduty:ListFindings']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "ListFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_ip_sets(self, *args, **kwargs):
        __protego_used['guardduty']['list_ip_sets']=['guardduty:ListIPSets']
        for p in ['guardduty:ListIPSets']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "ListIPSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_invitations(self, *args, **kwargs):
        __protego_used['guardduty']['list_invitations']=['guardduty:ListInvitations']
        for p in ['guardduty:ListInvitations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "ListInvitations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_members(self, *args, **kwargs):
        __protego_used['guardduty']['list_members']=['guardduty:ListMembers']
        for p in ['guardduty:ListMembers']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "ListMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_publishing_destinations(self, *args, **kwargs):
        __protego_used['guardduty']['list_publishing_destinations']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "ListPublishingDestinations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['guardduty']['list_tags_for_resource']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_threat_intel_sets(self, *args, **kwargs):
        __protego_used['guardduty']['list_threat_intel_sets']=['guardduty:ListThreatIntelSets']
        for p in ['guardduty:ListThreatIntelSets']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "ListThreatIntelSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_monitoring_members(self, *args, **kwargs):
        __protego_used['guardduty']['start_monitoring_members']=['guardduty:StartMonitoringMembers']
        for p in ['guardduty:StartMonitoringMembers']:
            res = {}
            for nm in ["AccountIds","DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "StartMonitoringMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_monitoring_members(self, *args, **kwargs):
        __protego_used['guardduty']['stop_monitoring_members']=['guardduty:StopMonitoringMembers']
        for p in ['guardduty:StopMonitoringMembers']:
            res = {}
            for nm in ["AccountIds","DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "StopMonitoringMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['guardduty']['tag_resource']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unarchive_findings(self, *args, **kwargs):
        __protego_used['guardduty']['unarchive_findings']=['guardduty:UnarchiveFindings']
        for p in ['guardduty:UnarchiveFindings']:
            res = {}
            for nm in ["DetectorId","FindingIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "UnarchiveFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['guardduty']['untag_resource']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_detector(self, *args, **kwargs):
        __protego_used['guardduty']['update_detector']=['guardduty:UpdateDetector']
        for p in ['guardduty:UpdateDetector']:
            res = {}
            for nm in ["DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "UpdateDetector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_filter(self, *args, **kwargs):
        __protego_used['guardduty']['update_filter']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["DetectorId","FilterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "UpdateFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_findings_feedback(self, *args, **kwargs):
        __protego_used['guardduty']['update_findings_feedback']=['guardduty:UpdateFindingsFeedback']
        for p in ['guardduty:UpdateFindingsFeedback']:
            res = {}
            for nm in ["Feedback","DetectorId","FindingIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "UpdateFindingsFeedback", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_ip_set(self, *args, **kwargs):
        __protego_used['guardduty']['update_ip_set']=['guardduty:UpdateIPSet','guardduty:UpdateIPSet']
        for p in ['guardduty:UpdateIPSet','guardduty:UpdateIPSet']:
            res = {}
            for nm in ["DetectorId","IpSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "UpdateIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_publishing_destination(self, *args, **kwargs):
        __protego_used['guardduty']['update_publishing_destination']=['guardduty:*']
        for p in ['guardduty:*']:
            res = {}
            for nm in ["DestinationId","DetectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "UpdatePublishingDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_threat_intel_set(self, *args, **kwargs):
        __protego_used['guardduty']['update_threat_intel_set']=['guardduty:UpdateThreatIntelSet','guardduty:UpdateThreatIntelSet']
        for p in ['guardduty:UpdateThreatIntelSet','guardduty:UpdateThreatIntelSet']:
            res = {}
            for nm in ["DetectorId","ThreatIntelSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['guardduty'].append({'action': "UpdateThreatIntelSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class health:
    def __init__(self, region_name=__default_region):
        __protego_used['health']= __protego_used.get('health', {})
        __protego_resource_map['health']=__protego_resource_map.get('health', [])
        self.region = region_name
    def describe_affected_accounts_for_organization(self, *args, **kwargs):
        __protego_used['health']['describe_affected_accounts_for_organization']=['health:*']
        for p in ['health:*']:
            res = {}
            for nm in ["eventArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DescribeAffectedAccountsForOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_affected_entities(self, *args, **kwargs):
        __protego_used['health']['describe_affected_entities']=['health:DescribeAffectedEntities']
        for p in ['health:DescribeAffectedEntities']:
            res = {}
            for nm in ["filter"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DescribeAffectedEntities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_affected_entities_for_organization(self, *args, **kwargs):
        __protego_used['health']['describe_affected_entities_for_organization']=['health:*']
        for p in ['health:*']:
            res = {}
            for nm in ["organizationEntityFilters"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DescribeAffectedEntitiesForOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_entity_aggregates(self, *args, **kwargs):
        __protego_used['health']['describe_entity_aggregates']=['health:DescribeEntityAggregates']
        for p in ['health:DescribeEntityAggregates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DescribeEntityAggregates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_aggregates(self, *args, **kwargs):
        __protego_used['health']['describe_event_aggregates']=['health:DescribeEventAggregates']
        for p in ['health:DescribeEventAggregates']:
            res = {}
            for nm in ["aggregateField"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DescribeEventAggregates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_details(self, *args, **kwargs):
        __protego_used['health']['describe_event_details']=['health:DescribeEventDetails']
        for p in ['health:DescribeEventDetails']:
            res = {}
            for nm in ["eventArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DescribeEventDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_details_for_organization(self, *args, **kwargs):
        __protego_used['health']['describe_event_details_for_organization']=['health:*']
        for p in ['health:*']:
            res = {}
            for nm in ["organizationEventDetailFilters"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DescribeEventDetailsForOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_types(self, *args, **kwargs):
        __protego_used['health']['describe_event_types']=['health:DescribeEventTypes']
        for p in ['health:DescribeEventTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DescribeEventTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_events(self, *args, **kwargs):
        __protego_used['health']['describe_events']=['health:DescribeEvents']
        for p in ['health:DescribeEvents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DescribeEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_events_for_organization(self, *args, **kwargs):
        __protego_used['health']['describe_events_for_organization']=['health:*']
        for p in ['health:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DescribeEventsForOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_health_service_status_for_organization(self, *args, **kwargs):
        __protego_used['health']['describe_health_service_status_for_organization']=['health:*']
        for p in ['health:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DescribeHealthServiceStatusForOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_health_service_access_for_organization(self, *args, **kwargs):
        __protego_used['health']['disable_health_service_access_for_organization']=['health:*']
        for p in ['health:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "DisableHealthServiceAccessForOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_health_service_access_for_organization(self, *args, **kwargs):
        __protego_used['health']['enable_health_service_access_for_organization']=['health:*']
        for p in ['health:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['health'].append({'action': "EnableHealthServiceAccessForOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class iam:
    def __init__(self, region_name=__default_region):
        __protego_used['iam']= __protego_used.get('iam', {})
        __protego_resource_map['iam']=__protego_resource_map.get('iam', [])
        self.region = region_name
    def add_client_id_to_open_id_connect_provider(self, *args, **kwargs):
        __protego_used['iam']['add_client_id_to_open_id_connect_provider']=['iam:AddClientIDToOpenIDConnectProvider']
        for p in ['iam:AddClientIDToOpenIDConnectProvider']:
            res = {}
            for nm in ["OpenIDConnectProviderArn","ClientID"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "AddClientIDToOpenIDConnectProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_role_to_instance_profile(self, *args, **kwargs):
        __protego_used['iam']['add_role_to_instance_profile']=['iam:AddRoleToInstanceProfile']
        for p in ['iam:AddRoleToInstanceProfile']:
            res = {}
            for nm in ["InstanceProfileName","RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "AddRoleToInstanceProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_user_to_group(self, *args, **kwargs):
        __protego_used['iam']['add_user_to_group']=['iam:AddUserToGroup']
        for p in ['iam:AddUserToGroup']:
            res = {}
            for nm in ["GroupName","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "AddUserToGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_group_policy(self, *args, **kwargs):
        __protego_used['iam']['attach_group_policy']=['iam:AttachGroupPolicy']
        for p in ['iam:AttachGroupPolicy']:
            res = {}
            for nm in ["PolicyArn","GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "AttachGroupPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_role_policy(self, *args, **kwargs):
        __protego_used['iam']['attach_role_policy']=['iam:AttachRolePolicy']
        for p in ['iam:AttachRolePolicy']:
            res = {}
            for nm in ["PolicyArn","RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "AttachRolePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_user_policy(self, *args, **kwargs):
        __protego_used['iam']['attach_user_policy']=['iam:AttachUserPolicy']
        for p in ['iam:AttachUserPolicy']:
            res = {}
            for nm in ["PolicyArn","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "AttachUserPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def change_password(self, *args, **kwargs):
        __protego_used['iam']['change_password']=['iam:ChangePassword']
        for p in ['iam:ChangePassword']:
            res = {}
            for nm in ["NewPassword","OldPassword"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ChangePassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_access_key(self, *args, **kwargs):
        __protego_used['iam']['create_access_key']=['iam:CreateAccessKey']
        for p in ['iam:CreateAccessKey']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateAccessKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_account_alias(self, *args, **kwargs):
        __protego_used['iam']['create_account_alias']=['iam:CreateAccountAlias']
        for p in ['iam:CreateAccountAlias']:
            res = {}
            for nm in ["AccountAlias"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateAccountAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_group(self, *args, **kwargs):
        __protego_used['iam']['create_group']=['iam:CreateGroup']
        for p in ['iam:CreateGroup']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_instance_profile(self, *args, **kwargs):
        __protego_used['iam']['create_instance_profile']=['iam:CreateInstanceProfile']
        for p in ['iam:CreateInstanceProfile']:
            res = {}
            for nm in ["InstanceProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateInstanceProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_login_profile(self, *args, **kwargs):
        __protego_used['iam']['create_login_profile']=['iam:CreateLoginProfile']
        for p in ['iam:CreateLoginProfile']:
            res = {}
            for nm in ["UserName","Password"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateLoginProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_open_id_connect_provider(self, *args, **kwargs):
        __protego_used['iam']['create_open_id_connect_provider']=['iam:CreateOpenIDConnectProvider']
        for p in ['iam:CreateOpenIDConnectProvider']:
            res = {}
            for nm in ["ThumbprintList","Url"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateOpenIDConnectProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_policy(self, *args, **kwargs):
        __protego_used['iam']['create_policy']=['iam:CreatePolicy']
        for p in ['iam:CreatePolicy']:
            res = {}
            for nm in ["PolicyDocument","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreatePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_policy_version(self, *args, **kwargs):
        __protego_used['iam']['create_policy_version']=['iam:CreatePolicyVersion']
        for p in ['iam:CreatePolicyVersion']:
            res = {}
            for nm in ["PolicyArn","PolicyDocument"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreatePolicyVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_role(self, *args, **kwargs):
        __protego_used['iam']['create_role']=['iam:CreateRole']
        for p in ['iam:CreateRole']:
            res = {}
            for nm in ["AssumeRolePolicyDocument","RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_saml_provider(self, *args, **kwargs):
        __protego_used['iam']['create_saml_provider']=['iam:CreateSAMLProvider']
        for p in ['iam:CreateSAMLProvider']:
            res = {}
            for nm in ["SAMLMetadataDocument","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateSAMLProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_service_linked_role(self, *args, **kwargs):
        __protego_used['iam']['create_service_linked_role']=['iam:CreateServiceLinkedRole']
        for p in ['iam:CreateServiceLinkedRole']:
            res = {}
            for nm in ["AWSServiceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateServiceLinkedRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_service_specific_credential(self, *args, **kwargs):
        __protego_used['iam']['create_service_specific_credential']=['iam:CreateServiceSpecificCredential']
        for p in ['iam:CreateServiceSpecificCredential']:
            res = {}
            for nm in ["UserName","ServiceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateServiceSpecificCredential", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user(self, *args, **kwargs):
        __protego_used['iam']['create_user']=['iam:CreateUser']
        for p in ['iam:CreateUser']:
            res = {}
            for nm in ["UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_virtual_mfa_device(self, *args, **kwargs):
        __protego_used['iam']['create_virtual_mfa_device']=['iam:CreateVirtualMFADevice']
        for p in ['iam:CreateVirtualMFADevice']:
            res = {}
            for nm in ["VirtualMFADeviceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "CreateVirtualMFADevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deactivate_mfa_device(self, *args, **kwargs):
        __protego_used['iam']['deactivate_mfa_device']=['iam:DeactivateMFADevice']
        for p in ['iam:DeactivateMFADevice']:
            res = {}
            for nm in ["UserName","SerialNumber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeactivateMFADevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_access_key(self, *args, **kwargs):
        __protego_used['iam']['delete_access_key']=['iam:DeleteAccessKey']
        for p in ['iam:DeleteAccessKey']:
            res = {}
            for nm in ["AccessKeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteAccessKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_account_alias(self, *args, **kwargs):
        __protego_used['iam']['delete_account_alias']=['iam:DeleteAccountAlias']
        for p in ['iam:DeleteAccountAlias']:
            res = {}
            for nm in ["AccountAlias"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteAccountAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_account_password_policy(self, *args, **kwargs):
        __protego_used['iam']['delete_account_password_policy']=['iam:DeleteAccountPasswordPolicy']
        for p in ['iam:DeleteAccountPasswordPolicy']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteAccountPasswordPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_group(self, *args, **kwargs):
        __protego_used['iam']['delete_group']=['iam:DeleteGroup']
        for p in ['iam:DeleteGroup']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_group_policy(self, *args, **kwargs):
        __protego_used['iam']['delete_group_policy']=['iam:DeleteGroupPolicy']
        for p in ['iam:DeleteGroupPolicy']:
            res = {}
            for nm in ["GroupName","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteGroupPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_instance_profile(self, *args, **kwargs):
        __protego_used['iam']['delete_instance_profile']=['iam:DeleteInstanceProfile']
        for p in ['iam:DeleteInstanceProfile']:
            res = {}
            for nm in ["InstanceProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteInstanceProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_login_profile(self, *args, **kwargs):
        __protego_used['iam']['delete_login_profile']=['iam:DeleteLoginProfile']
        for p in ['iam:DeleteLoginProfile']:
            res = {}
            for nm in ["UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteLoginProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_open_id_connect_provider(self, *args, **kwargs):
        __protego_used['iam']['delete_open_id_connect_provider']=['iam:DeleteOpenIDConnectProvider']
        for p in ['iam:DeleteOpenIDConnectProvider']:
            res = {}
            for nm in ["OpenIDConnectProviderArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteOpenIDConnectProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_policy(self, *args, **kwargs):
        __protego_used['iam']['delete_policy']=['iam:DeletePolicy']
        for p in ['iam:DeletePolicy']:
            res = {}
            for nm in ["PolicyArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeletePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_policy_version(self, *args, **kwargs):
        __protego_used['iam']['delete_policy_version']=['iam:DeletePolicyVersion']
        for p in ['iam:DeletePolicyVersion']:
            res = {}
            for nm in ["PolicyArn","VersionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeletePolicyVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_role(self, *args, **kwargs):
        __protego_used['iam']['delete_role']=['iam:DeleteRole']
        for p in ['iam:DeleteRole']:
            res = {}
            for nm in ["RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_role_permissions_boundary(self, *args, **kwargs):
        __protego_used['iam']['delete_role_permissions_boundary']=['iam:*']
        for p in ['iam:*']:
            res = {}
            for nm in ["RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteRolePermissionsBoundary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_role_policy(self, *args, **kwargs):
        __protego_used['iam']['delete_role_policy']=['iam:DeleteRolePolicy']
        for p in ['iam:DeleteRolePolicy']:
            res = {}
            for nm in ["RoleName","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteRolePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_saml_provider(self, *args, **kwargs):
        __protego_used['iam']['delete_saml_provider']=['iam:DeleteSAMLProvider']
        for p in ['iam:DeleteSAMLProvider']:
            res = {}
            for nm in ["SAMLProviderArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteSAMLProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ssh_public_key(self, *args, **kwargs):
        __protego_used['iam']['delete_ssh_public_key']=['iam:DeleteSSHPublicKey']
        for p in ['iam:DeleteSSHPublicKey']:
            res = {}
            for nm in ["SSHPublicKeyId","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteSSHPublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_server_certificate(self, *args, **kwargs):
        __protego_used['iam']['delete_server_certificate']=['iam:DeleteServerCertificate']
        for p in ['iam:DeleteServerCertificate']:
            res = {}
            for nm in ["ServerCertificateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteServerCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_service_linked_role(self, *args, **kwargs):
        __protego_used['iam']['delete_service_linked_role']=['iam:DeleteServiceLinkedRole']
        for p in ['iam:DeleteServiceLinkedRole']:
            res = {}
            for nm in ["RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteServiceLinkedRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_service_specific_credential(self, *args, **kwargs):
        __protego_used['iam']['delete_service_specific_credential']=['iam:DeleteServiceSpecificCredential']
        for p in ['iam:DeleteServiceSpecificCredential']:
            res = {}
            for nm in ["ServiceSpecificCredentialId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteServiceSpecificCredential", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_signing_certificate(self, *args, **kwargs):
        __protego_used['iam']['delete_signing_certificate']=['iam:DeleteSigningCertificate']
        for p in ['iam:DeleteSigningCertificate']:
            res = {}
            for nm in ["CertificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteSigningCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user(self, *args, **kwargs):
        __protego_used['iam']['delete_user']=['iam:DeleteUser']
        for p in ['iam:DeleteUser']:
            res = {}
            for nm in ["UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_permissions_boundary(self, *args, **kwargs):
        __protego_used['iam']['delete_user_permissions_boundary']=['iam:*']
        for p in ['iam:*']:
            res = {}
            for nm in ["UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteUserPermissionsBoundary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_policy(self, *args, **kwargs):
        __protego_used['iam']['delete_user_policy']=['iam:DeleteUserPolicy']
        for p in ['iam:DeleteUserPolicy']:
            res = {}
            for nm in ["UserName","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteUserPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_virtual_mfa_device(self, *args, **kwargs):
        __protego_used['iam']['delete_virtual_mfa_device']=['iam:DeleteVirtualMFADevice','iam:DeleteVirtualMFADevice']
        for p in ['iam:DeleteVirtualMFADevice','iam:DeleteVirtualMFADevice']:
            res = {}
            for nm in ["SerialNumber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DeleteVirtualMFADevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_group_policy(self, *args, **kwargs):
        __protego_used['iam']['detach_group_policy']=['iam:DetachGroupPolicy']
        for p in ['iam:DetachGroupPolicy']:
            res = {}
            for nm in ["PolicyArn","GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DetachGroupPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_role_policy(self, *args, **kwargs):
        __protego_used['iam']['detach_role_policy']=['iam:DetachRolePolicy']
        for p in ['iam:DetachRolePolicy']:
            res = {}
            for nm in ["PolicyArn","RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DetachRolePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_user_policy(self, *args, **kwargs):
        __protego_used['iam']['detach_user_policy']=['iam:DetachUserPolicy']
        for p in ['iam:DetachUserPolicy']:
            res = {}
            for nm in ["PolicyArn","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "DetachUserPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_mfa_device(self, *args, **kwargs):
        __protego_used['iam']['enable_mfa_device']=['iam:EnableMFADevice']
        for p in ['iam:EnableMFADevice']:
            res = {}
            for nm in ["AuthenticationCode1","AuthenticationCode2","UserName","SerialNumber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "EnableMFADevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_credential_report(self, *args, **kwargs):
        __protego_used['iam']['generate_credential_report']=['iam:GenerateCredentialReport']
        for p in ['iam:GenerateCredentialReport']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GenerateCredentialReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_organizations_access_report(self, *args, **kwargs):
        __protego_used['iam']['generate_organizations_access_report']=['iam:*']
        for p in ['iam:*']:
            res = {}
            for nm in ["EntityPath"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GenerateOrganizationsAccessReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_service_last_accessed_details(self, *args, **kwargs):
        __protego_used['iam']['generate_service_last_accessed_details']=['iam:GenerateServiceLastAccessedDetails']
        for p in ['iam:GenerateServiceLastAccessedDetails']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GenerateServiceLastAccessedDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_access_key_last_used(self, *args, **kwargs):
        __protego_used['iam']['get_access_key_last_used']=['iam:GetAccessKeyLastUsed']
        for p in ['iam:GetAccessKeyLastUsed']:
            res = {}
            for nm in ["AccessKeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetAccessKeyLastUsed", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account_authorization_details(self, *args, **kwargs):
        __protego_used['iam']['get_account_authorization_details']=['iam:GetAccountAuthorizationDetails']
        for p in ['iam:GetAccountAuthorizationDetails']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetAccountAuthorizationDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account_password_policy(self, *args, **kwargs):
        __protego_used['iam']['get_account_password_policy']=['iam:GetAccountPasswordPolicy']
        for p in ['iam:GetAccountPasswordPolicy']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetAccountPasswordPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account_summary(self, *args, **kwargs):
        __protego_used['iam']['get_account_summary']=['iam:GetAccountSummary']
        for p in ['iam:GetAccountSummary']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetAccountSummary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_context_keys_for_custom_policy(self, *args, **kwargs):
        __protego_used['iam']['get_context_keys_for_custom_policy']=['iam:GetContextKeysForCustomPolicy']
        for p in ['iam:GetContextKeysForCustomPolicy']:
            res = {}
            for nm in ["PolicyInputList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetContextKeysForCustomPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_context_keys_for_principal_policy(self, *args, **kwargs):
        __protego_used['iam']['get_context_keys_for_principal_policy']=['iam:GetContextKeysForPrincipalPolicy']
        for p in ['iam:GetContextKeysForPrincipalPolicy']:
            res = {}
            for nm in ["PolicySourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetContextKeysForPrincipalPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_credential_report(self, *args, **kwargs):
        __protego_used['iam']['get_credential_report']=['iam:GetCredentialReport']
        for p in ['iam:GetCredentialReport']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetCredentialReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_group(self, *args, **kwargs):
        __protego_used['iam']['get_group']=['iam:GetGroup']
        for p in ['iam:GetGroup']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_group_policy(self, *args, **kwargs):
        __protego_used['iam']['get_group_policy']=['iam:GetGroupPolicy']
        for p in ['iam:GetGroupPolicy']:
            res = {}
            for nm in ["GroupName","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetGroupPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instance_profile(self, *args, **kwargs):
        __protego_used['iam']['get_instance_profile']=['iam:GetInstanceProfile']
        for p in ['iam:GetInstanceProfile']:
            res = {}
            for nm in ["InstanceProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetInstanceProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_login_profile(self, *args, **kwargs):
        __protego_used['iam']['get_login_profile']=['iam:GetLoginProfile']
        for p in ['iam:GetLoginProfile']:
            res = {}
            for nm in ["UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetLoginProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_open_id_connect_provider(self, *args, **kwargs):
        __protego_used['iam']['get_open_id_connect_provider']=['iam:GetOpenIDConnectProvider']
        for p in ['iam:GetOpenIDConnectProvider']:
            res = {}
            for nm in ["OpenIDConnectProviderArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetOpenIDConnectProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_organizations_access_report(self, *args, **kwargs):
        __protego_used['iam']['get_organizations_access_report']=['iam:*']
        for p in ['iam:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetOrganizationsAccessReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_policy(self, *args, **kwargs):
        __protego_used['iam']['get_policy']=['iam:GetPolicy']
        for p in ['iam:GetPolicy']:
            res = {}
            for nm in ["PolicyArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_policy_version(self, *args, **kwargs):
        __protego_used['iam']['get_policy_version']=['iam:GetPolicyVersion']
        for p in ['iam:GetPolicyVersion']:
            res = {}
            for nm in ["PolicyArn","VersionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetPolicyVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_role(self, *args, **kwargs):
        __protego_used['iam']['get_role']=['iam:GetRole']
        for p in ['iam:GetRole']:
            res = {}
            for nm in ["RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_role_policy(self, *args, **kwargs):
        __protego_used['iam']['get_role_policy']=['iam:GetRolePolicy']
        for p in ['iam:GetRolePolicy']:
            res = {}
            for nm in ["RoleName","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetRolePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_saml_provider(self, *args, **kwargs):
        __protego_used['iam']['get_saml_provider']=['iam:GetSAMLProvider']
        for p in ['iam:GetSAMLProvider']:
            res = {}
            for nm in ["SAMLProviderArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetSAMLProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ssh_public_key(self, *args, **kwargs):
        __protego_used['iam']['get_ssh_public_key']=['iam:GetSSHPublicKey']
        for p in ['iam:GetSSHPublicKey']:
            res = {}
            for nm in ["SSHPublicKeyId","UserName","Encoding"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetSSHPublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_server_certificate(self, *args, **kwargs):
        __protego_used['iam']['get_server_certificate']=['iam:GetServerCertificate']
        for p in ['iam:GetServerCertificate']:
            res = {}
            for nm in ["ServerCertificateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetServerCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_service_last_accessed_details(self, *args, **kwargs):
        __protego_used['iam']['get_service_last_accessed_details']=['iam:GetServiceLastAccessedDetails']
        for p in ['iam:GetServiceLastAccessedDetails']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetServiceLastAccessedDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_service_last_accessed_details_with_entities(self, *args, **kwargs):
        __protego_used['iam']['get_service_last_accessed_details_with_entities']=['iam:GetServiceLastAccessedDetailsWithEntities']
        for p in ['iam:GetServiceLastAccessedDetailsWithEntities']:
            res = {}
            for nm in ["ServiceNamespace","JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetServiceLastAccessedDetailsWithEntities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_service_linked_role_deletion_status(self, *args, **kwargs):
        __protego_used['iam']['get_service_linked_role_deletion_status']=['iam:GetServiceLinkedRoleDeletionStatus']
        for p in ['iam:GetServiceLinkedRoleDeletionStatus']:
            res = {}
            for nm in ["DeletionTaskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetServiceLinkedRoleDeletionStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_user(self, *args, **kwargs):
        __protego_used['iam']['get_user']=['iam:GetUser']
        for p in ['iam:GetUser']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_user_policy(self, *args, **kwargs):
        __protego_used['iam']['get_user_policy']=['iam:GetUserPolicy']
        for p in ['iam:GetUserPolicy']:
            res = {}
            for nm in ["UserName","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "GetUserPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_access_keys(self, *args, **kwargs):
        __protego_used['iam']['list_access_keys']=['iam:ListAccessKeys']
        for p in ['iam:ListAccessKeys']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListAccessKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_account_aliases(self, *args, **kwargs):
        __protego_used['iam']['list_account_aliases']=['iam:ListAccountAliases']
        for p in ['iam:ListAccountAliases']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListAccountAliases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_attached_group_policies(self, *args, **kwargs):
        __protego_used['iam']['list_attached_group_policies']=['iam:ListAttachedGroupPolicies']
        for p in ['iam:ListAttachedGroupPolicies']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListAttachedGroupPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_attached_role_policies(self, *args, **kwargs):
        __protego_used['iam']['list_attached_role_policies']=['iam:ListAttachedRolePolicies']
        for p in ['iam:ListAttachedRolePolicies']:
            res = {}
            for nm in ["RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListAttachedRolePolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_attached_user_policies(self, *args, **kwargs):
        __protego_used['iam']['list_attached_user_policies']=['iam:ListAttachedUserPolicies']
        for p in ['iam:ListAttachedUserPolicies']:
            res = {}
            for nm in ["UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListAttachedUserPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_entities_for_policy(self, *args, **kwargs):
        __protego_used['iam']['list_entities_for_policy']=['iam:ListEntitiesForPolicy']
        for p in ['iam:ListEntitiesForPolicy']:
            res = {}
            for nm in ["PolicyArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListEntitiesForPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_group_policies(self, *args, **kwargs):
        __protego_used['iam']['list_group_policies']=['iam:ListGroupPolicies']
        for p in ['iam:ListGroupPolicies']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListGroupPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_groups(self, *args, **kwargs):
        __protego_used['iam']['list_groups']=['iam:ListGroups']
        for p in ['iam:ListGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_groups_for_user(self, *args, **kwargs):
        __protego_used['iam']['list_groups_for_user']=['iam:ListGroupsForUser']
        for p in ['iam:ListGroupsForUser']:
            res = {}
            for nm in ["UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListGroupsForUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_instance_profiles(self, *args, **kwargs):
        __protego_used['iam']['list_instance_profiles']=['iam:ListInstanceProfiles']
        for p in ['iam:ListInstanceProfiles']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListInstanceProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_instance_profiles_for_role(self, *args, **kwargs):
        __protego_used['iam']['list_instance_profiles_for_role']=['iam:ListInstanceProfilesForRole']
        for p in ['iam:ListInstanceProfilesForRole']:
            res = {}
            for nm in ["RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListInstanceProfilesForRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_mfa_devices(self, *args, **kwargs):
        __protego_used['iam']['list_mfa_devices']=['iam:ListMFADevices']
        for p in ['iam:ListMFADevices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListMFADevices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_open_id_connect_providers(self, *args, **kwargs):
        __protego_used['iam']['list_open_id_connect_providers']=['iam:ListOpenIDConnectProviders']
        for p in ['iam:ListOpenIDConnectProviders']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListOpenIDConnectProviders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_policies(self, *args, **kwargs):
        __protego_used['iam']['list_policies']=['iam:ListPolicies']
        for p in ['iam:ListPolicies']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_policies_granting_service_access(self, *args, **kwargs):
        __protego_used['iam']['list_policies_granting_service_access']=['iam:ListPoliciesGrantingServiceAccess']
        for p in ['iam:ListPoliciesGrantingServiceAccess']:
            res = {}
            for nm in ["Arn","ServiceNamespaces"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListPoliciesGrantingServiceAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_policy_versions(self, *args, **kwargs):
        __protego_used['iam']['list_policy_versions']=['iam:ListPolicyVersions']
        for p in ['iam:ListPolicyVersions']:
            res = {}
            for nm in ["PolicyArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListPolicyVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_role_policies(self, *args, **kwargs):
        __protego_used['iam']['list_role_policies']=['iam:ListRolePolicies']
        for p in ['iam:ListRolePolicies']:
            res = {}
            for nm in ["RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListRolePolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_role_tags(self, *args, **kwargs):
        __protego_used['iam']['list_role_tags']=['iam:ListRoleTags']
        for p in ['iam:ListRoleTags']:
            res = {}
            for nm in ["RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListRoleTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_roles(self, *args, **kwargs):
        __protego_used['iam']['list_roles']=['iam:ListRoles']
        for p in ['iam:ListRoles']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListRoles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_saml_providers(self, *args, **kwargs):
        __protego_used['iam']['list_saml_providers']=['iam:ListSAMLProviders']
        for p in ['iam:ListSAMLProviders']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListSAMLProviders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_ssh_public_keys(self, *args, **kwargs):
        __protego_used['iam']['list_ssh_public_keys']=['iam:ListSSHPublicKeys']
        for p in ['iam:ListSSHPublicKeys']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListSSHPublicKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_server_certificates(self, *args, **kwargs):
        __protego_used['iam']['list_server_certificates']=['iam:ListServerCertificates']
        for p in ['iam:ListServerCertificates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListServerCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_service_specific_credentials(self, *args, **kwargs):
        __protego_used['iam']['list_service_specific_credentials']=['iam:ListServiceSpecificCredentials']
        for p in ['iam:ListServiceSpecificCredentials']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListServiceSpecificCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_signing_certificates(self, *args, **kwargs):
        __protego_used['iam']['list_signing_certificates']=['iam:ListSigningCertificates']
        for p in ['iam:ListSigningCertificates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListSigningCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_user_policies(self, *args, **kwargs):
        __protego_used['iam']['list_user_policies']=['iam:ListUserPolicies']
        for p in ['iam:ListUserPolicies']:
            res = {}
            for nm in ["UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListUserPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_user_tags(self, *args, **kwargs):
        __protego_used['iam']['list_user_tags']=['iam:ListUserTags']
        for p in ['iam:ListUserTags']:
            res = {}
            for nm in ["UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListUserTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_users(self, *args, **kwargs):
        __protego_used['iam']['list_users']=['iam:ListUsers']
        for p in ['iam:ListUsers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_virtual_mfa_devices(self, *args, **kwargs):
        __protego_used['iam']['list_virtual_mfa_devices']=['iam:ListVirtualMFADevices']
        for p in ['iam:ListVirtualMFADevices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ListVirtualMFADevices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_group_policy(self, *args, **kwargs):
        __protego_used['iam']['put_group_policy']=['iam:PutGroupPolicy']
        for p in ['iam:PutGroupPolicy']:
            res = {}
            for nm in ["GroupName","PolicyDocument","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "PutGroupPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_role_permissions_boundary(self, *args, **kwargs):
        __protego_used['iam']['put_role_permissions_boundary']=['iam:*']
        for p in ['iam:*']:
            res = {}
            for nm in ["RoleName","PermissionsBoundary"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "PutRolePermissionsBoundary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_role_policy(self, *args, **kwargs):
        __protego_used['iam']['put_role_policy']=['iam:PutRolePolicy']
        for p in ['iam:PutRolePolicy']:
            res = {}
            for nm in ["PolicyDocument","RoleName","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "PutRolePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_user_permissions_boundary(self, *args, **kwargs):
        __protego_used['iam']['put_user_permissions_boundary']=['iam:*']
        for p in ['iam:*']:
            res = {}
            for nm in ["UserName","PermissionsBoundary"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "PutUserPermissionsBoundary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_user_policy(self, *args, **kwargs):
        __protego_used['iam']['put_user_policy']=['iam:PutUserPolicy']
        for p in ['iam:PutUserPolicy']:
            res = {}
            for nm in ["UserName","PolicyDocument","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "PutUserPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_client_id_from_open_id_connect_provider(self, *args, **kwargs):
        __protego_used['iam']['remove_client_id_from_open_id_connect_provider']=['iam:RemoveClientIDFromOpenIDConnectProvider']
        for p in ['iam:RemoveClientIDFromOpenIDConnectProvider']:
            res = {}
            for nm in ["OpenIDConnectProviderArn","ClientID"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "RemoveClientIDFromOpenIDConnectProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_role_from_instance_profile(self, *args, **kwargs):
        __protego_used['iam']['remove_role_from_instance_profile']=['iam:RemoveRoleFromInstanceProfile']
        for p in ['iam:RemoveRoleFromInstanceProfile']:
            res = {}
            for nm in ["InstanceProfileName","RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "RemoveRoleFromInstanceProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_user_from_group(self, *args, **kwargs):
        __protego_used['iam']['remove_user_from_group']=['iam:RemoveUserFromGroup']
        for p in ['iam:RemoveUserFromGroup']:
            res = {}
            for nm in ["GroupName","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "RemoveUserFromGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_service_specific_credential(self, *args, **kwargs):
        __protego_used['iam']['reset_service_specific_credential']=['iam:ResetServiceSpecificCredential']
        for p in ['iam:ResetServiceSpecificCredential']:
            res = {}
            for nm in ["ServiceSpecificCredentialId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ResetServiceSpecificCredential", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def resync_mfa_device(self, *args, **kwargs):
        __protego_used['iam']['resync_mfa_device']=['iam:ResyncMFADevice']
        for p in ['iam:ResyncMFADevice']:
            res = {}
            for nm in ["AuthenticationCode1","AuthenticationCode2","UserName","SerialNumber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "ResyncMFADevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_default_policy_version(self, *args, **kwargs):
        __protego_used['iam']['set_default_policy_version']=['iam:SetDefaultPolicyVersion']
        for p in ['iam:SetDefaultPolicyVersion']:
            res = {}
            for nm in ["PolicyArn","VersionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "SetDefaultPolicyVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_security_token_service_preferences(self, *args, **kwargs):
        __protego_used['iam']['set_security_token_service_preferences']=['iam:SetSecurityTokenServicePreferences']
        for p in ['iam:SetSecurityTokenServicePreferences']:
            res = {}
            for nm in ["GlobalEndpointTokenVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "SetSecurityTokenServicePreferences", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def simulate_custom_policy(self, *args, **kwargs):
        __protego_used['iam']['simulate_custom_policy']=['iam:SimulateCustomPolicy']
        for p in ['iam:SimulateCustomPolicy']:
            res = {}
            for nm in ["ActionNames","PolicyInputList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "SimulateCustomPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def simulate_principal_policy(self, *args, **kwargs):
        __protego_used['iam']['simulate_principal_policy']=['iam:SimulatePrincipalPolicy']
        for p in ['iam:SimulatePrincipalPolicy']:
            res = {}
            for nm in ["PolicySourceArn","ActionNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "SimulatePrincipalPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_role(self, *args, **kwargs):
        __protego_used['iam']['tag_role']=['iam:TagRole']
        for p in ['iam:TagRole']:
            res = {}
            for nm in ["RoleName","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "TagRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_user(self, *args, **kwargs):
        __protego_used['iam']['tag_user']=['iam:TagUser']
        for p in ['iam:TagUser']:
            res = {}
            for nm in ["UserName","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "TagUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_role(self, *args, **kwargs):
        __protego_used['iam']['untag_role']=['iam:UntagRole']
        for p in ['iam:UntagRole']:
            res = {}
            for nm in ["RoleName","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UntagRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_user(self, *args, **kwargs):
        __protego_used['iam']['untag_user']=['iam:UntagUser']
        for p in ['iam:UntagUser']:
            res = {}
            for nm in ["UserName","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UntagUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_access_key(self, *args, **kwargs):
        __protego_used['iam']['update_access_key']=['iam:UpdateAccessKey']
        for p in ['iam:UpdateAccessKey']:
            res = {}
            for nm in ["AccessKeyId","Status"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateAccessKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_account_password_policy(self, *args, **kwargs):
        __protego_used['iam']['update_account_password_policy']=['iam:UpdateAccountPasswordPolicy']
        for p in ['iam:UpdateAccountPasswordPolicy']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateAccountPasswordPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_assume_role_policy(self, *args, **kwargs):
        __protego_used['iam']['update_assume_role_policy']=['iam:UpdateAssumeRolePolicy']
        for p in ['iam:UpdateAssumeRolePolicy']:
            res = {}
            for nm in ["PolicyDocument","RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateAssumeRolePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_group(self, *args, **kwargs):
        __protego_used['iam']['update_group']=['iam:UpdateGroup']
        for p in ['iam:UpdateGroup']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_login_profile(self, *args, **kwargs):
        __protego_used['iam']['update_login_profile']=['iam:UpdateLoginProfile']
        for p in ['iam:UpdateLoginProfile']:
            res = {}
            for nm in ["UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateLoginProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_open_id_connect_provider_thumbprint(self, *args, **kwargs):
        __protego_used['iam']['update_open_id_connect_provider_thumbprint']=['iam:UpdateOpenIDConnectProviderThumbprint']
        for p in ['iam:UpdateOpenIDConnectProviderThumbprint']:
            res = {}
            for nm in ["OpenIDConnectProviderArn","ThumbprintList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateOpenIDConnectProviderThumbprint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_role(self, *args, **kwargs):
        __protego_used['iam']['update_role']=['iam:UpdateRole']
        for p in ['iam:UpdateRole']:
            res = {}
            for nm in ["RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_role_description(self, *args, **kwargs):
        __protego_used['iam']['update_role_description']=['iam:UpdateRoleDescription']
        for p in ['iam:UpdateRoleDescription']:
            res = {}
            for nm in ["Description","RoleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateRoleDescription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_saml_provider(self, *args, **kwargs):
        __protego_used['iam']['update_saml_provider']=['iam:UpdateSAMLProvider']
        for p in ['iam:UpdateSAMLProvider']:
            res = {}
            for nm in ["SAMLProviderArn","SAMLMetadataDocument"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateSAMLProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_ssh_public_key(self, *args, **kwargs):
        __protego_used['iam']['update_ssh_public_key']=['iam:UpdateSSHPublicKey']
        for p in ['iam:UpdateSSHPublicKey']:
            res = {}
            for nm in ["SSHPublicKeyId","UserName","Status"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateSSHPublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_server_certificate(self, *args, **kwargs):
        __protego_used['iam']['update_server_certificate']=['iam:UpdateServerCertificate']
        for p in ['iam:UpdateServerCertificate']:
            res = {}
            for nm in ["ServerCertificateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateServerCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_service_specific_credential(self, *args, **kwargs):
        __protego_used['iam']['update_service_specific_credential']=['iam:UpdateServiceSpecificCredential']
        for p in ['iam:UpdateServiceSpecificCredential']:
            res = {}
            for nm in ["Status","ServiceSpecificCredentialId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateServiceSpecificCredential", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_signing_certificate(self, *args, **kwargs):
        __protego_used['iam']['update_signing_certificate']=['iam:UpdateSigningCertificate']
        for p in ['iam:UpdateSigningCertificate']:
            res = {}
            for nm in ["CertificateId","Status"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateSigningCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user(self, *args, **kwargs):
        __protego_used['iam']['update_user']=['iam:UpdateUser']
        for p in ['iam:UpdateUser']:
            res = {}
            for nm in ["UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UpdateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_ssh_public_key(self, *args, **kwargs):
        __protego_used['iam']['upload_ssh_public_key']=['iam:UploadSSHPublicKey']
        for p in ['iam:UploadSSHPublicKey']:
            res = {}
            for nm in ["UserName","SSHPublicKeyBody"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UploadSSHPublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_server_certificate(self, *args, **kwargs):
        __protego_used['iam']['upload_server_certificate']=['iam:UploadServerCertificate']
        for p in ['iam:UploadServerCertificate']:
            res = {}
            for nm in ["CertificateBody","ServerCertificateName","PrivateKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UploadServerCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_signing_certificate(self, *args, **kwargs):
        __protego_used['iam']['upload_signing_certificate']=['iam:UploadSigningCertificate']
        for p in ['iam:UploadSigningCertificate']:
            res = {}
            for nm in ["CertificateBody"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iam'].append({'action': "UploadSigningCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class imagebuilder:
    def __init__(self, region_name=__default_region):
        __protego_used['imagebuilder']= __protego_used.get('imagebuilder', {})
        __protego_resource_map['imagebuilder']=__protego_resource_map.get('imagebuilder', [])
        self.region = region_name
    def cancel_image_creation(self, *args, **kwargs):
        __protego_used['imagebuilder']['cancel_image_creation']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imageBuildVersionArn","clientToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "CancelImageCreation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_component(self, *args, **kwargs):
        __protego_used['imagebuilder']['create_component']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["platform","name","semanticVersion","clientToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "CreateComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_distribution_configuration(self, *args, **kwargs):
        __protego_used['imagebuilder']['create_distribution_configuration']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["name","distributions","clientToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "CreateDistributionConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_image(self, *args, **kwargs):
        __protego_used['imagebuilder']['create_image']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imageRecipeArn","clientToken","infrastructureConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "CreateImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_image_pipeline(self, *args, **kwargs):
        __protego_used['imagebuilder']['create_image_pipeline']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imageRecipeArn","name","clientToken","infrastructureConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "CreateImagePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_image_recipe(self, *args, **kwargs):
        __protego_used['imagebuilder']['create_image_recipe']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["name","components","semanticVersion","clientToken","parentImage"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "CreateImageRecipe", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_infrastructure_configuration(self, *args, **kwargs):
        __protego_used['imagebuilder']['create_infrastructure_configuration']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["name","instanceProfileName","clientToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "CreateInfrastructureConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_component(self, *args, **kwargs):
        __protego_used['imagebuilder']['delete_component']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["componentBuildVersionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "DeleteComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_distribution_configuration(self, *args, **kwargs):
        __protego_used['imagebuilder']['delete_distribution_configuration']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["distributionConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "DeleteDistributionConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_image(self, *args, **kwargs):
        __protego_used['imagebuilder']['delete_image']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imageBuildVersionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "DeleteImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_image_pipeline(self, *args, **kwargs):
        __protego_used['imagebuilder']['delete_image_pipeline']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imagePipelineArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "DeleteImagePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_image_recipe(self, *args, **kwargs):
        __protego_used['imagebuilder']['delete_image_recipe']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imageRecipeArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "DeleteImageRecipe", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_infrastructure_configuration(self, *args, **kwargs):
        __protego_used['imagebuilder']['delete_infrastructure_configuration']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["infrastructureConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "DeleteInfrastructureConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_component(self, *args, **kwargs):
        __protego_used['imagebuilder']['get_component']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["componentBuildVersionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "GetComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_component_policy(self, *args, **kwargs):
        __protego_used['imagebuilder']['get_component_policy']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["componentArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "GetComponentPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_distribution_configuration(self, *args, **kwargs):
        __protego_used['imagebuilder']['get_distribution_configuration']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["distributionConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "GetDistributionConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_image(self, *args, **kwargs):
        __protego_used['imagebuilder']['get_image']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imageBuildVersionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "GetImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_image_pipeline(self, *args, **kwargs):
        __protego_used['imagebuilder']['get_image_pipeline']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imagePipelineArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "GetImagePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_image_policy(self, *args, **kwargs):
        __protego_used['imagebuilder']['get_image_policy']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imageArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "GetImagePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_image_recipe(self, *args, **kwargs):
        __protego_used['imagebuilder']['get_image_recipe']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imageRecipeArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "GetImageRecipe", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_image_recipe_policy(self, *args, **kwargs):
        __protego_used['imagebuilder']['get_image_recipe_policy']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imageRecipeArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "GetImageRecipePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_infrastructure_configuration(self, *args, **kwargs):
        __protego_used['imagebuilder']['get_infrastructure_configuration']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["infrastructureConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "GetInfrastructureConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_component(self, *args, **kwargs):
        __protego_used['imagebuilder']['import_component']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["name","semanticVersion","platform","clientToken","format","type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "ImportComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_component_build_versions(self, *args, **kwargs):
        __protego_used['imagebuilder']['list_component_build_versions']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["componentVersionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "ListComponentBuildVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_components(self, *args, **kwargs):
        __protego_used['imagebuilder']['list_components']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "ListComponents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_distribution_configurations(self, *args, **kwargs):
        __protego_used['imagebuilder']['list_distribution_configurations']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "ListDistributionConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_image_build_versions(self, *args, **kwargs):
        __protego_used['imagebuilder']['list_image_build_versions']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imageVersionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "ListImageBuildVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_image_pipeline_images(self, *args, **kwargs):
        __protego_used['imagebuilder']['list_image_pipeline_images']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "ListImagePipelineImages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_image_pipelines(self, *args, **kwargs):
        __protego_used['imagebuilder']['list_image_pipelines']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "ListImagePipelines", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_image_recipes(self, *args, **kwargs):
        __protego_used['imagebuilder']['list_image_recipes']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "ListImageRecipes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_images(self, *args, **kwargs):
        __protego_used['imagebuilder']['list_images']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "ListImages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_infrastructure_configurations(self, *args, **kwargs):
        __protego_used['imagebuilder']['list_infrastructure_configurations']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "ListInfrastructureConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['imagebuilder']['list_tags_for_resource']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_component_policy(self, *args, **kwargs):
        __protego_used['imagebuilder']['put_component_policy']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["policy","componentArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "PutComponentPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_image_policy(self, *args, **kwargs):
        __protego_used['imagebuilder']['put_image_policy']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["policy","imageArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "PutImagePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_image_recipe_policy(self, *args, **kwargs):
        __protego_used['imagebuilder']['put_image_recipe_policy']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imageRecipeArn","policy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "PutImageRecipePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_image_pipeline_execution(self, *args, **kwargs):
        __protego_used['imagebuilder']['start_image_pipeline_execution']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imagePipelineArn","clientToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "StartImagePipelineExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['imagebuilder']['tag_resource']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['imagebuilder']['untag_resource']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_distribution_configuration(self, *args, **kwargs):
        __protego_used['imagebuilder']['update_distribution_configuration']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["distributionConfigurationArn","clientToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "UpdateDistributionConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_image_pipeline(self, *args, **kwargs):
        __protego_used['imagebuilder']['update_image_pipeline']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["imagePipelineArn","clientToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "UpdateImagePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_infrastructure_configuration(self, *args, **kwargs):
        __protego_used['imagebuilder']['update_infrastructure_configuration']=['imagebuilder:*']
        for p in ['imagebuilder:*']:
            res = {}
            for nm in ["clientToken","infrastructureConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['imagebuilder'].append({'action': "UpdateInfrastructureConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class importexport:
    def __init__(self, region_name=__default_region):
        __protego_used['importexport']= __protego_used.get('importexport', {})
        __protego_resource_map['importexport']=__protego_resource_map.get('importexport', [])
        self.region = region_name
    def cancel_job(self, *args, **kwargs):
        __protego_used['importexport']['cancel_job']=['importexport:CancelJob']
        for p in ['importexport:CancelJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['importexport'].append({'action': "CancelJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_job(self, *args, **kwargs):
        __protego_used['importexport']['create_job']=['importexport:CreateJob']
        for p in ['importexport:CreateJob']:
            res = {}
            for nm in ["JobType","ValidateOnly","Manifest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['importexport'].append({'action': "CreateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_shipping_label(self, *args, **kwargs):
        __protego_used['importexport']['get_shipping_label']=['importexport:GetShippingLabel']
        for p in ['importexport:GetShippingLabel']:
            res = {}
            for nm in ["jobIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['importexport'].append({'action': "GetShippingLabel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_status(self, *args, **kwargs):
        __protego_used['importexport']['get_status']=['importexport:GetStatus']
        for p in ['importexport:GetStatus']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['importexport'].append({'action': "GetStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs(self, *args, **kwargs):
        __protego_used['importexport']['list_jobs']=['importexport:ListJobs']
        for p in ['importexport:ListJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['importexport'].append({'action': "ListJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_job(self, *args, **kwargs):
        __protego_used['importexport']['update_job']=['importexport:UpdateJob']
        for p in ['importexport:UpdateJob']:
            res = {}
            for nm in ["JobId","JobType","ValidateOnly","Manifest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['importexport'].append({'action': "UpdateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class inspector:
    def __init__(self, region_name=__default_region):
        __protego_used['inspector']= __protego_used.get('inspector', {})
        __protego_resource_map['inspector']=__protego_resource_map.get('inspector', [])
        self.region = region_name
    def add_attributes_to_findings(self, *args, **kwargs):
        __protego_used['inspector']['add_attributes_to_findings']=['inspector:AddAttributesToFindings']
        for p in ['inspector:AddAttributesToFindings']:
            res = {}
            for nm in ["attributes","findingArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "AddAttributesToFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_assessment_target(self, *args, **kwargs):
        __protego_used['inspector']['create_assessment_target']=['inspector:CreateAssessmentTarget']
        for p in ['inspector:CreateAssessmentTarget']:
            res = {}
            for nm in ["assessmentTargetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "CreateAssessmentTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_assessment_template(self, *args, **kwargs):
        __protego_used['inspector']['create_assessment_template']=['inspector:CreateAssessmentTemplate']
        for p in ['inspector:CreateAssessmentTemplate']:
            res = {}
            for nm in ["rulesPackageArns","assessmentTargetArn","durationInSeconds","assessmentTemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "CreateAssessmentTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_exclusions_preview(self, *args, **kwargs):
        __protego_used['inspector']['create_exclusions_preview']=['inspector:*']
        for p in ['inspector:*']:
            res = {}
            for nm in ["assessmentTemplateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "CreateExclusionsPreview", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_resource_group(self, *args, **kwargs):
        __protego_used['inspector']['create_resource_group']=['inspector:CreateResourceGroup']
        for p in ['inspector:CreateResourceGroup']:
            res = {}
            for nm in ["resourceGroupTags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "CreateResourceGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_assessment_run(self, *args, **kwargs):
        __protego_used['inspector']['delete_assessment_run']=['inspector:DeleteAssessmentRun']
        for p in ['inspector:DeleteAssessmentRun']:
            res = {}
            for nm in ["assessmentRunArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "DeleteAssessmentRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_assessment_target(self, *args, **kwargs):
        __protego_used['inspector']['delete_assessment_target']=['inspector:DeleteAssessmentTarget']
        for p in ['inspector:DeleteAssessmentTarget']:
            res = {}
            for nm in ["assessmentTargetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "DeleteAssessmentTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_assessment_template(self, *args, **kwargs):
        __protego_used['inspector']['delete_assessment_template']=['inspector:DeleteAssessmentTemplate']
        for p in ['inspector:DeleteAssessmentTemplate']:
            res = {}
            for nm in ["assessmentTemplateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "DeleteAssessmentTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_assessment_runs(self, *args, **kwargs):
        __protego_used['inspector']['describe_assessment_runs']=['inspector:DescribeAssessmentRuns']
        for p in ['inspector:DescribeAssessmentRuns']:
            res = {}
            for nm in ["assessmentRunArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "DescribeAssessmentRuns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_assessment_targets(self, *args, **kwargs):
        __protego_used['inspector']['describe_assessment_targets']=['inspector:DescribeAssessmentTargets']
        for p in ['inspector:DescribeAssessmentTargets']:
            res = {}
            for nm in ["assessmentTargetArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "DescribeAssessmentTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_assessment_templates(self, *args, **kwargs):
        __protego_used['inspector']['describe_assessment_templates']=['inspector:DescribeAssessmentTemplates']
        for p in ['inspector:DescribeAssessmentTemplates']:
            res = {}
            for nm in ["assessmentTemplateArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "DescribeAssessmentTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cross_account_access_role(self, *args, **kwargs):
        __protego_used['inspector']['describe_cross_account_access_role']=['inspector:DescribeCrossAccountAccessRole']
        for p in ['inspector:DescribeCrossAccountAccessRole']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "DescribeCrossAccountAccessRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_exclusions(self, *args, **kwargs):
        __protego_used['inspector']['describe_exclusions']=['inspector:*']
        for p in ['inspector:*']:
            res = {}
            for nm in ["exclusionArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "DescribeExclusions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_findings(self, *args, **kwargs):
        __protego_used['inspector']['describe_findings']=['inspector:DescribeFindings']
        for p in ['inspector:DescribeFindings']:
            res = {}
            for nm in ["findingArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "DescribeFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_resource_groups(self, *args, **kwargs):
        __protego_used['inspector']['describe_resource_groups']=['inspector:DescribeResourceGroups']
        for p in ['inspector:DescribeResourceGroups']:
            res = {}
            for nm in ["resourceGroupArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "DescribeResourceGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_rules_packages(self, *args, **kwargs):
        __protego_used['inspector']['describe_rules_packages']=['inspector:DescribeRulesPackages']
        for p in ['inspector:DescribeRulesPackages']:
            res = {}
            for nm in ["rulesPackageArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "DescribeRulesPackages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_assessment_report(self, *args, **kwargs):
        __protego_used['inspector']['get_assessment_report']=['inspector:*']
        for p in ['inspector:*']:
            res = {}
            for nm in ["reportFileFormat","reportType","assessmentRunArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "GetAssessmentReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_exclusions_preview(self, *args, **kwargs):
        __protego_used['inspector']['get_exclusions_preview']=['inspector:*']
        for p in ['inspector:*']:
            res = {}
            for nm in ["assessmentTemplateArn","previewToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "GetExclusionsPreview", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_telemetry_metadata(self, *args, **kwargs):
        __protego_used['inspector']['get_telemetry_metadata']=['inspector:GetTelemetryMetadata']
        for p in ['inspector:GetTelemetryMetadata']:
            res = {}
            for nm in ["assessmentRunArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "GetTelemetryMetadata", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_assessment_run_agents(self, *args, **kwargs):
        __protego_used['inspector']['list_assessment_run_agents']=['inspector:ListAssessmentRunAgents']
        for p in ['inspector:ListAssessmentRunAgents']:
            res = {}
            for nm in ["assessmentRunArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "ListAssessmentRunAgents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_assessment_runs(self, *args, **kwargs):
        __protego_used['inspector']['list_assessment_runs']=['inspector:ListAssessmentRuns']
        for p in ['inspector:ListAssessmentRuns']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "ListAssessmentRuns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_assessment_targets(self, *args, **kwargs):
        __protego_used['inspector']['list_assessment_targets']=['inspector:ListAssessmentTargets']
        for p in ['inspector:ListAssessmentTargets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "ListAssessmentTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_assessment_templates(self, *args, **kwargs):
        __protego_used['inspector']['list_assessment_templates']=['inspector:ListAssessmentTemplates']
        for p in ['inspector:ListAssessmentTemplates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "ListAssessmentTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_event_subscriptions(self, *args, **kwargs):
        __protego_used['inspector']['list_event_subscriptions']=['inspector:ListEventSubscriptions']
        for p in ['inspector:ListEventSubscriptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "ListEventSubscriptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_exclusions(self, *args, **kwargs):
        __protego_used['inspector']['list_exclusions']=['inspector:*']
        for p in ['inspector:*']:
            res = {}
            for nm in ["assessmentRunArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "ListExclusions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_findings(self, *args, **kwargs):
        __protego_used['inspector']['list_findings']=['inspector:ListFindings']
        for p in ['inspector:ListFindings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "ListFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_rules_packages(self, *args, **kwargs):
        __protego_used['inspector']['list_rules_packages']=['inspector:ListRulesPackages']
        for p in ['inspector:ListRulesPackages']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "ListRulesPackages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['inspector']['list_tags_for_resource']=['inspector:ListTagsForResource']
        for p in ['inspector:ListTagsForResource']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def preview_agents(self, *args, **kwargs):
        __protego_used['inspector']['preview_agents']=['inspector:PreviewAgents']
        for p in ['inspector:PreviewAgents']:
            res = {}
            for nm in ["previewAgentsArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "PreviewAgents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_cross_account_access_role(self, *args, **kwargs):
        __protego_used['inspector']['register_cross_account_access_role']=['inspector:RegisterCrossAccountAccessRole']
        for p in ['inspector:RegisterCrossAccountAccessRole']:
            res = {}
            for nm in ["roleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "RegisterCrossAccountAccessRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_attributes_from_findings(self, *args, **kwargs):
        __protego_used['inspector']['remove_attributes_from_findings']=['inspector:RemoveAttributesFromFindings']
        for p in ['inspector:RemoveAttributesFromFindings']:
            res = {}
            for nm in ["findingArns","attributeKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "RemoveAttributesFromFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_tags_for_resource(self, *args, **kwargs):
        __protego_used['inspector']['set_tags_for_resource']=['inspector:SetTagsForResource']
        for p in ['inspector:SetTagsForResource']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "SetTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_assessment_run(self, *args, **kwargs):
        __protego_used['inspector']['start_assessment_run']=['inspector:StartAssessmentRun']
        for p in ['inspector:StartAssessmentRun']:
            res = {}
            for nm in ["assessmentTemplateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "StartAssessmentRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_assessment_run(self, *args, **kwargs):
        __protego_used['inspector']['stop_assessment_run']=['inspector:StopAssessmentRun']
        for p in ['inspector:StopAssessmentRun']:
            res = {}
            for nm in ["assessmentRunArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "StopAssessmentRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def subscribe_to_event(self, *args, **kwargs):
        __protego_used['inspector']['subscribe_to_event']=['inspector:SubscribeToEvent']
        for p in ['inspector:SubscribeToEvent']:
            res = {}
            for nm in ["resourceArn","event","topicArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "SubscribeToEvent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unsubscribe_from_event(self, *args, **kwargs):
        __protego_used['inspector']['unsubscribe_from_event']=['inspector:UnsubscribeFromEvent']
        for p in ['inspector:UnsubscribeFromEvent']:
            res = {}
            for nm in ["resourceArn","event","topicArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "UnsubscribeFromEvent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_assessment_target(self, *args, **kwargs):
        __protego_used['inspector']['update_assessment_target']=['inspector:UpdateAssessmentTarget']
        for p in ['inspector:UpdateAssessmentTarget']:
            res = {}
            for nm in ["assessmentTargetArn","assessmentTargetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['inspector'].append({'action': "UpdateAssessmentTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class iot:
    def __init__(self, region_name=__default_region):
        __protego_used['iot']= __protego_used.get('iot', {})
        __protego_resource_map['iot']=__protego_resource_map.get('iot', [])
        self.region = region_name
    def accept_certificate_transfer(self, *args, **kwargs):
        __protego_used['iot']['accept_certificate_transfer']=['iot:AcceptCertificateTransfer']
        for p in ['iot:AcceptCertificateTransfer']:
            res = {}
            for nm in ["certificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "AcceptCertificateTransfer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_thing_to_billing_group(self, *args, **kwargs):
        __protego_used['iot']['add_thing_to_billing_group']=['iot:AddThingToBillingGroup','iot:AddThingToBillingGroup']
        for p in ['iot:AddThingToBillingGroup','iot:AddThingToBillingGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "AddThingToBillingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_thing_to_thing_group(self, *args, **kwargs):
        __protego_used['iot']['add_thing_to_thing_group']=['iot:AddThingToThingGroup','iot:AddThingToThingGroup']
        for p in ['iot:AddThingToThingGroup','iot:AddThingToThingGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "AddThingToThingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_targets_with_job(self, *args, **kwargs):
        __protego_used['iot']['associate_targets_with_job']=['iot:AssociateTargetsWithJob','iot:AssociateTargetsWithJob','iot:AssociateTargetsWithJob']
        for p in ['iot:AssociateTargetsWithJob','iot:AssociateTargetsWithJob','iot:AssociateTargetsWithJob']:
            res = {}
            for nm in ["jobId","targets"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "AssociateTargetsWithJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_policy(self, *args, **kwargs):
        __protego_used['iot']['attach_policy']=['iot:AttachPolicy','iot:AttachPolicy']
        for p in ['iot:AttachPolicy','iot:AttachPolicy']:
            res = {}
            for nm in ["policyName","target"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "AttachPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_principal_policy(self, *args, **kwargs):
        __protego_used['iot']['attach_principal_policy']=['iot:AttachPrincipalPolicy']
        for p in ['iot:AttachPrincipalPolicy']:
            res = {}
            for nm in ["policyName","principal"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "AttachPrincipalPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_security_profile(self, *args, **kwargs):
        __protego_used['iot']['attach_security_profile']=['iot:*','iot:*']
        for p in ['iot:*','iot:*']:
            res = {}
            for nm in ["securityProfileName","securityProfileTargetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "AttachSecurityProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_thing_principal(self, *args, **kwargs):
        __protego_used['iot']['attach_thing_principal']=['iot:AttachThingPrincipal']
        for p in ['iot:AttachThingPrincipal']:
            res = {}
            for nm in ["thingName","principal"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "AttachThingPrincipal", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_audit_mitigation_actions_task(self, *args, **kwargs):
        __protego_used['iot']['cancel_audit_mitigation_actions_task']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["taskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CancelAuditMitigationActionsTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_audit_task(self, *args, **kwargs):
        __protego_used['iot']['cancel_audit_task']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["taskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CancelAuditTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_certificate_transfer(self, *args, **kwargs):
        __protego_used['iot']['cancel_certificate_transfer']=['iot:CancelCertificateTransfer']
        for p in ['iot:CancelCertificateTransfer']:
            res = {}
            for nm in ["certificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CancelCertificateTransfer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_job(self, *args, **kwargs):
        __protego_used['iot']['cancel_job']=['iot:CancelJob']
        for p in ['iot:CancelJob']:
            res = {}
            for nm in ["jobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CancelJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_job_execution(self, *args, **kwargs):
        __protego_used['iot']['cancel_job_execution']=['iot:CancelJobExecution','iot:CancelJobExecution']
        for p in ['iot:CancelJobExecution','iot:CancelJobExecution']:
            res = {}
            for nm in ["jobId","thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CancelJobExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def clear_default_authorizer(self, *args, **kwargs):
        __protego_used['iot']['clear_default_authorizer']=['iot:ClearDefaultAuthorizer']
        for p in ['iot:ClearDefaultAuthorizer']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ClearDefaultAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def confirm_topic_rule_destination(self, *args, **kwargs):
        __protego_used['iot']['confirm_topic_rule_destination']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["confirmationToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ConfirmTopicRuleDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_authorizer(self, *args, **kwargs):
        __protego_used['iot']['create_authorizer']=['iot:CreateAuthorizer']
        for p in ['iot:CreateAuthorizer']:
            res = {}
            for nm in ["authorizerFunctionArn","authorizerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_billing_group(self, *args, **kwargs):
        __protego_used['iot']['create_billing_group']=['iot:CreateBillingGroup']
        for p in ['iot:CreateBillingGroup']:
            res = {}
            for nm in ["billingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateBillingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_certificate_from_csr(self, *args, **kwargs):
        __protego_used['iot']['create_certificate_from_csr']=['iot:CreateCertificateFromCsr']
        for p in ['iot:CreateCertificateFromCsr']:
            res = {}
            for nm in ["certificateSigningRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateCertificateFromCsr", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_domain_configuration(self, *args, **kwargs):
        __protego_used['iot']['create_domain_configuration']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["domainConfigurationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateDomainConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dynamic_thing_group(self, *args, **kwargs):
        __protego_used['iot']['create_dynamic_thing_group']=['iot:CreateDynamicThingGroup']
        for p in ['iot:CreateDynamicThingGroup']:
            res = {}
            for nm in ["thingGroupName","queryString"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateDynamicThingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_job(self, *args, **kwargs):
        __protego_used['iot']['create_job']=['iot:CreateJob','iot:CreateJob','iot:CreateJob']
        for p in ['iot:CreateJob','iot:CreateJob','iot:CreateJob']:
            res = {}
            for nm in ["jobId","targets"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_keys_and_certificate(self, *args, **kwargs):
        __protego_used['iot']['create_keys_and_certificate']=['iot:CreateKeysAndCertificate']
        for p in ['iot:CreateKeysAndCertificate']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateKeysAndCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_mitigation_action(self, *args, **kwargs):
        __protego_used['iot']['create_mitigation_action']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["actionName","roleArn","actionParams"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateMitigationAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_ota_update(self, *args, **kwargs):
        __protego_used['iot']['create_ota_update']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["targets","otaUpdateId","files","roleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateOTAUpdate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_policy(self, *args, **kwargs):
        __protego_used['iot']['create_policy']=['iot:CreatePolicy']
        for p in ['iot:CreatePolicy']:
            res = {}
            for nm in ["policyName","policyDocument"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreatePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_policy_version(self, *args, **kwargs):
        __protego_used['iot']['create_policy_version']=['iot:CreatePolicyVersion']
        for p in ['iot:CreatePolicyVersion']:
            res = {}
            for nm in ["policyName","policyDocument"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreatePolicyVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_provisioning_claim(self, *args, **kwargs):
        __protego_used['iot']['create_provisioning_claim']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["templateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateProvisioningClaim", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_provisioning_template(self, *args, **kwargs):
        __protego_used['iot']['create_provisioning_template']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["templateName","templateBody","provisioningRoleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateProvisioningTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_provisioning_template_version(self, *args, **kwargs):
        __protego_used['iot']['create_provisioning_template_version']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["templateName","templateBody"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateProvisioningTemplateVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_role_alias(self, *args, **kwargs):
        __protego_used['iot']['create_role_alias']=['iot:CreateRoleAlias','iot:CreateRoleAlias']
        for p in ['iot:CreateRoleAlias','iot:CreateRoleAlias']:
            res = {}
            for nm in ["roleAlias","roleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateRoleAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_scheduled_audit(self, *args, **kwargs):
        __protego_used['iot']['create_scheduled_audit']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["scheduledAuditName","targetCheckNames","frequency"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateScheduledAudit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_security_profile(self, *args, **kwargs):
        __protego_used['iot']['create_security_profile']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["securityProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateSecurityProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stream(self, *args, **kwargs):
        __protego_used['iot']['create_stream']=['iot:CreateStream']
        for p in ['iot:CreateStream']:
            res = {}
            for nm in ["roleArn","streamId","files"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_thing(self, *args, **kwargs):
        __protego_used['iot']['create_thing']=['iot:CreateThing','iot:CreateThing']
        for p in ['iot:CreateThing','iot:CreateThing']:
            res = {}
            for nm in ["thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateThing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_thing_group(self, *args, **kwargs):
        __protego_used['iot']['create_thing_group']=['iot:CreateThingGroup']
        for p in ['iot:CreateThingGroup']:
            res = {}
            for nm in ["thingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateThingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_thing_type(self, *args, **kwargs):
        __protego_used['iot']['create_thing_type']=['iot:CreateThingType']
        for p in ['iot:CreateThingType']:
            res = {}
            for nm in ["thingTypeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateThingType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_topic_rule(self, *args, **kwargs):
        __protego_used['iot']['create_topic_rule']=['iot:CreateTopicRule']
        for p in ['iot:CreateTopicRule']:
            res = {}
            for nm in ["ruleName","topicRulePayload"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateTopicRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_topic_rule_destination(self, *args, **kwargs):
        __protego_used['iot']['create_topic_rule_destination']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["destinationConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "CreateTopicRuleDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_account_audit_configuration(self, *args, **kwargs):
        __protego_used['iot']['delete_account_audit_configuration']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteAccountAuditConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_authorizer(self, *args, **kwargs):
        __protego_used['iot']['delete_authorizer']=['iot:DeleteAuthorizer']
        for p in ['iot:DeleteAuthorizer']:
            res = {}
            for nm in ["authorizerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_billing_group(self, *args, **kwargs):
        __protego_used['iot']['delete_billing_group']=['iot:DeleteBillingGroup']
        for p in ['iot:DeleteBillingGroup']:
            res = {}
            for nm in ["billingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteBillingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ca_certificate(self, *args, **kwargs):
        __protego_used['iot']['delete_ca_certificate']=['iot:DeleteCACertificate']
        for p in ['iot:DeleteCACertificate']:
            res = {}
            for nm in ["certificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteCACertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_certificate(self, *args, **kwargs):
        __protego_used['iot']['delete_certificate']=['iot:DeleteCertificate']
        for p in ['iot:DeleteCertificate']:
            res = {}
            for nm in ["certificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_domain_configuration(self, *args, **kwargs):
        __protego_used['iot']['delete_domain_configuration']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["domainConfigurationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteDomainConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dynamic_thing_group(self, *args, **kwargs):
        __protego_used['iot']['delete_dynamic_thing_group']=['iot:DeleteDynamicThingGroup']
        for p in ['iot:DeleteDynamicThingGroup']:
            res = {}
            for nm in ["thingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteDynamicThingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_job(self, *args, **kwargs):
        __protego_used['iot']['delete_job']=['iot:DeleteJob']
        for p in ['iot:DeleteJob']:
            res = {}
            for nm in ["jobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_job_execution(self, *args, **kwargs):
        __protego_used['iot']['delete_job_execution']=['iot:DeleteJobExecution','iot:DeleteJobExecution']
        for p in ['iot:DeleteJobExecution','iot:DeleteJobExecution']:
            res = {}
            for nm in ["jobId","executionNumber","thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteJobExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_mitigation_action(self, *args, **kwargs):
        __protego_used['iot']['delete_mitigation_action']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["actionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteMitigationAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ota_update(self, *args, **kwargs):
        __protego_used['iot']['delete_ota_update']=['iot:DeleteOTAUpdate']
        for p in ['iot:DeleteOTAUpdate']:
            res = {}
            for nm in ["otaUpdateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteOTAUpdate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_policy(self, *args, **kwargs):
        __protego_used['iot']['delete_policy']=['iot:DeletePolicy']
        for p in ['iot:DeletePolicy']:
            res = {}
            for nm in ["policyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeletePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_policy_version(self, *args, **kwargs):
        __protego_used['iot']['delete_policy_version']=['iot:DeletePolicyVersion']
        for p in ['iot:DeletePolicyVersion']:
            res = {}
            for nm in ["policyName","policyVersionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeletePolicyVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_provisioning_template(self, *args, **kwargs):
        __protego_used['iot']['delete_provisioning_template']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["templateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteProvisioningTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_provisioning_template_version(self, *args, **kwargs):
        __protego_used['iot']['delete_provisioning_template_version']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["templateName","versionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteProvisioningTemplateVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_registration_code(self, *args, **kwargs):
        __protego_used['iot']['delete_registration_code']=['iot:DeleteRegistrationCode']
        for p in ['iot:DeleteRegistrationCode']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteRegistrationCode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_role_alias(self, *args, **kwargs):
        __protego_used['iot']['delete_role_alias']=['iot:DeleteRoleAlias']
        for p in ['iot:DeleteRoleAlias']:
            res = {}
            for nm in ["roleAlias"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteRoleAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_scheduled_audit(self, *args, **kwargs):
        __protego_used['iot']['delete_scheduled_audit']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["scheduledAuditName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteScheduledAudit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_security_profile(self, *args, **kwargs):
        __protego_used['iot']['delete_security_profile']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["securityProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteSecurityProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_stream(self, *args, **kwargs):
        __protego_used['iot']['delete_stream']=['iot:DeleteStream']
        for p in ['iot:DeleteStream']:
            res = {}
            for nm in ["streamId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_thing(self, *args, **kwargs):
        __protego_used['iot']['delete_thing']=['iot:DeleteThing']
        for p in ['iot:DeleteThing']:
            res = {}
            for nm in ["thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteThing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_thing_group(self, *args, **kwargs):
        __protego_used['iot']['delete_thing_group']=['iot:DeleteThingGroup']
        for p in ['iot:DeleteThingGroup']:
            res = {}
            for nm in ["thingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteThingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_thing_type(self, *args, **kwargs):
        __protego_used['iot']['delete_thing_type']=['iot:DeleteThingType']
        for p in ['iot:DeleteThingType']:
            res = {}
            for nm in ["thingTypeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteThingType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_topic_rule(self, *args, **kwargs):
        __protego_used['iot']['delete_topic_rule']=['iot:DeleteTopicRule']
        for p in ['iot:DeleteTopicRule']:
            res = {}
            for nm in ["ruleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteTopicRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_topic_rule_destination(self, *args, **kwargs):
        __protego_used['iot']['delete_topic_rule_destination']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteTopicRuleDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_v2_logging_level(self, *args, **kwargs):
        __protego_used['iot']['delete_v2_logging_level']=['iot:DeleteV2LoggingLevel']
        for p in ['iot:DeleteV2LoggingLevel']:
            res = {}
            for nm in ["targetName","targetType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeleteV2LoggingLevel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deprecate_thing_type(self, *args, **kwargs):
        __protego_used['iot']['deprecate_thing_type']=['iot:DeprecateThingType']
        for p in ['iot:DeprecateThingType']:
            res = {}
            for nm in ["thingTypeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DeprecateThingType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_audit_configuration(self, *args, **kwargs):
        __protego_used['iot']['describe_account_audit_configuration']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeAccountAuditConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_audit_finding(self, *args, **kwargs):
        __protego_used['iot']['describe_audit_finding']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["findingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeAuditFinding", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_audit_mitigation_actions_task(self, *args, **kwargs):
        __protego_used['iot']['describe_audit_mitigation_actions_task']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["taskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeAuditMitigationActionsTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_audit_task(self, *args, **kwargs):
        __protego_used['iot']['describe_audit_task']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["taskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeAuditTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_authorizer(self, *args, **kwargs):
        __protego_used['iot']['describe_authorizer']=['iot:DescribeAuthorizer']
        for p in ['iot:DescribeAuthorizer']:
            res = {}
            for nm in ["authorizerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_billing_group(self, *args, **kwargs):
        __protego_used['iot']['describe_billing_group']=['iot:DescribeBillingGroup']
        for p in ['iot:DescribeBillingGroup']:
            res = {}
            for nm in ["billingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeBillingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_ca_certificate(self, *args, **kwargs):
        __protego_used['iot']['describe_ca_certificate']=['iot:DescribeCACertificate']
        for p in ['iot:DescribeCACertificate']:
            res = {}
            for nm in ["certificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeCACertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_certificate(self, *args, **kwargs):
        __protego_used['iot']['describe_certificate']=['iot:DescribeCertificate']
        for p in ['iot:DescribeCertificate']:
            res = {}
            for nm in ["certificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_default_authorizer(self, *args, **kwargs):
        __protego_used['iot']['describe_default_authorizer']=['iot:DescribeDefaultAuthorizer']
        for p in ['iot:DescribeDefaultAuthorizer']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeDefaultAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_domain_configuration(self, *args, **kwargs):
        __protego_used['iot']['describe_domain_configuration']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["domainConfigurationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeDomainConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_endpoint(self, *args, **kwargs):
        __protego_used['iot']['describe_endpoint']=['iot:DescribeEndpoint']
        for p in ['iot:DescribeEndpoint']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_configurations(self, *args, **kwargs):
        __protego_used['iot']['describe_event_configurations']=['iot:DescribeEventConfigurations']
        for p in ['iot:DescribeEventConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeEventConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_index(self, *args, **kwargs):
        __protego_used['iot']['describe_index']=['iot:DescribeIndex']
        for p in ['iot:DescribeIndex']:
            res = {}
            for nm in ["indexName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeIndex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_job(self, *args, **kwargs):
        __protego_used['iot']['describe_job']=['iot:DescribeJob']
        for p in ['iot:DescribeJob']:
            res = {}
            for nm in ["jobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_job_execution(self, *args, **kwargs):
        __protego_used['iot']['describe_job_execution']=['iot:DescribeJobExecution','iot:DescribeJobExecution']
        for p in ['iot:DescribeJobExecution','iot:DescribeJobExecution']:
            res = {}
            for nm in ["jobId","thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeJobExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_mitigation_action(self, *args, **kwargs):
        __protego_used['iot']['describe_mitigation_action']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["actionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeMitigationAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_provisioning_template(self, *args, **kwargs):
        __protego_used['iot']['describe_provisioning_template']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["templateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeProvisioningTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_provisioning_template_version(self, *args, **kwargs):
        __protego_used['iot']['describe_provisioning_template_version']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["templateName","versionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeProvisioningTemplateVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_role_alias(self, *args, **kwargs):
        __protego_used['iot']['describe_role_alias']=['iot:DescribeRoleAlias']
        for p in ['iot:DescribeRoleAlias']:
            res = {}
            for nm in ["roleAlias"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeRoleAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scheduled_audit(self, *args, **kwargs):
        __protego_used['iot']['describe_scheduled_audit']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["scheduledAuditName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeScheduledAudit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_security_profile(self, *args, **kwargs):
        __protego_used['iot']['describe_security_profile']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["securityProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeSecurityProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stream(self, *args, **kwargs):
        __protego_used['iot']['describe_stream']=['iot:DescribeStream']
        for p in ['iot:DescribeStream']:
            res = {}
            for nm in ["streamId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_thing(self, *args, **kwargs):
        __protego_used['iot']['describe_thing']=['iot:DescribeThing']
        for p in ['iot:DescribeThing']:
            res = {}
            for nm in ["thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeThing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_thing_group(self, *args, **kwargs):
        __protego_used['iot']['describe_thing_group']=['iot:DescribeThingGroup']
        for p in ['iot:DescribeThingGroup']:
            res = {}
            for nm in ["thingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeThingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_thing_registration_task(self, *args, **kwargs):
        __protego_used['iot']['describe_thing_registration_task']=['iot:DescribeThingRegistrationTask']
        for p in ['iot:DescribeThingRegistrationTask']:
            res = {}
            for nm in ["taskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeThingRegistrationTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_thing_type(self, *args, **kwargs):
        __protego_used['iot']['describe_thing_type']=['iot:DescribeThingType']
        for p in ['iot:DescribeThingType']:
            res = {}
            for nm in ["thingTypeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DescribeThingType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_policy(self, *args, **kwargs):
        __protego_used['iot']['detach_policy']=['iot:DetachPolicy','iot:DetachPolicy']
        for p in ['iot:DetachPolicy','iot:DetachPolicy']:
            res = {}
            for nm in ["policyName","target"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DetachPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_principal_policy(self, *args, **kwargs):
        __protego_used['iot']['detach_principal_policy']=['iot:DetachPrincipalPolicy']
        for p in ['iot:DetachPrincipalPolicy']:
            res = {}
            for nm in ["policyName","principal"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DetachPrincipalPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_security_profile(self, *args, **kwargs):
        __protego_used['iot']['detach_security_profile']=['iot:*','iot:*']
        for p in ['iot:*','iot:*']:
            res = {}
            for nm in ["securityProfileName","securityProfileTargetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DetachSecurityProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_thing_principal(self, *args, **kwargs):
        __protego_used['iot']['detach_thing_principal']=['iot:DetachThingPrincipal']
        for p in ['iot:DetachThingPrincipal']:
            res = {}
            for nm in ["thingName","principal"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DetachThingPrincipal", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_topic_rule(self, *args, **kwargs):
        __protego_used['iot']['disable_topic_rule']=['iot:DisableTopicRule']
        for p in ['iot:DisableTopicRule']:
            res = {}
            for nm in ["ruleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "DisableTopicRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_topic_rule(self, *args, **kwargs):
        __protego_used['iot']['enable_topic_rule']=['iot:EnableTopicRule']
        for p in ['iot:EnableTopicRule']:
            res = {}
            for nm in ["ruleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "EnableTopicRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_cardinality(self, *args, **kwargs):
        __protego_used['iot']['get_cardinality']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["queryString"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetCardinality", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_effective_policies(self, *args, **kwargs):
        __protego_used['iot']['get_effective_policies']=['iot:GetEffectivePolicies']
        for p in ['iot:GetEffectivePolicies']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetEffectivePolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_indexing_configuration(self, *args, **kwargs):
        __protego_used['iot']['get_indexing_configuration']=['iot:GetIndexingConfiguration']
        for p in ['iot:GetIndexingConfiguration']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetIndexingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job_document(self, *args, **kwargs):
        __protego_used['iot']['get_job_document']=['iot:GetJobDocument']
        for p in ['iot:GetJobDocument']:
            res = {}
            for nm in ["jobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetJobDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_logging_options(self, *args, **kwargs):
        __protego_used['iot']['get_logging_options']=['iot:GetLoggingOptions']
        for p in ['iot:GetLoggingOptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetLoggingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ota_update(self, *args, **kwargs):
        __protego_used['iot']['get_ota_update']=['iot:GetOTAUpdate']
        for p in ['iot:GetOTAUpdate']:
            res = {}
            for nm in ["otaUpdateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetOTAUpdate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_percentiles(self, *args, **kwargs):
        __protego_used['iot']['get_percentiles']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["queryString"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetPercentiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_policy(self, *args, **kwargs):
        __protego_used['iot']['get_policy']=['iot:GetPolicy']
        for p in ['iot:GetPolicy']:
            res = {}
            for nm in ["policyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_policy_version(self, *args, **kwargs):
        __protego_used['iot']['get_policy_version']=['iot:GetPolicyVersion']
        for p in ['iot:GetPolicyVersion']:
            res = {}
            for nm in ["policyName","policyVersionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetPolicyVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_registration_code(self, *args, **kwargs):
        __protego_used['iot']['get_registration_code']=['iot:GetRegistrationCode']
        for p in ['iot:GetRegistrationCode']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetRegistrationCode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_statistics(self, *args, **kwargs):
        __protego_used['iot']['get_statistics']=['iot:GetStatistics']
        for p in ['iot:GetStatistics']:
            res = {}
            for nm in ["queryString"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetStatistics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_topic_rule(self, *args, **kwargs):
        __protego_used['iot']['get_topic_rule']=['iot:GetTopicRule']
        for p in ['iot:GetTopicRule']:
            res = {}
            for nm in ["ruleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetTopicRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_topic_rule_destination(self, *args, **kwargs):
        __protego_used['iot']['get_topic_rule_destination']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetTopicRuleDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_v2_logging_options(self, *args, **kwargs):
        __protego_used['iot']['get_v2_logging_options']=['iot:GetV2LoggingOptions']
        for p in ['iot:GetV2LoggingOptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "GetV2LoggingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_active_violations(self, *args, **kwargs):
        __protego_used['iot']['list_active_violations']=['iot:*','iot:*']
        for p in ['iot:*','iot:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListActiveViolations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_attached_policies(self, *args, **kwargs):
        __protego_used['iot']['list_attached_policies']=['iot:ListAttachedPolicies']
        for p in ['iot:ListAttachedPolicies']:
            res = {}
            for nm in ["target"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListAttachedPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_audit_findings(self, *args, **kwargs):
        __protego_used['iot']['list_audit_findings']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListAuditFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_audit_mitigation_actions_executions(self, *args, **kwargs):
        __protego_used['iot']['list_audit_mitigation_actions_executions']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["taskId","findingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListAuditMitigationActionsExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_audit_mitigation_actions_tasks(self, *args, **kwargs):
        __protego_used['iot']['list_audit_mitigation_actions_tasks']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["startTime","endTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListAuditMitigationActionsTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_audit_tasks(self, *args, **kwargs):
        __protego_used['iot']['list_audit_tasks']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["startTime","endTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListAuditTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_authorizers(self, *args, **kwargs):
        __protego_used['iot']['list_authorizers']=['iot:ListAuthorizers']
        for p in ['iot:ListAuthorizers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListAuthorizers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_billing_groups(self, *args, **kwargs):
        __protego_used['iot']['list_billing_groups']=['iot:ListBillingGroups']
        for p in ['iot:ListBillingGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListBillingGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_ca_certificates(self, *args, **kwargs):
        __protego_used['iot']['list_ca_certificates']=['iot:ListCACertificates']
        for p in ['iot:ListCACertificates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListCACertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_certificates(self, *args, **kwargs):
        __protego_used['iot']['list_certificates']=['iot:ListCertificates']
        for p in ['iot:ListCertificates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_certificates_by_ca(self, *args, **kwargs):
        __protego_used['iot']['list_certificates_by_ca']=['iot:ListCertificatesByCA']
        for p in ['iot:ListCertificatesByCA']:
            res = {}
            for nm in ["caCertificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListCertificatesByCA", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_domain_configurations(self, *args, **kwargs):
        __protego_used['iot']['list_domain_configurations']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListDomainConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_indices(self, *args, **kwargs):
        __protego_used['iot']['list_indices']=['iot:ListIndices']
        for p in ['iot:ListIndices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListIndices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_job_executions_for_job(self, *args, **kwargs):
        __protego_used['iot']['list_job_executions_for_job']=['iot:ListJobExecutionsForJob']
        for p in ['iot:ListJobExecutionsForJob']:
            res = {}
            for nm in ["jobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListJobExecutionsForJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_job_executions_for_thing(self, *args, **kwargs):
        __protego_used['iot']['list_job_executions_for_thing']=['iot:ListJobExecutionsForThing']
        for p in ['iot:ListJobExecutionsForThing']:
            res = {}
            for nm in ["thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListJobExecutionsForThing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs(self, *args, **kwargs):
        __protego_used['iot']['list_jobs']=['iot:ListJobs']
        for p in ['iot:ListJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_mitigation_actions(self, *args, **kwargs):
        __protego_used['iot']['list_mitigation_actions']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListMitigationActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_ota_updates(self, *args, **kwargs):
        __protego_used['iot']['list_ota_updates']=['iot:ListOTAUpdates']
        for p in ['iot:ListOTAUpdates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListOTAUpdates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_outgoing_certificates(self, *args, **kwargs):
        __protego_used['iot']['list_outgoing_certificates']=['iot:ListOutgoingCertificates']
        for p in ['iot:ListOutgoingCertificates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListOutgoingCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_policies(self, *args, **kwargs):
        __protego_used['iot']['list_policies']=['iot:ListPolicies']
        for p in ['iot:ListPolicies']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_policy_principals(self, *args, **kwargs):
        __protego_used['iot']['list_policy_principals']=['iot:ListPolicyPrincipals']
        for p in ['iot:ListPolicyPrincipals']:
            res = {}
            for nm in ["policyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListPolicyPrincipals", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_policy_versions(self, *args, **kwargs):
        __protego_used['iot']['list_policy_versions']=['iot:ListPolicyVersions']
        for p in ['iot:ListPolicyVersions']:
            res = {}
            for nm in ["policyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListPolicyVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_principal_policies(self, *args, **kwargs):
        __protego_used['iot']['list_principal_policies']=['iot:ListPrincipalPolicies']
        for p in ['iot:ListPrincipalPolicies']:
            res = {}
            for nm in ["principal"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListPrincipalPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_principal_things(self, *args, **kwargs):
        __protego_used['iot']['list_principal_things']=['iot:ListPrincipalThings']
        for p in ['iot:ListPrincipalThings']:
            res = {}
            for nm in ["principal"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListPrincipalThings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_provisioning_template_versions(self, *args, **kwargs):
        __protego_used['iot']['list_provisioning_template_versions']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["templateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListProvisioningTemplateVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_provisioning_templates(self, *args, **kwargs):
        __protego_used['iot']['list_provisioning_templates']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListProvisioningTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_role_aliases(self, *args, **kwargs):
        __protego_used['iot']['list_role_aliases']=['iot:ListRoleAliases']
        for p in ['iot:ListRoleAliases']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListRoleAliases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_scheduled_audits(self, *args, **kwargs):
        __protego_used['iot']['list_scheduled_audits']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListScheduledAudits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_security_profiles(self, *args, **kwargs):
        __protego_used['iot']['list_security_profiles']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListSecurityProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_security_profiles_for_target(self, *args, **kwargs):
        __protego_used['iot']['list_security_profiles_for_target']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["securityProfileTargetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListSecurityProfilesForTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_streams(self, *args, **kwargs):
        __protego_used['iot']['list_streams']=['iot:ListStreams']
        for p in ['iot:ListStreams']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListStreams", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['iot']['list_tags_for_resource']=['iot:ListTagsForResource']
        for p in ['iot:ListTagsForResource']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_targets_for_policy(self, *args, **kwargs):
        __protego_used['iot']['list_targets_for_policy']=['iot:ListTargetsForPolicy']
        for p in ['iot:ListTargetsForPolicy']:
            res = {}
            for nm in ["policyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListTargetsForPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_targets_for_security_profile(self, *args, **kwargs):
        __protego_used['iot']['list_targets_for_security_profile']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["securityProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListTargetsForSecurityProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_thing_groups(self, *args, **kwargs):
        __protego_used['iot']['list_thing_groups']=['iot:ListThingGroups']
        for p in ['iot:ListThingGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListThingGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_thing_groups_for_thing(self, *args, **kwargs):
        __protego_used['iot']['list_thing_groups_for_thing']=['iot:ListThingGroupsForThing']
        for p in ['iot:ListThingGroupsForThing']:
            res = {}
            for nm in ["thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListThingGroupsForThing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_thing_principals(self, *args, **kwargs):
        __protego_used['iot']['list_thing_principals']=['iot:ListThingPrincipals']
        for p in ['iot:ListThingPrincipals']:
            res = {}
            for nm in ["thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListThingPrincipals", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_thing_registration_task_reports(self, *args, **kwargs):
        __protego_used['iot']['list_thing_registration_task_reports']=['iot:ListThingRegistrationTaskReports']
        for p in ['iot:ListThingRegistrationTaskReports']:
            res = {}
            for nm in ["reportType","taskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListThingRegistrationTaskReports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_thing_registration_tasks(self, *args, **kwargs):
        __protego_used['iot']['list_thing_registration_tasks']=['iot:ListThingRegistrationTasks']
        for p in ['iot:ListThingRegistrationTasks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListThingRegistrationTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_thing_types(self, *args, **kwargs):
        __protego_used['iot']['list_thing_types']=['iot:ListThingTypes']
        for p in ['iot:ListThingTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListThingTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_things(self, *args, **kwargs):
        __protego_used['iot']['list_things']=['iot:ListThings']
        for p in ['iot:ListThings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListThings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_things_in_billing_group(self, *args, **kwargs):
        __protego_used['iot']['list_things_in_billing_group']=['iot:ListThingsInBillingGroup']
        for p in ['iot:ListThingsInBillingGroup']:
            res = {}
            for nm in ["billingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListThingsInBillingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_things_in_thing_group(self, *args, **kwargs):
        __protego_used['iot']['list_things_in_thing_group']=['iot:ListThingsInThingGroup']
        for p in ['iot:ListThingsInThingGroup']:
            res = {}
            for nm in ["thingGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListThingsInThingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_topic_rule_destinations(self, *args, **kwargs):
        __protego_used['iot']['list_topic_rule_destinations']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListTopicRuleDestinations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_topic_rules(self, *args, **kwargs):
        __protego_used['iot']['list_topic_rules']=['iot:ListTopicRules']
        for p in ['iot:ListTopicRules']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListTopicRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_v2_logging_levels(self, *args, **kwargs):
        __protego_used['iot']['list_v2_logging_levels']=['iot:ListV2LoggingLevels']
        for p in ['iot:ListV2LoggingLevels']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListV2LoggingLevels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_violation_events(self, *args, **kwargs):
        __protego_used['iot']['list_violation_events']=['iot:*','iot:*']
        for p in ['iot:*','iot:*']:
            res = {}
            for nm in ["startTime","endTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ListViolationEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_ca_certificate(self, *args, **kwargs):
        __protego_used['iot']['register_ca_certificate']=['iot:RegisterCACertificate']
        for p in ['iot:RegisterCACertificate']:
            res = {}
            for nm in ["verificationCertificate","caCertificate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "RegisterCACertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_certificate(self, *args, **kwargs):
        __protego_used['iot']['register_certificate']=['iot:RegisterCertificate']
        for p in ['iot:RegisterCertificate']:
            res = {}
            for nm in ["certificatePem"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "RegisterCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_thing(self, *args, **kwargs):
        __protego_used['iot']['register_thing']=['iot:RegisterThing']
        for p in ['iot:RegisterThing']:
            res = {}
            for nm in ["templateBody"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "RegisterThing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_certificate_transfer(self, *args, **kwargs):
        __protego_used['iot']['reject_certificate_transfer']=['iot:RejectCertificateTransfer']
        for p in ['iot:RejectCertificateTransfer']:
            res = {}
            for nm in ["certificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "RejectCertificateTransfer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_thing_from_billing_group(self, *args, **kwargs):
        __protego_used['iot']['remove_thing_from_billing_group']=['iot:RemoveThingFromBillingGroup','iot:RemoveThingFromBillingGroup']
        for p in ['iot:RemoveThingFromBillingGroup','iot:RemoveThingFromBillingGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "RemoveThingFromBillingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_thing_from_thing_group(self, *args, **kwargs):
        __protego_used['iot']['remove_thing_from_thing_group']=['iot:RemoveThingFromThingGroup','iot:RemoveThingFromThingGroup']
        for p in ['iot:RemoveThingFromThingGroup','iot:RemoveThingFromThingGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "RemoveThingFromThingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def replace_topic_rule(self, *args, **kwargs):
        __protego_used['iot']['replace_topic_rule']=['iot:ReplaceTopicRule']
        for p in ['iot:ReplaceTopicRule']:
            res = {}
            for nm in ["ruleName","topicRulePayload"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ReplaceTopicRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_index(self, *args, **kwargs):
        __protego_used['iot']['search_index']=['iot:SearchIndex']
        for p in ['iot:SearchIndex']:
            res = {}
            for nm in ["queryString"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "SearchIndex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_default_authorizer(self, *args, **kwargs):
        __protego_used['iot']['set_default_authorizer']=['iot:SetDefaultAuthorizer']
        for p in ['iot:SetDefaultAuthorizer']:
            res = {}
            for nm in ["authorizerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "SetDefaultAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_default_policy_version(self, *args, **kwargs):
        __protego_used['iot']['set_default_policy_version']=['iot:SetDefaultPolicyVersion']
        for p in ['iot:SetDefaultPolicyVersion']:
            res = {}
            for nm in ["policyName","policyVersionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "SetDefaultPolicyVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_logging_options(self, *args, **kwargs):
        __protego_used['iot']['set_logging_options']=['iot:SetLoggingOptions']
        for p in ['iot:SetLoggingOptions']:
            res = {}
            for nm in ["loggingOptionsPayload"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "SetLoggingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_v2_logging_level(self, *args, **kwargs):
        __protego_used['iot']['set_v2_logging_level']=['iot:SetV2LoggingLevel']
        for p in ['iot:SetV2LoggingLevel']:
            res = {}
            for nm in ["logLevel","logTarget"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "SetV2LoggingLevel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_v2_logging_options(self, *args, **kwargs):
        __protego_used['iot']['set_v2_logging_options']=['iot:SetV2LoggingOptions']
        for p in ['iot:SetV2LoggingOptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "SetV2LoggingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_audit_mitigation_actions_task(self, *args, **kwargs):
        __protego_used['iot']['start_audit_mitigation_actions_task']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["auditCheckToActionsMapping","taskId","target","clientRequestToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "StartAuditMitigationActionsTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_on_demand_audit_task(self, *args, **kwargs):
        __protego_used['iot']['start_on_demand_audit_task']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["targetCheckNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "StartOnDemandAuditTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_thing_registration_task(self, *args, **kwargs):
        __protego_used['iot']['start_thing_registration_task']=['iot:StartThingRegistrationTask']
        for p in ['iot:StartThingRegistrationTask']:
            res = {}
            for nm in ["templateBody","inputFileKey","roleArn","inputFileBucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "StartThingRegistrationTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_thing_registration_task(self, *args, **kwargs):
        __protego_used['iot']['stop_thing_registration_task']=['iot:StopThingRegistrationTask']
        for p in ['iot:StopThingRegistrationTask']:
            res = {}
            for nm in ["taskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "StopThingRegistrationTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['iot']['tag_resource']=['iot:TagResource']
        for p in ['iot:TagResource']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_authorization(self, *args, **kwargs):
        __protego_used['iot']['test_authorization']=['iot:TestAuthorization']
        for p in ['iot:TestAuthorization']:
            res = {}
            for nm in ["authInfos"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "TestAuthorization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_invoke_authorizer(self, *args, **kwargs):
        __protego_used['iot']['test_invoke_authorizer']=['iot:TestInvokeAuthorizer']
        for p in ['iot:TestInvokeAuthorizer']:
            res = {}
            for nm in ["authorizerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "TestInvokeAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def transfer_certificate(self, *args, **kwargs):
        __protego_used['iot']['transfer_certificate']=['iot:TransferCertificate']
        for p in ['iot:TransferCertificate']:
            res = {}
            for nm in ["targetAwsAccount","certificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "TransferCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['iot']['untag_resource']=['iot:UntagResource']
        for p in ['iot:UntagResource']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_account_audit_configuration(self, *args, **kwargs):
        __protego_used['iot']['update_account_audit_configuration']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateAccountAuditConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_authorizer(self, *args, **kwargs):
        __protego_used['iot']['update_authorizer']=['iot:UpdateAuthorizer']
        for p in ['iot:UpdateAuthorizer']:
            res = {}
            for nm in ["authorizerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateAuthorizer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_billing_group(self, *args, **kwargs):
        __protego_used['iot']['update_billing_group']=['iot:UpdateBillingGroup']
        for p in ['iot:UpdateBillingGroup']:
            res = {}
            for nm in ["billingGroupName","billingGroupProperties"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateBillingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_ca_certificate(self, *args, **kwargs):
        __protego_used['iot']['update_ca_certificate']=['iot:UpdateCACertificate']
        for p in ['iot:UpdateCACertificate']:
            res = {}
            for nm in ["certificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateCACertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_certificate(self, *args, **kwargs):
        __protego_used['iot']['update_certificate']=['iot:UpdateCertificate']
        for p in ['iot:UpdateCertificate']:
            res = {}
            for nm in ["newStatus","certificateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_domain_configuration(self, *args, **kwargs):
        __protego_used['iot']['update_domain_configuration']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["domainConfigurationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateDomainConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_dynamic_thing_group(self, *args, **kwargs):
        __protego_used['iot']['update_dynamic_thing_group']=['iot:UpdateDynamicThingGroup']
        for p in ['iot:UpdateDynamicThingGroup']:
            res = {}
            for nm in ["thingGroupName","thingGroupProperties"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateDynamicThingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_event_configurations(self, *args, **kwargs):
        __protego_used['iot']['update_event_configurations']=['iot:UpdateEventConfigurations']
        for p in ['iot:UpdateEventConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateEventConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_indexing_configuration(self, *args, **kwargs):
        __protego_used['iot']['update_indexing_configuration']=['iot:UpdateIndexingConfiguration']
        for p in ['iot:UpdateIndexingConfiguration']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateIndexingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_job(self, *args, **kwargs):
        __protego_used['iot']['update_job']=['iot:UpdateJob']
        for p in ['iot:UpdateJob']:
            res = {}
            for nm in ["jobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_mitigation_action(self, *args, **kwargs):
        __protego_used['iot']['update_mitigation_action']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["actionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateMitigationAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_provisioning_template(self, *args, **kwargs):
        __protego_used['iot']['update_provisioning_template']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["templateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateProvisioningTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_role_alias(self, *args, **kwargs):
        __protego_used['iot']['update_role_alias']=['iot:UpdateRoleAlias','iot:UpdateRoleAlias']
        for p in ['iot:UpdateRoleAlias','iot:UpdateRoleAlias']:
            res = {}
            for nm in ["roleAlias"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateRoleAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_scheduled_audit(self, *args, **kwargs):
        __protego_used['iot']['update_scheduled_audit']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["scheduledAuditName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateScheduledAudit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_security_profile(self, *args, **kwargs):
        __protego_used['iot']['update_security_profile']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["securityProfileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateSecurityProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_stream(self, *args, **kwargs):
        __protego_used['iot']['update_stream']=['iot:UpdateStream']
        for p in ['iot:UpdateStream']:
            res = {}
            for nm in ["streamId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_thing(self, *args, **kwargs):
        __protego_used['iot']['update_thing']=['iot:UpdateThing']
        for p in ['iot:UpdateThing']:
            res = {}
            for nm in ["thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateThing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_thing_group(self, *args, **kwargs):
        __protego_used['iot']['update_thing_group']=['iot:UpdateThingGroup']
        for p in ['iot:UpdateThingGroup']:
            res = {}
            for nm in ["thingGroupName","thingGroupProperties"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateThingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_thing_groups_for_thing(self, *args, **kwargs):
        __protego_used['iot']['update_thing_groups_for_thing']=['iot:UpdateThingGroupsForThing','iot:UpdateThingGroupsForThing']
        for p in ['iot:UpdateThingGroupsForThing','iot:UpdateThingGroupsForThing']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateThingGroupsForThing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_topic_rule_destination(self, *args, **kwargs):
        __protego_used['iot']['update_topic_rule_destination']=['iot:*']
        for p in ['iot:*']:
            res = {}
            for nm in ["arn","status"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "UpdateTopicRuleDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def validate_security_profile_behaviors(self, *args, **kwargs):
        __protego_used['iot']['validate_security_profile_behaviors']=['iotanalytics:*']
        for p in ['iotanalytics:*']:
            res = {}
            for nm in ["behaviors"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot'].append({'action': "ValidateSecurityProfileBehaviors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class iot_data:
    def __init__(self, region_name=__default_region):
        __protego_used['iot-data']= __protego_used.get('iot-data', {})
        __protego_resource_map['iot-data']=__protego_resource_map.get('iot-data', [])
        self.region = region_name
    def delete_thing_shadow(self, *args, **kwargs):
        __protego_used['iot-data']['delete_thing_shadow']=['iot:DeleteThingShadow']
        for p in ['iot:DeleteThingShadow']:
            res = {}
            for nm in ["thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot-data'].append({'action': "DeleteThingShadow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_thing_shadow(self, *args, **kwargs):
        __protego_used['iot-data']['get_thing_shadow']=['iot:GetThingShadow']
        for p in ['iot:GetThingShadow']:
            res = {}
            for nm in ["thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot-data'].append({'action': "GetThingShadow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def publish(self, *args, **kwargs):
        __protego_used['iot-data']['publish']=['iot:Publish']
        for p in ['iot:Publish']:
            res = {}
            for nm in ["topic"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot-data'].append({'action': "Publish", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_thing_shadow(self, *args, **kwargs):
        __protego_used['iot-data']['update_thing_shadow']=['iot:UpdateThingShadow']
        for p in ['iot:UpdateThingShadow']:
            res = {}
            for nm in ["thingName","payload"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot-data'].append({'action': "UpdateThingShadow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class iot_jobs_data:
    def __init__(self, region_name=__default_region):
        __protego_used['iot-jobs-data']= __protego_used.get('iot-jobs-data', {})
        __protego_resource_map['iot-jobs-data']=__protego_resource_map.get('iot-jobs-data', [])
        self.region = region_name
    def describe_job_execution(self, *args, **kwargs):
        __protego_used['iot-jobs-data']['describe_job_execution']=['iot:DescribeJobExecution']
        for p in ['iot:DescribeJobExecution']:
            res = {}
            for nm in ["jobId","thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot-jobs-data'].append({'action': "DescribeJobExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_pending_job_executions(self, *args, **kwargs):
        __protego_used['iot-jobs-data']['get_pending_job_executions']=['iot-jobs-data:GetPendingJobExecutions']
        for p in ['iot-jobs-data:GetPendingJobExecutions']:
            res = {}
            for nm in ["thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot-jobs-data'].append({'action': "GetPendingJobExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_next_pending_job_execution(self, *args, **kwargs):
        __protego_used['iot-jobs-data']['start_next_pending_job_execution']=['iot-jobs-data:StartNextPendingJobExecution']
        for p in ['iot-jobs-data:StartNextPendingJobExecution']:
            res = {}
            for nm in ["thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot-jobs-data'].append({'action': "StartNextPendingJobExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_job_execution(self, *args, **kwargs):
        __protego_used['iot-jobs-data']['update_job_execution']=['iot-jobs-data:UpdateJobExecution']
        for p in ['iot-jobs-data:UpdateJobExecution']:
            res = {}
            for nm in ["jobId","status","thingName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot-jobs-data'].append({'action': "UpdateJobExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class iot1click_devices:
    def __init__(self, region_name=__default_region):
        __protego_used['iot1click-devices']= __protego_used.get('iot1click-devices', {})
        __protego_resource_map['iot1click-devices']=__protego_resource_map.get('iot1click-devices', [])
        self.region = region_name
    def claim_devices_by_claim_code(self, *args, **kwargs):
        __protego_used['iot1click-devices']['claim_devices_by_claim_code']=['iot1click-devices:ClaimDevicesByClaimCode']
        for p in ['iot1click-devices:ClaimDevicesByClaimCode']:
            res = {}
            for nm in ["ClaimCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "ClaimDevicesByClaimCode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_device(self, *args, **kwargs):
        __protego_used['iot1click-devices']['describe_device']=['iot1click-devices:DescribeDevice']
        for p in ['iot1click-devices:DescribeDevice']:
            res = {}
            for nm in ["DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "DescribeDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def finalize_device_claim(self, *args, **kwargs):
        __protego_used['iot1click-devices']['finalize_device_claim']=['iot1click-devices:FinalizeDeviceClaim']
        for p in ['iot1click-devices:FinalizeDeviceClaim']:
            res = {}
            for nm in ["DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "FinalizeDeviceClaim", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_device_methods(self, *args, **kwargs):
        __protego_used['iot1click-devices']['get_device_methods']=['iot1click-devices:GetDeviceMethods']
        for p in ['iot1click-devices:GetDeviceMethods']:
            res = {}
            for nm in ["DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "GetDeviceMethods", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def initiate_device_claim(self, *args, **kwargs):
        __protego_used['iot1click-devices']['initiate_device_claim']=['iot1click-devices:InitiateDeviceClaim']
        for p in ['iot1click-devices:InitiateDeviceClaim']:
            res = {}
            for nm in ["DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "InitiateDeviceClaim", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def invoke_device_method(self, *args, **kwargs):
        __protego_used['iot1click-devices']['invoke_device_method']=['iot1click-devices:InvokeDeviceMethod']
        for p in ['iot1click-devices:InvokeDeviceMethod']:
            res = {}
            for nm in ["DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "InvokeDeviceMethod", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_device_events(self, *args, **kwargs):
        __protego_used['iot1click-devices']['list_device_events']=['iot1click-devices:ListDeviceEvents']
        for p in ['iot1click-devices:ListDeviceEvents']:
            res = {}
            for nm in ["FromTimeStamp","ToTimeStamp","DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "ListDeviceEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_devices(self, *args, **kwargs):
        __protego_used['iot1click-devices']['list_devices']=['iot1click-devices:ListDevices']
        for p in ['iot1click-devices:ListDevices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "ListDevices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['iot1click-devices']['list_tags_for_resource']=['iot1click-devices:*']
        for p in ['iot1click-devices:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['iot1click-devices']['tag_resource']=['iot1click-devices:*']
        for p in ['iot1click-devices:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unclaim_device(self, *args, **kwargs):
        __protego_used['iot1click-devices']['unclaim_device']=['iot1click-devices:UnclaimDevice']
        for p in ['iot1click-devices:UnclaimDevice']:
            res = {}
            for nm in ["DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "UnclaimDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['iot1click-devices']['untag_resource']=['iot1click-devices:*']
        for p in ['iot1click-devices:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_device_state(self, *args, **kwargs):
        __protego_used['iot1click-devices']['update_device_state']=['iot1click-devices:UpdateDeviceState']
        for p in ['iot1click-devices:UpdateDeviceState']:
            res = {}
            for nm in ["DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-devices'].append({'action': "UpdateDeviceState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class iot1click_projects:
    def __init__(self, region_name=__default_region):
        __protego_used['iot1click-projects']= __protego_used.get('iot1click-projects', {})
        __protego_resource_map['iot1click-projects']=__protego_resource_map.get('iot1click-projects', [])
        self.region = region_name
    def associate_device_with_placement(self, *args, **kwargs):
        __protego_used['iot1click-projects']['associate_device_with_placement']=['iot1click-projects:AssociateDeviceWithPlacement']
        for p in ['iot1click-projects:AssociateDeviceWithPlacement']:
            res = {}
            for nm in ["deviceTemplateName","deviceId","placementName","projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "AssociateDeviceWithPlacement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_placement(self, *args, **kwargs):
        __protego_used['iot1click-projects']['create_placement']=['iot1click-projects:CreatePlacement']
        for p in ['iot1click-projects:CreatePlacement']:
            res = {}
            for nm in ["placementName","projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "CreatePlacement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_project(self, *args, **kwargs):
        __protego_used['iot1click-projects']['create_project']=['iot1click-projects:CreateProject']
        for p in ['iot1click-projects:CreateProject']:
            res = {}
            for nm in ["projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "CreateProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_placement(self, *args, **kwargs):
        __protego_used['iot1click-projects']['delete_placement']=['iot1click-projects:DeletePlacement']
        for p in ['iot1click-projects:DeletePlacement']:
            res = {}
            for nm in ["placementName","projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "DeletePlacement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_project(self, *args, **kwargs):
        __protego_used['iot1click-projects']['delete_project']=['iot1click-projects:DeleteProject']
        for p in ['iot1click-projects:DeleteProject']:
            res = {}
            for nm in ["projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "DeleteProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_placement(self, *args, **kwargs):
        __protego_used['iot1click-projects']['describe_placement']=['iot1click-projects:DescribePlacement']
        for p in ['iot1click-projects:DescribePlacement']:
            res = {}
            for nm in ["placementName","projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "DescribePlacement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_project(self, *args, **kwargs):
        __protego_used['iot1click-projects']['describe_project']=['iot1click-projects:DescribeProject']
        for p in ['iot1click-projects:DescribeProject']:
            res = {}
            for nm in ["projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "DescribeProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_device_from_placement(self, *args, **kwargs):
        __protego_used['iot1click-projects']['disassociate_device_from_placement']=['iot1click-projects:DisassociateDeviceFromPlacement']
        for p in ['iot1click-projects:DisassociateDeviceFromPlacement']:
            res = {}
            for nm in ["deviceTemplateName","placementName","projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "DisassociateDeviceFromPlacement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_devices_in_placement(self, *args, **kwargs):
        __protego_used['iot1click-projects']['get_devices_in_placement']=['iot1click-projects:GetDevicesInPlacement']
        for p in ['iot1click-projects:GetDevicesInPlacement']:
            res = {}
            for nm in ["placementName","projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "GetDevicesInPlacement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_placements(self, *args, **kwargs):
        __protego_used['iot1click-projects']['list_placements']=['iot1click-projects:ListPlacements']
        for p in ['iot1click-projects:ListPlacements']:
            res = {}
            for nm in ["projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "ListPlacements", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_projects(self, *args, **kwargs):
        __protego_used['iot1click-projects']['list_projects']=['iot1click-projects:ListProjects']
        for p in ['iot1click-projects:ListProjects']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "ListProjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['iot1click-projects']['list_tags_for_resource']=['iot1click-projects:*']
        for p in ['iot1click-projects:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['iot1click-projects']['tag_resource']=['iot1click-projects:*']
        for p in ['iot1click-projects:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['iot1click-projects']['untag_resource']=['iot1click-projects:*']
        for p in ['iot1click-projects:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_placement(self, *args, **kwargs):
        __protego_used['iot1click-projects']['update_placement']=['iot1click-projects:UpdatePlacement']
        for p in ['iot1click-projects:UpdatePlacement']:
            res = {}
            for nm in ["placementName","projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "UpdatePlacement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_project(self, *args, **kwargs):
        __protego_used['iot1click-projects']['update_project']=['iot1click-projects:UpdateProject']
        for p in ['iot1click-projects:UpdateProject']:
            res = {}
            for nm in ["projectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iot1click-projects'].append({'action': "UpdateProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class iotanalytics:
    def __init__(self, region_name=__default_region):
        __protego_used['iotanalytics']= __protego_used.get('iotanalytics', {})
        __protego_resource_map['iotanalytics']=__protego_resource_map.get('iotanalytics', [])
        self.region = region_name
    def batch_put_message(self, *args, **kwargs):
        __protego_used['iotanalytics']['batch_put_message']=['iotanalytics:BatchPutMessage']
        for p in ['iotanalytics:BatchPutMessage']:
            res = {}
            for nm in ["messages","channelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "BatchPutMessage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_pipeline_reprocessing(self, *args, **kwargs):
        __protego_used['iotanalytics']['cancel_pipeline_reprocessing']=['iotanalytics:CancelPipelineReprocessing']
        for p in ['iotanalytics:CancelPipelineReprocessing']:
            res = {}
            for nm in ["reprocessingId","pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "CancelPipelineReprocessing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_channel(self, *args, **kwargs):
        __protego_used['iotanalytics']['create_channel']=['iotanalytics:CreateChannel']
        for p in ['iotanalytics:CreateChannel']:
            res = {}
            for nm in ["channelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "CreateChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dataset(self, *args, **kwargs):
        __protego_used['iotanalytics']['create_dataset']=['iotanalytics:CreateDataset']
        for p in ['iotanalytics:CreateDataset']:
            res = {}
            for nm in ["datasetName","actions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "CreateDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dataset_content(self, *args, **kwargs):
        __protego_used['iotanalytics']['create_dataset_content']=['iotanalytics:CreateDatasetContent']
        for p in ['iotanalytics:CreateDatasetContent']:
            res = {}
            for nm in ["datasetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "CreateDatasetContent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_datastore(self, *args, **kwargs):
        __protego_used['iotanalytics']['create_datastore']=['iotanalytics:CreateDatastore']
        for p in ['iotanalytics:CreateDatastore']:
            res = {}
            for nm in ["datastoreName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "CreateDatastore", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_pipeline(self, *args, **kwargs):
        __protego_used['iotanalytics']['create_pipeline']=['iotanalytics:CreatePipeline']
        for p in ['iotanalytics:CreatePipeline']:
            res = {}
            for nm in ["pipelineActivities","pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "CreatePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_channel(self, *args, **kwargs):
        __protego_used['iotanalytics']['delete_channel']=['iotanalytics:DeleteChannel']
        for p in ['iotanalytics:DeleteChannel']:
            res = {}
            for nm in ["channelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "DeleteChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dataset(self, *args, **kwargs):
        __protego_used['iotanalytics']['delete_dataset']=['iotanalytics:DeleteDataset']
        for p in ['iotanalytics:DeleteDataset']:
            res = {}
            for nm in ["datasetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "DeleteDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dataset_content(self, *args, **kwargs):
        __protego_used['iotanalytics']['delete_dataset_content']=['iotanalytics:DeleteDatasetContent']
        for p in ['iotanalytics:DeleteDatasetContent']:
            res = {}
            for nm in ["datasetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "DeleteDatasetContent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_datastore(self, *args, **kwargs):
        __protego_used['iotanalytics']['delete_datastore']=['iotanalytics:DeleteDatastore']
        for p in ['iotanalytics:DeleteDatastore']:
            res = {}
            for nm in ["datastoreName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "DeleteDatastore", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_pipeline(self, *args, **kwargs):
        __protego_used['iotanalytics']['delete_pipeline']=['iotanalytics:DeletePipeline']
        for p in ['iotanalytics:DeletePipeline']:
            res = {}
            for nm in ["pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "DeletePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_channel(self, *args, **kwargs):
        __protego_used['iotanalytics']['describe_channel']=['iotanalytics:DescribeChannel']
        for p in ['iotanalytics:DescribeChannel']:
            res = {}
            for nm in ["channelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "DescribeChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dataset(self, *args, **kwargs):
        __protego_used['iotanalytics']['describe_dataset']=['iotanalytics:DescribeDataset']
        for p in ['iotanalytics:DescribeDataset']:
            res = {}
            for nm in ["datasetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "DescribeDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_datastore(self, *args, **kwargs):
        __protego_used['iotanalytics']['describe_datastore']=['iotanalytics:DescribeDatastore']
        for p in ['iotanalytics:DescribeDatastore']:
            res = {}
            for nm in ["datastoreName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "DescribeDatastore", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_logging_options(self, *args, **kwargs):
        __protego_used['iotanalytics']['describe_logging_options']=['iotanalytics:DescribeLoggingOptions']
        for p in ['iotanalytics:DescribeLoggingOptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "DescribeLoggingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_pipeline(self, *args, **kwargs):
        __protego_used['iotanalytics']['describe_pipeline']=['iotanalytics:DescribePipeline']
        for p in ['iotanalytics:DescribePipeline']:
            res = {}
            for nm in ["pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "DescribePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dataset_content(self, *args, **kwargs):
        __protego_used['iotanalytics']['get_dataset_content']=['iotanalytics:GetDatasetContent']
        for p in ['iotanalytics:GetDatasetContent']:
            res = {}
            for nm in ["datasetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "GetDatasetContent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_channels(self, *args, **kwargs):
        __protego_used['iotanalytics']['list_channels']=['iotanalytics:ListChannels']
        for p in ['iotanalytics:ListChannels']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "ListChannels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dataset_contents(self, *args, **kwargs):
        __protego_used['iotanalytics']['list_dataset_contents']=['iotanalytics:*']
        for p in ['iotanalytics:*']:
            res = {}
            for nm in ["datasetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "ListDatasetContents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_datasets(self, *args, **kwargs):
        __protego_used['iotanalytics']['list_datasets']=['iotanalytics:ListDatasets']
        for p in ['iotanalytics:ListDatasets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "ListDatasets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_datastores(self, *args, **kwargs):
        __protego_used['iotanalytics']['list_datastores']=['iotanalytics:ListDatastores']
        for p in ['iotanalytics:ListDatastores']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "ListDatastores", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_pipelines(self, *args, **kwargs):
        __protego_used['iotanalytics']['list_pipelines']=['iotanalytics:ListPipelines']
        for p in ['iotanalytics:ListPipelines']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "ListPipelines", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['iotanalytics']['list_tags_for_resource']=['iotanalytics:*']
        for p in ['iotanalytics:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_logging_options(self, *args, **kwargs):
        __protego_used['iotanalytics']['put_logging_options']=['iotanalytics:PutLoggingOptions']
        for p in ['iotanalytics:PutLoggingOptions']:
            res = {}
            for nm in ["loggingOptions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "PutLoggingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def run_pipeline_activity(self, *args, **kwargs):
        __protego_used['iotanalytics']['run_pipeline_activity']=['iotanalytics:RunPipelineActivity']
        for p in ['iotanalytics:RunPipelineActivity']:
            res = {}
            for nm in ["payloads","pipelineActivity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "RunPipelineActivity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def sample_channel_data(self, *args, **kwargs):
        __protego_used['iotanalytics']['sample_channel_data']=['iotanalytics:SampleChannelData']
        for p in ['iotanalytics:SampleChannelData']:
            res = {}
            for nm in ["channelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "SampleChannelData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_pipeline_reprocessing(self, *args, **kwargs):
        __protego_used['iotanalytics']['start_pipeline_reprocessing']=['iotanalytics:StartPipelineReprocessing']
        for p in ['iotanalytics:StartPipelineReprocessing']:
            res = {}
            for nm in ["pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "StartPipelineReprocessing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['iotanalytics']['tag_resource']=['iotanalytics:*']
        for p in ['iotanalytics:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['iotanalytics']['untag_resource']=['iotanalytics:*']
        for p in ['iotanalytics:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_channel(self, *args, **kwargs):
        __protego_used['iotanalytics']['update_channel']=['iotanalytics:UpdateChannel']
        for p in ['iotanalytics:UpdateChannel']:
            res = {}
            for nm in ["channelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "UpdateChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_dataset(self, *args, **kwargs):
        __protego_used['iotanalytics']['update_dataset']=['iotanalytics:UpdateDataset']
        for p in ['iotanalytics:UpdateDataset']:
            res = {}
            for nm in ["datasetName","actions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "UpdateDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_datastore(self, *args, **kwargs):
        __protego_used['iotanalytics']['update_datastore']=['iotanalytics:UpdateDatastore']
        for p in ['iotanalytics:UpdateDatastore']:
            res = {}
            for nm in ["datastoreName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "UpdateDatastore", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_pipeline(self, *args, **kwargs):
        __protego_used['iotanalytics']['update_pipeline']=['iotanalytics:UpdatePipeline']
        for p in ['iotanalytics:UpdatePipeline']:
            res = {}
            for nm in ["pipelineActivities","pipelineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotanalytics'].append({'action': "UpdatePipeline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class iotevents:
    def __init__(self, region_name=__default_region):
        __protego_used['iotevents']= __protego_used.get('iotevents', {})
        __protego_resource_map['iotevents']=__protego_resource_map.get('iotevents', [])
        self.region = region_name
    def create_detector_model(self, *args, **kwargs):
        __protego_used['iotevents']['create_detector_model']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["detectorModelDefinition","roleArn","detectorModelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "CreateDetectorModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_input(self, *args, **kwargs):
        __protego_used['iotevents']['create_input']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["inputName","inputDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "CreateInput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_detector_model(self, *args, **kwargs):
        __protego_used['iotevents']['delete_detector_model']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["detectorModelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "DeleteDetectorModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_input(self, *args, **kwargs):
        __protego_used['iotevents']['delete_input']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["inputName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "DeleteInput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_detector_model(self, *args, **kwargs):
        __protego_used['iotevents']['describe_detector_model']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["detectorModelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "DescribeDetectorModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_input(self, *args, **kwargs):
        __protego_used['iotevents']['describe_input']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["inputName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "DescribeInput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_logging_options(self, *args, **kwargs):
        __protego_used['iotevents']['describe_logging_options']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "DescribeLoggingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_detector_model_versions(self, *args, **kwargs):
        __protego_used['iotevents']['list_detector_model_versions']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["detectorModelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "ListDetectorModelVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_detector_models(self, *args, **kwargs):
        __protego_used['iotevents']['list_detector_models']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "ListDetectorModels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_inputs(self, *args, **kwargs):
        __protego_used['iotevents']['list_inputs']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "ListInputs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['iotevents']['list_tags_for_resource']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_logging_options(self, *args, **kwargs):
        __protego_used['iotevents']['put_logging_options']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["loggingOptions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "PutLoggingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['iotevents']['tag_resource']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['iotevents']['untag_resource']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_detector_model(self, *args, **kwargs):
        __protego_used['iotevents']['update_detector_model']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["detectorModelDefinition","roleArn","detectorModelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "UpdateDetectorModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_input(self, *args, **kwargs):
        __protego_used['iotevents']['update_input']=['iotevents:*']
        for p in ['iotevents:*']:
            res = {}
            for nm in ["inputName","inputDefinition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents'].append({'action': "UpdateInput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class iotevents_data:
    def __init__(self, region_name=__default_region):
        __protego_used['iotevents-data']= __protego_used.get('iotevents-data', {})
        __protego_resource_map['iotevents-data']=__protego_resource_map.get('iotevents-data', [])
        self.region = region_name
    def batch_put_message(self, *args, **kwargs):
        __protego_used['iotevents-data']['batch_put_message']=['iotevents-data:*']
        for p in ['iotevents-data:*']:
            res = {}
            for nm in ["messages"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents-data'].append({'action': "BatchPutMessage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_update_detector(self, *args, **kwargs):
        __protego_used['iotevents-data']['batch_update_detector']=['iotevents-data:*']
        for p in ['iotevents-data:*']:
            res = {}
            for nm in ["detectors"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents-data'].append({'action': "BatchUpdateDetector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_detector(self, *args, **kwargs):
        __protego_used['iotevents-data']['describe_detector']=['iotevents-data:*']
        for p in ['iotevents-data:*']:
            res = {}
            for nm in ["detectorModelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents-data'].append({'action': "DescribeDetector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_detectors(self, *args, **kwargs):
        __protego_used['iotevents-data']['list_detectors']=['iotevents-data:*']
        for p in ['iotevents-data:*']:
            res = {}
            for nm in ["detectorModelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotevents-data'].append({'action': "ListDetectors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class iotsecuretunneling:
    def __init__(self, region_name=__default_region):
        __protego_used['iotsecuretunneling']= __protego_used.get('iotsecuretunneling', {})
        __protego_resource_map['iotsecuretunneling']=__protego_resource_map.get('iotsecuretunneling', [])
        self.region = region_name
    def close_tunnel(self, *args, **kwargs):
        __protego_used['iotsecuretunneling']['close_tunnel']=['iotsecuretunneling:*']
        for p in ['iotsecuretunneling:*']:
            res = {}
            for nm in ["tunnelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotsecuretunneling'].append({'action': "CloseTunnel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tunnel(self, *args, **kwargs):
        __protego_used['iotsecuretunneling']['describe_tunnel']=['iotsecuretunneling:*']
        for p in ['iotsecuretunneling:*']:
            res = {}
            for nm in ["tunnelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotsecuretunneling'].append({'action': "DescribeTunnel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['iotsecuretunneling']['list_tags_for_resource']=['iotsecuretunneling:*']
        for p in ['iotsecuretunneling:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotsecuretunneling'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tunnels(self, *args, **kwargs):
        __protego_used['iotsecuretunneling']['list_tunnels']=['iotsecuretunneling:*']
        for p in ['iotsecuretunneling:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotsecuretunneling'].append({'action': "ListTunnels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def open_tunnel(self, *args, **kwargs):
        __protego_used['iotsecuretunneling']['open_tunnel']=['iotsecuretunneling:*']
        for p in ['iotsecuretunneling:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotsecuretunneling'].append({'action': "OpenTunnel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['iotsecuretunneling']['tag_resource']=['iotsecuretunneling:*']
        for p in ['iotsecuretunneling:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotsecuretunneling'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['iotsecuretunneling']['untag_resource']=['iotsecuretunneling:*']
        for p in ['iotsecuretunneling:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotsecuretunneling'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class iotthingsgraph:
    def __init__(self, region_name=__default_region):
        __protego_used['iotthingsgraph']= __protego_used.get('iotthingsgraph', {})
        __protego_resource_map['iotthingsgraph']=__protego_resource_map.get('iotthingsgraph', [])
        self.region = region_name
    def associate_entity_to_thing(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['associate_entity_to_thing']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["thingName","entityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "AssociateEntityToThing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_flow_template(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['create_flow_template']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["definition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "CreateFlowTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_system_instance(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['create_system_instance']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["target","definition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "CreateSystemInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_system_template(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['create_system_template']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["definition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "CreateSystemTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_flow_template(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['delete_flow_template']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "DeleteFlowTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_namespace(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['delete_namespace']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "DeleteNamespace", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_system_instance(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['delete_system_instance']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "DeleteSystemInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_system_template(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['delete_system_template']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "DeleteSystemTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deploy_system_instance(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['deploy_system_instance']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "DeploySystemInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deprecate_flow_template(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['deprecate_flow_template']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "DeprecateFlowTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deprecate_system_template(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['deprecate_system_template']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "DeprecateSystemTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_namespace(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['describe_namespace']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "DescribeNamespace", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def dissociate_entity_from_thing(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['dissociate_entity_from_thing']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["thingName","entityType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "DissociateEntityFromThing", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_entities(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['get_entities']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["ids"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "GetEntities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_flow_template(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['get_flow_template']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "GetFlowTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_flow_template_revisions(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['get_flow_template_revisions']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "GetFlowTemplateRevisions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_namespace_deletion_status(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['get_namespace_deletion_status']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "GetNamespaceDeletionStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_system_instance(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['get_system_instance']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "GetSystemInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_system_template(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['get_system_template']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "GetSystemTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_system_template_revisions(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['get_system_template_revisions']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "GetSystemTemplateRevisions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_upload_status(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['get_upload_status']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["uploadId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "GetUploadStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_flow_execution_messages(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['list_flow_execution_messages']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["flowExecutionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "ListFlowExecutionMessages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['list_tags_for_resource']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_entities(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['search_entities']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["entityTypes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "SearchEntities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_flow_executions(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['search_flow_executions']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["systemInstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "SearchFlowExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_flow_templates(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['search_flow_templates']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "SearchFlowTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_system_instances(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['search_system_instances']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "SearchSystemInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_system_templates(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['search_system_templates']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "SearchSystemTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_things(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['search_things']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["entityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "SearchThings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['tag_resource']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def undeploy_system_instance(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['undeploy_system_instance']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "UndeploySystemInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['untag_resource']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_flow_template(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['update_flow_template']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["definition","id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "UpdateFlowTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_system_template(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['update_system_template']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in ["definition","id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "UpdateSystemTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_entity_definitions(self, *args, **kwargs):
        __protego_used['iotthingsgraph']['upload_entity_definitions']=['iotthingsgraph:*']
        for p in ['iotthingsgraph:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['iotthingsgraph'].append({'action': "UploadEntityDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class kafka:
    def __init__(self, region_name=__default_region):
        __protego_used['kafka']= __protego_used.get('kafka', {})
        __protego_resource_map['kafka']=__protego_resource_map.get('kafka', [])
        self.region = region_name
    def create_cluster(self, *args, **kwargs):
        __protego_used['kafka']['create_cluster']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["ClusterName","NumberOfBrokerNodes","KafkaVersion","BrokerNodeGroupInfo"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "CreateCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_configuration(self, *args, **kwargs):
        __protego_used['kafka']['create_configuration']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["KafkaVersions","ServerProperties","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "CreateConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cluster(self, *args, **kwargs):
        __protego_used['kafka']['delete_cluster']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["ClusterArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "DeleteCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster(self, *args, **kwargs):
        __protego_used['kafka']['describe_cluster']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["ClusterArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "DescribeCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster_operation(self, *args, **kwargs):
        __protego_used['kafka']['describe_cluster_operation']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["ClusterOperationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "DescribeClusterOperation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configuration(self, *args, **kwargs):
        __protego_used['kafka']['describe_configuration']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "DescribeConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configuration_revision(self, *args, **kwargs):
        __protego_used['kafka']['describe_configuration_revision']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["Arn","Revision"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "DescribeConfigurationRevision", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bootstrap_brokers(self, *args, **kwargs):
        __protego_used['kafka']['get_bootstrap_brokers']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["ClusterArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "GetBootstrapBrokers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_cluster_operations(self, *args, **kwargs):
        __protego_used['kafka']['list_cluster_operations']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["ClusterArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "ListClusterOperations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_clusters(self, *args, **kwargs):
        __protego_used['kafka']['list_clusters']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "ListClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_configuration_revisions(self, *args, **kwargs):
        __protego_used['kafka']['list_configuration_revisions']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "ListConfigurationRevisions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_configurations(self, *args, **kwargs):
        __protego_used['kafka']['list_configurations']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "ListConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_nodes(self, *args, **kwargs):
        __protego_used['kafka']['list_nodes']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["ClusterArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "ListNodes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['kafka']['list_tags_for_resource']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['kafka']['tag_resource']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['kafka']['untag_resource']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_broker_count(self, *args, **kwargs):
        __protego_used['kafka']['update_broker_count']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["CurrentVersion","TargetNumberOfBrokerNodes","ClusterArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "UpdateBrokerCount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_broker_storage(self, *args, **kwargs):
        __protego_used['kafka']['update_broker_storage']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["CurrentVersion","TargetBrokerEBSVolumeInfo","ClusterArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "UpdateBrokerStorage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_cluster_configuration(self, *args, **kwargs):
        __protego_used['kafka']['update_cluster_configuration']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["CurrentVersion","ClusterArn","ConfigurationInfo"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "UpdateClusterConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_monitoring(self, *args, **kwargs):
        __protego_used['kafka']['update_monitoring']=['kafka:*']
        for p in ['kafka:*']:
            res = {}
            for nm in ["CurrentVersion","ClusterArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kafka'].append({'action': "UpdateMonitoring", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class kendra:
    def __init__(self, region_name=__default_region):
        __protego_used['kendra']= __protego_used.get('kendra', {})
        __protego_resource_map['kendra']=__protego_resource_map.get('kendra', [])
        self.region = region_name
    def batch_delete_document(self, *args, **kwargs):
        __protego_used['kendra']['batch_delete_document']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["IndexId","DocumentIdList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "BatchDeleteDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_put_document(self, *args, **kwargs):
        __protego_used['kendra']['batch_put_document']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["Documents","IndexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "BatchPutDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_data_source(self, *args, **kwargs):
        __protego_used['kendra']['create_data_source']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["Name","Type","IndexId","RoleArn","Configuration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "CreateDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_faq(self, *args, **kwargs):
        __protego_used['kendra']['create_faq']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["S3Path","RoleArn","IndexId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "CreateFaq", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_index(self, *args, **kwargs):
        __protego_used['kendra']['create_index']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["RoleArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "CreateIndex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_faq(self, *args, **kwargs):
        __protego_used['kendra']['delete_faq']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["IndexId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "DeleteFaq", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_index(self, *args, **kwargs):
        __protego_used['kendra']['delete_index']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "DeleteIndex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_data_source(self, *args, **kwargs):
        __protego_used['kendra']['describe_data_source']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["IndexId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "DescribeDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_faq(self, *args, **kwargs):
        __protego_used['kendra']['describe_faq']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["IndexId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "DescribeFaq", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_index(self, *args, **kwargs):
        __protego_used['kendra']['describe_index']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "DescribeIndex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_data_source_sync_jobs(self, *args, **kwargs):
        __protego_used['kendra']['list_data_source_sync_jobs']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["IndexId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "ListDataSourceSyncJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_data_sources(self, *args, **kwargs):
        __protego_used['kendra']['list_data_sources']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["IndexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "ListDataSources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_faqs(self, *args, **kwargs):
        __protego_used['kendra']['list_faqs']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["IndexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "ListFaqs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_indices(self, *args, **kwargs):
        __protego_used['kendra']['list_indices']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "ListIndices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def query(self, *args, **kwargs):
        __protego_used['kendra']['query']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["QueryText","IndexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "Query", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_data_source_sync_job(self, *args, **kwargs):
        __protego_used['kendra']['start_data_source_sync_job']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["IndexId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "StartDataSourceSyncJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_data_source_sync_job(self, *args, **kwargs):
        __protego_used['kendra']['stop_data_source_sync_job']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["IndexId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "StopDataSourceSyncJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def submit_feedback(self, *args, **kwargs):
        __protego_used['kendra']['submit_feedback']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["IndexId","QueryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "SubmitFeedback", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_data_source(self, *args, **kwargs):
        __protego_used['kendra']['update_data_source']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["IndexId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "UpdateDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_index(self, *args, **kwargs):
        __protego_used['kendra']['update_index']=['kendra:*']
        for p in ['kendra:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kendra'].append({'action': "UpdateIndex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class kinesis:
    def __init__(self, region_name=__default_region):
        __protego_used['kinesis']= __protego_used.get('kinesis', {})
        __protego_resource_map['kinesis']=__protego_resource_map.get('kinesis', [])
        self.region = region_name
    def add_tags_to_stream(self, *args, **kwargs):
        __protego_used['kinesis']['add_tags_to_stream']=['kinesis:AddTagsToStream']
        for p in ['kinesis:AddTagsToStream']:
            res = {}
            for nm in ["StreamName","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "AddTagsToStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stream(self, *args, **kwargs):
        __protego_used['kinesis']['create_stream']=['kinesis:CreateStream']
        for p in ['kinesis:CreateStream']:
            res = {}
            for nm in ["ShardCount","StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "CreateStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def decrease_stream_retention_period(self, *args, **kwargs):
        __protego_used['kinesis']['decrease_stream_retention_period']=['kinesis:DecreaseStreamRetentionPeriod']
        for p in ['kinesis:DecreaseStreamRetentionPeriod']:
            res = {}
            for nm in ["RetentionPeriodHours","StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "DecreaseStreamRetentionPeriod", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_stream(self, *args, **kwargs):
        __protego_used['kinesis']['delete_stream']=['kinesis:DeleteStream']
        for p in ['kinesis:DeleteStream']:
            res = {}
            for nm in ["StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "DeleteStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_stream_consumer(self, *args, **kwargs):
        __protego_used['kinesis']['deregister_stream_consumer']=['kinesis:DeregisterStreamConsumer','kinesis:DeregisterStreamConsumer']
        for p in ['kinesis:DeregisterStreamConsumer','kinesis:DeregisterStreamConsumer']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "DeregisterStreamConsumer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_limits(self, *args, **kwargs):
        __protego_used['kinesis']['describe_limits']=['kinesis:DescribeLimits']
        for p in ['kinesis:DescribeLimits']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "DescribeLimits", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stream(self, *args, **kwargs):
        __protego_used['kinesis']['describe_stream']=['kinesis:DescribeStream']
        for p in ['kinesis:DescribeStream']:
            res = {}
            for nm in ["StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "DescribeStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stream_consumer(self, *args, **kwargs):
        __protego_used['kinesis']['describe_stream_consumer']=['kinesis:DescribeStreamConsumer','kinesis:DescribeStreamConsumer']
        for p in ['kinesis:DescribeStreamConsumer','kinesis:DescribeStreamConsumer']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "DescribeStreamConsumer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stream_summary(self, *args, **kwargs):
        __protego_used['kinesis']['describe_stream_summary']=['kinesis:DescribeStreamSummary']
        for p in ['kinesis:DescribeStreamSummary']:
            res = {}
            for nm in ["StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "DescribeStreamSummary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_enhanced_monitoring(self, *args, **kwargs):
        __protego_used['kinesis']['disable_enhanced_monitoring']=['kinesis:DisableEnhancedMonitoring']
        for p in ['kinesis:DisableEnhancedMonitoring']:
            res = {}
            for nm in ["ShardLevelMetrics","StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "DisableEnhancedMonitoring", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_enhanced_monitoring(self, *args, **kwargs):
        __protego_used['kinesis']['enable_enhanced_monitoring']=['kinesis:EnableEnhancedMonitoring']
        for p in ['kinesis:EnableEnhancedMonitoring']:
            res = {}
            for nm in ["ShardLevelMetrics","StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "EnableEnhancedMonitoring", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_records(self, *args, **kwargs):
        __protego_used['kinesis']['get_records']=['kinesis:GetRecords']
        for p in ['kinesis:GetRecords']:
            res = {}
            for nm in ["ShardIterator"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "GetRecords", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_shard_iterator(self, *args, **kwargs):
        __protego_used['kinesis']['get_shard_iterator']=['kinesis:GetShardIterator']
        for p in ['kinesis:GetShardIterator']:
            res = {}
            for nm in ["ShardId","StreamName","ShardIteratorType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "GetShardIterator", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def increase_stream_retention_period(self, *args, **kwargs):
        __protego_used['kinesis']['increase_stream_retention_period']=['kinesis:IncreaseStreamRetentionPeriod']
        for p in ['kinesis:IncreaseStreamRetentionPeriod']:
            res = {}
            for nm in ["RetentionPeriodHours","StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "IncreaseStreamRetentionPeriod", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_shards(self, *args, **kwargs):
        __protego_used['kinesis']['list_shards']=['kinesis:ListShards']
        for p in ['kinesis:ListShards']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "ListShards", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_stream_consumers(self, *args, **kwargs):
        __protego_used['kinesis']['list_stream_consumers']=['kinesis:ListStreamConsumers']
        for p in ['kinesis:ListStreamConsumers']:
            res = {}
            for nm in ["StreamARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "ListStreamConsumers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_streams(self, *args, **kwargs):
        __protego_used['kinesis']['list_streams']=['kinesis:ListStreams']
        for p in ['kinesis:ListStreams']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "ListStreams", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_stream(self, *args, **kwargs):
        __protego_used['kinesis']['list_tags_for_stream']=['kinesis:ListTagsForStream']
        for p in ['kinesis:ListTagsForStream']:
            res = {}
            for nm in ["StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "ListTagsForStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def merge_shards(self, *args, **kwargs):
        __protego_used['kinesis']['merge_shards']=['kinesis:MergeShards']
        for p in ['kinesis:MergeShards']:
            res = {}
            for nm in ["ShardToMerge","AdjacentShardToMerge","StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "MergeShards", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_record(self, *args, **kwargs):
        __protego_used['kinesis']['put_record']=['kinesis:PutRecord']
        for p in ['kinesis:PutRecord']:
            res = {}
            for nm in ["Data","PartitionKey","StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "PutRecord", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_records(self, *args, **kwargs):
        __protego_used['kinesis']['put_records']=['kinesis:PutRecords']
        for p in ['kinesis:PutRecords']:
            res = {}
            for nm in ["StreamName","Records"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "PutRecords", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_stream_consumer(self, *args, **kwargs):
        __protego_used['kinesis']['register_stream_consumer']=['kinesis:RegisterStreamConsumer','kinesis:RegisterStreamConsumer']
        for p in ['kinesis:RegisterStreamConsumer','kinesis:RegisterStreamConsumer']:
            res = {}
            for nm in ["StreamARN","ConsumerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "RegisterStreamConsumer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_stream(self, *args, **kwargs):
        __protego_used['kinesis']['remove_tags_from_stream']=['kinesis:RemoveTagsFromStream']
        for p in ['kinesis:RemoveTagsFromStream']:
            res = {}
            for nm in ["TagKeys","StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "RemoveTagsFromStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def split_shard(self, *args, **kwargs):
        __protego_used['kinesis']['split_shard']=['kinesis:SplitShard']
        for p in ['kinesis:SplitShard']:
            res = {}
            for nm in ["ShardToSplit","StreamName","NewStartingHashKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "SplitShard", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_stream_encryption(self, *args, **kwargs):
        __protego_used['kinesis']['start_stream_encryption']=['kinesis:*']
        for p in ['kinesis:*']:
            res = {}
            for nm in ["EncryptionType","StreamName","KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "StartStreamEncryption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_stream_encryption(self, *args, **kwargs):
        __protego_used['kinesis']['stop_stream_encryption']=['kinesis:*']
        for p in ['kinesis:*']:
            res = {}
            for nm in ["EncryptionType","StreamName","KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "StopStreamEncryption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def subscribe_to_shard(self, *args, **kwargs):
        __protego_used['kinesis']['subscribe_to_shard']=['kinesis:SubscribeToShard','kinesis:SubscribeToShard']
        for p in ['kinesis:SubscribeToShard','kinesis:SubscribeToShard']:
            res = {}
            for nm in ["StartingPosition","ShardId","ConsumerARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "SubscribeToShard", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_shard_count(self, *args, **kwargs):
        __protego_used['kinesis']['update_shard_count']=['kinesis:UpdateShardCount']
        for p in ['kinesis:UpdateShardCount']:
            res = {}
            for nm in ["TargetShardCount","StreamName","ScalingType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis'].append({'action': "UpdateShardCount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class kinesis_video_archived_media:
    def __init__(self, region_name=__default_region):
        __protego_used['kinesis-video-archived-media']= __protego_used.get('kinesis-video-archived-media', {})
        __protego_resource_map['kinesis-video-archived-media']=__protego_resource_map.get('kinesis-video-archived-media', [])
        self.region = region_name
    def get_dash_streaming_session_url(self, *args, **kwargs):
        __protego_used['kinesis-video-archived-media']['get_dash_streaming_session_url']=['kinesis-video-archived-media:*']
        for p in ['kinesis-video-archived-media:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis-video-archived-media'].append({'action': "GetDASHStreamingSessionURL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_hls_streaming_session_url(self, *args, **kwargs):
        __protego_used['kinesis-video-archived-media']['get_hls_streaming_session_url']=['kinesis-video-archived-media:*']
        for p in ['kinesis-video-archived-media:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis-video-archived-media'].append({'action': "GetHLSStreamingSessionURL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_media_for_fragment_list(self, *args, **kwargs):
        __protego_used['kinesis-video-archived-media']['get_media_for_fragment_list']=['kinesisvideo:GetMediaForFragmentList']
        for p in ['kinesisvideo:GetMediaForFragmentList']:
            res = {}
            for nm in ["Fragments","StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis-video-archived-media'].append({'action': "GetMediaForFragmentList", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_fragments(self, *args, **kwargs):
        __protego_used['kinesis-video-archived-media']['list_fragments']=['kinesisvideo:ListFragments']
        for p in ['kinesisvideo:ListFragments']:
            res = {}
            for nm in ["StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis-video-archived-media'].append({'action': "ListFragments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class kinesis_video_media:
    def __init__(self, region_name=__default_region):
        __protego_used['kinesis-video-media']= __protego_used.get('kinesis-video-media', {})
        __protego_resource_map['kinesis-video-media']=__protego_resource_map.get('kinesis-video-media', [])
        self.region = region_name
    def get_media(self, *args, **kwargs):
        __protego_used['kinesis-video-media']['get_media']=['kinesisvideo:GetMedia']
        for p in ['kinesisvideo:GetMedia']:
            res = {}
            for nm in ["StartSelector"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis-video-media'].append({'action': "GetMedia", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class kinesis_video_signaling:
    def __init__(self, region_name=__default_region):
        __protego_used['kinesis-video-signaling']= __protego_used.get('kinesis-video-signaling', {})
        __protego_resource_map['kinesis-video-signaling']=__protego_resource_map.get('kinesis-video-signaling', [])
        self.region = region_name
    def get_ice_server_config(self, *args, **kwargs):
        __protego_used['kinesis-video-signaling']['get_ice_server_config']=['kinesis-video-signaling:*']
        for p in ['kinesis-video-signaling:*']:
            res = {}
            for nm in ["ChannelARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis-video-signaling'].append({'action': "GetIceServerConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_alexa_offer_to_master(self, *args, **kwargs):
        __protego_used['kinesis-video-signaling']['send_alexa_offer_to_master']=['kinesis-video-signaling:*']
        for p in ['kinesis-video-signaling:*']:
            res = {}
            for nm in ["MessagePayload","ChannelARN","SenderClientId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesis-video-signaling'].append({'action': "SendAlexaOfferToMaster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class kinesisanalytics:
    def __init__(self, region_name=__default_region):
        __protego_used['kinesisanalytics']= __protego_used.get('kinesisanalytics', {})
        __protego_resource_map['kinesisanalytics']=__protego_resource_map.get('kinesisanalytics', [])
        self.region = region_name
    def add_application_cloud_watch_logging_option(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['add_application_cloud_watch_logging_option']=['kinesisanalytics:AddApplicationCloudWatchLoggingOption','iam:passRole']
        for p in ['kinesisanalytics:AddApplicationCloudWatchLoggingOption','iam:passRole']:
            res = {}
            for nm in ["CurrentApplicationVersionId","CloudWatchLoggingOption","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "AddApplicationCloudWatchLoggingOption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_application_input(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['add_application_input']=['kinesisanalytics:AddApplicationInput']
        for p in ['kinesisanalytics:AddApplicationInput']:
            res = {}
            for nm in ["CurrentApplicationVersionId","ApplicationName","Input"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "AddApplicationInput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_application_input_processing_configuration(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['add_application_input_processing_configuration']=['iam:passRole','kinesisanalytics:AddApplicationInputProcessingConfiguration']
        for p in ['iam:passRole','kinesisanalytics:AddApplicationInputProcessingConfiguration']:
            res = {}
            for nm in ["InputId","CurrentApplicationVersionId","ApplicationName","InputProcessingConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "AddApplicationInputProcessingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_application_output(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['add_application_output']=['kinesisanalytics:AddApplicationOutput']
        for p in ['kinesisanalytics:AddApplicationOutput']:
            res = {}
            for nm in ["CurrentApplicationVersionId","ApplicationName","Output"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "AddApplicationOutput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_application_reference_data_source(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['add_application_reference_data_source']=['kinesisanalytics:AddApplicationReferenceDataSource']
        for p in ['kinesisanalytics:AddApplicationReferenceDataSource']:
            res = {}
            for nm in ["CurrentApplicationVersionId","ReferenceDataSource","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "AddApplicationReferenceDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_application(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['create_application']=['kinesisanalytics:CreateApplication']
        for p in ['kinesisanalytics:CreateApplication']:
            res = {}
            for nm in ["ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "CreateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['delete_application']=['kinesisanalytics:DeleteApplication']
        for p in ['kinesisanalytics:DeleteApplication']:
            res = {}
            for nm in ["CreateTimestamp","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "DeleteApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application_cloud_watch_logging_option(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['delete_application_cloud_watch_logging_option']=['kinesisanalytics:DeleteApplicationCloudWatchLoggingOption']
        for p in ['kinesisanalytics:DeleteApplicationCloudWatchLoggingOption']:
            res = {}
            for nm in ["CloudWatchLoggingOptionId","CurrentApplicationVersionId","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "DeleteApplicationCloudWatchLoggingOption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application_input_processing_configuration(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['delete_application_input_processing_configuration']=['kinesisanalytics:DeleteApplicationInputProcessingConfiguration']
        for p in ['kinesisanalytics:DeleteApplicationInputProcessingConfiguration']:
            res = {}
            for nm in ["InputId","CurrentApplicationVersionId","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "DeleteApplicationInputProcessingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application_output(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['delete_application_output']=['kinesisanalytics:DeleteApplicationOutput']
        for p in ['kinesisanalytics:DeleteApplicationOutput']:
            res = {}
            for nm in ["CurrentApplicationVersionId","OutputId","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "DeleteApplicationOutput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application_reference_data_source(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['delete_application_reference_data_source']=['kinesisanalytics:DeleteApplicationReferenceDataSource']
        for p in ['kinesisanalytics:DeleteApplicationReferenceDataSource']:
            res = {}
            for nm in ["CurrentApplicationVersionId","ReferenceId","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "DeleteApplicationReferenceDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_application(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['describe_application']=['kinesisanalytics:DescribeApplication']
        for p in ['kinesisanalytics:DescribeApplication']:
            res = {}
            for nm in ["ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "DescribeApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def discover_input_schema(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['discover_input_schema']=['kinesisanalytics:DiscoverInputSchema']
        for p in ['kinesisanalytics:DiscoverInputSchema']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "DiscoverInputSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_applications(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['list_applications']=['kinesisanalytics:ListApplications']
        for p in ['kinesisanalytics:ListApplications']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "ListApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['list_tags_for_resource']=['kinesisanalytics:ListTagsForResource']
        for p in ['kinesisanalytics:ListTagsForResource']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_application(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['start_application']=['kinesisanalytics:StartApplication']
        for p in ['kinesisanalytics:StartApplication']:
            res = {}
            for nm in ["InputConfigurations","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "StartApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_application(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['stop_application']=['kinesisanalytics:StopApplication']
        for p in ['kinesisanalytics:StopApplication']:
            res = {}
            for nm in ["ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "StopApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['tag_resource']=['kinesisanalytics:TagResource']
        for p in ['kinesisanalytics:TagResource']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['untag_resource']=['kinesisanalytics:UntagResource']
        for p in ['kinesisanalytics:UntagResource']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_application(self, *args, **kwargs):
        __protego_used['kinesisanalytics']['update_application']=['kinesisanalytics:UpdateApplication']
        for p in ['kinesisanalytics:UpdateApplication']:
            res = {}
            for nm in ["CurrentApplicationVersionId","ApplicationName","ApplicationUpdate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalytics'].append({'action': "UpdateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class kinesisanalyticsv2:
    def __init__(self, region_name=__default_region):
        __protego_used['kinesisanalyticsv2']= __protego_used.get('kinesisanalyticsv2', {})
        __protego_resource_map['kinesisanalyticsv2']=__protego_resource_map.get('kinesisanalyticsv2', [])
        self.region = region_name
    def add_application_cloud_watch_logging_option(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['add_application_cloud_watch_logging_option']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["CurrentApplicationVersionId","CloudWatchLoggingOption","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "AddApplicationCloudWatchLoggingOption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_application_input(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['add_application_input']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["CurrentApplicationVersionId","ApplicationName","Input"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "AddApplicationInput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_application_input_processing_configuration(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['add_application_input_processing_configuration']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["InputId","CurrentApplicationVersionId","ApplicationName","InputProcessingConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "AddApplicationInputProcessingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_application_output(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['add_application_output']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["CurrentApplicationVersionId","ApplicationName","Output"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "AddApplicationOutput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_application_reference_data_source(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['add_application_reference_data_source']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["CurrentApplicationVersionId","ReferenceDataSource","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "AddApplicationReferenceDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_application_vpc_configuration(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['add_application_vpc_configuration']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["VpcConfiguration","CurrentApplicationVersionId","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "AddApplicationVpcConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_application(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['create_application']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["ServiceExecutionRole","RuntimeEnvironment","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "CreateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_application_snapshot(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['create_application_snapshot']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["SnapshotName","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "CreateApplicationSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['delete_application']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["CreateTimestamp","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "DeleteApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application_cloud_watch_logging_option(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['delete_application_cloud_watch_logging_option']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["CloudWatchLoggingOptionId","CurrentApplicationVersionId","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "DeleteApplicationCloudWatchLoggingOption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application_input_processing_configuration(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['delete_application_input_processing_configuration']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["InputId","CurrentApplicationVersionId","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "DeleteApplicationInputProcessingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application_output(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['delete_application_output']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["CurrentApplicationVersionId","OutputId","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "DeleteApplicationOutput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application_reference_data_source(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['delete_application_reference_data_source']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["CurrentApplicationVersionId","ReferenceId","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "DeleteApplicationReferenceDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application_snapshot(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['delete_application_snapshot']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["SnapshotName","SnapshotCreationTimestamp","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "DeleteApplicationSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application_vpc_configuration(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['delete_application_vpc_configuration']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["CurrentApplicationVersionId","VpcConfigurationId","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "DeleteApplicationVpcConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_application(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['describe_application']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "DescribeApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_application_snapshot(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['describe_application_snapshot']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["SnapshotName","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "DescribeApplicationSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def discover_input_schema(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['discover_input_schema']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["ServiceExecutionRole"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "DiscoverInputSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_application_snapshots(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['list_application_snapshots']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "ListApplicationSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_applications(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['list_applications']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "ListApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['list_tags_for_resource']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_application(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['start_application']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["RunConfiguration","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "StartApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_application(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['stop_application']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "StopApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['tag_resource']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['untag_resource']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_application(self, *args, **kwargs):
        __protego_used['kinesisanalyticsv2']['update_application']=['kinesisanalyticsv2:*']
        for p in ['kinesisanalyticsv2:*']:
            res = {}
            for nm in ["CurrentApplicationVersionId","ApplicationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisanalyticsv2'].append({'action': "UpdateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class kinesisvideo:
    def __init__(self, region_name=__default_region):
        __protego_used['kinesisvideo']= __protego_used.get('kinesisvideo', {})
        __protego_resource_map['kinesisvideo']=__protego_resource_map.get('kinesisvideo', [])
        self.region = region_name
    def create_signaling_channel(self, *args, **kwargs):
        __protego_used['kinesisvideo']['create_signaling_channel']=['kinesisvideo:*']
        for p in ['kinesisvideo:*']:
            res = {}
            for nm in ["ChannelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "CreateSignalingChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stream(self, *args, **kwargs):
        __protego_used['kinesisvideo']['create_stream']=['kinesisvideo:CreateStream']
        for p in ['kinesisvideo:CreateStream']:
            res = {}
            for nm in ["StreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "CreateStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_signaling_channel(self, *args, **kwargs):
        __protego_used['kinesisvideo']['delete_signaling_channel']=['kinesisvideo:*']
        for p in ['kinesisvideo:*']:
            res = {}
            for nm in ["ChannelARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "DeleteSignalingChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_stream(self, *args, **kwargs):
        __protego_used['kinesisvideo']['delete_stream']=['kinesisvideo:DeleteStream']
        for p in ['kinesisvideo:DeleteStream']:
            res = {}
            for nm in ["StreamARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "DeleteStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_signaling_channel(self, *args, **kwargs):
        __protego_used['kinesisvideo']['describe_signaling_channel']=['kinesisvideo:*']
        for p in ['kinesisvideo:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "DescribeSignalingChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stream(self, *args, **kwargs):
        __protego_used['kinesisvideo']['describe_stream']=['kinesisvideo:DescribeStream']
        for p in ['kinesisvideo:DescribeStream']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "DescribeStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_data_endpoint(self, *args, **kwargs):
        __protego_used['kinesisvideo']['get_data_endpoint']=['kinesisvideo:GetDataEndpoint']
        for p in ['kinesisvideo:GetDataEndpoint']:
            res = {}
            for nm in ["APIName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "GetDataEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_signaling_channel_endpoint(self, *args, **kwargs):
        __protego_used['kinesisvideo']['get_signaling_channel_endpoint']=['kinesisvideo:*']
        for p in ['kinesisvideo:*']:
            res = {}
            for nm in ["ChannelARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "GetSignalingChannelEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_signaling_channels(self, *args, **kwargs):
        __protego_used['kinesisvideo']['list_signaling_channels']=['kinesisvideo:*']
        for p in ['kinesisvideo:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "ListSignalingChannels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_streams(self, *args, **kwargs):
        __protego_used['kinesisvideo']['list_streams']=['kinesisvideo:ListStreams']
        for p in ['kinesisvideo:ListStreams']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "ListStreams", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['kinesisvideo']['list_tags_for_resource']=['kinesisvideo:*']
        for p in ['kinesisvideo:*']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_stream(self, *args, **kwargs):
        __protego_used['kinesisvideo']['list_tags_for_stream']=['kinesisvideo:ListTagsForStream']
        for p in ['kinesisvideo:ListTagsForStream']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "ListTagsForStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['kinesisvideo']['tag_resource']=['kinesisvideo:*']
        for p in ['kinesisvideo:*']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_stream(self, *args, **kwargs):
        __protego_used['kinesisvideo']['tag_stream']=['kinesisvideo:TagStream']
        for p in ['kinesisvideo:TagStream']:
            res = {}
            for nm in ["Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "TagStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['kinesisvideo']['untag_resource']=['kinesisvideo:*']
        for p in ['kinesisvideo:*']:
            res = {}
            for nm in ["ResourceARN","TagKeyList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_stream(self, *args, **kwargs):
        __protego_used['kinesisvideo']['untag_stream']=['kinesisvideo:UntagStream']
        for p in ['kinesisvideo:UntagStream']:
            res = {}
            for nm in ["TagKeyList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "UntagStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_data_retention(self, *args, **kwargs):
        __protego_used['kinesisvideo']['update_data_retention']=['kinesisvideo:UpdateDataRetention']
        for p in ['kinesisvideo:UpdateDataRetention']:
            res = {}
            for nm in ["CurrentVersion","DataRetentionChangeInHours","Operation"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "UpdateDataRetention", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_signaling_channel(self, *args, **kwargs):
        __protego_used['kinesisvideo']['update_signaling_channel']=['kinesisvideo:*']
        for p in ['kinesisvideo:*']:
            res = {}
            for nm in ["CurrentVersion","ChannelARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "UpdateSignalingChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_stream(self, *args, **kwargs):
        __protego_used['kinesisvideo']['update_stream']=['kinesisvideo:UpdateStream']
        for p in ['kinesisvideo:UpdateStream']:
            res = {}
            for nm in ["CurrentVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kinesisvideo'].append({'action': "UpdateStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class kms:
    def __init__(self, region_name=__default_region):
        __protego_used['kms']= __protego_used.get('kms', {})
        __protego_resource_map['kms']=__protego_resource_map.get('kms', [])
        self.region = region_name
    def cancel_key_deletion(self, *args, **kwargs):
        __protego_used['kms']['cancel_key_deletion']=['kms:CancelKeyDeletion']
        for p in ['kms:CancelKeyDeletion']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "CancelKeyDeletion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def connect_custom_key_store(self, *args, **kwargs):
        __protego_used['kms']['connect_custom_key_store']=['kms:ConnectCustomKeyStore']
        for p in ['kms:ConnectCustomKeyStore']:
            res = {}
            for nm in ["CustomKeyStoreId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "ConnectCustomKeyStore", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_alias(self, *args, **kwargs):
        __protego_used['kms']['create_alias']=['kms:CreateAlias']
        for p in ['kms:CreateAlias']:
            res = {}
            for nm in ["TargetKeyId","AliasName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "CreateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_custom_key_store(self, *args, **kwargs):
        __protego_used['kms']['create_custom_key_store']=['kms:CreateCustomKeyStore']
        for p in ['kms:CreateCustomKeyStore']:
            res = {}
            for nm in ["TrustAnchorCertificate","KeyStorePassword","CustomKeyStoreName","CloudHsmClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "CreateCustomKeyStore", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_grant(self, *args, **kwargs):
        __protego_used['kms']['create_grant']=['kms:CreateGrant']
        for p in ['kms:CreateGrant']:
            res = {}
            for nm in ["Operations","KeyId","GranteePrincipal"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "CreateGrant", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_key(self, *args, **kwargs):
        __protego_used['kms']['create_key']=['kms:CreateKey']
        for p in ['kms:CreateKey']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "CreateKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def decrypt(self, *args, **kwargs):
        __protego_used['kms']['decrypt']=['kms:Decrypt']
        for p in ['kms:Decrypt']:
            res = {}
            for nm in ["CiphertextBlob"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "Decrypt", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_alias(self, *args, **kwargs):
        __protego_used['kms']['delete_alias']=['kms:DeleteAlias']
        for p in ['kms:DeleteAlias']:
            res = {}
            for nm in ["AliasName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "DeleteAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_custom_key_store(self, *args, **kwargs):
        __protego_used['kms']['delete_custom_key_store']=['kms:DeleteCustomKeyStore']
        for p in ['kms:DeleteCustomKeyStore']:
            res = {}
            for nm in ["CustomKeyStoreId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "DeleteCustomKeyStore", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_imported_key_material(self, *args, **kwargs):
        __protego_used['kms']['delete_imported_key_material']=['kms:DeleteImportedKeyMaterial']
        for p in ['kms:DeleteImportedKeyMaterial']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "DeleteImportedKeyMaterial", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_custom_key_stores(self, *args, **kwargs):
        __protego_used['kms']['describe_custom_key_stores']=['kms:DescribeCustomKeyStores']
        for p in ['kms:DescribeCustomKeyStores']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "DescribeCustomKeyStores", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_key(self, *args, **kwargs):
        __protego_used['kms']['describe_key']=['kms:DescribeKey']
        for p in ['kms:DescribeKey']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "DescribeKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_key(self, *args, **kwargs):
        __protego_used['kms']['disable_key']=['kms:DisableKey']
        for p in ['kms:DisableKey']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "DisableKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_key_rotation(self, *args, **kwargs):
        __protego_used['kms']['disable_key_rotation']=['kms:DisableKeyRotation']
        for p in ['kms:DisableKeyRotation']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "DisableKeyRotation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disconnect_custom_key_store(self, *args, **kwargs):
        __protego_used['kms']['disconnect_custom_key_store']=['kms:DisconnectCustomKeyStore']
        for p in ['kms:DisconnectCustomKeyStore']:
            res = {}
            for nm in ["CustomKeyStoreId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "DisconnectCustomKeyStore", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_key(self, *args, **kwargs):
        __protego_used['kms']['enable_key']=['kms:EnableKey']
        for p in ['kms:EnableKey']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "EnableKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_key_rotation(self, *args, **kwargs):
        __protego_used['kms']['enable_key_rotation']=['kms:EnableKeyRotation']
        for p in ['kms:EnableKeyRotation']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "EnableKeyRotation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def encrypt(self, *args, **kwargs):
        __protego_used['kms']['encrypt']=['kms:Encrypt']
        for p in ['kms:Encrypt']:
            res = {}
            for nm in ["Plaintext","KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "Encrypt", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_data_key(self, *args, **kwargs):
        __protego_used['kms']['generate_data_key']=['kms:GenerateDataKey']
        for p in ['kms:GenerateDataKey']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "GenerateDataKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_data_key_pair(self, *args, **kwargs):
        __protego_used['kms']['generate_data_key_pair']=['kms:*']
        for p in ['kms:*']:
            res = {}
            for nm in ["KeyId","KeyPairSpec"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "GenerateDataKeyPair", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_data_key_pair_without_plaintext(self, *args, **kwargs):
        __protego_used['kms']['generate_data_key_pair_without_plaintext']=['kms:*']
        for p in ['kms:*']:
            res = {}
            for nm in ["KeyId","KeyPairSpec"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "GenerateDataKeyPairWithoutPlaintext", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_data_key_without_plaintext(self, *args, **kwargs):
        __protego_used['kms']['generate_data_key_without_plaintext']=['kms:GenerateDataKeyWithoutPlaintext']
        for p in ['kms:GenerateDataKeyWithoutPlaintext']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "GenerateDataKeyWithoutPlaintext", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_random(self, *args, **kwargs):
        __protego_used['kms']['generate_random']=['kms:GenerateRandom']
        for p in ['kms:GenerateRandom']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "GenerateRandom", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_key_policy(self, *args, **kwargs):
        __protego_used['kms']['get_key_policy']=['kms:GetKeyPolicy']
        for p in ['kms:GetKeyPolicy']:
            res = {}
            for nm in ["KeyId","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "GetKeyPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_key_rotation_status(self, *args, **kwargs):
        __protego_used['kms']['get_key_rotation_status']=['kms:GetKeyRotationStatus']
        for p in ['kms:GetKeyRotationStatus']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "GetKeyRotationStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_parameters_for_import(self, *args, **kwargs):
        __protego_used['kms']['get_parameters_for_import']=['kms:GetParametersForImport']
        for p in ['kms:GetParametersForImport']:
            res = {}
            for nm in ["WrappingKeySpec","WrappingAlgorithm","KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "GetParametersForImport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_public_key(self, *args, **kwargs):
        __protego_used['kms']['get_public_key']=['kms:*']
        for p in ['kms:*']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "GetPublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_key_material(self, *args, **kwargs):
        __protego_used['kms']['import_key_material']=['kms:ImportKeyMaterial']
        for p in ['kms:ImportKeyMaterial']:
            res = {}
            for nm in ["ImportToken","KeyId","EncryptedKeyMaterial"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "ImportKeyMaterial", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_aliases(self, *args, **kwargs):
        __protego_used['kms']['list_aliases']=['kms:ListAliases']
        for p in ['kms:ListAliases']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "ListAliases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_grants(self, *args, **kwargs):
        __protego_used['kms']['list_grants']=['kms:ListGrants']
        for p in ['kms:ListGrants']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "ListGrants", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_key_policies(self, *args, **kwargs):
        __protego_used['kms']['list_key_policies']=['kms:ListKeyPolicies']
        for p in ['kms:ListKeyPolicies']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "ListKeyPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_keys(self, *args, **kwargs):
        __protego_used['kms']['list_keys']=['kms:ListKeys']
        for p in ['kms:ListKeys']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "ListKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resource_tags(self, *args, **kwargs):
        __protego_used['kms']['list_resource_tags']=['kms:ListResourceTags']
        for p in ['kms:ListResourceTags']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "ListResourceTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_retirable_grants(self, *args, **kwargs):
        __protego_used['kms']['list_retirable_grants']=['kms:ListRetirableGrants']
        for p in ['kms:ListRetirableGrants']:
            res = {}
            for nm in ["RetiringPrincipal"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "ListRetirableGrants", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_key_policy(self, *args, **kwargs):
        __protego_used['kms']['put_key_policy']=['kms:PutKeyPolicy']
        for p in ['kms:PutKeyPolicy']:
            res = {}
            for nm in ["Policy","KeyId","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "PutKeyPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def re_encrypt(self, *args, **kwargs):
        __protego_used['kms']['re_encrypt']=['kms:ReEncryptTo','kms:ReEncryptFrom']
        for p in ['kms:ReEncryptTo','kms:ReEncryptFrom']:
            res = {}
            for nm in ["DestinationKeyId","CiphertextBlob"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "ReEncrypt", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def retire_grant(self, *args, **kwargs):
        __protego_used['kms']['retire_grant']=['kms:RetireGrant']
        for p in ['kms:RetireGrant']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "RetireGrant", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_grant(self, *args, **kwargs):
        __protego_used['kms']['revoke_grant']=['kms:RevokeGrant']
        for p in ['kms:RevokeGrant']:
            res = {}
            for nm in ["GrantId","KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "RevokeGrant", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def schedule_key_deletion(self, *args, **kwargs):
        __protego_used['kms']['schedule_key_deletion']=['kms:ScheduleKeyDeletion']
        for p in ['kms:ScheduleKeyDeletion']:
            res = {}
            for nm in ["KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "ScheduleKeyDeletion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def sign(self, *args, **kwargs):
        __protego_used['kms']['sign']=['kms:*']
        for p in ['kms:*']:
            res = {}
            for nm in ["Message","KeyId","SigningAlgorithm"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "Sign", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['kms']['tag_resource']=['kms:TagResource']
        for p in ['kms:TagResource']:
            res = {}
            for nm in ["KeyId","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['kms']['untag_resource']=['kms:UntagResource']
        for p in ['kms:UntagResource']:
            res = {}
            for nm in ["TagKeys","KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_alias(self, *args, **kwargs):
        __protego_used['kms']['update_alias']=['kms:UpdateAlias','kms:UpdateAlias']
        for p in ['kms:UpdateAlias','kms:UpdateAlias']:
            res = {}
            for nm in ["TargetKeyId","AliasName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "UpdateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_custom_key_store(self, *args, **kwargs):
        __protego_used['kms']['update_custom_key_store']=['kms:UpdateCustomKeyStore']
        for p in ['kms:UpdateCustomKeyStore']:
            res = {}
            for nm in ["CustomKeyStoreId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "UpdateCustomKeyStore", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_key_description(self, *args, **kwargs):
        __protego_used['kms']['update_key_description']=['kms:UpdateKeyDescription']
        for p in ['kms:UpdateKeyDescription']:
            res = {}
            for nm in ["Description","KeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "UpdateKeyDescription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def verify(self, *args, **kwargs):
        __protego_used['kms']['verify']=['kms:*']
        for p in ['kms:*']:
            res = {}
            for nm in ["Message","SigningAlgorithm","KeyId","Signature"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['kms'].append({'action': "Verify", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class lakeformation:
    def __init__(self, region_name=__default_region):
        __protego_used['lakeformation']= __protego_used.get('lakeformation', {})
        __protego_resource_map['lakeformation']=__protego_resource_map.get('lakeformation', [])
        self.region = region_name
    def batch_grant_permissions(self, *args, **kwargs):
        __protego_used['lakeformation']['batch_grant_permissions']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in ["Entries"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "BatchGrantPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_revoke_permissions(self, *args, **kwargs):
        __protego_used['lakeformation']['batch_revoke_permissions']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in ["Entries"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "BatchRevokePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_resource(self, *args, **kwargs):
        __protego_used['lakeformation']['deregister_resource']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "DeregisterResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_resource(self, *args, **kwargs):
        __protego_used['lakeformation']['describe_resource']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "DescribeResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_data_lake_settings(self, *args, **kwargs):
        __protego_used['lakeformation']['get_data_lake_settings']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "GetDataLakeSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_effective_permissions_for_path(self, *args, **kwargs):
        __protego_used['lakeformation']['get_effective_permissions_for_path']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "GetEffectivePermissionsForPath", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def grant_permissions(self, *args, **kwargs):
        __protego_used['lakeformation']['grant_permissions']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in ["Principal","Resource","Permissions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "GrantPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_permissions(self, *args, **kwargs):
        __protego_used['lakeformation']['list_permissions']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "ListPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resources(self, *args, **kwargs):
        __protego_used['lakeformation']['list_resources']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "ListResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_data_lake_settings(self, *args, **kwargs):
        __protego_used['lakeformation']['put_data_lake_settings']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in ["DataLakeSettings"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "PutDataLakeSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_resource(self, *args, **kwargs):
        __protego_used['lakeformation']['register_resource']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "RegisterResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_permissions(self, *args, **kwargs):
        __protego_used['lakeformation']['revoke_permissions']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in ["Principal","Resource","Permissions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "RevokePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_resource(self, *args, **kwargs):
        __protego_used['lakeformation']['update_resource']=['lakeformation:*']
        for p in ['lakeformation:*']:
            res = {}
            for nm in ["RoleArn","ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lakeformation'].append({'action': "UpdateResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class Lambda:
    def __init__(self, region_name=__default_region):
        __protego_used['lambda']= __protego_used.get('lambda', {})
        __protego_resource_map['lambda']=__protego_resource_map.get('lambda', [])
        self.region = region_name
    def add_layer_version_permission(self, *args, **kwargs):
        __protego_used['lambda']['add_layer_version_permission']=['lambda:AddLayerVersionPermission']
        for p in ['lambda:AddLayerVersionPermission']:
            res = {}
            for nm in ["VersionNumber","StatementId","Action","Principal","LayerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "AddLayerVersionPermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_permission(self, *args, **kwargs):
        __protego_used['lambda']['add_permission']=['lambda:AddPermission']
        for p in ['lambda:AddPermission']:
            res = {}
            for nm in ["Action","StatementId","Principal","FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "AddPermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_alias(self, *args, **kwargs):
        __protego_used['lambda']['create_alias']=['lambda:CreateAlias']
        for p in ['lambda:CreateAlias']:
            res = {}
            for nm in ["FunctionVersion","FunctionName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "CreateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_event_source_mapping(self, *args, **kwargs):
        __protego_used['lambda']['create_event_source_mapping']=['lambda:CreateEventSourceMapping']
        for p in ['lambda:CreateEventSourceMapping']:
            res = {}
            for nm in ["EventSourceArn","FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "CreateEventSourceMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_function(self, *args, **kwargs):
        __protego_used['lambda']['create_function']=['lambda:CreateFunction']
        for p in ['lambda:CreateFunction']:
            res = {}
            for nm in ["FunctionName","Runtime","Handler","Code","Role"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "CreateFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_alias(self, *args, **kwargs):
        __protego_used['lambda']['delete_alias']=['lambda:DeleteAlias']
        for p in ['lambda:DeleteAlias']:
            res = {}
            for nm in ["FunctionName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "DeleteAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_event_source_mapping(self, *args, **kwargs):
        __protego_used['lambda']['delete_event_source_mapping']=['lambda:DeleteEventSourceMapping']
        for p in ['lambda:DeleteEventSourceMapping']:
            res = {}
            for nm in ["UUID"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "DeleteEventSourceMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_function(self, *args, **kwargs):
        __protego_used['lambda']['delete_function']=['lambda:DeleteFunction']
        for p in ['lambda:DeleteFunction']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "DeleteFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_function_concurrency(self, *args, **kwargs):
        __protego_used['lambda']['delete_function_concurrency']=['lambda:DeleteFunctionConcurrency']
        for p in ['lambda:DeleteFunctionConcurrency']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "DeleteFunctionConcurrency", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_function_event_invoke_config(self, *args, **kwargs):
        __protego_used['lambda']['delete_function_event_invoke_config']=['lambda:*']
        for p in ['lambda:*']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "DeleteFunctionEventInvokeConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_layer_version(self, *args, **kwargs):
        __protego_used['lambda']['delete_layer_version']=['lambda:DeleteLayerVersion']
        for p in ['lambda:DeleteLayerVersion']:
            res = {}
            for nm in ["VersionNumber","LayerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "DeleteLayerVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_provisioned_concurrency_config(self, *args, **kwargs):
        __protego_used['lambda']['delete_provisioned_concurrency_config']=['lambda:*']
        for p in ['lambda:*']:
            res = {}
            for nm in ["Qualifier","FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "DeleteProvisionedConcurrencyConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account_settings(self, *args, **kwargs):
        __protego_used['lambda']['get_account_settings']=['lambda:GetAccountSettings']
        for p in ['lambda:GetAccountSettings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetAccountSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_alias(self, *args, **kwargs):
        __protego_used['lambda']['get_alias']=['lambda:GetAlias']
        for p in ['lambda:GetAlias']:
            res = {}
            for nm in ["FunctionName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_event_source_mapping(self, *args, **kwargs):
        __protego_used['lambda']['get_event_source_mapping']=['lambda:GetEventSourceMapping']
        for p in ['lambda:GetEventSourceMapping']:
            res = {}
            for nm in ["UUID"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetEventSourceMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_function(self, *args, **kwargs):
        __protego_used['lambda']['get_function']=['lambda:GetFunction']
        for p in ['lambda:GetFunction']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_function_concurrency(self, *args, **kwargs):
        __protego_used['lambda']['get_function_concurrency']=['lambda:*']
        for p in ['lambda:*']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetFunctionConcurrency", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_function_configuration(self, *args, **kwargs):
        __protego_used['lambda']['get_function_configuration']=['lambda:GetFunctionConfiguration']
        for p in ['lambda:GetFunctionConfiguration']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetFunctionConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_function_event_invoke_config(self, *args, **kwargs):
        __protego_used['lambda']['get_function_event_invoke_config']=['lambda:*']
        for p in ['lambda:*']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetFunctionEventInvokeConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_layer_version(self, *args, **kwargs):
        __protego_used['lambda']['get_layer_version']=['lambda:GetLayerVersion']
        for p in ['lambda:GetLayerVersion']:
            res = {}
            for nm in ["VersionNumber","LayerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetLayerVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_layer_version_by_arn(self, *args, **kwargs):
        __protego_used['lambda']['get_layer_version_by_arn']=['lambda:*']
        for p in ['lambda:*']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetLayerVersionByArn", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_layer_version_policy(self, *args, **kwargs):
        __protego_used['lambda']['get_layer_version_policy']=['lambda:GetLayerVersionPolicy']
        for p in ['lambda:GetLayerVersionPolicy']:
            res = {}
            for nm in ["VersionNumber","LayerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetLayerVersionPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_policy(self, *args, **kwargs):
        __protego_used['lambda']['get_policy']=['lambda:GetPolicy']
        for p in ['lambda:GetPolicy']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_provisioned_concurrency_config(self, *args, **kwargs):
        __protego_used['lambda']['get_provisioned_concurrency_config']=['lambda:*']
        for p in ['lambda:*']:
            res = {}
            for nm in ["Qualifier","FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "GetProvisionedConcurrencyConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def invoke(self, *args, **kwargs):
        __protego_used['lambda']['invoke']=['lambda:InvokeFunction']
        for p in ['lambda:InvokeFunction']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "Invoke", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def invoke_async(self, *args, **kwargs):
        __protego_used['lambda']['invoke_async']=['lambda:InvokeFunction']
        for p in ['lambda:InvokeFunction']:
            res = {}
            for nm in ["InvokeArgs","FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "InvokeAsync", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_aliases(self, *args, **kwargs):
        __protego_used['lambda']['list_aliases']=['lambda:ListAliases']
        for p in ['lambda:ListAliases']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "ListAliases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_event_source_mappings(self, *args, **kwargs):
        __protego_used['lambda']['list_event_source_mappings']=['lambda:ListEventSourceMappings']
        for p in ['lambda:ListEventSourceMappings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "ListEventSourceMappings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_function_event_invoke_configs(self, *args, **kwargs):
        __protego_used['lambda']['list_function_event_invoke_configs']=['lambda:*']
        for p in ['lambda:*']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "ListFunctionEventInvokeConfigs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_functions(self, *args, **kwargs):
        __protego_used['lambda']['list_functions']=['lambda:ListFunctions']
        for p in ['lambda:ListFunctions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "ListFunctions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_layer_versions(self, *args, **kwargs):
        __protego_used['lambda']['list_layer_versions']=['lambda:ListLayerVersions']
        for p in ['lambda:ListLayerVersions']:
            res = {}
            for nm in ["LayerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "ListLayerVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_layers(self, *args, **kwargs):
        __protego_used['lambda']['list_layers']=['lambda:ListLayers']
        for p in ['lambda:ListLayers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "ListLayers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_provisioned_concurrency_configs(self, *args, **kwargs):
        __protego_used['lambda']['list_provisioned_concurrency_configs']=['lambda:*']
        for p in ['lambda:*']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "ListProvisionedConcurrencyConfigs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags(self, *args, **kwargs):
        __protego_used['lambda']['list_tags']=['lambda:ListTags']
        for p in ['lambda:ListTags']:
            res = {}
            for nm in ["Resource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "ListTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_versions_by_function(self, *args, **kwargs):
        __protego_used['lambda']['list_versions_by_function']=['lambda:ListVersionsByFunction']
        for p in ['lambda:ListVersionsByFunction']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "ListVersionsByFunction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def publish_layer_version(self, *args, **kwargs):
        __protego_used['lambda']['publish_layer_version']=['lambda:PublishLayerVersion']
        for p in ['lambda:PublishLayerVersion']:
            res = {}
            for nm in ["Content","LayerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "PublishLayerVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def publish_version(self, *args, **kwargs):
        __protego_used['lambda']['publish_version']=['lambda:PublishVersion']
        for p in ['lambda:PublishVersion']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "PublishVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_function_concurrency(self, *args, **kwargs):
        __protego_used['lambda']['put_function_concurrency']=['lambda:PutFunctionConcurrency']
        for p in ['lambda:PutFunctionConcurrency']:
            res = {}
            for nm in ["ReservedConcurrentExecutions","FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "PutFunctionConcurrency", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_function_event_invoke_config(self, *args, **kwargs):
        __protego_used['lambda']['put_function_event_invoke_config']=['lambda:*']
        for p in ['lambda:*']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "PutFunctionEventInvokeConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_provisioned_concurrency_config(self, *args, **kwargs):
        __protego_used['lambda']['put_provisioned_concurrency_config']=['lambda:*']
        for p in ['lambda:*']:
            res = {}
            for nm in ["Qualifier","ProvisionedConcurrentExecutions","FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "PutProvisionedConcurrencyConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_layer_version_permission(self, *args, **kwargs):
        __protego_used['lambda']['remove_layer_version_permission']=['lambda:RemoveLayerVersionPermission']
        for p in ['lambda:RemoveLayerVersionPermission']:
            res = {}
            for nm in ["VersionNumber","StatementId","LayerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "RemoveLayerVersionPermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_permission(self, *args, **kwargs):
        __protego_used['lambda']['remove_permission']=['lambda:RemovePermission']
        for p in ['lambda:RemovePermission']:
            res = {}
            for nm in ["StatementId","FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "RemovePermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['lambda']['tag_resource']=['lambda:TagResource']
        for p in ['lambda:TagResource']:
            res = {}
            for nm in ["Resource","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['lambda']['untag_resource']=['lambda:UntagResource']
        for p in ['lambda:UntagResource']:
            res = {}
            for nm in ["TagKeys","Resource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_alias(self, *args, **kwargs):
        __protego_used['lambda']['update_alias']=['lambda:UpdateAlias']
        for p in ['lambda:UpdateAlias']:
            res = {}
            for nm in ["FunctionName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "UpdateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_event_source_mapping(self, *args, **kwargs):
        __protego_used['lambda']['update_event_source_mapping']=['lambda:UpdateEventSourceMapping']
        for p in ['lambda:UpdateEventSourceMapping']:
            res = {}
            for nm in ["UUID"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "UpdateEventSourceMapping", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_function_code(self, *args, **kwargs):
        __protego_used['lambda']['update_function_code']=['lambda:UpdateFunctionCode']
        for p in ['lambda:UpdateFunctionCode']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "UpdateFunctionCode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_function_configuration(self, *args, **kwargs):
        __protego_used['lambda']['update_function_configuration']=['lambda:UpdateFunctionConfiguration']
        for p in ['lambda:UpdateFunctionConfiguration']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "UpdateFunctionConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_function_event_invoke_config(self, *args, **kwargs):
        __protego_used['lambda']['update_function_event_invoke_config']=['lambda:*']
        for p in ['lambda:*']:
            res = {}
            for nm in ["FunctionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lambda'].append({'action': "UpdateFunctionEventInvokeConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class lex_models:
    def __init__(self, region_name=__default_region):
        __protego_used['lex-models']= __protego_used.get('lex-models', {})
        __protego_resource_map['lex-models']=__protego_resource_map.get('lex-models', [])
        self.region = region_name
    def create_bot_version(self, *args, **kwargs):
        __protego_used['lex-models']['create_bot_version']=['lex:CreateBotVersion']
        for p in ['lex:CreateBotVersion']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "CreateBotVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_intent_version(self, *args, **kwargs):
        __protego_used['lex-models']['create_intent_version']=['lex:CreateIntentVersion']
        for p in ['lex:CreateIntentVersion']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "CreateIntentVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_slot_type_version(self, *args, **kwargs):
        __protego_used['lex-models']['create_slot_type_version']=['lex:CreateSlotTypeVersion']
        for p in ['lex:CreateSlotTypeVersion']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "CreateSlotTypeVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bot(self, *args, **kwargs):
        __protego_used['lex-models']['delete_bot']=['lex:DeleteBot']
        for p in ['lex:DeleteBot']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "DeleteBot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bot_alias(self, *args, **kwargs):
        __protego_used['lex-models']['delete_bot_alias']=['lex:DeleteBotAlias']
        for p in ['lex:DeleteBotAlias']:
            res = {}
            for nm in ["name","botName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "DeleteBotAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bot_channel_association(self, *args, **kwargs):
        __protego_used['lex-models']['delete_bot_channel_association']=['lex:DeleteBotChannelAssociation']
        for p in ['lex:DeleteBotChannelAssociation']:
            res = {}
            for nm in ["botAlias","name","botName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "DeleteBotChannelAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bot_version(self, *args, **kwargs):
        __protego_used['lex-models']['delete_bot_version']=['lex:DeleteBotVersion']
        for p in ['lex:DeleteBotVersion']:
            res = {}
            for nm in ["name","version"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "DeleteBotVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_intent(self, *args, **kwargs):
        __protego_used['lex-models']['delete_intent']=['lex:DeleteIntent']
        for p in ['lex:DeleteIntent']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "DeleteIntent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_intent_version(self, *args, **kwargs):
        __protego_used['lex-models']['delete_intent_version']=['lex:DeleteIntentVersion']
        for p in ['lex:DeleteIntentVersion']:
            res = {}
            for nm in ["name","version"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "DeleteIntentVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_slot_type(self, *args, **kwargs):
        __protego_used['lex-models']['delete_slot_type']=['lex:DeleteSlotType']
        for p in ['lex:DeleteSlotType']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "DeleteSlotType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_slot_type_version(self, *args, **kwargs):
        __protego_used['lex-models']['delete_slot_type_version']=['lex:DeleteSlotTypeVersion']
        for p in ['lex:DeleteSlotTypeVersion']:
            res = {}
            for nm in ["name","version"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "DeleteSlotTypeVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_utterances(self, *args, **kwargs):
        __protego_used['lex-models']['delete_utterances']=['lex:DeleteUtterances']
        for p in ['lex:DeleteUtterances']:
            res = {}
            for nm in ["userId","botName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "DeleteUtterances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bot(self, *args, **kwargs):
        __protego_used['lex-models']['get_bot']=['lex:GetBot']
        for p in ['lex:GetBot']:
            res = {}
            for nm in ["versionOrAlias","name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetBot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bot_alias(self, *args, **kwargs):
        __protego_used['lex-models']['get_bot_alias']=['lex:GetBotAlias']
        for p in ['lex:GetBotAlias']:
            res = {}
            for nm in ["name","botName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetBotAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bot_aliases(self, *args, **kwargs):
        __protego_used['lex-models']['get_bot_aliases']=['lex:GetBotAliases']
        for p in ['lex:GetBotAliases']:
            res = {}
            for nm in ["botName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetBotAliases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bot_channel_association(self, *args, **kwargs):
        __protego_used['lex-models']['get_bot_channel_association']=['lex:GetBotChannelAssociation']
        for p in ['lex:GetBotChannelAssociation']:
            res = {}
            for nm in ["botAlias","name","botName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetBotChannelAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bot_channel_associations(self, *args, **kwargs):
        __protego_used['lex-models']['get_bot_channel_associations']=['lex:GetBotChannelAssociations']
        for p in ['lex:GetBotChannelAssociations']:
            res = {}
            for nm in ["botAlias","botName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetBotChannelAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bot_versions(self, *args, **kwargs):
        __protego_used['lex-models']['get_bot_versions']=['lex:GetBotVersions']
        for p in ['lex:GetBotVersions']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetBotVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bots(self, *args, **kwargs):
        __protego_used['lex-models']['get_bots']=['lex:GetBots']
        for p in ['lex:GetBots']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetBots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_builtin_intent(self, *args, **kwargs):
        __protego_used['lex-models']['get_builtin_intent']=['lex:GetBuiltinIntent']
        for p in ['lex:GetBuiltinIntent']:
            res = {}
            for nm in ["signature"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetBuiltinIntent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_builtin_intents(self, *args, **kwargs):
        __protego_used['lex-models']['get_builtin_intents']=['lex:GetBuiltinIntents']
        for p in ['lex:GetBuiltinIntents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetBuiltinIntents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_builtin_slot_types(self, *args, **kwargs):
        __protego_used['lex-models']['get_builtin_slot_types']=['lex:GetBuiltinSlotTypes']
        for p in ['lex:GetBuiltinSlotTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetBuiltinSlotTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_export(self, *args, **kwargs):
        __protego_used['lex-models']['get_export']=['lex:GetExport']
        for p in ['lex:GetExport']:
            res = {}
            for nm in ["exportType","name","resourceType","version"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetExport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_import(self, *args, **kwargs):
        __protego_used['lex-models']['get_import']=['lex:GetImport']
        for p in ['lex:GetImport']:
            res = {}
            for nm in ["importId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetImport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_intent(self, *args, **kwargs):
        __protego_used['lex-models']['get_intent']=['lex:GetIntent']
        for p in ['lex:GetIntent']:
            res = {}
            for nm in ["name","version"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetIntent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_intent_versions(self, *args, **kwargs):
        __protego_used['lex-models']['get_intent_versions']=['lex:GetIntentVersions']
        for p in ['lex:GetIntentVersions']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetIntentVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_intents(self, *args, **kwargs):
        __protego_used['lex-models']['get_intents']=['lex:GetIntents']
        for p in ['lex:GetIntents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetIntents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_slot_type(self, *args, **kwargs):
        __protego_used['lex-models']['get_slot_type']=['lex:GetSlotType']
        for p in ['lex:GetSlotType']:
            res = {}
            for nm in ["name","version"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetSlotType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_slot_type_versions(self, *args, **kwargs):
        __protego_used['lex-models']['get_slot_type_versions']=['lex:GetSlotTypeVersions']
        for p in ['lex:GetSlotTypeVersions']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetSlotTypeVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_slot_types(self, *args, **kwargs):
        __protego_used['lex-models']['get_slot_types']=['lex:GetSlotTypes']
        for p in ['lex:GetSlotTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetSlotTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_utterances_view(self, *args, **kwargs):
        __protego_used['lex-models']['get_utterances_view']=['lex:GetUtterancesView']
        for p in ['lex:GetUtterancesView']:
            res = {}
            for nm in ["statusType","botName","botVersions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "GetUtterancesView", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bot(self, *args, **kwargs):
        __protego_used['lex-models']['put_bot']=['lex:PutBot']
        for p in ['lex:PutBot']:
            res = {}
            for nm in ["childDirected","name","locale"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "PutBot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bot_alias(self, *args, **kwargs):
        __protego_used['lex-models']['put_bot_alias']=['lex:PutBotAlias']
        for p in ['lex:PutBotAlias']:
            res = {}
            for nm in ["botVersion","name","botName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "PutBotAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_intent(self, *args, **kwargs):
        __protego_used['lex-models']['put_intent']=['lex:PutIntent']
        for p in ['lex:PutIntent']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "PutIntent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_slot_type(self, *args, **kwargs):
        __protego_used['lex-models']['put_slot_type']=['lex:PutSlotType']
        for p in ['lex:PutSlotType']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "PutSlotType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_import(self, *args, **kwargs):
        __protego_used['lex-models']['start_import']=['lex:StartImport']
        for p in ['lex:StartImport']:
            res = {}
            for nm in ["payload","mergeStrategy","resourceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-models'].append({'action': "StartImport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class lex_runtime:
    def __init__(self, region_name=__default_region):
        __protego_used['lex-runtime']= __protego_used.get('lex-runtime', {})
        __protego_resource_map['lex-runtime']=__protego_resource_map.get('lex-runtime', [])
        self.region = region_name
    def delete_session(self, *args, **kwargs):
        __protego_used['lex-runtime']['delete_session']=['lex-runtime:*']
        for p in ['lex-runtime:*']:
            res = {}
            for nm in ["botAlias","userId","botName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-runtime'].append({'action': "DeleteSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_session(self, *args, **kwargs):
        __protego_used['lex-runtime']['get_session']=['lex-runtime:*']
        for p in ['lex-runtime:*']:
            res = {}
            for nm in ["botAlias","userId","botName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-runtime'].append({'action': "GetSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def post_content(self, *args, **kwargs):
        __protego_used['lex-runtime']['post_content']=['lex:PostContent']
        for p in ['lex:PostContent']:
            res = {}
            for nm in ["botAlias","userId","contentType","botName","inputStream"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-runtime'].append({'action': "PostContent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def post_text(self, *args, **kwargs):
        __protego_used['lex-runtime']['post_text']=['lex:PostText']
        for p in ['lex:PostText']:
            res = {}
            for nm in ["botAlias","userId","botName","inputText"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-runtime'].append({'action': "PostText", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_session(self, *args, **kwargs):
        __protego_used['lex-runtime']['put_session']=['lex-runtime:*']
        for p in ['lex-runtime:*']:
            res = {}
            for nm in ["botAlias","userId","botName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lex-runtime'].append({'action': "PutSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class license_manager:
    def __init__(self, region_name=__default_region):
        __protego_used['license-manager']= __protego_used.get('license-manager', {})
        __protego_resource_map['license-manager']=__protego_resource_map.get('license-manager', [])
        self.region = region_name
    def create_license_configuration(self, *args, **kwargs):
        __protego_used['license-manager']['create_license_configuration']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["LicenseCountingType","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "CreateLicenseConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_license_configuration(self, *args, **kwargs):
        __protego_used['license-manager']['delete_license_configuration']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["LicenseConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "DeleteLicenseConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_license_configuration(self, *args, **kwargs):
        __protego_used['license-manager']['get_license_configuration']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["LicenseConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "GetLicenseConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_service_settings(self, *args, **kwargs):
        __protego_used['license-manager']['get_service_settings']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "GetServiceSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_associations_for_license_configuration(self, *args, **kwargs):
        __protego_used['license-manager']['list_associations_for_license_configuration']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["LicenseConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "ListAssociationsForLicenseConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_failures_for_license_configuration_operations(self, *args, **kwargs):
        __protego_used['license-manager']['list_failures_for_license_configuration_operations']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["LicenseConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "ListFailuresForLicenseConfigurationOperations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_license_configurations(self, *args, **kwargs):
        __protego_used['license-manager']['list_license_configurations']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "ListLicenseConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_license_specifications_for_resource(self, *args, **kwargs):
        __protego_used['license-manager']['list_license_specifications_for_resource']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "ListLicenseSpecificationsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resource_inventory(self, *args, **kwargs):
        __protego_used['license-manager']['list_resource_inventory']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "ListResourceInventory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['license-manager']['list_tags_for_resource']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_usage_for_license_configuration(self, *args, **kwargs):
        __protego_used['license-manager']['list_usage_for_license_configuration']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["LicenseConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "ListUsageForLicenseConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['license-manager']['tag_resource']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['license-manager']['untag_resource']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_license_configuration(self, *args, **kwargs):
        __protego_used['license-manager']['update_license_configuration']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["LicenseConfigurationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "UpdateLicenseConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_license_specifications_for_resource(self, *args, **kwargs):
        __protego_used['license-manager']['update_license_specifications_for_resource']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "UpdateLicenseSpecificationsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_service_settings(self, *args, **kwargs):
        __protego_used['license-manager']['update_service_settings']=['license-manager:*']
        for p in ['license-manager:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['license-manager'].append({'action': "UpdateServiceSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class lightsail:
    def __init__(self, region_name=__default_region):
        __protego_used['lightsail']= __protego_used.get('lightsail', {})
        __protego_resource_map['lightsail']=__protego_resource_map.get('lightsail', [])
        self.region = region_name
    def allocate_static_ip(self, *args, **kwargs):
        __protego_used['lightsail']['allocate_static_ip']=['lightsail:AllocateStaticIp']
        for p in ['lightsail:AllocateStaticIp']:
            res = {}
            for nm in ["staticIpName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "AllocateStaticIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_disk(self, *args, **kwargs):
        __protego_used['lightsail']['attach_disk']=['lightsail:*','lightsail:*']
        for p in ['lightsail:*','lightsail:*']:
            res = {}
            for nm in ["diskName","instanceName","diskPath"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "AttachDisk", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_instances_to_load_balancer(self, *args, **kwargs):
        __protego_used['lightsail']['attach_instances_to_load_balancer']=['lightsail:*','lightsail:*']
        for p in ['lightsail:*','lightsail:*']:
            res = {}
            for nm in ["loadBalancerName","instanceNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "AttachInstancesToLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_load_balancer_tls_certificate(self, *args, **kwargs):
        __protego_used['lightsail']['attach_load_balancer_tls_certificate']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["loadBalancerName","certificateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "AttachLoadBalancerTlsCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_static_ip(self, *args, **kwargs):
        __protego_used['lightsail']['attach_static_ip']=['lightsail:AttachStaticIp','lightsail:AttachStaticIp']
        for p in ['lightsail:AttachStaticIp','lightsail:AttachStaticIp']:
            res = {}
            for nm in ["staticIpName","instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "AttachStaticIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def close_instance_public_ports(self, *args, **kwargs):
        __protego_used['lightsail']['close_instance_public_ports']=['lightsail:CloseInstancePublicPorts']
        for p in ['lightsail:CloseInstancePublicPorts']:
            res = {}
            for nm in ["instanceName","portInfo"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CloseInstancePublicPorts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['copy_snapshot']=['lightsail:CopySnapshot']
        for p in ['lightsail:CopySnapshot']:
            res = {}
            for nm in ["targetSnapshotName","sourceRegion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CopySnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cloud_formation_stack(self, *args, **kwargs):
        __protego_used['lightsail']['create_cloud_formation_stack']=['lightsail:CreateCloudFormationStack']
        for p in ['lightsail:CreateCloudFormationStack']:
            res = {}
            for nm in ["instances"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateCloudFormationStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_disk(self, *args, **kwargs):
        __protego_used['lightsail']['create_disk']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["availabilityZone","diskName","sizeInGb"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateDisk", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_disk_from_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['create_disk_from_snapshot']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["availabilityZone","diskName","sizeInGb"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateDiskFromSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_disk_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['create_disk_snapshot']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["diskSnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateDiskSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_domain(self, *args, **kwargs):
        __protego_used['lightsail']['create_domain']=['lightsail:CreateDomain']
        for p in ['lightsail:CreateDomain']:
            res = {}
            for nm in ["domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_domain_entry(self, *args, **kwargs):
        __protego_used['lightsail']['create_domain_entry']=['lightsail:CreateDomainEntry']
        for p in ['lightsail:CreateDomainEntry']:
            res = {}
            for nm in ["domainEntry","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateDomainEntry", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_instance_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['create_instance_snapshot']=['lightsail:CreateInstanceSnapshot','lightsail:CreateInstanceSnapshot']
        for p in ['lightsail:CreateInstanceSnapshot','lightsail:CreateInstanceSnapshot']:
            res = {}
            for nm in ["instanceName","instanceSnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateInstanceSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_instances(self, *args, **kwargs):
        __protego_used['lightsail']['create_instances']=['lightsail:CreateInstances']
        for p in ['lightsail:CreateInstances']:
            res = {}
            for nm in ["availabilityZone","instanceNames","blueprintId","bundleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_instances_from_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['create_instances_from_snapshot']=['lightsail:CreateInstancesFromSnapshot','lightsail:CreateInstancesFromSnapshot']
        for p in ['lightsail:CreateInstancesFromSnapshot','lightsail:CreateInstancesFromSnapshot']:
            res = {}
            for nm in ["availabilityZone","instanceNames","bundleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateInstancesFromSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_key_pair(self, *args, **kwargs):
        __protego_used['lightsail']['create_key_pair']=['lightsail:CreateKeyPair']
        for p in ['lightsail:CreateKeyPair']:
            res = {}
            for nm in ["keyPairName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateKeyPair", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_load_balancer(self, *args, **kwargs):
        __protego_used['lightsail']['create_load_balancer']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["loadBalancerName","instancePort"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_load_balancer_tls_certificate(self, *args, **kwargs):
        __protego_used['lightsail']['create_load_balancer_tls_certificate']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["loadBalancerName","certificateDomainName","certificateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateLoadBalancerTlsCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_relational_database(self, *args, **kwargs):
        __protego_used['lightsail']['create_relational_database']=['lightsail:CreateRelationalDatabase']
        for p in ['lightsail:CreateRelationalDatabase']:
            res = {}
            for nm in ["relationalDatabaseBundleId","masterDatabaseName","relationalDatabaseBlueprintId","masterUsername","relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateRelationalDatabase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_relational_database_from_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['create_relational_database_from_snapshot']=['lightsail:CreateRelationalDatabaseFromSnapshot']
        for p in ['lightsail:CreateRelationalDatabaseFromSnapshot']:
            res = {}
            for nm in ["relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateRelationalDatabaseFromSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_relational_database_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['create_relational_database_snapshot']=['lightsail:CreateRelationalDatabaseSnapshot']
        for p in ['lightsail:CreateRelationalDatabaseSnapshot']:
            res = {}
            for nm in ["relationalDatabaseSnapshotName","relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "CreateRelationalDatabaseSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_auto_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['delete_auto_snapshot']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["date","resourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteAutoSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_disk(self, *args, **kwargs):
        __protego_used['lightsail']['delete_disk']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["diskName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteDisk", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_disk_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['delete_disk_snapshot']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["diskSnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteDiskSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_domain(self, *args, **kwargs):
        __protego_used['lightsail']['delete_domain']=['lightsail:DeleteDomain']
        for p in ['lightsail:DeleteDomain']:
            res = {}
            for nm in ["domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_domain_entry(self, *args, **kwargs):
        __protego_used['lightsail']['delete_domain_entry']=['lightsail:DeleteDomainEntry']
        for p in ['lightsail:DeleteDomainEntry']:
            res = {}
            for nm in ["domainEntry","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteDomainEntry", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_instance(self, *args, **kwargs):
        __protego_used['lightsail']['delete_instance']=['lightsail:DeleteInstance']
        for p in ['lightsail:DeleteInstance']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_instance_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['delete_instance_snapshot']=['lightsail:DeleteInstanceSnapshot']
        for p in ['lightsail:DeleteInstanceSnapshot']:
            res = {}
            for nm in ["instanceSnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteInstanceSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_key_pair(self, *args, **kwargs):
        __protego_used['lightsail']['delete_key_pair']=['lightsail:DeleteKeyPair']
        for p in ['lightsail:DeleteKeyPair']:
            res = {}
            for nm in ["keyPairName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteKeyPair", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_known_host_keys(self, *args, **kwargs):
        __protego_used['lightsail']['delete_known_host_keys']=['lightsail:DeleteKnownHostKeys']
        for p in ['lightsail:DeleteKnownHostKeys']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteKnownHostKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_load_balancer(self, *args, **kwargs):
        __protego_used['lightsail']['delete_load_balancer']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["loadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_load_balancer_tls_certificate(self, *args, **kwargs):
        __protego_used['lightsail']['delete_load_balancer_tls_certificate']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["loadBalancerName","certificateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteLoadBalancerTlsCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_relational_database(self, *args, **kwargs):
        __protego_used['lightsail']['delete_relational_database']=['lightsail:DeleteRelationalDatabase']
        for p in ['lightsail:DeleteRelationalDatabase']:
            res = {}
            for nm in ["relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteRelationalDatabase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_relational_database_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['delete_relational_database_snapshot']=['lightsail:DeleteRelationalDatabaseSnapshot']
        for p in ['lightsail:DeleteRelationalDatabaseSnapshot']:
            res = {}
            for nm in ["relationalDatabaseSnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DeleteRelationalDatabaseSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_disk(self, *args, **kwargs):
        __protego_used['lightsail']['detach_disk']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["diskName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DetachDisk", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_instances_from_load_balancer(self, *args, **kwargs):
        __protego_used['lightsail']['detach_instances_from_load_balancer']=['lightsail:*','lightsail:*']
        for p in ['lightsail:*','lightsail:*']:
            res = {}
            for nm in ["loadBalancerName","instanceNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DetachInstancesFromLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_static_ip(self, *args, **kwargs):
        __protego_used['lightsail']['detach_static_ip']=['lightsail:DetachStaticIp','lightsail:DetachStaticIp']
        for p in ['lightsail:DetachStaticIp','lightsail:DetachStaticIp']:
            res = {}
            for nm in ["staticIpName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DetachStaticIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_add_on(self, *args, **kwargs):
        __protego_used['lightsail']['disable_add_on']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["resourceName","addOnType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DisableAddOn", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def download_default_key_pair(self, *args, **kwargs):
        __protego_used['lightsail']['download_default_key_pair']=['lightsail:DownloadDefaultKeyPair']
        for p in ['lightsail:DownloadDefaultKeyPair']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "DownloadDefaultKeyPair", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_add_on(self, *args, **kwargs):
        __protego_used['lightsail']['enable_add_on']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["addOnRequest","resourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "EnableAddOn", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['export_snapshot']=['lightsail:ExportSnapshot']
        for p in ['lightsail:ExportSnapshot']:
            res = {}
            for nm in ["sourceSnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "ExportSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_active_names(self, *args, **kwargs):
        __protego_used['lightsail']['get_active_names']=['lightsail:GetActiveNames']
        for p in ['lightsail:GetActiveNames']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetActiveNames", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_auto_snapshots(self, *args, **kwargs):
        __protego_used['lightsail']['get_auto_snapshots']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["resourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetAutoSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_blueprints(self, *args, **kwargs):
        __protego_used['lightsail']['get_blueprints']=['lightsail:GetBlueprints']
        for p in ['lightsail:GetBlueprints']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetBlueprints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bundles(self, *args, **kwargs):
        __protego_used['lightsail']['get_bundles']=['lightsail:GetBundles']
        for p in ['lightsail:GetBundles']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetBundles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_cloud_formation_stack_records(self, *args, **kwargs):
        __protego_used['lightsail']['get_cloud_formation_stack_records']=['lightsail:GetCloudFormationStackRecords']
        for p in ['lightsail:GetCloudFormationStackRecords']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetCloudFormationStackRecords", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_disk(self, *args, **kwargs):
        __protego_used['lightsail']['get_disk']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["diskName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetDisk", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_disk_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['get_disk_snapshot']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["diskSnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetDiskSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_disk_snapshots(self, *args, **kwargs):
        __protego_used['lightsail']['get_disk_snapshots']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetDiskSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_disks(self, *args, **kwargs):
        __protego_used['lightsail']['get_disks']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetDisks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain(self, *args, **kwargs):
        __protego_used['lightsail']['get_domain']=['lightsail:GetDomain']
        for p in ['lightsail:GetDomain']:
            res = {}
            for nm in ["domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domains(self, *args, **kwargs):
        __protego_used['lightsail']['get_domains']=['lightsail:GetDomains']
        for p in ['lightsail:GetDomains']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetDomains", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_export_snapshot_records(self, *args, **kwargs):
        __protego_used['lightsail']['get_export_snapshot_records']=['lightsail:GetExportSnapshotRecords']
        for p in ['lightsail:GetExportSnapshotRecords']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetExportSnapshotRecords", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instance(self, *args, **kwargs):
        __protego_used['lightsail']['get_instance']=['lightsail:GetInstance']
        for p in ['lightsail:GetInstance']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instance_access_details(self, *args, **kwargs):
        __protego_used['lightsail']['get_instance_access_details']=['lightsail:GetInstanceAccessDetails']
        for p in ['lightsail:GetInstanceAccessDetails']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetInstanceAccessDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instance_metric_data(self, *args, **kwargs):
        __protego_used['lightsail']['get_instance_metric_data']=['lightsail:GetInstanceMetricData']
        for p in ['lightsail:GetInstanceMetricData']:
            res = {}
            for nm in ["statistics","period","startTime","metricName","unit","instanceName","endTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetInstanceMetricData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instance_port_states(self, *args, **kwargs):
        __protego_used['lightsail']['get_instance_port_states']=['lightsail:GetInstancePortStates']
        for p in ['lightsail:GetInstancePortStates']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetInstancePortStates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instance_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['get_instance_snapshot']=['lightsail:GetInstanceSnapshot']
        for p in ['lightsail:GetInstanceSnapshot']:
            res = {}
            for nm in ["instanceSnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetInstanceSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instance_snapshots(self, *args, **kwargs):
        __protego_used['lightsail']['get_instance_snapshots']=['lightsail:GetInstanceSnapshots']
        for p in ['lightsail:GetInstanceSnapshots']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetInstanceSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instance_state(self, *args, **kwargs):
        __protego_used['lightsail']['get_instance_state']=['lightsail:GetInstanceState']
        for p in ['lightsail:GetInstanceState']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetInstanceState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instances(self, *args, **kwargs):
        __protego_used['lightsail']['get_instances']=['lightsail:GetInstances']
        for p in ['lightsail:GetInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_key_pair(self, *args, **kwargs):
        __protego_used['lightsail']['get_key_pair']=['lightsail:GetKeyPair']
        for p in ['lightsail:GetKeyPair']:
            res = {}
            for nm in ["keyPairName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetKeyPair", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_key_pairs(self, *args, **kwargs):
        __protego_used['lightsail']['get_key_pairs']=['lightsail:GetKeyPairs']
        for p in ['lightsail:GetKeyPairs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetKeyPairs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_load_balancer(self, *args, **kwargs):
        __protego_used['lightsail']['get_load_balancer']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["loadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_load_balancer_metric_data(self, *args, **kwargs):
        __protego_used['lightsail']['get_load_balancer_metric_data']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["statistics","loadBalancerName","period","startTime","metricName","unit","endTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetLoadBalancerMetricData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_load_balancer_tls_certificates(self, *args, **kwargs):
        __protego_used['lightsail']['get_load_balancer_tls_certificates']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["loadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetLoadBalancerTlsCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_load_balancers(self, *args, **kwargs):
        __protego_used['lightsail']['get_load_balancers']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetLoadBalancers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_operation(self, *args, **kwargs):
        __protego_used['lightsail']['get_operation']=['lightsail:GetOperation']
        for p in ['lightsail:GetOperation']:
            res = {}
            for nm in ["operationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetOperation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_operations(self, *args, **kwargs):
        __protego_used['lightsail']['get_operations']=['lightsail:GetOperations']
        for p in ['lightsail:GetOperations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetOperations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_operations_for_resource(self, *args, **kwargs):
        __protego_used['lightsail']['get_operations_for_resource']=['lightsail:GetOperationsForResource']
        for p in ['lightsail:GetOperationsForResource']:
            res = {}
            for nm in ["resourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetOperationsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_regions(self, *args, **kwargs):
        __protego_used['lightsail']['get_regions']=['lightsail:GetRegions']
        for p in ['lightsail:GetRegions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRegions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_database(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_database']=['lightsail:GetRelationalDatabase']
        for p in ['lightsail:GetRelationalDatabase']:
            res = {}
            for nm in ["relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_database_blueprints(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_database_blueprints']=['lightsail:GetRelationalDatabaseBlueprints']
        for p in ['lightsail:GetRelationalDatabaseBlueprints']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabaseBlueprints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_database_bundles(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_database_bundles']=['lightsail:GetRelationalDatabaseBundles']
        for p in ['lightsail:GetRelationalDatabaseBundles']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabaseBundles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_database_events(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_database_events']=['lightsail:GetRelationalDatabaseEvents']
        for p in ['lightsail:GetRelationalDatabaseEvents']:
            res = {}
            for nm in ["relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabaseEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_database_log_events(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_database_log_events']=['lightsail:GetRelationalDatabaseLogEvents']
        for p in ['lightsail:GetRelationalDatabaseLogEvents']:
            res = {}
            for nm in ["relationalDatabaseName","logStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabaseLogEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_database_log_streams(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_database_log_streams']=['lightsail:GetRelationalDatabaseLogStreams']
        for p in ['lightsail:GetRelationalDatabaseLogStreams']:
            res = {}
            for nm in ["relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabaseLogStreams", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_database_master_user_password(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_database_master_user_password']=['lightsail:GetRelationalDatabaseMasterUserPassword']
        for p in ['lightsail:GetRelationalDatabaseMasterUserPassword']:
            res = {}
            for nm in ["relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabaseMasterUserPassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_database_metric_data(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_database_metric_data']=['lightsail:GetRelationalDatabaseMetricData']
        for p in ['lightsail:GetRelationalDatabaseMetricData']:
            res = {}
            for nm in ["statistics","unit","period","startTime","metricName","relationalDatabaseName","endTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabaseMetricData", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_database_parameters(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_database_parameters']=['lightsail:GetRelationalDatabaseParameters']
        for p in ['lightsail:GetRelationalDatabaseParameters']:
            res = {}
            for nm in ["relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabaseParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_database_snapshot(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_database_snapshot']=['lightsail:GetRelationalDatabaseSnapshot']
        for p in ['lightsail:GetRelationalDatabaseSnapshot']:
            res = {}
            for nm in ["relationalDatabaseSnapshotName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabaseSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_database_snapshots(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_database_snapshots']=['lightsail:GetRelationalDatabaseSnapshots']
        for p in ['lightsail:GetRelationalDatabaseSnapshots']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabaseSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_relational_databases(self, *args, **kwargs):
        __protego_used['lightsail']['get_relational_databases']=['lightsail:GetRelationalDatabases']
        for p in ['lightsail:GetRelationalDatabases']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetRelationalDatabases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_static_ip(self, *args, **kwargs):
        __protego_used['lightsail']['get_static_ip']=['lightsail:GetStaticIp']
        for p in ['lightsail:GetStaticIp']:
            res = {}
            for nm in ["staticIpName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetStaticIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_static_ips(self, *args, **kwargs):
        __protego_used['lightsail']['get_static_ips']=['lightsail:GetStaticIps']
        for p in ['lightsail:GetStaticIps']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "GetStaticIps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_key_pair(self, *args, **kwargs):
        __protego_used['lightsail']['import_key_pair']=['lightsail:ImportKeyPair']
        for p in ['lightsail:ImportKeyPair']:
            res = {}
            for nm in ["publicKeyBase64","keyPairName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "ImportKeyPair", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def is_vpc_peered(self, *args, **kwargs):
        __protego_used['lightsail']['is_vpc_peered']=['lightsail:IsVpcPeered']
        for p in ['lightsail:IsVpcPeered']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "IsVpcPeered", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def open_instance_public_ports(self, *args, **kwargs):
        __protego_used['lightsail']['open_instance_public_ports']=['lightsail:OpenInstancePublicPorts']
        for p in ['lightsail:OpenInstancePublicPorts']:
            res = {}
            for nm in ["instanceName","portInfo"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "OpenInstancePublicPorts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def peer_vpc(self, *args, **kwargs):
        __protego_used['lightsail']['peer_vpc']=['lightsail:PeerVpc']
        for p in ['lightsail:PeerVpc']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "PeerVpc", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_instance_public_ports(self, *args, **kwargs):
        __protego_used['lightsail']['put_instance_public_ports']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["instanceName","portInfos"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "PutInstancePublicPorts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_instance(self, *args, **kwargs):
        __protego_used['lightsail']['reboot_instance']=['lightsail:RebootInstance']
        for p in ['lightsail:RebootInstance']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "RebootInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_relational_database(self, *args, **kwargs):
        __protego_used['lightsail']['reboot_relational_database']=['lightsail:RebootRelationalDatabase']
        for p in ['lightsail:RebootRelationalDatabase']:
            res = {}
            for nm in ["relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "RebootRelationalDatabase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def release_static_ip(self, *args, **kwargs):
        __protego_used['lightsail']['release_static_ip']=['lightsail:ReleaseStaticIp']
        for p in ['lightsail:ReleaseStaticIp']:
            res = {}
            for nm in ["staticIpName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "ReleaseStaticIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_instance(self, *args, **kwargs):
        __protego_used['lightsail']['start_instance']=['lightsail:StartInstance']
        for p in ['lightsail:StartInstance']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "StartInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_relational_database(self, *args, **kwargs):
        __protego_used['lightsail']['start_relational_database']=['lightsail:StartRelationalDatabase']
        for p in ['lightsail:StartRelationalDatabase']:
            res = {}
            for nm in ["relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "StartRelationalDatabase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_instance(self, *args, **kwargs):
        __protego_used['lightsail']['stop_instance']=['lightsail:StopInstance']
        for p in ['lightsail:StopInstance']:
            res = {}
            for nm in ["instanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "StopInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_relational_database(self, *args, **kwargs):
        __protego_used['lightsail']['stop_relational_database']=['lightsail:StopRelationalDatabase']
        for p in ['lightsail:StopRelationalDatabase']:
            res = {}
            for nm in ["relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "StopRelationalDatabase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['lightsail']['tag_resource']=['lightsail:TagResource']
        for p in ['lightsail:TagResource']:
            res = {}
            for nm in ["resourceName","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unpeer_vpc(self, *args, **kwargs):
        __protego_used['lightsail']['unpeer_vpc']=['lightsail:UnpeerVpc']
        for p in ['lightsail:UnpeerVpc']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "UnpeerVpc", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['lightsail']['untag_resource']=['lightsail:UntagResource']
        for p in ['lightsail:UntagResource']:
            res = {}
            for nm in ["tagKeys","resourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_domain_entry(self, *args, **kwargs):
        __protego_used['lightsail']['update_domain_entry']=['lightsail:UpdateDomainEntry']
        for p in ['lightsail:UpdateDomainEntry']:
            res = {}
            for nm in ["domainEntry","domainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "UpdateDomainEntry", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_load_balancer_attribute(self, *args, **kwargs):
        __protego_used['lightsail']['update_load_balancer_attribute']=['lightsail:*']
        for p in ['lightsail:*']:
            res = {}
            for nm in ["loadBalancerName","attributeName","attributeValue"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "UpdateLoadBalancerAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_relational_database(self, *args, **kwargs):
        __protego_used['lightsail']['update_relational_database']=['lightsail:UpdateRelationalDatabase']
        for p in ['lightsail:UpdateRelationalDatabase']:
            res = {}
            for nm in ["relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "UpdateRelationalDatabase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_relational_database_parameters(self, *args, **kwargs):
        __protego_used['lightsail']['update_relational_database_parameters']=['lightsail:UpdateRelationalDatabaseParameters']
        for p in ['lightsail:UpdateRelationalDatabaseParameters']:
            res = {}
            for nm in ["parameters","relationalDatabaseName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['lightsail'].append({'action': "UpdateRelationalDatabaseParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class logs:
    def __init__(self, region_name=__default_region):
        __protego_used['logs']= __protego_used.get('logs', {})
        __protego_resource_map['logs']=__protego_resource_map.get('logs', [])
        self.region = region_name
    def associate_kms_key(self, *args, **kwargs):
        __protego_used['logs']['associate_kms_key']=['logs:AssociateKmsKey']
        for p in ['logs:AssociateKmsKey']:
            res = {}
            for nm in ["logGroupName","kmsKeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "AssociateKmsKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_export_task(self, *args, **kwargs):
        __protego_used['logs']['cancel_export_task']=['logs:CancelExportTask']
        for p in ['logs:CancelExportTask']:
            res = {}
            for nm in ["taskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "CancelExportTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_export_task(self, *args, **kwargs):
        __protego_used['logs']['create_export_task']=['logs:CreateExportTask']
        for p in ['logs:CreateExportTask']:
            res = {}
            for nm in ["logGroupName","destination","to","from"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "CreateExportTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_log_group(self, *args, **kwargs):
        __protego_used['logs']['create_log_group']=['logs:CreateLogGroup']
        for p in ['logs:CreateLogGroup']:
            res = {}
            for nm in ["logGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "CreateLogGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_log_stream(self, *args, **kwargs):
        __protego_used['logs']['create_log_stream']=['logs:CreateLogStream']
        for p in ['logs:CreateLogStream']:
            res = {}
            for nm in ["logGroupName","logStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "CreateLogStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_destination(self, *args, **kwargs):
        __protego_used['logs']['delete_destination']=['logs:DeleteDestination']
        for p in ['logs:DeleteDestination']:
            res = {}
            for nm in ["destinationName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DeleteDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_log_group(self, *args, **kwargs):
        __protego_used['logs']['delete_log_group']=['logs:DeleteLogGroup']
        for p in ['logs:DeleteLogGroup']:
            res = {}
            for nm in ["logGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DeleteLogGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_log_stream(self, *args, **kwargs):
        __protego_used['logs']['delete_log_stream']=['logs:DeleteLogStream','logs:DeleteLogStream']
        for p in ['logs:DeleteLogStream','logs:DeleteLogStream']:
            res = {}
            for nm in ["logGroupName","logStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DeleteLogStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_metric_filter(self, *args, **kwargs):
        __protego_used['logs']['delete_metric_filter']=['logs:DeleteMetricFilter']
        for p in ['logs:DeleteMetricFilter']:
            res = {}
            for nm in ["logGroupName","filterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DeleteMetricFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resource_policy(self, *args, **kwargs):
        __protego_used['logs']['delete_resource_policy']=['logs:DeleteResourcePolicy']
        for p in ['logs:DeleteResourcePolicy']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DeleteResourcePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_retention_policy(self, *args, **kwargs):
        __protego_used['logs']['delete_retention_policy']=['logs:DeleteRetentionPolicy']
        for p in ['logs:DeleteRetentionPolicy']:
            res = {}
            for nm in ["logGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DeleteRetentionPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_subscription_filter(self, *args, **kwargs):
        __protego_used['logs']['delete_subscription_filter']=['logs:DeleteSubscriptionFilter']
        for p in ['logs:DeleteSubscriptionFilter']:
            res = {}
            for nm in ["logGroupName","filterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DeleteSubscriptionFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_destinations(self, *args, **kwargs):
        __protego_used['logs']['describe_destinations']=['logs:DescribeDestinations']
        for p in ['logs:DescribeDestinations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DescribeDestinations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_export_tasks(self, *args, **kwargs):
        __protego_used['logs']['describe_export_tasks']=['logs:DescribeExportTasks']
        for p in ['logs:DescribeExportTasks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DescribeExportTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_log_groups(self, *args, **kwargs):
        __protego_used['logs']['describe_log_groups']=['logs:DescribeLogGroups']
        for p in ['logs:DescribeLogGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DescribeLogGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_log_streams(self, *args, **kwargs):
        __protego_used['logs']['describe_log_streams']=['logs:DescribeLogStreams']
        for p in ['logs:DescribeLogStreams']:
            res = {}
            for nm in ["logGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DescribeLogStreams", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_metric_filters(self, *args, **kwargs):
        __protego_used['logs']['describe_metric_filters']=['logs:DescribeMetricFilters']
        for p in ['logs:DescribeMetricFilters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DescribeMetricFilters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_queries(self, *args, **kwargs):
        __protego_used['logs']['describe_queries']=['logs:DescribeQueries']
        for p in ['logs:DescribeQueries']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DescribeQueries", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_resource_policies(self, *args, **kwargs):
        __protego_used['logs']['describe_resource_policies']=['logs:DescribeResourcePolicies']
        for p in ['logs:DescribeResourcePolicies']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DescribeResourcePolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_subscription_filters(self, *args, **kwargs):
        __protego_used['logs']['describe_subscription_filters']=['logs:DescribeSubscriptionFilters']
        for p in ['logs:DescribeSubscriptionFilters']:
            res = {}
            for nm in ["logGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DescribeSubscriptionFilters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_kms_key(self, *args, **kwargs):
        __protego_used['logs']['disassociate_kms_key']=['logs:DisassociateKmsKey']
        for p in ['logs:DisassociateKmsKey']:
            res = {}
            for nm in ["logGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "DisassociateKmsKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def filter_log_events(self, *args, **kwargs):
        __protego_used['logs']['filter_log_events']=['logs:FilterLogEvents']
        for p in ['logs:FilterLogEvents']:
            res = {}
            for nm in ["logGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "FilterLogEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_log_events(self, *args, **kwargs):
        __protego_used['logs']['get_log_events']=['logs:GetLogEvents','logs:GetLogEvents']
        for p in ['logs:GetLogEvents','logs:GetLogEvents']:
            res = {}
            for nm in ["logGroupName","logStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "GetLogEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_log_group_fields(self, *args, **kwargs):
        __protego_used['logs']['get_log_group_fields']=['logs:GetLogGroupFields']
        for p in ['logs:GetLogGroupFields']:
            res = {}
            for nm in ["logGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "GetLogGroupFields", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_log_record(self, *args, **kwargs):
        __protego_used['logs']['get_log_record']=['logs:GetLogRecord']
        for p in ['logs:GetLogRecord']:
            res = {}
            for nm in ["logRecordPointer"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "GetLogRecord", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_query_results(self, *args, **kwargs):
        __protego_used['logs']['get_query_results']=['logs:GetQueryResults']
        for p in ['logs:GetQueryResults']:
            res = {}
            for nm in ["queryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "GetQueryResults", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_log_group(self, *args, **kwargs):
        __protego_used['logs']['list_tags_log_group']=['logs:ListTagsLogGroup']
        for p in ['logs:ListTagsLogGroup']:
            res = {}
            for nm in ["logGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "ListTagsLogGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_destination(self, *args, **kwargs):
        __protego_used['logs']['put_destination']=['logs:PutDestination']
        for p in ['logs:PutDestination']:
            res = {}
            for nm in ["destinationName","targetArn","roleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "PutDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_destination_policy(self, *args, **kwargs):
        __protego_used['logs']['put_destination_policy']=['logs:PutDestinationPolicy']
        for p in ['logs:PutDestinationPolicy']:
            res = {}
            for nm in ["destinationName","accessPolicy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "PutDestinationPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_log_events(self, *args, **kwargs):
        __protego_used['logs']['put_log_events']=['logs:PutLogEvents','logs:PutLogEvents']
        for p in ['logs:PutLogEvents','logs:PutLogEvents']:
            res = {}
            for nm in ["logGroupName","logStreamName","logEvents"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "PutLogEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_metric_filter(self, *args, **kwargs):
        __protego_used['logs']['put_metric_filter']=['logs:PutMetricFilter']
        for p in ['logs:PutMetricFilter']:
            res = {}
            for nm in ["filterPattern","logGroupName","metricTransformations","filterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "PutMetricFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_resource_policy(self, *args, **kwargs):
        __protego_used['logs']['put_resource_policy']=['logs:PutResourcePolicy']
        for p in ['logs:PutResourcePolicy']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "PutResourcePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_retention_policy(self, *args, **kwargs):
        __protego_used['logs']['put_retention_policy']=['logs:PutRetentionPolicy']
        for p in ['logs:PutRetentionPolicy']:
            res = {}
            for nm in ["logGroupName","retentionInDays"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "PutRetentionPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_subscription_filter(self, *args, **kwargs):
        __protego_used['logs']['put_subscription_filter']=['logs:PutSubscriptionFilter']
        for p in ['logs:PutSubscriptionFilter']:
            res = {}
            for nm in ["filterPattern","logGroupName","destinationArn","filterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "PutSubscriptionFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_query(self, *args, **kwargs):
        __protego_used['logs']['start_query']=['logs:StartQuery']
        for p in ['logs:StartQuery']:
            res = {}
            for nm in ["queryString","startTime","endTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "StartQuery", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_query(self, *args, **kwargs):
        __protego_used['logs']['stop_query']=['logs:StopQuery']
        for p in ['logs:StopQuery']:
            res = {}
            for nm in ["queryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "StopQuery", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_log_group(self, *args, **kwargs):
        __protego_used['logs']['tag_log_group']=['logs:TagLogGroup']
        for p in ['logs:TagLogGroup']:
            res = {}
            for nm in ["logGroupName","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "TagLogGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_metric_filter(self, *args, **kwargs):
        __protego_used['logs']['test_metric_filter']=['logs:TestMetricFilter']
        for p in ['logs:TestMetricFilter']:
            res = {}
            for nm in ["filterPattern","logEventMessages"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "TestMetricFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_log_group(self, *args, **kwargs):
        __protego_used['logs']['untag_log_group']=['logs:UntagLogGroup']
        for p in ['logs:UntagLogGroup']:
            res = {}
            for nm in ["logGroupName","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['logs'].append({'action': "UntagLogGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class machinelearning:
    def __init__(self, region_name=__default_region):
        __protego_used['machinelearning']= __protego_used.get('machinelearning', {})
        __protego_resource_map['machinelearning']=__protego_resource_map.get('machinelearning', [])
        self.region = region_name
    def add_tags(self, *args, **kwargs):
        __protego_used['machinelearning']['add_tags']=['machinelearning:AddTags']
        for p in ['machinelearning:AddTags']:
            res = {}
            for nm in ["ResourceId","ResourceType","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "AddTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_batch_prediction(self, *args, **kwargs):
        __protego_used['machinelearning']['create_batch_prediction']=['machinelearning:CreateBatchPrediction','machinelearning:CreateBatchPrediction','machinelearning:CreateBatchPrediction']
        for p in ['machinelearning:CreateBatchPrediction','machinelearning:CreateBatchPrediction','machinelearning:CreateBatchPrediction']:
            res = {}
            for nm in ["MLModelId","BatchPredictionDataSourceId","OutputUri","BatchPredictionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "CreateBatchPrediction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_data_source_from_rds(self, *args, **kwargs):
        __protego_used['machinelearning']['create_data_source_from_rds']=['machinelearning:CreateDataSourceFromRDS']
        for p in ['machinelearning:CreateDataSourceFromRDS']:
            res = {}
            for nm in ["RoleARN","DataSourceId","RDSData"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "CreateDataSourceFromRDS", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_data_source_from_redshift(self, *args, **kwargs):
        __protego_used['machinelearning']['create_data_source_from_redshift']=['machinelearning:CreateDataSourceFromRedshift']
        for p in ['machinelearning:CreateDataSourceFromRedshift']:
            res = {}
            for nm in ["DataSpec","RoleARN","DataSourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "CreateDataSourceFromRedshift", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_data_source_from_s3(self, *args, **kwargs):
        __protego_used['machinelearning']['create_data_source_from_s3']=['machinelearning:CreateDataSourceFromS3']
        for p in ['machinelearning:CreateDataSourceFromS3']:
            res = {}
            for nm in ["DataSpec","DataSourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "CreateDataSourceFromS3", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_evaluation(self, *args, **kwargs):
        __protego_used['machinelearning']['create_evaluation']=['machinelearning:CreateEvaluation','machinelearning:CreateEvaluation','machinelearning:CreateEvaluation']
        for p in ['machinelearning:CreateEvaluation','machinelearning:CreateEvaluation','machinelearning:CreateEvaluation']:
            res = {}
            for nm in ["MLModelId","EvaluationDataSourceId","EvaluationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "CreateEvaluation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_ml_model(self, *args, **kwargs):
        __protego_used['machinelearning']['create_ml_model']=['machinelearning:CreateMLModel','machinelearning:CreateMLModel']
        for p in ['machinelearning:CreateMLModel','machinelearning:CreateMLModel']:
            res = {}
            for nm in ["TrainingDataSourceId","MLModelId","MLModelType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "CreateMLModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_realtime_endpoint(self, *args, **kwargs):
        __protego_used['machinelearning']['create_realtime_endpoint']=['machinelearning:CreateRealtimeEndpoint']
        for p in ['machinelearning:CreateRealtimeEndpoint']:
            res = {}
            for nm in ["MLModelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "CreateRealtimeEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_batch_prediction(self, *args, **kwargs):
        __protego_used['machinelearning']['delete_batch_prediction']=['machinelearning:DeleteBatchPrediction']
        for p in ['machinelearning:DeleteBatchPrediction']:
            res = {}
            for nm in ["BatchPredictionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "DeleteBatchPrediction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_data_source(self, *args, **kwargs):
        __protego_used['machinelearning']['delete_data_source']=['machinelearning:DeleteDataSource']
        for p in ['machinelearning:DeleteDataSource']:
            res = {}
            for nm in ["DataSourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "DeleteDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_evaluation(self, *args, **kwargs):
        __protego_used['machinelearning']['delete_evaluation']=['machinelearning:DeleteEvaluation']
        for p in ['machinelearning:DeleteEvaluation']:
            res = {}
            for nm in ["EvaluationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "DeleteEvaluation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ml_model(self, *args, **kwargs):
        __protego_used['machinelearning']['delete_ml_model']=['machinelearning:DeleteMLModel']
        for p in ['machinelearning:DeleteMLModel']:
            res = {}
            for nm in ["MLModelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "DeleteMLModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_realtime_endpoint(self, *args, **kwargs):
        __protego_used['machinelearning']['delete_realtime_endpoint']=['machinelearning:DeleteRealtimeEndpoint']
        for p in ['machinelearning:DeleteRealtimeEndpoint']:
            res = {}
            for nm in ["MLModelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "DeleteRealtimeEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tags(self, *args, **kwargs):
        __protego_used['machinelearning']['delete_tags']=['machinelearning:DeleteTags']
        for p in ['machinelearning:DeleteTags']:
            res = {}
            for nm in ["ResourceId","ResourceType","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "DeleteTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_batch_predictions(self, *args, **kwargs):
        __protego_used['machinelearning']['describe_batch_predictions']=['machinelearning:DescribeBatchPredictions']
        for p in ['machinelearning:DescribeBatchPredictions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "DescribeBatchPredictions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_data_sources(self, *args, **kwargs):
        __protego_used['machinelearning']['describe_data_sources']=['machinelearning:DescribeDataSources']
        for p in ['machinelearning:DescribeDataSources']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "DescribeDataSources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_evaluations(self, *args, **kwargs):
        __protego_used['machinelearning']['describe_evaluations']=['machinelearning:DescribeEvaluations']
        for p in ['machinelearning:DescribeEvaluations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "DescribeEvaluations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_ml_models(self, *args, **kwargs):
        __protego_used['machinelearning']['describe_ml_models']=['machinelearning:DescribeMLModels']
        for p in ['machinelearning:DescribeMLModels']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "DescribeMLModels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tags(self, *args, **kwargs):
        __protego_used['machinelearning']['describe_tags']=['machinelearning:DescribeTags']
        for p in ['machinelearning:DescribeTags']:
            res = {}
            for nm in ["ResourceId","ResourceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "DescribeTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_batch_prediction(self, *args, **kwargs):
        __protego_used['machinelearning']['get_batch_prediction']=['machinelearning:GetBatchPrediction']
        for p in ['machinelearning:GetBatchPrediction']:
            res = {}
            for nm in ["BatchPredictionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "GetBatchPrediction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_data_source(self, *args, **kwargs):
        __protego_used['machinelearning']['get_data_source']=['machinelearning:GetDataSource']
        for p in ['machinelearning:GetDataSource']:
            res = {}
            for nm in ["DataSourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "GetDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_evaluation(self, *args, **kwargs):
        __protego_used['machinelearning']['get_evaluation']=['machinelearning:GetEvaluation']
        for p in ['machinelearning:GetEvaluation']:
            res = {}
            for nm in ["EvaluationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "GetEvaluation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ml_model(self, *args, **kwargs):
        __protego_used['machinelearning']['get_ml_model']=['machinelearning:GetMLModel']
        for p in ['machinelearning:GetMLModel']:
            res = {}
            for nm in ["MLModelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "GetMLModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def predict(self, *args, **kwargs):
        __protego_used['machinelearning']['predict']=['machinelearning:Predict']
        for p in ['machinelearning:Predict']:
            res = {}
            for nm in ["MLModelId","Record","PredictEndpoint"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "Predict", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_batch_prediction(self, *args, **kwargs):
        __protego_used['machinelearning']['update_batch_prediction']=['machinelearning:UpdateBatchPrediction']
        for p in ['machinelearning:UpdateBatchPrediction']:
            res = {}
            for nm in ["BatchPredictionName","BatchPredictionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "UpdateBatchPrediction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_data_source(self, *args, **kwargs):
        __protego_used['machinelearning']['update_data_source']=['machinelearning:UpdateDataSource']
        for p in ['machinelearning:UpdateDataSource']:
            res = {}
            for nm in ["DataSourceId","DataSourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "UpdateDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_evaluation(self, *args, **kwargs):
        __protego_used['machinelearning']['update_evaluation']=['machinelearning:UpdateEvaluation']
        for p in ['machinelearning:UpdateEvaluation']:
            res = {}
            for nm in ["EvaluationName","EvaluationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "UpdateEvaluation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_ml_model(self, *args, **kwargs):
        __protego_used['machinelearning']['update_ml_model']=['machinelearning:UpdateMLModel']
        for p in ['machinelearning:UpdateMLModel']:
            res = {}
            for nm in ["MLModelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['machinelearning'].append({'action': "UpdateMLModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class macie:
    def __init__(self, region_name=__default_region):
        __protego_used['macie']= __protego_used.get('macie', {})
        __protego_resource_map['macie']=__protego_resource_map.get('macie', [])
        self.region = region_name
    def associate_member_account(self, *args, **kwargs):
        __protego_used['macie']['associate_member_account']=['macie:*']
        for p in ['macie:*']:
            res = {}
            for nm in ["memberAccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['macie'].append({'action': "AssociateMemberAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_s3_resources(self, *args, **kwargs):
        __protego_used['macie']['associate_s3_resources']=['macie:*']
        for p in ['macie:*']:
            res = {}
            for nm in ["s3Resources"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['macie'].append({'action': "AssociateS3Resources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_member_account(self, *args, **kwargs):
        __protego_used['macie']['disassociate_member_account']=['macie:*']
        for p in ['macie:*']:
            res = {}
            for nm in ["memberAccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['macie'].append({'action': "DisassociateMemberAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_s3_resources(self, *args, **kwargs):
        __protego_used['macie']['disassociate_s3_resources']=['macie:*']
        for p in ['macie:*']:
            res = {}
            for nm in ["associatedS3Resources"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['macie'].append({'action': "DisassociateS3Resources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_member_accounts(self, *args, **kwargs):
        __protego_used['macie']['list_member_accounts']=['macie:*']
        for p in ['macie:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['macie'].append({'action': "ListMemberAccounts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_s3_resources(self, *args, **kwargs):
        __protego_used['macie']['list_s3_resources']=['macie:*']
        for p in ['macie:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['macie'].append({'action': "ListS3Resources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_s3_resources(self, *args, **kwargs):
        __protego_used['macie']['update_s3_resources']=['macie:*']
        for p in ['macie:*']:
            res = {}
            for nm in ["s3ResourcesUpdate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['macie'].append({'action': "UpdateS3Resources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class managedblockchain:
    def __init__(self, region_name=__default_region):
        __protego_used['managedblockchain']= __protego_used.get('managedblockchain', {})
        __protego_resource_map['managedblockchain']=__protego_resource_map.get('managedblockchain', [])
        self.region = region_name
    def create_member(self, *args, **kwargs):
        __protego_used['managedblockchain']['create_member']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["NetworkId","InvitationId","MemberConfiguration","ClientRequestToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "CreateMember", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_network(self, *args, **kwargs):
        __protego_used['managedblockchain']['create_network']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["Framework","Name","VotingPolicy","FrameworkVersion","ClientRequestToken","MemberConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "CreateNetwork", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_node(self, *args, **kwargs):
        __protego_used['managedblockchain']['create_node']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["NetworkId","MemberId","NodeConfiguration","ClientRequestToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "CreateNode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_proposal(self, *args, **kwargs):
        __protego_used['managedblockchain']['create_proposal']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["Actions","NetworkId","MemberId","ClientRequestToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "CreateProposal", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_member(self, *args, **kwargs):
        __protego_used['managedblockchain']['delete_member']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["NetworkId","MemberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "DeleteMember", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_node(self, *args, **kwargs):
        __protego_used['managedblockchain']['delete_node']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["NodeId","NetworkId","MemberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "DeleteNode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_member(self, *args, **kwargs):
        __protego_used['managedblockchain']['get_member']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["NetworkId","MemberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "GetMember", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_network(self, *args, **kwargs):
        __protego_used['managedblockchain']['get_network']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["NetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "GetNetwork", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_node(self, *args, **kwargs):
        __protego_used['managedblockchain']['get_node']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["NodeId","NetworkId","MemberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "GetNode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_proposal(self, *args, **kwargs):
        __protego_used['managedblockchain']['get_proposal']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["ProposalId","NetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "GetProposal", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_invitations(self, *args, **kwargs):
        __protego_used['managedblockchain']['list_invitations']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "ListInvitations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_members(self, *args, **kwargs):
        __protego_used['managedblockchain']['list_members']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["NetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "ListMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_networks(self, *args, **kwargs):
        __protego_used['managedblockchain']['list_networks']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "ListNetworks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_nodes(self, *args, **kwargs):
        __protego_used['managedblockchain']['list_nodes']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["NetworkId","MemberId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "ListNodes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_proposal_votes(self, *args, **kwargs):
        __protego_used['managedblockchain']['list_proposal_votes']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["ProposalId","NetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "ListProposalVotes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_proposals(self, *args, **kwargs):
        __protego_used['managedblockchain']['list_proposals']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["NetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "ListProposals", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_invitation(self, *args, **kwargs):
        __protego_used['managedblockchain']['reject_invitation']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["InvitationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "RejectInvitation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def vote_on_proposal(self, *args, **kwargs):
        __protego_used['managedblockchain']['vote_on_proposal']=['managedblockchain:*']
        for p in ['managedblockchain:*']:
            res = {}
            for nm in ["VoterMemberId","Vote","ProposalId","NetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['managedblockchain'].append({'action': "VoteOnProposal", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class marketplace_catalog:
    def __init__(self, region_name=__default_region):
        __protego_used['marketplace-catalog']= __protego_used.get('marketplace-catalog', {})
        __protego_resource_map['marketplace-catalog']=__protego_resource_map.get('marketplace-catalog', [])
        self.region = region_name
    def cancel_change_set(self, *args, **kwargs):
        __protego_used['marketplace-catalog']['cancel_change_set']=['marketplace-catalog:*']
        for p in ['marketplace-catalog:*']:
            res = {}
            for nm in ["Catalog","ChangeSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['marketplace-catalog'].append({'action': "CancelChangeSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_change_set(self, *args, **kwargs):
        __protego_used['marketplace-catalog']['describe_change_set']=['marketplace-catalog:*']
        for p in ['marketplace-catalog:*']:
            res = {}
            for nm in ["Catalog","ChangeSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['marketplace-catalog'].append({'action': "DescribeChangeSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_entity(self, *args, **kwargs):
        __protego_used['marketplace-catalog']['describe_entity']=['marketplace-catalog:*']
        for p in ['marketplace-catalog:*']:
            res = {}
            for nm in ["EntityId","Catalog"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['marketplace-catalog'].append({'action': "DescribeEntity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_change_sets(self, *args, **kwargs):
        __protego_used['marketplace-catalog']['list_change_sets']=['marketplace-catalog:*']
        for p in ['marketplace-catalog:*']:
            res = {}
            for nm in ["Catalog"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['marketplace-catalog'].append({'action': "ListChangeSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_entities(self, *args, **kwargs):
        __protego_used['marketplace-catalog']['list_entities']=['marketplace-catalog:*']
        for p in ['marketplace-catalog:*']:
            res = {}
            for nm in ["Catalog","EntityType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['marketplace-catalog'].append({'action': "ListEntities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_change_set(self, *args, **kwargs):
        __protego_used['marketplace-catalog']['start_change_set']=['marketplace-catalog:*']
        for p in ['marketplace-catalog:*']:
            res = {}
            for nm in ["ChangeSet","Catalog"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['marketplace-catalog'].append({'action': "StartChangeSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class marketplace_entitlement:
    def __init__(self, region_name=__default_region):
        __protego_used['marketplace-entitlement']= __protego_used.get('marketplace-entitlement', {})
        __protego_resource_map['marketplace-entitlement']=__protego_resource_map.get('marketplace-entitlement', [])
        self.region = region_name
    def get_entitlements(self, *args, **kwargs):
        __protego_used['marketplace-entitlement']['get_entitlements']=['aws-marketplace:*']
        for p in ['aws-marketplace:*']:
            res = {}
            for nm in ["ProductCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['marketplace-entitlement'].append({'action': "GetEntitlements", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class marketplacecommerceanalytics:
    def __init__(self, region_name=__default_region):
        __protego_used['marketplacecommerceanalytics']= __protego_used.get('marketplacecommerceanalytics', {})
        __protego_resource_map['marketplacecommerceanalytics']=__protego_resource_map.get('marketplacecommerceanalytics', [])
        self.region = region_name
    def generate_data_set(self, *args, **kwargs):
        __protego_used['marketplacecommerceanalytics']['generate_data_set']=['marketplacecommerceanalytics:*']
        for p in ['marketplacecommerceanalytics:*']:
            res = {}
            for nm in ["snsTopicArn","dataSetType","destinationS3BucketName","roleNameArn","dataSetPublicationDate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['marketplacecommerceanalytics'].append({'action': "GenerateDataSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_support_data_export(self, *args, **kwargs):
        __protego_used['marketplacecommerceanalytics']['start_support_data_export']=['marketplacecommerceanalytics:*']
        for p in ['marketplacecommerceanalytics:*']:
            res = {}
            for nm in ["snsTopicArn","fromDate","dataSetType","destinationS3BucketName","roleNameArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['marketplacecommerceanalytics'].append({'action': "StartSupportDataExport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class mediaconnect:
    def __init__(self, region_name=__default_region):
        __protego_used['mediaconnect']= __protego_used.get('mediaconnect', {})
        __protego_resource_map['mediaconnect']=__protego_resource_map.get('mediaconnect', [])
        self.region = region_name
    def add_flow_outputs(self, *args, **kwargs):
        __protego_used['mediaconnect']['add_flow_outputs']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["Outputs","FlowArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "AddFlowOutputs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_flow(self, *args, **kwargs):
        __protego_used['mediaconnect']['create_flow']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["Source","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "CreateFlow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_flow(self, *args, **kwargs):
        __protego_used['mediaconnect']['delete_flow']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["FlowArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "DeleteFlow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_flow(self, *args, **kwargs):
        __protego_used['mediaconnect']['describe_flow']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["FlowArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "DescribeFlow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def grant_flow_entitlements(self, *args, **kwargs):
        __protego_used['mediaconnect']['grant_flow_entitlements']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["FlowArn","Entitlements"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "GrantFlowEntitlements", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_entitlements(self, *args, **kwargs):
        __protego_used['mediaconnect']['list_entitlements']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "ListEntitlements", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_flows(self, *args, **kwargs):
        __protego_used['mediaconnect']['list_flows']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "ListFlows", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['mediaconnect']['list_tags_for_resource']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_flow_output(self, *args, **kwargs):
        __protego_used['mediaconnect']['remove_flow_output']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["FlowArn","OutputArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "RemoveFlowOutput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_flow_entitlement(self, *args, **kwargs):
        __protego_used['mediaconnect']['revoke_flow_entitlement']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["EntitlementArn","FlowArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "RevokeFlowEntitlement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_flow(self, *args, **kwargs):
        __protego_used['mediaconnect']['start_flow']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["FlowArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "StartFlow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_flow(self, *args, **kwargs):
        __protego_used['mediaconnect']['stop_flow']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["FlowArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "StopFlow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['mediaconnect']['tag_resource']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['mediaconnect']['untag_resource']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_flow_entitlement(self, *args, **kwargs):
        __protego_used['mediaconnect']['update_flow_entitlement']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["EntitlementArn","FlowArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "UpdateFlowEntitlement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_flow_output(self, *args, **kwargs):
        __protego_used['mediaconnect']['update_flow_output']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["FlowArn","OutputArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "UpdateFlowOutput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_flow_source(self, *args, **kwargs):
        __protego_used['mediaconnect']['update_flow_source']=['mediaconnect:*']
        for p in ['mediaconnect:*']:
            res = {}
            for nm in ["FlowArn","SourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconnect'].append({'action': "UpdateFlowSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class mediaconvert:
    def __init__(self, region_name=__default_region):
        __protego_used['mediaconvert']= __protego_used.get('mediaconvert', {})
        __protego_resource_map['mediaconvert']=__protego_resource_map.get('mediaconvert', [])
        self.region = region_name
    def associate_certificate(self, *args, **kwargs):
        __protego_used['mediaconvert']['associate_certificate']=['mediaconvert:AssociateCertificate']
        for p in ['mediaconvert:AssociateCertificate']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "AssociateCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_job(self, *args, **kwargs):
        __protego_used['mediaconvert']['cancel_job']=['mediaconvert:CancelJob']
        for p in ['mediaconvert:CancelJob']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "CancelJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_job(self, *args, **kwargs):
        __protego_used['mediaconvert']['create_job']=['mediaconvert:CreateJob','mediaconvert:CreateJob','mediaconvert:CreateJob']
        for p in ['mediaconvert:CreateJob','mediaconvert:CreateJob','mediaconvert:CreateJob']:
            res = {}
            for nm in ["Settings","Role"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "CreateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_job_template(self, *args, **kwargs):
        __protego_used['mediaconvert']['create_job_template']=['mediaconvert:CreateJobTemplate','mediaconvert:CreateJobTemplate']
        for p in ['mediaconvert:CreateJobTemplate','mediaconvert:CreateJobTemplate']:
            res = {}
            for nm in ["Settings","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "CreateJobTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_preset(self, *args, **kwargs):
        __protego_used['mediaconvert']['create_preset']=['mediaconvert:CreatePreset']
        for p in ['mediaconvert:CreatePreset']:
            res = {}
            for nm in ["Settings","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "CreatePreset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_queue(self, *args, **kwargs):
        __protego_used['mediaconvert']['create_queue']=['mediaconvert:CreateQueue']
        for p in ['mediaconvert:CreateQueue']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "CreateQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_job_template(self, *args, **kwargs):
        __protego_used['mediaconvert']['delete_job_template']=['mediaconvert:DeleteJobTemplate']
        for p in ['mediaconvert:DeleteJobTemplate']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "DeleteJobTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_preset(self, *args, **kwargs):
        __protego_used['mediaconvert']['delete_preset']=['mediaconvert:DeletePreset']
        for p in ['mediaconvert:DeletePreset']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "DeletePreset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_queue(self, *args, **kwargs):
        __protego_used['mediaconvert']['delete_queue']=['mediaconvert:DeleteQueue']
        for p in ['mediaconvert:DeleteQueue']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "DeleteQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_endpoints(self, *args, **kwargs):
        __protego_used['mediaconvert']['describe_endpoints']=['mediaconvert:*']
        for p in ['mediaconvert:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "DescribeEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_certificate(self, *args, **kwargs):
        __protego_used['mediaconvert']['disassociate_certificate']=['mediaconvert:DisassociateCertificate']
        for p in ['mediaconvert:DisassociateCertificate']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "DisassociateCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job(self, *args, **kwargs):
        __protego_used['mediaconvert']['get_job']=['mediaconvert:GetJob']
        for p in ['mediaconvert:GetJob']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "GetJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job_template(self, *args, **kwargs):
        __protego_used['mediaconvert']['get_job_template']=['mediaconvert:GetJobTemplate']
        for p in ['mediaconvert:GetJobTemplate']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "GetJobTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_preset(self, *args, **kwargs):
        __protego_used['mediaconvert']['get_preset']=['mediaconvert:GetPreset']
        for p in ['mediaconvert:GetPreset']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "GetPreset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_queue(self, *args, **kwargs):
        __protego_used['mediaconvert']['get_queue']=['mediaconvert:GetQueue']
        for p in ['mediaconvert:GetQueue']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "GetQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_job_templates(self, *args, **kwargs):
        __protego_used['mediaconvert']['list_job_templates']=['mediaconvert:ListJobTemplates']
        for p in ['mediaconvert:ListJobTemplates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "ListJobTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs(self, *args, **kwargs):
        __protego_used['mediaconvert']['list_jobs']=['mediaconvert:ListJobs']
        for p in ['mediaconvert:ListJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "ListJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_presets(self, *args, **kwargs):
        __protego_used['mediaconvert']['list_presets']=['mediaconvert:ListPresets']
        for p in ['mediaconvert:ListPresets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "ListPresets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_queues(self, *args, **kwargs):
        __protego_used['mediaconvert']['list_queues']=['mediaconvert:ListQueues']
        for p in ['mediaconvert:ListQueues']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "ListQueues", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['mediaconvert']['list_tags_for_resource']=['mediaconvert:*']
        for p in ['mediaconvert:*']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['mediaconvert']['tag_resource']=['mediaconvert:*']
        for p in ['mediaconvert:*']:
            res = {}
            for nm in ["Arn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['mediaconvert']['untag_resource']=['mediaconvert:*']
        for p in ['mediaconvert:*']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_job_template(self, *args, **kwargs):
        __protego_used['mediaconvert']['update_job_template']=['mediaconvert:UpdateJobTemplate','mediaconvert:UpdateJobTemplate','mediaconvert:UpdateJobTemplate']
        for p in ['mediaconvert:UpdateJobTemplate','mediaconvert:UpdateJobTemplate','mediaconvert:UpdateJobTemplate']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "UpdateJobTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_preset(self, *args, **kwargs):
        __protego_used['mediaconvert']['update_preset']=['mediaconvert:UpdatePreset']
        for p in ['mediaconvert:UpdatePreset']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "UpdatePreset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_queue(self, *args, **kwargs):
        __protego_used['mediaconvert']['update_queue']=['mediaconvert:UpdateQueue']
        for p in ['mediaconvert:UpdateQueue']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediaconvert'].append({'action': "UpdateQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class medialive:
    def __init__(self, region_name=__default_region):
        __protego_used['medialive']= __protego_used.get('medialive', {})
        __protego_resource_map['medialive']=__protego_resource_map.get('medialive', [])
        self.region = region_name
    def batch_update_schedule(self, *args, **kwargs):
        __protego_used['medialive']['batch_update_schedule']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["ChannelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "BatchUpdateSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_channel(self, *args, **kwargs):
        __protego_used['medialive']['create_channel']=['medialive:CreateChannel']
        for p in ['medialive:CreateChannel']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "CreateChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_input(self, *args, **kwargs):
        __protego_used['medialive']['create_input']=['medialive:CreateInput']
        for p in ['medialive:CreateInput']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "CreateInput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_input_security_group(self, *args, **kwargs):
        __protego_used['medialive']['create_input_security_group']=['medialive:CreateInputSecurityGroup']
        for p in ['medialive:CreateInputSecurityGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "CreateInputSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_multiplex(self, *args, **kwargs):
        __protego_used['medialive']['create_multiplex']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["AvailabilityZones","MultiplexSettings","RequestId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "CreateMultiplex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_multiplex_program(self, *args, **kwargs):
        __protego_used['medialive']['create_multiplex_program']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["MultiplexProgramSettings","RequestId","MultiplexId","ProgramName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "CreateMultiplexProgram", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_tags(self, *args, **kwargs):
        __protego_used['medialive']['create_tags']=['medialive:CreateTags']
        for p in ['medialive:CreateTags']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "CreateTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_channel(self, *args, **kwargs):
        __protego_used['medialive']['delete_channel']=['medialive:DeleteChannel']
        for p in ['medialive:DeleteChannel']:
            res = {}
            for nm in ["ChannelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DeleteChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_input(self, *args, **kwargs):
        __protego_used['medialive']['delete_input']=['medialive:DeleteInput']
        for p in ['medialive:DeleteInput']:
            res = {}
            for nm in ["InputId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DeleteInput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_input_security_group(self, *args, **kwargs):
        __protego_used['medialive']['delete_input_security_group']=['medialive:DeleteInputSecurityGroup']
        for p in ['medialive:DeleteInputSecurityGroup']:
            res = {}
            for nm in ["InputSecurityGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DeleteInputSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_multiplex(self, *args, **kwargs):
        __protego_used['medialive']['delete_multiplex']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["MultiplexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DeleteMultiplex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_multiplex_program(self, *args, **kwargs):
        __protego_used['medialive']['delete_multiplex_program']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["ProgramName","MultiplexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DeleteMultiplexProgram", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_reservation(self, *args, **kwargs):
        __protego_used['medialive']['delete_reservation']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["ReservationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DeleteReservation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_schedule(self, *args, **kwargs):
        __protego_used['medialive']['delete_schedule']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["ChannelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DeleteSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tags(self, *args, **kwargs):
        __protego_used['medialive']['delete_tags']=['medialive:DeleteTags']
        for p in ['medialive:DeleteTags']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DeleteTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_channel(self, *args, **kwargs):
        __protego_used['medialive']['describe_channel']=['medialive:DescribeChannel']
        for p in ['medialive:DescribeChannel']:
            res = {}
            for nm in ["ChannelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DescribeChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_input(self, *args, **kwargs):
        __protego_used['medialive']['describe_input']=['medialive:DescribeInput']
        for p in ['medialive:DescribeInput']:
            res = {}
            for nm in ["InputId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DescribeInput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_input_security_group(self, *args, **kwargs):
        __protego_used['medialive']['describe_input_security_group']=['medialive:DescribeInputSecurityGroup']
        for p in ['medialive:DescribeInputSecurityGroup']:
            res = {}
            for nm in ["InputSecurityGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DescribeInputSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_multiplex(self, *args, **kwargs):
        __protego_used['medialive']['describe_multiplex']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["MultiplexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DescribeMultiplex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_multiplex_program(self, *args, **kwargs):
        __protego_used['medialive']['describe_multiplex_program']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["ProgramName","MultiplexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DescribeMultiplexProgram", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_offering(self, *args, **kwargs):
        __protego_used['medialive']['describe_offering']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["OfferingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DescribeOffering", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reservation(self, *args, **kwargs):
        __protego_used['medialive']['describe_reservation']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["ReservationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DescribeReservation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_schedule(self, *args, **kwargs):
        __protego_used['medialive']['describe_schedule']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["ChannelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "DescribeSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_channels(self, *args, **kwargs):
        __protego_used['medialive']['list_channels']=['medialive:ListChannels']
        for p in ['medialive:ListChannels']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "ListChannels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_input_security_groups(self, *args, **kwargs):
        __protego_used['medialive']['list_input_security_groups']=['medialive:ListInputSecurityGroups']
        for p in ['medialive:ListInputSecurityGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "ListInputSecurityGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_inputs(self, *args, **kwargs):
        __protego_used['medialive']['list_inputs']=['medialive:ListInputs']
        for p in ['medialive:ListInputs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "ListInputs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_multiplex_programs(self, *args, **kwargs):
        __protego_used['medialive']['list_multiplex_programs']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["MultiplexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "ListMultiplexPrograms", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_multiplexes(self, *args, **kwargs):
        __protego_used['medialive']['list_multiplexes']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "ListMultiplexes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_offerings(self, *args, **kwargs):
        __protego_used['medialive']['list_offerings']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "ListOfferings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_reservations(self, *args, **kwargs):
        __protego_used['medialive']['list_reservations']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "ListReservations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['medialive']['list_tags_for_resource']=['medialive:ListTagsForResource']
        for p in ['medialive:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def purchase_offering(self, *args, **kwargs):
        __protego_used['medialive']['purchase_offering']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["OfferingId","Count"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "PurchaseOffering", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_channel(self, *args, **kwargs):
        __protego_used['medialive']['start_channel']=['medialive:StartChannel']
        for p in ['medialive:StartChannel']:
            res = {}
            for nm in ["ChannelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "StartChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_multiplex(self, *args, **kwargs):
        __protego_used['medialive']['start_multiplex']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["MultiplexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "StartMultiplex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_channel(self, *args, **kwargs):
        __protego_used['medialive']['stop_channel']=['medialive:StopChannel']
        for p in ['medialive:StopChannel']:
            res = {}
            for nm in ["ChannelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "StopChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_multiplex(self, *args, **kwargs):
        __protego_used['medialive']['stop_multiplex']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["MultiplexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "StopMultiplex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_channel(self, *args, **kwargs):
        __protego_used['medialive']['update_channel']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["ChannelId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "UpdateChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_channel_class(self, *args, **kwargs):
        __protego_used['medialive']['update_channel_class']=['medialive:UpdateChannelClass']
        for p in ['medialive:UpdateChannelClass']:
            res = {}
            for nm in ["ChannelId","ChannelClass"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "UpdateChannelClass", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_input(self, *args, **kwargs):
        __protego_used['medialive']['update_input']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["InputId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "UpdateInput", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_input_security_group(self, *args, **kwargs):
        __protego_used['medialive']['update_input_security_group']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["InputSecurityGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "UpdateInputSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_multiplex(self, *args, **kwargs):
        __protego_used['medialive']['update_multiplex']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["MultiplexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "UpdateMultiplex", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_multiplex_program(self, *args, **kwargs):
        __protego_used['medialive']['update_multiplex_program']=['medialive:*']
        for p in ['medialive:*']:
            res = {}
            for nm in ["ProgramName","MultiplexId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "UpdateMultiplexProgram", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_reservation(self, *args, **kwargs):
        __protego_used['medialive']['update_reservation']=['medialive:UpdateReservation']
        for p in ['medialive:UpdateReservation']:
            res = {}
            for nm in ["ReservationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['medialive'].append({'action': "UpdateReservation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class mediapackage:
    def __init__(self, region_name=__default_region):
        __protego_used['mediapackage']= __protego_used.get('mediapackage', {})
        __protego_resource_map['mediapackage']=__protego_resource_map.get('mediapackage', [])
        self.region = region_name
    def create_channel(self, *args, **kwargs):
        __protego_used['mediapackage']['create_channel']=['mediapackage:CreateChannel']
        for p in ['mediapackage:CreateChannel']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "CreateChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_harvest_job(self, *args, **kwargs):
        __protego_used['mediapackage']['create_harvest_job']=['mediapackage:*']
        for p in ['mediapackage:*']:
            res = {}
            for nm in ["EndTime","StartTime","S3Destination","OriginEndpointId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "CreateHarvestJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_origin_endpoint(self, *args, **kwargs):
        __protego_used['mediapackage']['create_origin_endpoint']=['mediapackage:CreateOriginEndpoint']
        for p in ['mediapackage:CreateOriginEndpoint']:
            res = {}
            for nm in ["ChannelId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "CreateOriginEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_channel(self, *args, **kwargs):
        __protego_used['mediapackage']['delete_channel']=['mediapackage:DeleteChannel']
        for p in ['mediapackage:DeleteChannel']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "DeleteChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_origin_endpoint(self, *args, **kwargs):
        __protego_used['mediapackage']['delete_origin_endpoint']=['mediapackage:DeleteOriginEndpoint']
        for p in ['mediapackage:DeleteOriginEndpoint']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "DeleteOriginEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_channel(self, *args, **kwargs):
        __protego_used['mediapackage']['describe_channel']=['mediapackage:DescribeChannel']
        for p in ['mediapackage:DescribeChannel']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "DescribeChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_harvest_job(self, *args, **kwargs):
        __protego_used['mediapackage']['describe_harvest_job']=['mediapackage:*']
        for p in ['mediapackage:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "DescribeHarvestJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_origin_endpoint(self, *args, **kwargs):
        __protego_used['mediapackage']['describe_origin_endpoint']=['mediapackage:DescribeOriginEndpoint']
        for p in ['mediapackage:DescribeOriginEndpoint']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "DescribeOriginEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_channels(self, *args, **kwargs):
        __protego_used['mediapackage']['list_channels']=['mediapackage:ListChannels']
        for p in ['mediapackage:ListChannels']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "ListChannels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_harvest_jobs(self, *args, **kwargs):
        __protego_used['mediapackage']['list_harvest_jobs']=['mediapackage:*']
        for p in ['mediapackage:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "ListHarvestJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_origin_endpoints(self, *args, **kwargs):
        __protego_used['mediapackage']['list_origin_endpoints']=['mediapackage:ListOriginEndpoints']
        for p in ['mediapackage:ListOriginEndpoints']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "ListOriginEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['mediapackage']['list_tags_for_resource']=['mediapackage:ListTagsForResource']
        for p in ['mediapackage:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def rotate_channel_credentials(self, *args, **kwargs):
        __protego_used['mediapackage']['rotate_channel_credentials']=['mediapackage:*']
        for p in ['mediapackage:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "RotateChannelCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def rotate_ingest_endpoint_credentials(self, *args, **kwargs):
        __protego_used['mediapackage']['rotate_ingest_endpoint_credentials']=['mediapackage:RotateIngestEndpointCredentials']
        for p in ['mediapackage:RotateIngestEndpointCredentials']:
            res = {}
            for nm in ["IngestEndpointId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "RotateIngestEndpointCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['mediapackage']['tag_resource']=['mediapackage:TagResource']
        for p in ['mediapackage:TagResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['mediapackage']['untag_resource']=['mediapackage:UntagResource']
        for p in ['mediapackage:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_channel(self, *args, **kwargs):
        __protego_used['mediapackage']['update_channel']=['mediapackage:UpdateChannel']
        for p in ['mediapackage:UpdateChannel']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "UpdateChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_origin_endpoint(self, *args, **kwargs):
        __protego_used['mediapackage']['update_origin_endpoint']=['mediapackage:UpdateOriginEndpoint']
        for p in ['mediapackage:UpdateOriginEndpoint']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage'].append({'action': "UpdateOriginEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class mediapackage_vod:
    def __init__(self, region_name=__default_region):
        __protego_used['mediapackage-vod']= __protego_used.get('mediapackage-vod', {})
        __protego_resource_map['mediapackage-vod']=__protego_resource_map.get('mediapackage-vod', [])
        self.region = region_name
    def create_asset(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['create_asset']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in ["PackagingGroupId","SourceArn","SourceRoleArn","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "CreateAsset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_packaging_configuration(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['create_packaging_configuration']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in ["PackagingGroupId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "CreatePackagingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_packaging_group(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['create_packaging_group']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "CreatePackagingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_asset(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['delete_asset']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "DeleteAsset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_packaging_configuration(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['delete_packaging_configuration']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "DeletePackagingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_packaging_group(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['delete_packaging_group']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "DeletePackagingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_asset(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['describe_asset']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "DescribeAsset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_packaging_configuration(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['describe_packaging_configuration']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "DescribePackagingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_packaging_group(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['describe_packaging_group']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "DescribePackagingGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_assets(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['list_assets']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "ListAssets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_packaging_configurations(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['list_packaging_configurations']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "ListPackagingConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_packaging_groups(self, *args, **kwargs):
        __protego_used['mediapackage-vod']['list_packaging_groups']=['mediapackage-vod:*']
        for p in ['mediapackage-vod:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediapackage-vod'].append({'action': "ListPackagingGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class mediastore:
    def __init__(self, region_name=__default_region):
        __protego_used['mediastore']= __protego_used.get('mediastore', {})
        __protego_resource_map['mediastore']=__protego_resource_map.get('mediastore', [])
        self.region = region_name
    def create_container(self, *args, **kwargs):
        __protego_used['mediastore']['create_container']=['mediastore:CreateContainer']
        for p in ['mediastore:CreateContainer']:
            res = {}
            for nm in ["ContainerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "CreateContainer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_container(self, *args, **kwargs):
        __protego_used['mediastore']['delete_container']=['mediastore:DeleteContainer']
        for p in ['mediastore:DeleteContainer']:
            res = {}
            for nm in ["ContainerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "DeleteContainer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_container_policy(self, *args, **kwargs):
        __protego_used['mediastore']['delete_container_policy']=['mediastore:DeleteContainerPolicy']
        for p in ['mediastore:DeleteContainerPolicy']:
            res = {}
            for nm in ["ContainerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "DeleteContainerPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cors_policy(self, *args, **kwargs):
        __protego_used['mediastore']['delete_cors_policy']=['mediastore:*']
        for p in ['mediastore:*']:
            res = {}
            for nm in ["ContainerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "DeleteCorsPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_lifecycle_policy(self, *args, **kwargs):
        __protego_used['mediastore']['delete_lifecycle_policy']=['mediastore:DeleteLifecyclePolicy']
        for p in ['mediastore:DeleteLifecyclePolicy']:
            res = {}
            for nm in ["ContainerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "DeleteLifecyclePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_container(self, *args, **kwargs):
        __protego_used['mediastore']['describe_container']=['mediastore:DescribeContainer']
        for p in ['mediastore:DescribeContainer']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "DescribeContainer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_container_policy(self, *args, **kwargs):
        __protego_used['mediastore']['get_container_policy']=['mediastore:GetContainerPolicy']
        for p in ['mediastore:GetContainerPolicy']:
            res = {}
            for nm in ["ContainerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "GetContainerPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_cors_policy(self, *args, **kwargs):
        __protego_used['mediastore']['get_cors_policy']=['mediastore:*']
        for p in ['mediastore:*']:
            res = {}
            for nm in ["ContainerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "GetCorsPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_lifecycle_policy(self, *args, **kwargs):
        __protego_used['mediastore']['get_lifecycle_policy']=['mediastore:GetLifecyclePolicy']
        for p in ['mediastore:GetLifecyclePolicy']:
            res = {}
            for nm in ["ContainerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "GetLifecyclePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_containers(self, *args, **kwargs):
        __protego_used['mediastore']['list_containers']=['mediastore:ListContainers']
        for p in ['mediastore:ListContainers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "ListContainers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['mediastore']['list_tags_for_resource']=['mediastore:*']
        for p in ['mediastore:*']:
            res = {}
            for nm in ["Resource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_container_policy(self, *args, **kwargs):
        __protego_used['mediastore']['put_container_policy']=['mediastore:PutContainerPolicy']
        for p in ['mediastore:PutContainerPolicy']:
            res = {}
            for nm in ["ContainerName","Policy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "PutContainerPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_cors_policy(self, *args, **kwargs):
        __protego_used['mediastore']['put_cors_policy']=['mediastore:*']
        for p in ['mediastore:*']:
            res = {}
            for nm in ["ContainerName","CorsPolicy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "PutCorsPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_lifecycle_policy(self, *args, **kwargs):
        __protego_used['mediastore']['put_lifecycle_policy']=['mediastore:PutLifecyclePolicy']
        for p in ['mediastore:PutLifecyclePolicy']:
            res = {}
            for nm in ["LifecyclePolicy","ContainerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "PutLifecyclePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_access_logging(self, *args, **kwargs):
        __protego_used['mediastore']['start_access_logging']=['mediastore:StartAccessLogging']
        for p in ['mediastore:StartAccessLogging']:
            res = {}
            for nm in ["ContainerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "StartAccessLogging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_access_logging(self, *args, **kwargs):
        __protego_used['mediastore']['stop_access_logging']=['mediastore:StopAccessLogging']
        for p in ['mediastore:StopAccessLogging']:
            res = {}
            for nm in ["ContainerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "StopAccessLogging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['mediastore']['tag_resource']=['mediastore:*']
        for p in ['mediastore:*']:
            res = {}
            for nm in ["Resource","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['mediastore']['untag_resource']=['mediastore:*']
        for p in ['mediastore:*']:
            res = {}
            for nm in ["TagKeys","Resource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class mediastore_data:
    def __init__(self, region_name=__default_region):
        __protego_used['mediastore-data']= __protego_used.get('mediastore-data', {})
        __protego_resource_map['mediastore-data']=__protego_resource_map.get('mediastore-data', [])
        self.region = region_name
    def delete_object(self, *args, **kwargs):
        __protego_used['mediastore-data']['delete_object']=['mediastore:DeleteObject']
        for p in ['mediastore:DeleteObject']:
            res = {}
            for nm in ["Path"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore-data'].append({'action': "DeleteObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_object(self, *args, **kwargs):
        __protego_used['mediastore-data']['describe_object']=['mediastore:DescribeObject']
        for p in ['mediastore:DescribeObject']:
            res = {}
            for nm in ["Path"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore-data'].append({'action': "DescribeObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_object(self, *args, **kwargs):
        __protego_used['mediastore-data']['get_object']=['mediastore:GetObject']
        for p in ['mediastore:GetObject']:
            res = {}
            for nm in ["Path"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore-data'].append({'action': "GetObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_items(self, *args, **kwargs):
        __protego_used['mediastore-data']['list_items']=['mediastore:ListItems']
        for p in ['mediastore:ListItems']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore-data'].append({'action': "ListItems", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_object(self, *args, **kwargs):
        __protego_used['mediastore-data']['put_object']=['mediastore:PutObject']
        for p in ['mediastore:PutObject']:
            res = {}
            for nm in ["Body","Path"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediastore-data'].append({'action': "PutObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class mediatailor:
    def __init__(self, region_name=__default_region):
        __protego_used['mediatailor']= __protego_used.get('mediatailor', {})
        __protego_resource_map['mediatailor']=__protego_resource_map.get('mediatailor', [])
        self.region = region_name
    def delete_playback_configuration(self, *args, **kwargs):
        __protego_used['mediatailor']['delete_playback_configuration']=['mediatailor:*']
        for p in ['mediatailor:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediatailor'].append({'action': "DeletePlaybackConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_playback_configuration(self, *args, **kwargs):
        __protego_used['mediatailor']['get_playback_configuration']=['mediatailor:*']
        for p in ['mediatailor:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediatailor'].append({'action': "GetPlaybackConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_playback_configurations(self, *args, **kwargs):
        __protego_used['mediatailor']['list_playback_configurations']=['mediatailor:*']
        for p in ['mediatailor:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediatailor'].append({'action': "ListPlaybackConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['mediatailor']['list_tags_for_resource']=['mediatailor:*']
        for p in ['mediatailor:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediatailor'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_playback_configuration(self, *args, **kwargs):
        __protego_used['mediatailor']['put_playback_configuration']=['mediatailor:*']
        for p in ['mediatailor:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediatailor'].append({'action': "PutPlaybackConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['mediatailor']['tag_resource']=['mediatailor:*']
        for p in ['mediatailor:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediatailor'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['mediatailor']['untag_resource']=['mediatailor:*']
        for p in ['mediatailor:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mediatailor'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class meteringmarketplace:
    def __init__(self, region_name=__default_region):
        __protego_used['meteringmarketplace']= __protego_used.get('meteringmarketplace', {})
        __protego_resource_map['meteringmarketplace']=__protego_resource_map.get('meteringmarketplace', [])
        self.region = region_name
    def batch_meter_usage(self, *args, **kwargs):
        __protego_used['meteringmarketplace']['batch_meter_usage']=['aws-marketplace:BatchMeterUsage']
        for p in ['aws-marketplace:BatchMeterUsage']:
            res = {}
            for nm in ["ProductCode","UsageRecords"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['meteringmarketplace'].append({'action': "BatchMeterUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def meter_usage(self, *args, **kwargs):
        __protego_used['meteringmarketplace']['meter_usage']=['aws-marketplace:MeterUsage']
        for p in ['aws-marketplace:MeterUsage']:
            res = {}
            for nm in ["UsageDimension","ProductCode","Timestamp"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['meteringmarketplace'].append({'action': "MeterUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_usage(self, *args, **kwargs):
        __protego_used['meteringmarketplace']['register_usage']=['aws-marketplace:RegisterUsage']
        for p in ['aws-marketplace:RegisterUsage']:
            res = {}
            for nm in ["ProductCode","PublicKeyVersion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['meteringmarketplace'].append({'action': "RegisterUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def resolve_customer(self, *args, **kwargs):
        __protego_used['meteringmarketplace']['resolve_customer']=['aws-marketplace:ResolveCustomer']
        for p in ['aws-marketplace:ResolveCustomer']:
            res = {}
            for nm in ["RegistrationToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['meteringmarketplace'].append({'action': "ResolveCustomer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class mgh:
    def __init__(self, region_name=__default_region):
        __protego_used['mgh']= __protego_used.get('mgh', {})
        __protego_resource_map['mgh']=__protego_resource_map.get('mgh', [])
        self.region = region_name
    def associate_created_artifact(self, *args, **kwargs):
        __protego_used['mgh']['associate_created_artifact']=['mgh:AssociateCreatedArtifact']
        for p in ['mgh:AssociateCreatedArtifact']:
            res = {}
            for nm in ["MigrationTaskName","ProgressUpdateStream","CreatedArtifact"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "AssociateCreatedArtifact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_discovered_resource(self, *args, **kwargs):
        __protego_used['mgh']['associate_discovered_resource']=['mgh:AssociateDiscoveredResource']
        for p in ['mgh:AssociateDiscoveredResource']:
            res = {}
            for nm in ["MigrationTaskName","ProgressUpdateStream","DiscoveredResource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "AssociateDiscoveredResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_progress_update_stream(self, *args, **kwargs):
        __protego_used['mgh']['create_progress_update_stream']=['mgh:CreateProgressUpdateStream']
        for p in ['mgh:CreateProgressUpdateStream']:
            res = {}
            for nm in ["ProgressUpdateStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "CreateProgressUpdateStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_progress_update_stream(self, *args, **kwargs):
        __protego_used['mgh']['delete_progress_update_stream']=['mgh:DeleteProgressUpdateStream']
        for p in ['mgh:DeleteProgressUpdateStream']:
            res = {}
            for nm in ["ProgressUpdateStreamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "DeleteProgressUpdateStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_application_state(self, *args, **kwargs):
        __protego_used['mgh']['describe_application_state']=['mgh:DescribeApplicationState']
        for p in ['mgh:DescribeApplicationState']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "DescribeApplicationState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_migration_task(self, *args, **kwargs):
        __protego_used['mgh']['describe_migration_task']=['mgh:DescribeMigrationTask']
        for p in ['mgh:DescribeMigrationTask']:
            res = {}
            for nm in ["MigrationTaskName","ProgressUpdateStream"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "DescribeMigrationTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_created_artifact(self, *args, **kwargs):
        __protego_used['mgh']['disassociate_created_artifact']=['mgh:DisassociateCreatedArtifact']
        for p in ['mgh:DisassociateCreatedArtifact']:
            res = {}
            for nm in ["MigrationTaskName","ProgressUpdateStream","CreatedArtifactName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "DisassociateCreatedArtifact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_discovered_resource(self, *args, **kwargs):
        __protego_used['mgh']['disassociate_discovered_resource']=['mgh:DisassociateDiscoveredResource']
        for p in ['mgh:DisassociateDiscoveredResource']:
            res = {}
            for nm in ["MigrationTaskName","ProgressUpdateStream","ConfigurationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "DisassociateDiscoveredResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_migration_task(self, *args, **kwargs):
        __protego_used['mgh']['import_migration_task']=['mgh:ImportMigrationTask']
        for p in ['mgh:ImportMigrationTask']:
            res = {}
            for nm in ["MigrationTaskName","ProgressUpdateStream"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "ImportMigrationTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_application_states(self, *args, **kwargs):
        __protego_used['mgh']['list_application_states']=['mgh:*']
        for p in ['mgh:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "ListApplicationStates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_created_artifacts(self, *args, **kwargs):
        __protego_used['mgh']['list_created_artifacts']=['mgh:ListCreatedArtifacts']
        for p in ['mgh:ListCreatedArtifacts']:
            res = {}
            for nm in ["MigrationTaskName","ProgressUpdateStream"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "ListCreatedArtifacts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_discovered_resources(self, *args, **kwargs):
        __protego_used['mgh']['list_discovered_resources']=['mgh:ListDiscoveredResources']
        for p in ['mgh:ListDiscoveredResources']:
            res = {}
            for nm in ["MigrationTaskName","ProgressUpdateStream"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "ListDiscoveredResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_migration_tasks(self, *args, **kwargs):
        __protego_used['mgh']['list_migration_tasks']=['mgh:ListMigrationTasks']
        for p in ['mgh:ListMigrationTasks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "ListMigrationTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_progress_update_streams(self, *args, **kwargs):
        __protego_used['mgh']['list_progress_update_streams']=['mgh:ListProgressUpdateStreams']
        for p in ['mgh:ListProgressUpdateStreams']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "ListProgressUpdateStreams", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def notify_application_state(self, *args, **kwargs):
        __protego_used['mgh']['notify_application_state']=['mgh:NotifyApplicationState']
        for p in ['mgh:NotifyApplicationState']:
            res = {}
            for nm in ["ApplicationId","Status"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "NotifyApplicationState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def notify_migration_task_state(self, *args, **kwargs):
        __protego_used['mgh']['notify_migration_task_state']=['mgh:NotifyMigrationTaskState']
        for p in ['mgh:NotifyMigrationTaskState']:
            res = {}
            for nm in ["UpdateDateTime","MigrationTaskName","NextUpdateSeconds","ProgressUpdateStream","Task"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "NotifyMigrationTaskState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_resource_attributes(self, *args, **kwargs):
        __protego_used['mgh']['put_resource_attributes']=['mgh:PutResourceAttributes']
        for p in ['mgh:PutResourceAttributes']:
            res = {}
            for nm in ["MigrationTaskName","ProgressUpdateStream","ResourceAttributeList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mgh'].append({'action': "PutResourceAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class migrationhub_config:
    def __init__(self, region_name=__default_region):
        __protego_used['migrationhub-config']= __protego_used.get('migrationhub-config', {})
        __protego_resource_map['migrationhub-config']=__protego_resource_map.get('migrationhub-config', [])
        self.region = region_name
    def create_home_region_control(self, *args, **kwargs):
        __protego_used['migrationhub-config']['create_home_region_control']=['migrationhub-config:*']
        for p in ['migrationhub-config:*']:
            res = {}
            for nm in ["HomeRegion","Target"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['migrationhub-config'].append({'action': "CreateHomeRegionControl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_home_region_controls(self, *args, **kwargs):
        __protego_used['migrationhub-config']['describe_home_region_controls']=['migrationhub-config:*']
        for p in ['migrationhub-config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['migrationhub-config'].append({'action': "DescribeHomeRegionControls", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_home_region(self, *args, **kwargs):
        __protego_used['migrationhub-config']['get_home_region']=['migrationhub-config:*']
        for p in ['migrationhub-config:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['migrationhub-config'].append({'action': "GetHomeRegion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class mobile:
    def __init__(self, region_name=__default_region):
        __protego_used['mobile']= __protego_used.get('mobile', {})
        __protego_resource_map['mobile']=__protego_resource_map.get('mobile', [])
        self.region = region_name
    def create_project(self, *args, **kwargs):
        __protego_used['mobile']['create_project']=['mobile:*']
        for p in ['mobile:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mobile'].append({'action': "CreateProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_project(self, *args, **kwargs):
        __protego_used['mobile']['delete_project']=['mobile:*']
        for p in ['mobile:*']:
            res = {}
            for nm in ["projectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mobile'].append({'action': "DeleteProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_bundle(self, *args, **kwargs):
        __protego_used['mobile']['describe_bundle']=['mobile:*']
        for p in ['mobile:*']:
            res = {}
            for nm in ["bundleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mobile'].append({'action': "DescribeBundle", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_project(self, *args, **kwargs):
        __protego_used['mobile']['describe_project']=['mobilehub:*']
        for p in ['mobilehub:*']:
            res = {}
            for nm in ["projectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mobile'].append({'action': "DescribeProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_bundle(self, *args, **kwargs):
        __protego_used['mobile']['export_bundle']=['mobile:*']
        for p in ['mobile:*']:
            res = {}
            for nm in ["bundleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mobile'].append({'action': "ExportBundle", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_project(self, *args, **kwargs):
        __protego_used['mobile']['export_project']=['mobile:*']
        for p in ['mobile:*']:
            res = {}
            for nm in ["projectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mobile'].append({'action': "ExportProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_bundles(self, *args, **kwargs):
        __protego_used['mobile']['list_bundles']=['mobile:*']
        for p in ['mobile:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mobile'].append({'action': "ListBundles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_projects(self, *args, **kwargs):
        __protego_used['mobile']['list_projects']=['mobile:*']
        for p in ['mobile:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mobile'].append({'action': "ListProjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_project(self, *args, **kwargs):
        __protego_used['mobile']['update_project']=['mobile:*']
        for p in ['mobile:*']:
            res = {}
            for nm in ["projectId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mobile'].append({'action': "UpdateProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class mq:
    def __init__(self, region_name=__default_region):
        __protego_used['mq']= __protego_used.get('mq', {})
        __protego_resource_map['mq']=__protego_resource_map.get('mq', [])
        self.region = region_name
    def create_broker(self, *args, **kwargs):
        __protego_used['mq']['create_broker']=['mq:CreateBroker']
        for p in ['mq:CreateBroker']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "CreateBroker", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_configuration(self, *args, **kwargs):
        __protego_used['mq']['create_configuration']=['mq:CreateConfiguration']
        for p in ['mq:CreateConfiguration']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "CreateConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_tags(self, *args, **kwargs):
        __protego_used['mq']['create_tags']=['mq:CreateTags']
        for p in ['mq:CreateTags']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "CreateTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user(self, *args, **kwargs):
        __protego_used['mq']['create_user']=['mq:CreateUser']
        for p in ['mq:CreateUser']:
            res = {}
            for nm in ["BrokerId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "CreateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_broker(self, *args, **kwargs):
        __protego_used['mq']['delete_broker']=['mq:DeleteBroker']
        for p in ['mq:DeleteBroker']:
            res = {}
            for nm in ["BrokerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "DeleteBroker", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tags(self, *args, **kwargs):
        __protego_used['mq']['delete_tags']=['mq:DeleteTags']
        for p in ['mq:DeleteTags']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "DeleteTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user(self, *args, **kwargs):
        __protego_used['mq']['delete_user']=['mq:DeleteUser']
        for p in ['mq:DeleteUser']:
            res = {}
            for nm in ["BrokerId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "DeleteUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_broker(self, *args, **kwargs):
        __protego_used['mq']['describe_broker']=['mq:DescribeBroker']
        for p in ['mq:DescribeBroker']:
            res = {}
            for nm in ["BrokerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "DescribeBroker", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_broker_engine_types(self, *args, **kwargs):
        __protego_used['mq']['describe_broker_engine_types']=['mq:DescribeBrokerEngineTypes']
        for p in ['mq:DescribeBrokerEngineTypes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "DescribeBrokerEngineTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_broker_instance_options(self, *args, **kwargs):
        __protego_used['mq']['describe_broker_instance_options']=['mq:ListTags']
        for p in ['mq:ListTags']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "DescribeBrokerInstanceOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configuration(self, *args, **kwargs):
        __protego_used['mq']['describe_configuration']=['mq:DescribeConfiguration']
        for p in ['mq:DescribeConfiguration']:
            res = {}
            for nm in ["ConfigurationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "DescribeConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configuration_revision(self, *args, **kwargs):
        __protego_used['mq']['describe_configuration_revision']=['mq:DescribeConfigurationRevision']
        for p in ['mq:DescribeConfigurationRevision']:
            res = {}
            for nm in ["ConfigurationRevision","ConfigurationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "DescribeConfigurationRevision", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user(self, *args, **kwargs):
        __protego_used['mq']['describe_user']=['mq:DescribeUser']
        for p in ['mq:DescribeUser']:
            res = {}
            for nm in ["BrokerId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "DescribeUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_brokers(self, *args, **kwargs):
        __protego_used['mq']['list_brokers']=['mq:ListBrokers']
        for p in ['mq:ListBrokers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "ListBrokers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_configuration_revisions(self, *args, **kwargs):
        __protego_used['mq']['list_configuration_revisions']=['mq:ListConfigurationRevisions']
        for p in ['mq:ListConfigurationRevisions']:
            res = {}
            for nm in ["ConfigurationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "ListConfigurationRevisions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_configurations(self, *args, **kwargs):
        __protego_used['mq']['list_configurations']=['mq:ListConfigurations']
        for p in ['mq:ListConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "ListConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags(self, *args, **kwargs):
        __protego_used['mq']['list_tags']=['mq:ListTags']
        for p in ['mq:ListTags']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "ListTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_users(self, *args, **kwargs):
        __protego_used['mq']['list_users']=['mq:ListUsers']
        for p in ['mq:ListUsers']:
            res = {}
            for nm in ["BrokerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "ListUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_broker(self, *args, **kwargs):
        __protego_used['mq']['reboot_broker']=['mq:RebootBroker']
        for p in ['mq:RebootBroker']:
            res = {}
            for nm in ["BrokerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "RebootBroker", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_broker(self, *args, **kwargs):
        __protego_used['mq']['update_broker']=['mq:UpdateBroker']
        for p in ['mq:UpdateBroker']:
            res = {}
            for nm in ["BrokerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "UpdateBroker", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_configuration(self, *args, **kwargs):
        __protego_used['mq']['update_configuration']=['mq:UpdateConfiguration']
        for p in ['mq:UpdateConfiguration']:
            res = {}
            for nm in ["ConfigurationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "UpdateConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user(self, *args, **kwargs):
        __protego_used['mq']['update_user']=['mq:UpdateUser']
        for p in ['mq:UpdateUser']:
            res = {}
            for nm in ["BrokerId","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mq'].append({'action': "UpdateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class mturk:
    def __init__(self, region_name=__default_region):
        __protego_used['mturk']= __protego_used.get('mturk', {})
        __protego_resource_map['mturk']=__protego_resource_map.get('mturk', [])
        self.region = region_name
    def accept_qualification_request(self, *args, **kwargs):
        __protego_used['mturk']['accept_qualification_request']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["QualificationRequestId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "AcceptQualificationRequest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def approve_assignment(self, *args, **kwargs):
        __protego_used['mturk']['approve_assignment']=['mechanicalturk:ApproveAssignment']
        for p in ['mechanicalturk:ApproveAssignment']:
            res = {}
            for nm in ["AssignmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "ApproveAssignment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_qualification_with_worker(self, *args, **kwargs):
        __protego_used['mturk']['associate_qualification_with_worker']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["WorkerId","QualificationTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "AssociateQualificationWithWorker", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_additional_assignments_for_hit(self, *args, **kwargs):
        __protego_used['mturk']['create_additional_assignments_for_hit']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["NumberOfAdditionalAssignments","HITId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "CreateAdditionalAssignmentsForHIT", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_hit(self, *args, **kwargs):
        __protego_used['mturk']['create_hit']=['mechanicalturk:CreateHIT']
        for p in ['mechanicalturk:CreateHIT']:
            res = {}
            for nm in ["AssignmentDurationInSeconds","Description","Reward","LifetimeInSeconds","Title"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "CreateHIT", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_hit_type(self, *args, **kwargs):
        __protego_used['mturk']['create_hit_type']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["Description","Reward","Title","AssignmentDurationInSeconds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "CreateHITType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_hit_with_hit_type(self, *args, **kwargs):
        __protego_used['mturk']['create_hit_with_hit_type']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["LifetimeInSeconds","HITTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "CreateHITWithHITType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_qualification_type(self, *args, **kwargs):
        __protego_used['mturk']['create_qualification_type']=['mechanicalturk:CreateQualificationType']
        for p in ['mechanicalturk:CreateQualificationType']:
            res = {}
            for nm in ["QualificationTypeStatus","Description","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "CreateQualificationType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_worker_block(self, *args, **kwargs):
        __protego_used['mturk']['create_worker_block']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["Reason","WorkerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "CreateWorkerBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_hit(self, *args, **kwargs):
        __protego_used['mturk']['delete_hit']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["HITId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "DeleteHIT", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_qualification_type(self, *args, **kwargs):
        __protego_used['mturk']['delete_qualification_type']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["QualificationTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "DeleteQualificationType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_worker_block(self, *args, **kwargs):
        __protego_used['mturk']['delete_worker_block']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["WorkerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "DeleteWorkerBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_qualification_from_worker(self, *args, **kwargs):
        __protego_used['mturk']['disassociate_qualification_from_worker']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["QualificationTypeId","WorkerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "DisassociateQualificationFromWorker", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account_balance(self, *args, **kwargs):
        __protego_used['mturk']['get_account_balance']=['mechanicalturk:GetAccountBalance']
        for p in ['mechanicalturk:GetAccountBalance']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "GetAccountBalance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_assignment(self, *args, **kwargs):
        __protego_used['mturk']['get_assignment']=['mechanicalturk:GetAssignment']
        for p in ['mechanicalturk:GetAssignment']:
            res = {}
            for nm in ["AssignmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "GetAssignment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_file_upload_url(self, *args, **kwargs):
        __protego_used['mturk']['get_file_upload_url']=['mechanicalturk:GetFileUploadURL']
        for p in ['mechanicalturk:GetFileUploadURL']:
            res = {}
            for nm in ["AssignmentId","QuestionIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "GetFileUploadURL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_hit(self, *args, **kwargs):
        __protego_used['mturk']['get_hit']=['mechanicalturk:GetHIT']
        for p in ['mechanicalturk:GetHIT']:
            res = {}
            for nm in ["HITId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "GetHIT", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_qualification_score(self, *args, **kwargs):
        __protego_used['mturk']['get_qualification_score']=['mechanicalturk:GetQualificationScore']
        for p in ['mechanicalturk:GetQualificationScore']:
            res = {}
            for nm in ["WorkerId","QualificationTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "GetQualificationScore", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_qualification_type(self, *args, **kwargs):
        __protego_used['mturk']['get_qualification_type']=['mechanicalturk:GetQualificationType']
        for p in ['mechanicalturk:GetQualificationType']:
            res = {}
            for nm in ["QualificationTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "GetQualificationType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_assignments_for_hit(self, *args, **kwargs):
        __protego_used['mturk']['list_assignments_for_hit']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["HITId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "ListAssignmentsForHIT", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_bonus_payments(self, *args, **kwargs):
        __protego_used['mturk']['list_bonus_payments']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "ListBonusPayments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_hits(self, *args, **kwargs):
        __protego_used['mturk']['list_hits']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "ListHITs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_hits_for_qualification_type(self, *args, **kwargs):
        __protego_used['mturk']['list_hits_for_qualification_type']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["QualificationTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "ListHITsForQualificationType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_qualification_requests(self, *args, **kwargs):
        __protego_used['mturk']['list_qualification_requests']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "ListQualificationRequests", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_qualification_types(self, *args, **kwargs):
        __protego_used['mturk']['list_qualification_types']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["MustBeRequestable"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "ListQualificationTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_review_policy_results_for_hit(self, *args, **kwargs):
        __protego_used['mturk']['list_review_policy_results_for_hit']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["HITId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "ListReviewPolicyResultsForHIT", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_reviewable_hits(self, *args, **kwargs):
        __protego_used['mturk']['list_reviewable_hits']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "ListReviewableHITs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_worker_blocks(self, *args, **kwargs):
        __protego_used['mturk']['list_worker_blocks']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "ListWorkerBlocks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_workers_with_qualification_type(self, *args, **kwargs):
        __protego_used['mturk']['list_workers_with_qualification_type']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["QualificationTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "ListWorkersWithQualificationType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def notify_workers(self, *args, **kwargs):
        __protego_used['mturk']['notify_workers']=['mechanicalturk:NotifyWorkers']
        for p in ['mechanicalturk:NotifyWorkers']:
            res = {}
            for nm in ["MessageText","Subject","WorkerIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "NotifyWorkers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_assignment(self, *args, **kwargs):
        __protego_used['mturk']['reject_assignment']=['mechanicalturk:RejectAssignment']
        for p in ['mechanicalturk:RejectAssignment']:
            res = {}
            for nm in ["AssignmentId","RequesterFeedback"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "RejectAssignment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_qualification_request(self, *args, **kwargs):
        __protego_used['mturk']['reject_qualification_request']=['mechanicalturk:RejectQualificationRequest']
        for p in ['mechanicalturk:RejectQualificationRequest']:
            res = {}
            for nm in ["QualificationRequestId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "RejectQualificationRequest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_bonus(self, *args, **kwargs):
        __protego_used['mturk']['send_bonus']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["BonusAmount","AssignmentId","Reason","WorkerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "SendBonus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_test_event_notification(self, *args, **kwargs):
        __protego_used['mturk']['send_test_event_notification']=['mechanicalturk:SendTestEventNotification']
        for p in ['mechanicalturk:SendTestEventNotification']:
            res = {}
            for nm in ["TestEventType","Notification"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "SendTestEventNotification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_expiration_for_hit(self, *args, **kwargs):
        __protego_used['mturk']['update_expiration_for_hit']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["ExpireAt","HITId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "UpdateExpirationForHIT", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_hit_review_status(self, *args, **kwargs):
        __protego_used['mturk']['update_hit_review_status']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["HITId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "UpdateHITReviewStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_hit_type_of_hit(self, *args, **kwargs):
        __protego_used['mturk']['update_hit_type_of_hit']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["HITId","HITTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "UpdateHITTypeOfHIT", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_notification_settings(self, *args, **kwargs):
        __protego_used['mturk']['update_notification_settings']=['mechanicalturk:*']
        for p in ['mechanicalturk:*']:
            res = {}
            for nm in ["HITTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "UpdateNotificationSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_qualification_type(self, *args, **kwargs):
        __protego_used['mturk']['update_qualification_type']=['mechanicalturk:UpdateQualificationType']
        for p in ['mechanicalturk:UpdateQualificationType']:
            res = {}
            for nm in ["QualificationTypeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['mturk'].append({'action': "UpdateQualificationType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class neptune:
    def __init__(self, region_name=__default_region):
        __protego_used['neptune']= __protego_used.get('neptune', {})
        __protego_resource_map['neptune']=__protego_resource_map.get('neptune', [])
        self.region = region_name
    def add_role_to_db_cluster(self, *args, **kwargs):
        __protego_used['neptune']['add_role_to_db_cluster']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["RoleArn","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "AddRoleToDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_source_identifier_to_subscription(self, *args, **kwargs):
        __protego_used['neptune']['add_source_identifier_to_subscription']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["SourceIdentifier","SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "AddSourceIdentifierToSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_tags_to_resource(self, *args, **kwargs):
        __protego_used['neptune']['add_tags_to_resource']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["ResourceName","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "AddTagsToResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def apply_pending_maintenance_action(self, *args, **kwargs):
        __protego_used['neptune']['apply_pending_maintenance_action']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["ResourceIdentifier","ApplyAction","OptInType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "ApplyPendingMaintenanceAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['neptune']['copy_db_cluster_parameter_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["SourceDBClusterParameterGroupIdentifier","TargetDBClusterParameterGroupIdentifier","TargetDBClusterParameterGroupDescription"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "CopyDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_db_cluster_snapshot(self, *args, **kwargs):
        __protego_used['neptune']['copy_db_cluster_snapshot']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["TargetDBClusterSnapshotIdentifier","SourceDBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "CopyDBClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_db_parameter_group(self, *args, **kwargs):
        __protego_used['neptune']['copy_db_parameter_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["TargetDBParameterGroupIdentifier","SourceDBParameterGroupIdentifier","TargetDBParameterGroupDescription"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "CopyDBParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_cluster(self, *args, **kwargs):
        __protego_used['neptune']['create_db_cluster']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["Engine","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "CreateDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['neptune']['create_db_cluster_parameter_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBParameterGroupFamily","Description","DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "CreateDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_cluster_snapshot(self, *args, **kwargs):
        __protego_used['neptune']['create_db_cluster_snapshot']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBClusterIdentifier","DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "CreateDBClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_instance(self, *args, **kwargs):
        __protego_used['neptune']['create_db_instance']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBInstanceIdentifier","Engine","DBInstanceClass"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "CreateDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_parameter_group(self, *args, **kwargs):
        __protego_used['neptune']['create_db_parameter_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBParameterGroupFamily","Description","DBParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "CreateDBParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_subnet_group(self, *args, **kwargs):
        __protego_used['neptune']['create_db_subnet_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "CreateDBSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_event_subscription(self, *args, **kwargs):
        __protego_used['neptune']['create_event_subscription']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["SnsTopicArn","SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "CreateEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_cluster(self, *args, **kwargs):
        __protego_used['neptune']['delete_db_cluster']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DeleteDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['neptune']['delete_db_cluster_parameter_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DeleteDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_cluster_snapshot(self, *args, **kwargs):
        __protego_used['neptune']['delete_db_cluster_snapshot']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DeleteDBClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_instance(self, *args, **kwargs):
        __protego_used['neptune']['delete_db_instance']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DeleteDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_parameter_group(self, *args, **kwargs):
        __protego_used['neptune']['delete_db_parameter_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DeleteDBParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_subnet_group(self, *args, **kwargs):
        __protego_used['neptune']['delete_db_subnet_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBSubnetGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DeleteDBSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_event_subscription(self, *args, **kwargs):
        __protego_used['neptune']['delete_event_subscription']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DeleteEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_parameter_groups(self, *args, **kwargs):
        __protego_used['neptune']['describe_db_cluster_parameter_groups']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeDBClusterParameterGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_parameters(self, *args, **kwargs):
        __protego_used['neptune']['describe_db_cluster_parameters']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeDBClusterParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_snapshot_attributes(self, *args, **kwargs):
        __protego_used['neptune']['describe_db_cluster_snapshot_attributes']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeDBClusterSnapshotAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_snapshots(self, *args, **kwargs):
        __protego_used['neptune']['describe_db_cluster_snapshots']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeDBClusterSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_clusters(self, *args, **kwargs):
        __protego_used['neptune']['describe_db_clusters']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeDBClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_engine_versions(self, *args, **kwargs):
        __protego_used['neptune']['describe_db_engine_versions']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeDBEngineVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_instances(self, *args, **kwargs):
        __protego_used['neptune']['describe_db_instances']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeDBInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_parameter_groups(self, *args, **kwargs):
        __protego_used['neptune']['describe_db_parameter_groups']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeDBParameterGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_parameters(self, *args, **kwargs):
        __protego_used['neptune']['describe_db_parameters']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeDBParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_subnet_groups(self, *args, **kwargs):
        __protego_used['neptune']['describe_db_subnet_groups']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeDBSubnetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_engine_default_cluster_parameters(self, *args, **kwargs):
        __protego_used['neptune']['describe_engine_default_cluster_parameters']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBParameterGroupFamily"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeEngineDefaultClusterParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_engine_default_parameters(self, *args, **kwargs):
        __protego_used['neptune']['describe_engine_default_parameters']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBParameterGroupFamily"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeEngineDefaultParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_categories(self, *args, **kwargs):
        __protego_used['neptune']['describe_event_categories']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeEventCategories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_subscriptions(self, *args, **kwargs):
        __protego_used['neptune']['describe_event_subscriptions']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeEventSubscriptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_events(self, *args, **kwargs):
        __protego_used['neptune']['describe_events']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_orderable_db_instance_options(self, *args, **kwargs):
        __protego_used['neptune']['describe_orderable_db_instance_options']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["Engine"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeOrderableDBInstanceOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_pending_maintenance_actions(self, *args, **kwargs):
        __protego_used['neptune']['describe_pending_maintenance_actions']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribePendingMaintenanceActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_valid_db_instance_modifications(self, *args, **kwargs):
        __protego_used['neptune']['describe_valid_db_instance_modifications']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "DescribeValidDBInstanceModifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def failover_db_cluster(self, *args, **kwargs):
        __protego_used['neptune']['failover_db_cluster']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "FailoverDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['neptune']['list_tags_for_resource']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["ResourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_cluster(self, *args, **kwargs):
        __protego_used['neptune']['modify_db_cluster']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "ModifyDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['neptune']['modify_db_cluster_parameter_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["Parameters","DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "ModifyDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_cluster_snapshot_attribute(self, *args, **kwargs):
        __protego_used['neptune']['modify_db_cluster_snapshot_attribute']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["AttributeName","DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "ModifyDBClusterSnapshotAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_instance(self, *args, **kwargs):
        __protego_used['neptune']['modify_db_instance']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "ModifyDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_parameter_group(self, *args, **kwargs):
        __protego_used['neptune']['modify_db_parameter_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["Parameters","DBParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "ModifyDBParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_subnet_group(self, *args, **kwargs):
        __protego_used['neptune']['modify_db_subnet_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBSubnetGroupName","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "ModifyDBSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_event_subscription(self, *args, **kwargs):
        __protego_used['neptune']['modify_event_subscription']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "ModifyEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def promote_read_replica_db_cluster(self, *args, **kwargs):
        __protego_used['neptune']['promote_read_replica_db_cluster']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "PromoteReadReplicaDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_db_instance(self, *args, **kwargs):
        __protego_used['neptune']['reboot_db_instance']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "RebootDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_role_from_db_cluster(self, *args, **kwargs):
        __protego_used['neptune']['remove_role_from_db_cluster']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["RoleArn","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "RemoveRoleFromDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_source_identifier_from_subscription(self, *args, **kwargs):
        __protego_used['neptune']['remove_source_identifier_from_subscription']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["SourceIdentifier","SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "RemoveSourceIdentifierFromSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_resource(self, *args, **kwargs):
        __protego_used['neptune']['remove_tags_from_resource']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["ResourceName","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "RemoveTagsFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['neptune']['reset_db_cluster_parameter_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "ResetDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_db_parameter_group(self, *args, **kwargs):
        __protego_used['neptune']['reset_db_parameter_group']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["DBParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "ResetDBParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_db_cluster_from_snapshot(self, *args, **kwargs):
        __protego_used['neptune']['restore_db_cluster_from_snapshot']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["Engine","DBClusterIdentifier","SnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "RestoreDBClusterFromSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_db_cluster_to_point_in_time(self, *args, **kwargs):
        __protego_used['neptune']['restore_db_cluster_to_point_in_time']=['neptune-db:*']
        for p in ['neptune-db:*']:
            res = {}
            for nm in ["SourceDBClusterIdentifier","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['neptune'].append({'action': "RestoreDBClusterToPointInTime", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class networkmanager:
    def __init__(self, region_name=__default_region):
        __protego_used['networkmanager']= __protego_used.get('networkmanager', {})
        __protego_resource_map['networkmanager']=__protego_resource_map.get('networkmanager', [])
        self.region = region_name
    def associate_customer_gateway(self, *args, **kwargs):
        __protego_used['networkmanager']['associate_customer_gateway']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","DeviceId","CustomerGatewayArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "AssociateCustomerGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_link(self, *args, **kwargs):
        __protego_used['networkmanager']['associate_link']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","LinkId","DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "AssociateLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_device(self, *args, **kwargs):
        __protego_used['networkmanager']['create_device']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "CreateDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_global_network(self, *args, **kwargs):
        __protego_used['networkmanager']['create_global_network']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "CreateGlobalNetwork", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_link(self, *args, **kwargs):
        __protego_used['networkmanager']['create_link']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","SiteId","Bandwidth"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "CreateLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_site(self, *args, **kwargs):
        __protego_used['networkmanager']['create_site']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "CreateSite", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_device(self, *args, **kwargs):
        __protego_used['networkmanager']['delete_device']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "DeleteDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_global_network(self, *args, **kwargs):
        __protego_used['networkmanager']['delete_global_network']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "DeleteGlobalNetwork", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_link(self, *args, **kwargs):
        __protego_used['networkmanager']['delete_link']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","LinkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "DeleteLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_site(self, *args, **kwargs):
        __protego_used['networkmanager']['delete_site']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","SiteId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "DeleteSite", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_transit_gateway(self, *args, **kwargs):
        __protego_used['networkmanager']['deregister_transit_gateway']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","TransitGatewayArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "DeregisterTransitGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_global_networks(self, *args, **kwargs):
        __protego_used['networkmanager']['describe_global_networks']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "DescribeGlobalNetworks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_customer_gateway(self, *args, **kwargs):
        __protego_used['networkmanager']['disassociate_customer_gateway']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","CustomerGatewayArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "DisassociateCustomerGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_link(self, *args, **kwargs):
        __protego_used['networkmanager']['disassociate_link']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","LinkId","DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "DisassociateLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_customer_gateway_associations(self, *args, **kwargs):
        __protego_used['networkmanager']['get_customer_gateway_associations']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "GetCustomerGatewayAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_devices(self, *args, **kwargs):
        __protego_used['networkmanager']['get_devices']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "GetDevices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_link_associations(self, *args, **kwargs):
        __protego_used['networkmanager']['get_link_associations']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "GetLinkAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_links(self, *args, **kwargs):
        __protego_used['networkmanager']['get_links']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "GetLinks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sites(self, *args, **kwargs):
        __protego_used['networkmanager']['get_sites']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "GetSites", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_transit_gateway_registrations(self, *args, **kwargs):
        __protego_used['networkmanager']['get_transit_gateway_registrations']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "GetTransitGatewayRegistrations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['networkmanager']['list_tags_for_resource']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_transit_gateway(self, *args, **kwargs):
        __protego_used['networkmanager']['register_transit_gateway']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","TransitGatewayArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "RegisterTransitGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['networkmanager']['tag_resource']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['networkmanager']['untag_resource']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_device(self, *args, **kwargs):
        __protego_used['networkmanager']['update_device']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "UpdateDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_global_network(self, *args, **kwargs):
        __protego_used['networkmanager']['update_global_network']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "UpdateGlobalNetwork", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_link(self, *args, **kwargs):
        __protego_used['networkmanager']['update_link']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","LinkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "UpdateLink", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_site(self, *args, **kwargs):
        __protego_used['networkmanager']['update_site']=['networkmanager:*']
        for p in ['networkmanager:*']:
            res = {}
            for nm in ["GlobalNetworkId","SiteId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['networkmanager'].append({'action': "UpdateSite", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class opsworks:
    def __init__(self, region_name=__default_region):
        __protego_used['opsworks']= __protego_used.get('opsworks', {})
        __protego_resource_map['opsworks']=__protego_resource_map.get('opsworks', [])
        self.region = region_name
    def assign_instance(self, *args, **kwargs):
        __protego_used['opsworks']['assign_instance']=['opsworks:AssignInstance']
        for p in ['opsworks:AssignInstance']:
            res = {}
            for nm in ["LayerIds","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "AssignInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def assign_volume(self, *args, **kwargs):
        __protego_used['opsworks']['assign_volume']=['opsworks:AssignVolume']
        for p in ['opsworks:AssignVolume']:
            res = {}
            for nm in ["VolumeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "AssignVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_elastic_ip(self, *args, **kwargs):
        __protego_used['opsworks']['associate_elastic_ip']=['opsworks:AssociateElasticIp']
        for p in ['opsworks:AssociateElasticIp']:
            res = {}
            for nm in ["ElasticIp"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "AssociateElasticIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_elastic_load_balancer(self, *args, **kwargs):
        __protego_used['opsworks']['attach_elastic_load_balancer']=['opsworks:AttachElasticLoadBalancer']
        for p in ['opsworks:AttachElasticLoadBalancer']:
            res = {}
            for nm in ["LayerId","ElasticLoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "AttachElasticLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def clone_stack(self, *args, **kwargs):
        __protego_used['opsworks']['clone_stack']=['opsworks:CloneStack']
        for p in ['opsworks:CloneStack']:
            res = {}
            for nm in ["SourceStackId","ServiceRoleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "CloneStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_app(self, *args, **kwargs):
        __protego_used['opsworks']['create_app']=['opsworks:CreateApp']
        for p in ['opsworks:CreateApp']:
            res = {}
            for nm in ["Type","StackId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "CreateApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deployment(self, *args, **kwargs):
        __protego_used['opsworks']['create_deployment']=['opsworks:CreateDeployment']
        for p in ['opsworks:CreateDeployment']:
            res = {}
            for nm in ["Command","StackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "CreateDeployment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_instance(self, *args, **kwargs):
        __protego_used['opsworks']['create_instance']=['opsworks:CreateInstance']
        for p in ['opsworks:CreateInstance']:
            res = {}
            for nm in ["LayerIds","StackId","InstanceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "CreateInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_layer(self, *args, **kwargs):
        __protego_used['opsworks']['create_layer']=['opsworks:CreateLayer']
        for p in ['opsworks:CreateLayer']:
            res = {}
            for nm in ["Type","StackId","Name","Shortname"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "CreateLayer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stack(self, *args, **kwargs):
        __protego_used['opsworks']['create_stack']=['opsworks:CreateStack']
        for p in ['opsworks:CreateStack']:
            res = {}
            for nm in ["Region","DefaultInstanceProfileArn","Name","ServiceRoleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "CreateStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user_profile(self, *args, **kwargs):
        __protego_used['opsworks']['create_user_profile']=['opsworks:CreateUserProfile']
        for p in ['opsworks:CreateUserProfile']:
            res = {}
            for nm in ["IamUserArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "CreateUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_app(self, *args, **kwargs):
        __protego_used['opsworks']['delete_app']=['opsworks:DeleteApp']
        for p in ['opsworks:DeleteApp']:
            res = {}
            for nm in ["AppId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DeleteApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_instance(self, *args, **kwargs):
        __protego_used['opsworks']['delete_instance']=['opsworks:DeleteInstance']
        for p in ['opsworks:DeleteInstance']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DeleteInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_layer(self, *args, **kwargs):
        __protego_used['opsworks']['delete_layer']=['opsworks:DeleteLayer']
        for p in ['opsworks:DeleteLayer']:
            res = {}
            for nm in ["LayerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DeleteLayer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_stack(self, *args, **kwargs):
        __protego_used['opsworks']['delete_stack']=['opsworks:DeleteStack']
        for p in ['opsworks:DeleteStack']:
            res = {}
            for nm in ["StackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DeleteStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_profile(self, *args, **kwargs):
        __protego_used['opsworks']['delete_user_profile']=['opsworks:DeleteUserProfile']
        for p in ['opsworks:DeleteUserProfile']:
            res = {}
            for nm in ["IamUserArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DeleteUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_ecs_cluster(self, *args, **kwargs):
        __protego_used['opsworks']['deregister_ecs_cluster']=['opsworks:DeregisterEcsCluster']
        for p in ['opsworks:DeregisterEcsCluster']:
            res = {}
            for nm in ["EcsClusterArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DeregisterEcsCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_elastic_ip(self, *args, **kwargs):
        __protego_used['opsworks']['deregister_elastic_ip']=['opsworks:DeregisterElasticIp']
        for p in ['opsworks:DeregisterElasticIp']:
            res = {}
            for nm in ["ElasticIp"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DeregisterElasticIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_instance(self, *args, **kwargs):
        __protego_used['opsworks']['deregister_instance']=['opsworks:DeregisterInstance']
        for p in ['opsworks:DeregisterInstance']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DeregisterInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_rds_db_instance(self, *args, **kwargs):
        __protego_used['opsworks']['deregister_rds_db_instance']=['opsworks:DeregisterRdsDbInstance']
        for p in ['opsworks:DeregisterRdsDbInstance']:
            res = {}
            for nm in ["RdsDbInstanceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DeregisterRdsDbInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_volume(self, *args, **kwargs):
        __protego_used['opsworks']['deregister_volume']=['opsworks:DeregisterVolume']
        for p in ['opsworks:DeregisterVolume']:
            res = {}
            for nm in ["VolumeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DeregisterVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_agent_versions(self, *args, **kwargs):
        __protego_used['opsworks']['describe_agent_versions']=['opsworks:DescribeAgentVersions']
        for p in ['opsworks:DescribeAgentVersions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeAgentVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_apps(self, *args, **kwargs):
        __protego_used['opsworks']['describe_apps']=['opsworks:DescribeApps']
        for p in ['opsworks:DescribeApps']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeApps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_commands(self, *args, **kwargs):
        __protego_used['opsworks']['describe_commands']=['opsworks:DescribeCommands']
        for p in ['opsworks:DescribeCommands']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeCommands", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_deployments(self, *args, **kwargs):
        __protego_used['opsworks']['describe_deployments']=['opsworks:DescribeDeployments']
        for p in ['opsworks:DescribeDeployments']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeDeployments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_ecs_clusters(self, *args, **kwargs):
        __protego_used['opsworks']['describe_ecs_clusters']=['opsworks:DescribeEcsClusters']
        for p in ['opsworks:DescribeEcsClusters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeEcsClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_elastic_ips(self, *args, **kwargs):
        __protego_used['opsworks']['describe_elastic_ips']=['opsworks:DescribeElasticIps']
        for p in ['opsworks:DescribeElasticIps']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeElasticIps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_elastic_load_balancers(self, *args, **kwargs):
        __protego_used['opsworks']['describe_elastic_load_balancers']=['opsworks:DescribeElasticLoadBalancers']
        for p in ['opsworks:DescribeElasticLoadBalancers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeElasticLoadBalancers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instances(self, *args, **kwargs):
        __protego_used['opsworks']['describe_instances']=['opsworks:DescribeInstances']
        for p in ['opsworks:DescribeInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_layers(self, *args, **kwargs):
        __protego_used['opsworks']['describe_layers']=['opsworks:DescribeLayers']
        for p in ['opsworks:DescribeLayers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeLayers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_load_based_auto_scaling(self, *args, **kwargs):
        __protego_used['opsworks']['describe_load_based_auto_scaling']=['opsworks:DescribeLoadBasedAutoScaling']
        for p in ['opsworks:DescribeLoadBasedAutoScaling']:
            res = {}
            for nm in ["LayerIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeLoadBasedAutoScaling", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_my_user_profile(self, *args, **kwargs):
        __protego_used['opsworks']['describe_my_user_profile']=['opsworks:DescribeMyUserProfile']
        for p in ['opsworks:DescribeMyUserProfile']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeMyUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_operating_systems(self, *args, **kwargs):
        __protego_used['opsworks']['describe_operating_systems']=['opsworks:*']
        for p in ['opsworks:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeOperatingSystems", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_permissions(self, *args, **kwargs):
        __protego_used['opsworks']['describe_permissions']=['opsworks:DescribePermissions']
        for p in ['opsworks:DescribePermissions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_raid_arrays(self, *args, **kwargs):
        __protego_used['opsworks']['describe_raid_arrays']=['opsworks:DescribeRaidArrays']
        for p in ['opsworks:DescribeRaidArrays']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeRaidArrays", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_rds_db_instances(self, *args, **kwargs):
        __protego_used['opsworks']['describe_rds_db_instances']=['opsworks:DescribeRdsDbInstances']
        for p in ['opsworks:DescribeRdsDbInstances']:
            res = {}
            for nm in ["StackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeRdsDbInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_service_errors(self, *args, **kwargs):
        __protego_used['opsworks']['describe_service_errors']=['opsworks:DescribeServiceErrors']
        for p in ['opsworks:DescribeServiceErrors']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeServiceErrors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stack_provisioning_parameters(self, *args, **kwargs):
        __protego_used['opsworks']['describe_stack_provisioning_parameters']=['opsworks:DescribeStackProvisioningParameters']
        for p in ['opsworks:DescribeStackProvisioningParameters']:
            res = {}
            for nm in ["StackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeStackProvisioningParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stack_summary(self, *args, **kwargs):
        __protego_used['opsworks']['describe_stack_summary']=['opsworks:DescribeStackSummary']
        for p in ['opsworks:DescribeStackSummary']:
            res = {}
            for nm in ["StackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeStackSummary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stacks(self, *args, **kwargs):
        __protego_used['opsworks']['describe_stacks']=['opsworks:DescribeStacks']
        for p in ['opsworks:DescribeStacks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeStacks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_time_based_auto_scaling(self, *args, **kwargs):
        __protego_used['opsworks']['describe_time_based_auto_scaling']=['opsworks:DescribeTimeBasedAutoScaling']
        for p in ['opsworks:DescribeTimeBasedAutoScaling']:
            res = {}
            for nm in ["InstanceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeTimeBasedAutoScaling", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user_profiles(self, *args, **kwargs):
        __protego_used['opsworks']['describe_user_profiles']=['opsworks:DescribeUserProfiles']
        for p in ['opsworks:DescribeUserProfiles']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeUserProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_volumes(self, *args, **kwargs):
        __protego_used['opsworks']['describe_volumes']=['opsworks:DescribeVolumes']
        for p in ['opsworks:DescribeVolumes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DescribeVolumes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_elastic_load_balancer(self, *args, **kwargs):
        __protego_used['opsworks']['detach_elastic_load_balancer']=['opsworks:DetachElasticLoadBalancer']
        for p in ['opsworks:DetachElasticLoadBalancer']:
            res = {}
            for nm in ["LayerId","ElasticLoadBalancerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DetachElasticLoadBalancer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_elastic_ip(self, *args, **kwargs):
        __protego_used['opsworks']['disassociate_elastic_ip']=['opsworks:DisassociateElasticIp']
        for p in ['opsworks:DisassociateElasticIp']:
            res = {}
            for nm in ["ElasticIp"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "DisassociateElasticIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_hostname_suggestion(self, *args, **kwargs):
        __protego_used['opsworks']['get_hostname_suggestion']=['opsworks:GetHostnameSuggestion']
        for p in ['opsworks:GetHostnameSuggestion']:
            res = {}
            for nm in ["LayerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "GetHostnameSuggestion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def grant_access(self, *args, **kwargs):
        __protego_used['opsworks']['grant_access']=['opsworks:GrantAccess']
        for p in ['opsworks:GrantAccess']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "GrantAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags(self, *args, **kwargs):
        __protego_used['opsworks']['list_tags']=['opsworks:ListTags']
        for p in ['opsworks:ListTags']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "ListTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_instance(self, *args, **kwargs):
        __protego_used['opsworks']['reboot_instance']=['opsworks:RebootInstance']
        for p in ['opsworks:RebootInstance']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "RebootInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_ecs_cluster(self, *args, **kwargs):
        __protego_used['opsworks']['register_ecs_cluster']=['opsworks:RegisterEcsCluster']
        for p in ['opsworks:RegisterEcsCluster']:
            res = {}
            for nm in ["EcsClusterArn","StackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "RegisterEcsCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_elastic_ip(self, *args, **kwargs):
        __protego_used['opsworks']['register_elastic_ip']=['opsworks:RegisterElasticIp']
        for p in ['opsworks:RegisterElasticIp']:
            res = {}
            for nm in ["StackId","ElasticIp"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "RegisterElasticIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_instance(self, *args, **kwargs):
        __protego_used['opsworks']['register_instance']=['opsworks:RegisterInstance']
        for p in ['opsworks:RegisterInstance']:
            res = {}
            for nm in ["StackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "RegisterInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_rds_db_instance(self, *args, **kwargs):
        __protego_used['opsworks']['register_rds_db_instance']=['opsworks:RegisterRdsDbInstance']
        for p in ['opsworks:RegisterRdsDbInstance']:
            res = {}
            for nm in ["DbUser","StackId","RdsDbInstanceArn","DbPassword"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "RegisterRdsDbInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_volume(self, *args, **kwargs):
        __protego_used['opsworks']['register_volume']=['opsworks:RegisterVolume']
        for p in ['opsworks:RegisterVolume']:
            res = {}
            for nm in ["StackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "RegisterVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_load_based_auto_scaling(self, *args, **kwargs):
        __protego_used['opsworks']['set_load_based_auto_scaling']=['opsworks:SetLoadBasedAutoScaling']
        for p in ['opsworks:SetLoadBasedAutoScaling']:
            res = {}
            for nm in ["LayerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "SetLoadBasedAutoScaling", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_permission(self, *args, **kwargs):
        __protego_used['opsworks']['set_permission']=['opsworks:SetPermission']
        for p in ['opsworks:SetPermission']:
            res = {}
            for nm in ["StackId","IamUserArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "SetPermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_time_based_auto_scaling(self, *args, **kwargs):
        __protego_used['opsworks']['set_time_based_auto_scaling']=['opsworks:SetTimeBasedAutoScaling']
        for p in ['opsworks:SetTimeBasedAutoScaling']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "SetTimeBasedAutoScaling", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_instance(self, *args, **kwargs):
        __protego_used['opsworks']['start_instance']=['opsworks:StartInstance']
        for p in ['opsworks:StartInstance']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "StartInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_stack(self, *args, **kwargs):
        __protego_used['opsworks']['start_stack']=['opsworks:StartStack']
        for p in ['opsworks:StartStack']:
            res = {}
            for nm in ["StackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "StartStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_instance(self, *args, **kwargs):
        __protego_used['opsworks']['stop_instance']=['opsworks:StopInstance']
        for p in ['opsworks:StopInstance']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "StopInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_stack(self, *args, **kwargs):
        __protego_used['opsworks']['stop_stack']=['opsworks:StopStack']
        for p in ['opsworks:StopStack']:
            res = {}
            for nm in ["StackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "StopStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['opsworks']['tag_resource']=['opsworks:TagResource']
        for p in ['opsworks:TagResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unassign_instance(self, *args, **kwargs):
        __protego_used['opsworks']['unassign_instance']=['opsworks:UnassignInstance']
        for p in ['opsworks:UnassignInstance']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UnassignInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unassign_volume(self, *args, **kwargs):
        __protego_used['opsworks']['unassign_volume']=['opsworks:UnassignVolume']
        for p in ['opsworks:UnassignVolume']:
            res = {}
            for nm in ["VolumeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UnassignVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['opsworks']['untag_resource']=['opsworks:UntagResource']
        for p in ['opsworks:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_app(self, *args, **kwargs):
        __protego_used['opsworks']['update_app']=['opsworks:UpdateApp']
        for p in ['opsworks:UpdateApp']:
            res = {}
            for nm in ["AppId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UpdateApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_elastic_ip(self, *args, **kwargs):
        __protego_used['opsworks']['update_elastic_ip']=['opsworks:UpdateElasticIp']
        for p in ['opsworks:UpdateElasticIp']:
            res = {}
            for nm in ["ElasticIp"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UpdateElasticIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_instance(self, *args, **kwargs):
        __protego_used['opsworks']['update_instance']=['opsworks:UpdateInstance']
        for p in ['opsworks:UpdateInstance']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UpdateInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_layer(self, *args, **kwargs):
        __protego_used['opsworks']['update_layer']=['opsworks:UpdateLayer']
        for p in ['opsworks:UpdateLayer']:
            res = {}
            for nm in ["LayerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UpdateLayer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_my_user_profile(self, *args, **kwargs):
        __protego_used['opsworks']['update_my_user_profile']=['opsworks:UpdateMyUserProfile']
        for p in ['opsworks:UpdateMyUserProfile']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UpdateMyUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rds_db_instance(self, *args, **kwargs):
        __protego_used['opsworks']['update_rds_db_instance']=['opsworks:UpdateRdsDbInstance']
        for p in ['opsworks:UpdateRdsDbInstance']:
            res = {}
            for nm in ["RdsDbInstanceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UpdateRdsDbInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_stack(self, *args, **kwargs):
        __protego_used['opsworks']['update_stack']=['opsworks:UpdateStack']
        for p in ['opsworks:UpdateStack']:
            res = {}
            for nm in ["StackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UpdateStack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_profile(self, *args, **kwargs):
        __protego_used['opsworks']['update_user_profile']=['opsworks:UpdateUserProfile']
        for p in ['opsworks:UpdateUserProfile']:
            res = {}
            for nm in ["IamUserArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UpdateUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_volume(self, *args, **kwargs):
        __protego_used['opsworks']['update_volume']=['opsworks:UpdateVolume']
        for p in ['opsworks:UpdateVolume']:
            res = {}
            for nm in ["VolumeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworks'].append({'action': "UpdateVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class opsworkscm:
    def __init__(self, region_name=__default_region):
        __protego_used['opsworkscm']= __protego_used.get('opsworkscm', {})
        __protego_resource_map['opsworkscm']=__protego_resource_map.get('opsworkscm', [])
        self.region = region_name
    def associate_node(self, *args, **kwargs):
        __protego_used['opsworkscm']['associate_node']=['opsworks-cm:AssociateNode']
        for p in ['opsworks-cm:AssociateNode']:
            res = {}
            for nm in ["NodeName","ServerName","EngineAttributes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "AssociateNode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_backup(self, *args, **kwargs):
        __protego_used['opsworkscm']['create_backup']=['opsworks-cm:CreateBackup']
        for p in ['opsworks-cm:CreateBackup']:
            res = {}
            for nm in ["ServerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "CreateBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_server(self, *args, **kwargs):
        __protego_used['opsworkscm']['create_server']=['opsworks-cm:CreateServer']
        for p in ['opsworks-cm:CreateServer']:
            res = {}
            for nm in ["ServiceRoleArn","ServerName","InstanceType","InstanceProfileArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "CreateServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_backup(self, *args, **kwargs):
        __protego_used['opsworkscm']['delete_backup']=['opsworks-cm:DeleteBackup']
        for p in ['opsworks-cm:DeleteBackup']:
            res = {}
            for nm in ["BackupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "DeleteBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_server(self, *args, **kwargs):
        __protego_used['opsworkscm']['delete_server']=['opsworks-cm:DeleteServer']
        for p in ['opsworks-cm:DeleteServer']:
            res = {}
            for nm in ["ServerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "DeleteServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_attributes(self, *args, **kwargs):
        __protego_used['opsworkscm']['describe_account_attributes']=['opsworks-cm:DescribeAccountAttributes']
        for p in ['opsworks-cm:DescribeAccountAttributes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "DescribeAccountAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_backups(self, *args, **kwargs):
        __protego_used['opsworkscm']['describe_backups']=['opsworks-cm:DescribeBackups']
        for p in ['opsworks-cm:DescribeBackups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "DescribeBackups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_events(self, *args, **kwargs):
        __protego_used['opsworkscm']['describe_events']=['opsworks-cm:DescribeEvents']
        for p in ['opsworks-cm:DescribeEvents']:
            res = {}
            for nm in ["ServerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "DescribeEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_node_association_status(self, *args, **kwargs):
        __protego_used['opsworkscm']['describe_node_association_status']=['opsworks-cm:DescribeNodeAssociationStatus']
        for p in ['opsworks-cm:DescribeNodeAssociationStatus']:
            res = {}
            for nm in ["ServerName","NodeAssociationStatusToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "DescribeNodeAssociationStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_servers(self, *args, **kwargs):
        __protego_used['opsworkscm']['describe_servers']=['opsworks-cm:DescribeServers']
        for p in ['opsworks-cm:DescribeServers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "DescribeServers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_node(self, *args, **kwargs):
        __protego_used['opsworkscm']['disassociate_node']=['opsworks-cm:DisassociateNode']
        for p in ['opsworks-cm:DisassociateNode']:
            res = {}
            for nm in ["NodeName","ServerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "DisassociateNode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_server_engine_attribute(self, *args, **kwargs):
        __protego_used['opsworkscm']['export_server_engine_attribute']=['opsworkscm:*']
        for p in ['opsworkscm:*']:
            res = {}
            for nm in ["ExportAttributeName","ServerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "ExportServerEngineAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['opsworkscm']['list_tags_for_resource']=['opsworkscm:*']
        for p in ['opsworkscm:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_server(self, *args, **kwargs):
        __protego_used['opsworkscm']['restore_server']=['opsworks-cm:RestoreServer']
        for p in ['opsworks-cm:RestoreServer']:
            res = {}
            for nm in ["ServerName","BackupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "RestoreServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_maintenance(self, *args, **kwargs):
        __protego_used['opsworkscm']['start_maintenance']=['opsworks-cm:StartMaintenance']
        for p in ['opsworks-cm:StartMaintenance']:
            res = {}
            for nm in ["ServerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "StartMaintenance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['opsworkscm']['tag_resource']=['opsworkscm:*']
        for p in ['opsworkscm:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['opsworkscm']['untag_resource']=['opsworkscm:*']
        for p in ['opsworkscm:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_server(self, *args, **kwargs):
        __protego_used['opsworkscm']['update_server']=['opsworks-cm:UpdateServer']
        for p in ['opsworks-cm:UpdateServer']:
            res = {}
            for nm in ["ServerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "UpdateServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_server_engine_attributes(self, *args, **kwargs):
        __protego_used['opsworkscm']['update_server_engine_attributes']=['opsworks-cm:UpdateServerEngineAttributes']
        for p in ['opsworks-cm:UpdateServerEngineAttributes']:
            res = {}
            for nm in ["AttributeName","ServerName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['opsworkscm'].append({'action': "UpdateServerEngineAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class organizations:
    def __init__(self, region_name=__default_region):
        __protego_used['organizations']= __protego_used.get('organizations', {})
        __protego_resource_map['organizations']=__protego_resource_map.get('organizations', [])
        self.region = region_name
    def accept_handshake(self, *args, **kwargs):
        __protego_used['organizations']['accept_handshake']=['organizations:AcceptHandshake']
        for p in ['organizations:AcceptHandshake']:
            res = {}
            for nm in ["HandshakeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "AcceptHandshake", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_policy(self, *args, **kwargs):
        __protego_used['organizations']['attach_policy']=['organizations:AttachPolicy','organizations:AttachPolicy','organizations:AttachPolicy','organizations:AttachPolicy']
        for p in ['organizations:AttachPolicy','organizations:AttachPolicy','organizations:AttachPolicy','organizations:AttachPolicy']:
            res = {}
            for nm in ["TargetId","PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "AttachPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_handshake(self, *args, **kwargs):
        __protego_used['organizations']['cancel_handshake']=['organizations:CancelHandshake']
        for p in ['organizations:CancelHandshake']:
            res = {}
            for nm in ["HandshakeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "CancelHandshake", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_account(self, *args, **kwargs):
        __protego_used['organizations']['create_account']=['organizations:CreateAccount']
        for p in ['organizations:CreateAccount']:
            res = {}
            for nm in ["AccountName","Email"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "CreateAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_gov_cloud_account(self, *args, **kwargs):
        __protego_used['organizations']['create_gov_cloud_account']=['organizations:CreateGovCloudAccount']
        for p in ['organizations:CreateGovCloudAccount']:
            res = {}
            for nm in ["AccountName","Email"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "CreateGovCloudAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_organization(self, *args, **kwargs):
        __protego_used['organizations']['create_organization']=['organizations:CreateOrganization']
        for p in ['organizations:CreateOrganization']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "CreateOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_organizational_unit(self, *args, **kwargs):
        __protego_used['organizations']['create_organizational_unit']=['organizations:CreateOrganizationalUnit','organizations:CreateOrganizationalUnit']
        for p in ['organizations:CreateOrganizationalUnit','organizations:CreateOrganizationalUnit']:
            res = {}
            for nm in ["ParentId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "CreateOrganizationalUnit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_policy(self, *args, **kwargs):
        __protego_used['organizations']['create_policy']=['organizations:CreatePolicy']
        for p in ['organizations:CreatePolicy']:
            res = {}
            for nm in ["Content","Description","Type","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "CreatePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def decline_handshake(self, *args, **kwargs):
        __protego_used['organizations']['decline_handshake']=['organizations:DeclineHandshake']
        for p in ['organizations:DeclineHandshake']:
            res = {}
            for nm in ["HandshakeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DeclineHandshake", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_organization(self, *args, **kwargs):
        __protego_used['organizations']['delete_organization']=['organizations:DeleteOrganization']
        for p in ['organizations:DeleteOrganization']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DeleteOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_organizational_unit(self, *args, **kwargs):
        __protego_used['organizations']['delete_organizational_unit']=['organizations:DeleteOrganizationalUnit']
        for p in ['organizations:DeleteOrganizationalUnit']:
            res = {}
            for nm in ["OrganizationalUnitId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DeleteOrganizationalUnit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_policy(self, *args, **kwargs):
        __protego_used['organizations']['delete_policy']=['organizations:DeletePolicy']
        for p in ['organizations:DeletePolicy']:
            res = {}
            for nm in ["PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DeletePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account(self, *args, **kwargs):
        __protego_used['organizations']['describe_account']=['organizations:DescribeAccount']
        for p in ['organizations:DescribeAccount']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DescribeAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_create_account_status(self, *args, **kwargs):
        __protego_used['organizations']['describe_create_account_status']=['organizations:DescribeCreateAccountStatus']
        for p in ['organizations:DescribeCreateAccountStatus']:
            res = {}
            for nm in ["CreateAccountRequestId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DescribeCreateAccountStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_effective_policy(self, *args, **kwargs):
        __protego_used['organizations']['describe_effective_policy']=['organizations:*']
        for p in ['organizations:*']:
            res = {}
            for nm in ["PolicyType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DescribeEffectivePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_handshake(self, *args, **kwargs):
        __protego_used['organizations']['describe_handshake']=['organizations:DescribeHandshake']
        for p in ['organizations:DescribeHandshake']:
            res = {}
            for nm in ["HandshakeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DescribeHandshake", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_organization(self, *args, **kwargs):
        __protego_used['organizations']['describe_organization']=['organizations:DescribeOrganization']
        for p in ['organizations:DescribeOrganization']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DescribeOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_organizational_unit(self, *args, **kwargs):
        __protego_used['organizations']['describe_organizational_unit']=['organizations:DescribeOrganizationalUnit']
        for p in ['organizations:DescribeOrganizationalUnit']:
            res = {}
            for nm in ["OrganizationalUnitId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DescribeOrganizationalUnit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_policy(self, *args, **kwargs):
        __protego_used['organizations']['describe_policy']=['organizations:DescribePolicy']
        for p in ['organizations:DescribePolicy']:
            res = {}
            for nm in ["PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DescribePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_policy(self, *args, **kwargs):
        __protego_used['organizations']['detach_policy']=['organizations:DetachPolicy','organizations:DetachPolicy','organizations:DetachPolicy','organizations:DetachPolicy']
        for p in ['organizations:DetachPolicy','organizations:DetachPolicy','organizations:DetachPolicy','organizations:DetachPolicy']:
            res = {}
            for nm in ["TargetId","PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DetachPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_aws_service_access(self, *args, **kwargs):
        __protego_used['organizations']['disable_aws_service_access']=['organizations:DisableAWSServiceAccess']
        for p in ['organizations:DisableAWSServiceAccess']:
            res = {}
            for nm in ["ServicePrincipal"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DisableAWSServiceAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_policy_type(self, *args, **kwargs):
        __protego_used['organizations']['disable_policy_type']=['organizations:DisablePolicyType']
        for p in ['organizations:DisablePolicyType']:
            res = {}
            for nm in ["RootId","PolicyType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "DisablePolicyType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_aws_service_access(self, *args, **kwargs):
        __protego_used['organizations']['enable_aws_service_access']=['organizations:EnableAWSServiceAccess']
        for p in ['organizations:EnableAWSServiceAccess']:
            res = {}
            for nm in ["ServicePrincipal"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "EnableAWSServiceAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_all_features(self, *args, **kwargs):
        __protego_used['organizations']['enable_all_features']=['organizations:EnableAllFeatures']
        for p in ['organizations:EnableAllFeatures']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "EnableAllFeatures", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_policy_type(self, *args, **kwargs):
        __protego_used['organizations']['enable_policy_type']=['organizations:EnablePolicyType']
        for p in ['organizations:EnablePolicyType']:
            res = {}
            for nm in ["RootId","PolicyType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "EnablePolicyType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def invite_account_to_organization(self, *args, **kwargs):
        __protego_used['organizations']['invite_account_to_organization']=['organizations:InviteAccountToOrganization']
        for p in ['organizations:InviteAccountToOrganization']:
            res = {}
            for nm in ["Target"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "InviteAccountToOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def leave_organization(self, *args, **kwargs):
        __protego_used['organizations']['leave_organization']=['organizations:LeaveOrganization']
        for p in ['organizations:LeaveOrganization']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "LeaveOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_aws_service_access_for_organization(self, *args, **kwargs):
        __protego_used['organizations']['list_aws_service_access_for_organization']=['organizations:ListAWSServiceAccessForOrganization']
        for p in ['organizations:ListAWSServiceAccessForOrganization']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListAWSServiceAccessForOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_accounts(self, *args, **kwargs):
        __protego_used['organizations']['list_accounts']=['organizations:ListAccounts']
        for p in ['organizations:ListAccounts']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListAccounts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_accounts_for_parent(self, *args, **kwargs):
        __protego_used['organizations']['list_accounts_for_parent']=['organizations:ListAccountsForParent','organizations:ListAccountsForParent']
        for p in ['organizations:ListAccountsForParent','organizations:ListAccountsForParent']:
            res = {}
            for nm in ["ParentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListAccountsForParent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_children(self, *args, **kwargs):
        __protego_used['organizations']['list_children']=['organizations:ListChildren','organizations:ListChildren']
        for p in ['organizations:ListChildren','organizations:ListChildren']:
            res = {}
            for nm in ["ParentId","ChildType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListChildren", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_create_account_status(self, *args, **kwargs):
        __protego_used['organizations']['list_create_account_status']=['organizations:ListCreateAccountStatus']
        for p in ['organizations:ListCreateAccountStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListCreateAccountStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_handshakes_for_account(self, *args, **kwargs):
        __protego_used['organizations']['list_handshakes_for_account']=['organizations:ListHandshakesForAccount']
        for p in ['organizations:ListHandshakesForAccount']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListHandshakesForAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_handshakes_for_organization(self, *args, **kwargs):
        __protego_used['organizations']['list_handshakes_for_organization']=['organizations:ListHandshakesForOrganization']
        for p in ['organizations:ListHandshakesForOrganization']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListHandshakesForOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_organizational_units_for_parent(self, *args, **kwargs):
        __protego_used['organizations']['list_organizational_units_for_parent']=['organizations:ListOrganizationalUnitsForParent','organizations:ListOrganizationalUnitsForParent']
        for p in ['organizations:ListOrganizationalUnitsForParent','organizations:ListOrganizationalUnitsForParent']:
            res = {}
            for nm in ["ParentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListOrganizationalUnitsForParent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_parents(self, *args, **kwargs):
        __protego_used['organizations']['list_parents']=['organizations:ListParents','organizations:ListParents']
        for p in ['organizations:ListParents','organizations:ListParents']:
            res = {}
            for nm in ["ChildId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListParents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_policies(self, *args, **kwargs):
        __protego_used['organizations']['list_policies']=['organizations:ListPolicies']
        for p in ['organizations:ListPolicies']:
            res = {}
            for nm in ["Filter"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_policies_for_target(self, *args, **kwargs):
        __protego_used['organizations']['list_policies_for_target']=['organizations:ListPoliciesForTarget','organizations:ListPoliciesForTarget','organizations:ListPoliciesForTarget']
        for p in ['organizations:ListPoliciesForTarget','organizations:ListPoliciesForTarget','organizations:ListPoliciesForTarget']:
            res = {}
            for nm in ["TargetId","Filter"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListPoliciesForTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_roots(self, *args, **kwargs):
        __protego_used['organizations']['list_roots']=['organizations:ListRoots']
        for p in ['organizations:ListRoots']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListRoots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['organizations']['list_tags_for_resource']=['organizations:*']
        for p in ['organizations:*']:
            res = {}
            for nm in ["ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_targets_for_policy(self, *args, **kwargs):
        __protego_used['organizations']['list_targets_for_policy']=['organizations:ListTargetsForPolicy']
        for p in ['organizations:ListTargetsForPolicy']:
            res = {}
            for nm in ["PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "ListTargetsForPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def move_account(self, *args, **kwargs):
        __protego_used['organizations']['move_account']=['organizations:MoveAccount','organizations:MoveAccount','organizations:MoveAccount']
        for p in ['organizations:MoveAccount','organizations:MoveAccount','organizations:MoveAccount']:
            res = {}
            for nm in ["AccountId","DestinationParentId","SourceParentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "MoveAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_account_from_organization(self, *args, **kwargs):
        __protego_used['organizations']['remove_account_from_organization']=['organizations:RemoveAccountFromOrganization']
        for p in ['organizations:RemoveAccountFromOrganization']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "RemoveAccountFromOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['organizations']['tag_resource']=['organizations:*']
        for p in ['organizations:*']:
            res = {}
            for nm in ["ResourceId","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['organizations']['untag_resource']=['organizations:*']
        for p in ['organizations:*']:
            res = {}
            for nm in ["ResourceId","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_organizational_unit(self, *args, **kwargs):
        __protego_used['organizations']['update_organizational_unit']=['organizations:UpdateOrganizationalUnit']
        for p in ['organizations:UpdateOrganizationalUnit']:
            res = {}
            for nm in ["OrganizationalUnitId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "UpdateOrganizationalUnit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_policy(self, *args, **kwargs):
        __protego_used['organizations']['update_policy']=['organizations:UpdatePolicy']
        for p in ['organizations:UpdatePolicy']:
            res = {}
            for nm in ["PolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['organizations'].append({'action': "UpdatePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class outposts:
    def __init__(self, region_name=__default_region):
        __protego_used['outposts']= __protego_used.get('outposts', {})
        __protego_resource_map['outposts']=__protego_resource_map.get('outposts', [])
        self.region = region_name
    def create_outpost(self, *args, **kwargs):
        __protego_used['outposts']['create_outpost']=['outposts:*']
        for p in ['outposts:*']:
            res = {}
            for nm in ["SiteId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['outposts'].append({'action': "CreateOutpost", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_outpost(self, *args, **kwargs):
        __protego_used['outposts']['get_outpost']=['outposts:*']
        for p in ['outposts:*']:
            res = {}
            for nm in ["OutpostId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['outposts'].append({'action': "GetOutpost", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_outpost_instance_types(self, *args, **kwargs):
        __protego_used['outposts']['get_outpost_instance_types']=['outposts:*']
        for p in ['outposts:*']:
            res = {}
            for nm in ["OutpostId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['outposts'].append({'action': "GetOutpostInstanceTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_outposts(self, *args, **kwargs):
        __protego_used['outposts']['list_outposts']=['outposts:*']
        for p in ['outposts:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['outposts'].append({'action': "ListOutposts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_sites(self, *args, **kwargs):
        __protego_used['outposts']['list_sites']=['outposts:*']
        for p in ['outposts:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['outposts'].append({'action': "ListSites", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class personalize:
    def __init__(self, region_name=__default_region):
        __protego_used['personalize']= __protego_used.get('personalize', {})
        __protego_resource_map['personalize']=__protego_resource_map.get('personalize', [])
        self.region = region_name
    def create_batch_inference_job(self, *args, **kwargs):
        __protego_used['personalize']['create_batch_inference_job']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["solutionVersionArn","jobOutput","roleArn","jobInput","jobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "CreateBatchInferenceJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_campaign(self, *args, **kwargs):
        __protego_used['personalize']['create_campaign']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["solutionVersionArn","name","minProvisionedTPS"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "CreateCampaign", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dataset(self, *args, **kwargs):
        __protego_used['personalize']['create_dataset']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["datasetGroupArn","name","schemaArn","datasetType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "CreateDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dataset_group(self, *args, **kwargs):
        __protego_used['personalize']['create_dataset_group']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "CreateDatasetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dataset_import_job(self, *args, **kwargs):
        __protego_used['personalize']['create_dataset_import_job']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["datasetArn","jobName","roleArn","dataSource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "CreateDatasetImportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_event_tracker(self, *args, **kwargs):
        __protego_used['personalize']['create_event_tracker']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["datasetGroupArn","name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "CreateEventTracker", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_schema(self, *args, **kwargs):
        __protego_used['personalize']['create_schema']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["name","schema"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "CreateSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_solution(self, *args, **kwargs):
        __protego_used['personalize']['create_solution']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["datasetGroupArn","name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "CreateSolution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_solution_version(self, *args, **kwargs):
        __protego_used['personalize']['create_solution_version']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["solutionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "CreateSolutionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_campaign(self, *args, **kwargs):
        __protego_used['personalize']['delete_campaign']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["campaignArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DeleteCampaign", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dataset(self, *args, **kwargs):
        __protego_used['personalize']['delete_dataset']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["datasetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DeleteDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dataset_group(self, *args, **kwargs):
        __protego_used['personalize']['delete_dataset_group']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["datasetGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DeleteDatasetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_event_tracker(self, *args, **kwargs):
        __protego_used['personalize']['delete_event_tracker']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["eventTrackerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DeleteEventTracker", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_schema(self, *args, **kwargs):
        __protego_used['personalize']['delete_schema']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["schemaArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DeleteSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_solution(self, *args, **kwargs):
        __protego_used['personalize']['delete_solution']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["solutionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DeleteSolution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_algorithm(self, *args, **kwargs):
        __protego_used['personalize']['describe_algorithm']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["algorithmArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeAlgorithm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_batch_inference_job(self, *args, **kwargs):
        __protego_used['personalize']['describe_batch_inference_job']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["batchInferenceJobArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeBatchInferenceJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_campaign(self, *args, **kwargs):
        __protego_used['personalize']['describe_campaign']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["campaignArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeCampaign", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dataset(self, *args, **kwargs):
        __protego_used['personalize']['describe_dataset']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["datasetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeDataset", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dataset_group(self, *args, **kwargs):
        __protego_used['personalize']['describe_dataset_group']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["datasetGroupArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeDatasetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dataset_import_job(self, *args, **kwargs):
        __protego_used['personalize']['describe_dataset_import_job']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["datasetImportJobArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeDatasetImportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_tracker(self, *args, **kwargs):
        __protego_used['personalize']['describe_event_tracker']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["eventTrackerArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeEventTracker", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_feature_transformation(self, *args, **kwargs):
        __protego_used['personalize']['describe_feature_transformation']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["featureTransformationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeFeatureTransformation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_recipe(self, *args, **kwargs):
        __protego_used['personalize']['describe_recipe']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["recipeArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeRecipe", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_schema(self, *args, **kwargs):
        __protego_used['personalize']['describe_schema']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["schemaArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_solution(self, *args, **kwargs):
        __protego_used['personalize']['describe_solution']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["solutionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeSolution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_solution_version(self, *args, **kwargs):
        __protego_used['personalize']['describe_solution_version']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["solutionVersionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "DescribeSolutionVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_solution_metrics(self, *args, **kwargs):
        __protego_used['personalize']['get_solution_metrics']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["solutionVersionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "GetSolutionMetrics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_batch_inference_jobs(self, *args, **kwargs):
        __protego_used['personalize']['list_batch_inference_jobs']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "ListBatchInferenceJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_campaigns(self, *args, **kwargs):
        __protego_used['personalize']['list_campaigns']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "ListCampaigns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dataset_groups(self, *args, **kwargs):
        __protego_used['personalize']['list_dataset_groups']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "ListDatasetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dataset_import_jobs(self, *args, **kwargs):
        __protego_used['personalize']['list_dataset_import_jobs']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "ListDatasetImportJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_datasets(self, *args, **kwargs):
        __protego_used['personalize']['list_datasets']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "ListDatasets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_event_trackers(self, *args, **kwargs):
        __protego_used['personalize']['list_event_trackers']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "ListEventTrackers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_recipes(self, *args, **kwargs):
        __protego_used['personalize']['list_recipes']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "ListRecipes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_schemas(self, *args, **kwargs):
        __protego_used['personalize']['list_schemas']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "ListSchemas", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_solution_versions(self, *args, **kwargs):
        __protego_used['personalize']['list_solution_versions']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "ListSolutionVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_solutions(self, *args, **kwargs):
        __protego_used['personalize']['list_solutions']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "ListSolutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_campaign(self, *args, **kwargs):
        __protego_used['personalize']['update_campaign']=['personalize:*']
        for p in ['personalize:*']:
            res = {}
            for nm in ["campaignArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize'].append({'action': "UpdateCampaign", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class personalize_events:
    def __init__(self, region_name=__default_region):
        __protego_used['personalize-events']= __protego_used.get('personalize-events', {})
        __protego_resource_map['personalize-events']=__protego_resource_map.get('personalize-events', [])
        self.region = region_name
    def put_events(self, *args, **kwargs):
        __protego_used['personalize-events']['put_events']=['personalize-events:*']
        for p in ['personalize-events:*']:
            res = {}
            for nm in ["sessionId","eventList","trackingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize-events'].append({'action': "PutEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class personalize_runtime:
    def __init__(self, region_name=__default_region):
        __protego_used['personalize-runtime']= __protego_used.get('personalize-runtime', {})
        __protego_resource_map['personalize-runtime']=__protego_resource_map.get('personalize-runtime', [])
        self.region = region_name
    def get_personalized_ranking(self, *args, **kwargs):
        __protego_used['personalize-runtime']['get_personalized_ranking']=['personalize-runtime:*']
        for p in ['personalize-runtime:*']:
            res = {}
            for nm in ["userId","inputList","campaignArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize-runtime'].append({'action': "GetPersonalizedRanking", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_recommendations(self, *args, **kwargs):
        __protego_used['personalize-runtime']['get_recommendations']=['personalize-runtime:*']
        for p in ['personalize-runtime:*']:
            res = {}
            for nm in ["campaignArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['personalize-runtime'].append({'action': "GetRecommendations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class pi:
    def __init__(self, region_name=__default_region):
        __protego_used['pi']= __protego_used.get('pi', {})
        __protego_resource_map['pi']=__protego_resource_map.get('pi', [])
        self.region = region_name
    def describe_dimension_keys(self, *args, **kwargs):
        __protego_used['pi']['describe_dimension_keys']=['pi:*']
        for p in ['pi:*']:
            res = {}
            for nm in ["EndTime","Identifier","StartTime","ServiceType","GroupBy","Metric"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pi'].append({'action': "DescribeDimensionKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource_metrics(self, *args, **kwargs):
        __protego_used['pi']['get_resource_metrics']=['pi:*']
        for p in ['pi:*']:
            res = {}
            for nm in ["EndTime","Identifier","MetricQueries","StartTime","ServiceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pi'].append({'action': "GetResourceMetrics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class pinpoint:
    def __init__(self, region_name=__default_region):
        __protego_used['pinpoint']= __protego_used.get('pinpoint', {})
        __protego_resource_map['pinpoint']=__protego_resource_map.get('pinpoint', [])
        self.region = region_name
    def create_app(self, *args, **kwargs):
        __protego_used['pinpoint']['create_app']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["CreateApplicationRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "CreateApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_campaign(self, *args, **kwargs):
        __protego_used['pinpoint']['create_campaign']=['mobiletargeting:CreateCampaign']
        for p in ['mobiletargeting:CreateCampaign']:
            res = {}
            for nm in ["ApplicationId","WriteCampaignRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "CreateCampaign", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_email_template(self, *args, **kwargs):
        __protego_used['pinpoint']['create_email_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["EmailTemplateRequest","TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "CreateEmailTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_export_job(self, *args, **kwargs):
        __protego_used['pinpoint']['create_export_job']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId","ExportJobRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "CreateExportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_import_job(self, *args, **kwargs):
        __protego_used['pinpoint']['create_import_job']=['mobiletargeting:CreateImportJob']
        for p in ['mobiletargeting:CreateImportJob']:
            res = {}
            for nm in ["ApplicationId","ImportJobRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "CreateImportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_journey(self, *args, **kwargs):
        __protego_used['pinpoint']['create_journey']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["ApplicationId","WriteJourneyRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "CreateJourney", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_push_template(self, *args, **kwargs):
        __protego_used['pinpoint']['create_push_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["PushNotificationTemplateRequest","TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "CreatePushTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_segment(self, *args, **kwargs):
        __protego_used['pinpoint']['create_segment']=['mobiletargeting:CreateSegment']
        for p in ['mobiletargeting:CreateSegment']:
            res = {}
            for nm in ["ApplicationId","WriteSegmentRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "CreateSegment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_sms_template(self, *args, **kwargs):
        __protego_used['pinpoint']['create_sms_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName","SMSTemplateRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "CreateSmsTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_voice_template(self, *args, **kwargs):
        __protego_used['pinpoint']['create_voice_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName","VoiceTemplateRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "CreateVoiceTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_adm_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_adm_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteAdmChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_apns_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_apns_channel']=['mobiletargeting:DeleteApnsChannel']
        for p in ['mobiletargeting:DeleteApnsChannel']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteApnsChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_apns_sandbox_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_apns_sandbox_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteApnsSandboxChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_apns_voip_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_apns_voip_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteApnsVoipChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_apns_voip_sandbox_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_apns_voip_sandbox_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteApnsVoipSandboxChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_app(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_app']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_baidu_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_baidu_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteBaiduChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_campaign(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_campaign']=['mobiletargeting:DeleteCampaign','mobiletargeting:DeleteCampaign']
        for p in ['mobiletargeting:DeleteCampaign','mobiletargeting:DeleteCampaign']:
            res = {}
            for nm in ["ApplicationId","CampaignId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteCampaign", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_email_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_email_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteEmailChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_email_template(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_email_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteEmailTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_endpoint(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_endpoint']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["EndpointId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_event_stream(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_event_stream']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteEventStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_gcm_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_gcm_channel']=['mobiletargeting:DeleteGcmChannel']
        for p in ['mobiletargeting:DeleteGcmChannel']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteGcmChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_journey(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_journey']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["JourneyId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteJourney", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_push_template(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_push_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeletePushTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_segment(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_segment']=['mobiletargeting:DeleteSegment','mobiletargeting:DeleteSegment']
        for p in ['mobiletargeting:DeleteSegment','mobiletargeting:DeleteSegment']:
            res = {}
            for nm in ["SegmentId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteSegment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_sms_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_sms_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteSmsChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_sms_template(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_sms_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteSmsTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_endpoints(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_user_endpoints']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["UserId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteUserEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_voice_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_voice_channel']=['mobiletargeting:DeleteVoiceChannel']
        for p in ['mobiletargeting:DeleteVoiceChannel']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteVoiceChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_voice_template(self, *args, **kwargs):
        __protego_used['pinpoint']['delete_voice_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "DeleteVoiceTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_adm_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['get_adm_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetAdmChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_apns_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['get_apns_channel']=['mobiletargeting:GetApnsChannel']
        for p in ['mobiletargeting:GetApnsChannel']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetApnsChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_apns_sandbox_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['get_apns_sandbox_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetApnsSandboxChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_apns_voip_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['get_apns_voip_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetApnsVoipChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_apns_voip_sandbox_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['get_apns_voip_sandbox_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetApnsVoipSandboxChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_app(self, *args, **kwargs):
        __protego_used['pinpoint']['get_app']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_application_date_range_kpi(self, *args, **kwargs):
        __protego_used['pinpoint']['get_application_date_range_kpi']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["KpiName","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetApplicationDateRangeKpi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_application_settings(self, *args, **kwargs):
        __protego_used['pinpoint']['get_application_settings']=['mobiletargeting:GetApplicationSettings']
        for p in ['mobiletargeting:GetApplicationSettings']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetApplicationSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_apps(self, *args, **kwargs):
        __protego_used['pinpoint']['get_apps']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetApps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_baidu_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['get_baidu_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetBaiduChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_campaign(self, *args, **kwargs):
        __protego_used['pinpoint']['get_campaign']=['mobiletargeting:GetCampaign','mobiletargeting:GetCampaign']
        for p in ['mobiletargeting:GetCampaign','mobiletargeting:GetCampaign']:
            res = {}
            for nm in ["ApplicationId","CampaignId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetCampaign", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_campaign_activities(self, *args, **kwargs):
        __protego_used['pinpoint']['get_campaign_activities']=['mobiletargeting:GetCampaignActivities','mobiletargeting:GetCampaignActivities']
        for p in ['mobiletargeting:GetCampaignActivities','mobiletargeting:GetCampaignActivities']:
            res = {}
            for nm in ["ApplicationId","CampaignId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetCampaignActivities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_campaign_date_range_kpi(self, *args, **kwargs):
        __protego_used['pinpoint']['get_campaign_date_range_kpi']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["KpiName","ApplicationId","CampaignId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetCampaignDateRangeKpi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_campaign_version(self, *args, **kwargs):
        __protego_used['pinpoint']['get_campaign_version']=['mobiletargeting:GetCampaignVersion','mobiletargeting:GetCampaignVersion']
        for p in ['mobiletargeting:GetCampaignVersion','mobiletargeting:GetCampaignVersion']:
            res = {}
            for nm in ["Version","CampaignId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetCampaignVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_campaign_versions(self, *args, **kwargs):
        __protego_used['pinpoint']['get_campaign_versions']=['mobiletargeting:GetCampaignVersions','mobiletargeting:GetCampaignVersions']
        for p in ['mobiletargeting:GetCampaignVersions','mobiletargeting:GetCampaignVersions']:
            res = {}
            for nm in ["ApplicationId","CampaignId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetCampaignVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_campaigns(self, *args, **kwargs):
        __protego_used['pinpoint']['get_campaigns']=['mobiletargeting:GetCampaigns']
        for p in ['mobiletargeting:GetCampaigns']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetCampaigns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_channels(self, *args, **kwargs):
        __protego_used['pinpoint']['get_channels']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetChannels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_email_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['get_email_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetEmailChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_email_template(self, *args, **kwargs):
        __protego_used['pinpoint']['get_email_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetEmailTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_endpoint(self, *args, **kwargs):
        __protego_used['pinpoint']['get_endpoint']=['mobiletargeting:GetEndpoint']
        for p in ['mobiletargeting:GetEndpoint']:
            res = {}
            for nm in ["EndpointId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_event_stream(self, *args, **kwargs):
        __protego_used['pinpoint']['get_event_stream']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetEventStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_export_job(self, *args, **kwargs):
        __protego_used['pinpoint']['get_export_job']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["JobId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetExportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_export_jobs(self, *args, **kwargs):
        __protego_used['pinpoint']['get_export_jobs']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetExportJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_gcm_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['get_gcm_channel']=['mobiletargeting:GetGcmChannel']
        for p in ['mobiletargeting:GetGcmChannel']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetGcmChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_import_job(self, *args, **kwargs):
        __protego_used['pinpoint']['get_import_job']=['mobiletargeting:GetImportJob']
        for p in ['mobiletargeting:GetImportJob']:
            res = {}
            for nm in ["JobId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetImportJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_import_jobs(self, *args, **kwargs):
        __protego_used['pinpoint']['get_import_jobs']=['mobiletargeting:GetImportJobs']
        for p in ['mobiletargeting:GetImportJobs']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetImportJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_journey(self, *args, **kwargs):
        __protego_used['pinpoint']['get_journey']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["JourneyId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetJourney", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_journey_date_range_kpi(self, *args, **kwargs):
        __protego_used['pinpoint']['get_journey_date_range_kpi']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["KpiName","JourneyId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetJourneyDateRangeKpi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_journey_execution_activity_metrics(self, *args, **kwargs):
        __protego_used['pinpoint']['get_journey_execution_activity_metrics']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["JourneyId","ApplicationId","JourneyActivityId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetJourneyExecutionActivityMetrics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_journey_execution_metrics(self, *args, **kwargs):
        __protego_used['pinpoint']['get_journey_execution_metrics']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["JourneyId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetJourneyExecutionMetrics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_push_template(self, *args, **kwargs):
        __protego_used['pinpoint']['get_push_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetPushTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_segment(self, *args, **kwargs):
        __protego_used['pinpoint']['get_segment']=['mobiletargeting:GetSegment','mobiletargeting:GetSegment']
        for p in ['mobiletargeting:GetSegment','mobiletargeting:GetSegment']:
            res = {}
            for nm in ["SegmentId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetSegment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_segment_export_jobs(self, *args, **kwargs):
        __protego_used['pinpoint']['get_segment_export_jobs']=['mobiletargeting:*','mobiletargeting:*']
        for p in ['mobiletargeting:*','mobiletargeting:*']:
            res = {}
            for nm in ["SegmentId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetSegmentExportJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_segment_import_jobs(self, *args, **kwargs):
        __protego_used['pinpoint']['get_segment_import_jobs']=['mobiletargeting:GetSegmentImportJobs','mobiletargeting:GetSegmentImportJobs']
        for p in ['mobiletargeting:GetSegmentImportJobs','mobiletargeting:GetSegmentImportJobs']:
            res = {}
            for nm in ["SegmentId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetSegmentImportJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_segment_version(self, *args, **kwargs):
        __protego_used['pinpoint']['get_segment_version']=['mobiletargeting:GetSegmentVersion','mobiletargeting:GetSegmentVersion']
        for p in ['mobiletargeting:GetSegmentVersion','mobiletargeting:GetSegmentVersion']:
            res = {}
            for nm in ["Version","SegmentId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetSegmentVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_segment_versions(self, *args, **kwargs):
        __protego_used['pinpoint']['get_segment_versions']=['mobiletargeting:GetSegmentVersions','mobiletargeting:GetSegmentVersions']
        for p in ['mobiletargeting:GetSegmentVersions','mobiletargeting:GetSegmentVersions']:
            res = {}
            for nm in ["SegmentId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetSegmentVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_segments(self, *args, **kwargs):
        __protego_used['pinpoint']['get_segments']=['mobiletargeting:GetSegments']
        for p in ['mobiletargeting:GetSegments']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetSegments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sms_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['get_sms_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetSmsChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sms_template(self, *args, **kwargs):
        __protego_used['pinpoint']['get_sms_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetSmsTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_user_endpoints(self, *args, **kwargs):
        __protego_used['pinpoint']['get_user_endpoints']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["UserId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetUserEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_voice_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['get_voice_channel']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetVoiceChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_voice_template(self, *args, **kwargs):
        __protego_used['pinpoint']['get_voice_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "GetVoiceTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_journeys(self, *args, **kwargs):
        __protego_used['pinpoint']['list_journeys']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "ListJourneys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['pinpoint']['list_tags_for_resource']=['mobiletargeting:ListTagsForResource']
        for p in ['mobiletargeting:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_template_versions(self, *args, **kwargs):
        __protego_used['pinpoint']['list_template_versions']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName","TemplateType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "ListTemplateVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_templates(self, *args, **kwargs):
        __protego_used['pinpoint']['list_templates']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "ListTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def phone_number_validate(self, *args, **kwargs):
        __protego_used['pinpoint']['phone_number_validate']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["NumberValidateRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "PhoneNumberValidate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_event_stream(self, *args, **kwargs):
        __protego_used['pinpoint']['put_event_stream']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId","WriteEventStream"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "PutEventStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_events(self, *args, **kwargs):
        __protego_used['pinpoint']['put_events']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["EventsRequest","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "PutEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_attributes(self, *args, **kwargs):
        __protego_used['pinpoint']['remove_attributes']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId","UpdateAttributesRequest","AttributeType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "RemoveAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_messages(self, *args, **kwargs):
        __protego_used['pinpoint']['send_messages']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId","MessageRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "SendMessages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_users_messages(self, *args, **kwargs):
        __protego_used['pinpoint']['send_users_messages']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId","SendUsersMessageRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "SendUsersMessages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['pinpoint']['tag_resource']=['mobiletargeting:TagResource']
        for p in ['mobiletargeting:TagResource']:
            res = {}
            for nm in ["ResourceArn","TagsModel"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['pinpoint']['untag_resource']=['mobiletargeting:UntagResource']
        for p in ['mobiletargeting:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_adm_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['update_adm_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ADMChannelRequest","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateAdmChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_apns_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['update_apns_channel']=['mobiletargeting:UpdateApnsChannel']
        for p in ['mobiletargeting:UpdateApnsChannel']:
            res = {}
            for nm in ["ApplicationId","APNSChannelRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateApnsChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_apns_sandbox_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['update_apns_sandbox_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["APNSSandboxChannelRequest","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateApnsSandboxChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_apns_voip_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['update_apns_voip_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["APNSVoipChannelRequest","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateApnsVoipChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_apns_voip_sandbox_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['update_apns_voip_sandbox_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId","APNSVoipSandboxChannelRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateApnsVoipSandboxChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_application_settings(self, *args, **kwargs):
        __protego_used['pinpoint']['update_application_settings']=['mobiletargeting:UpdateApplicationSettings']
        for p in ['mobiletargeting:UpdateApplicationSettings']:
            res = {}
            for nm in ["ApplicationId","WriteApplicationSettingsRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateApplicationSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_baidu_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['update_baidu_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["ApplicationId","BaiduChannelRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateBaiduChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_campaign(self, *args, **kwargs):
        __protego_used['pinpoint']['update_campaign']=['mobiletargeting:UpdateCampaign','mobiletargeting:UpdateCampaign']
        for p in ['mobiletargeting:UpdateCampaign','mobiletargeting:UpdateCampaign']:
            res = {}
            for nm in ["ApplicationId","CampaignId","WriteCampaignRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateCampaign", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_email_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['update_email_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["EmailChannelRequest","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateEmailChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_email_template(self, *args, **kwargs):
        __protego_used['pinpoint']['update_email_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["EmailTemplateRequest","TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateEmailTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_endpoint(self, *args, **kwargs):
        __protego_used['pinpoint']['update_endpoint']=['mobiletargeting:UpdateEndpoint']
        for p in ['mobiletargeting:UpdateEndpoint']:
            res = {}
            for nm in ["EndpointId","ApplicationId","EndpointRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_endpoints_batch(self, *args, **kwargs):
        __protego_used['pinpoint']['update_endpoints_batch']=['mobiletargeting:UpdateEndpointsBatch']
        for p in ['mobiletargeting:UpdateEndpointsBatch']:
            res = {}
            for nm in ["ApplicationId","EndpointBatchRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateEndpointsBatch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_gcm_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['update_gcm_channel']=['mobiletargeting:UpdateGcmChannel']
        for p in ['mobiletargeting:UpdateGcmChannel']:
            res = {}
            for nm in ["ApplicationId","GCMChannelRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateGcmChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_journey(self, *args, **kwargs):
        __protego_used['pinpoint']['update_journey']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["JourneyId","ApplicationId","WriteJourneyRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateJourney", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_journey_state(self, *args, **kwargs):
        __protego_used['pinpoint']['update_journey_state']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["JourneyStateRequest","JourneyId","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateJourneyState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_push_template(self, *args, **kwargs):
        __protego_used['pinpoint']['update_push_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["PushNotificationTemplateRequest","TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdatePushTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_segment(self, *args, **kwargs):
        __protego_used['pinpoint']['update_segment']=['mobiletargeting:UpdateSegment','mobiletargeting:UpdateSegment']
        for p in ['mobiletargeting:UpdateSegment','mobiletargeting:UpdateSegment']:
            res = {}
            for nm in ["SegmentId","WriteSegmentRequest","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateSegment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_sms_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['update_sms_channel']=['mobiletargeting:*']
        for p in ['mobiletargeting:*']:
            res = {}
            for nm in ["SMSChannelRequest","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateSmsChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_sms_template(self, *args, **kwargs):
        __protego_used['pinpoint']['update_sms_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName","SMSTemplateRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateSmsTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_template_active_version(self, *args, **kwargs):
        __protego_used['pinpoint']['update_template_active_version']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName","TemplateType","TemplateActiveVersionRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateTemplateActiveVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_voice_channel(self, *args, **kwargs):
        __protego_used['pinpoint']['update_voice_channel']=['mobiletargeting:UpdateVoiceChannel']
        for p in ['mobiletargeting:UpdateVoiceChannel']:
            res = {}
            for nm in ["ApplicationId","VoiceChannelRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateVoiceChannel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_voice_template(self, *args, **kwargs):
        __protego_used['pinpoint']['update_voice_template']=['pinpoint:*']
        for p in ['pinpoint:*']:
            res = {}
            for nm in ["TemplateName","VoiceTemplateRequest"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint'].append({'action': "UpdateVoiceTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class pinpoint_email:
    def __init__(self, region_name=__default_region):
        __protego_used['pinpoint-email']= __protego_used.get('pinpoint-email', {})
        __protego_resource_map['pinpoint-email']=__protego_resource_map.get('pinpoint-email', [])
        self.region = region_name
    def create_configuration_set(self, *args, **kwargs):
        __protego_used['pinpoint-email']['create_configuration_set']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "CreateConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['pinpoint-email']['create_configuration_set_event_destination']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["EventDestinationName","EventDestination","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "CreateConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dedicated_ip_pool(self, *args, **kwargs):
        __protego_used['pinpoint-email']['create_dedicated_ip_pool']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["PoolName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "CreateDedicatedIpPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deliverability_test_report(self, *args, **kwargs):
        __protego_used['pinpoint-email']['create_deliverability_test_report']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["Content","FromEmailAddress"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "CreateDeliverabilityTestReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_email_identity(self, *args, **kwargs):
        __protego_used['pinpoint-email']['create_email_identity']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "CreateEmailIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_set(self, *args, **kwargs):
        __protego_used['pinpoint-email']['delete_configuration_set']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "DeleteConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['pinpoint-email']['delete_configuration_set_event_destination']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["EventDestinationName","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "DeleteConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dedicated_ip_pool(self, *args, **kwargs):
        __protego_used['pinpoint-email']['delete_dedicated_ip_pool']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["PoolName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "DeleteDedicatedIpPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_email_identity(self, *args, **kwargs):
        __protego_used['pinpoint-email']['delete_email_identity']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "DeleteEmailIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account(self, *args, **kwargs):
        __protego_used['pinpoint-email']['get_account']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "GetAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_blacklist_reports(self, *args, **kwargs):
        __protego_used['pinpoint-email']['get_blacklist_reports']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["BlacklistItemNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "GetBlacklistReports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_configuration_set(self, *args, **kwargs):
        __protego_used['pinpoint-email']['get_configuration_set']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "GetConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_configuration_set_event_destinations(self, *args, **kwargs):
        __protego_used['pinpoint-email']['get_configuration_set_event_destinations']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "GetConfigurationSetEventDestinations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dedicated_ip(self, *args, **kwargs):
        __protego_used['pinpoint-email']['get_dedicated_ip']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["Ip"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "GetDedicatedIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dedicated_ips(self, *args, **kwargs):
        __protego_used['pinpoint-email']['get_dedicated_ips']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "GetDedicatedIps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deliverability_dashboard_options(self, *args, **kwargs):
        __protego_used['pinpoint-email']['get_deliverability_dashboard_options']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "GetDeliverabilityDashboardOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deliverability_test_report(self, *args, **kwargs):
        __protego_used['pinpoint-email']['get_deliverability_test_report']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ReportId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "GetDeliverabilityTestReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain_deliverability_campaign(self, *args, **kwargs):
        __protego_used['pinpoint-email']['get_domain_deliverability_campaign']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["CampaignId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "GetDomainDeliverabilityCampaign", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain_statistics_report(self, *args, **kwargs):
        __protego_used['pinpoint-email']['get_domain_statistics_report']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["EndDate","StartDate","Domain"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "GetDomainStatisticsReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_email_identity(self, *args, **kwargs):
        __protego_used['pinpoint-email']['get_email_identity']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "GetEmailIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_configuration_sets(self, *args, **kwargs):
        __protego_used['pinpoint-email']['list_configuration_sets']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "ListConfigurationSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dedicated_ip_pools(self, *args, **kwargs):
        __protego_used['pinpoint-email']['list_dedicated_ip_pools']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "ListDedicatedIpPools", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_deliverability_test_reports(self, *args, **kwargs):
        __protego_used['pinpoint-email']['list_deliverability_test_reports']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "ListDeliverabilityTestReports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_domain_deliverability_campaigns(self, *args, **kwargs):
        __protego_used['pinpoint-email']['list_domain_deliverability_campaigns']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["EndDate","SubscribedDomain","StartDate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "ListDomainDeliverabilityCampaigns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_email_identities(self, *args, **kwargs):
        __protego_used['pinpoint-email']['list_email_identities']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "ListEmailIdentities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['pinpoint-email']['list_tags_for_resource']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_account_dedicated_ip_warmup_attributes(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_account_dedicated_ip_warmup_attributes']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutAccountDedicatedIpWarmupAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_account_sending_attributes(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_account_sending_attributes']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutAccountSendingAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_set_delivery_options(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_configuration_set_delivery_options']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutConfigurationSetDeliveryOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_set_reputation_options(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_configuration_set_reputation_options']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutConfigurationSetReputationOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_set_sending_options(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_configuration_set_sending_options']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutConfigurationSetSendingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_set_tracking_options(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_configuration_set_tracking_options']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutConfigurationSetTrackingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_dedicated_ip_in_pool(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_dedicated_ip_in_pool']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["Ip","DestinationPoolName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutDedicatedIpInPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_dedicated_ip_warmup_attributes(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_dedicated_ip_warmup_attributes']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["WarmupPercentage","Ip"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutDedicatedIpWarmupAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_deliverability_dashboard_option(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_deliverability_dashboard_option']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["DashboardEnabled"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutDeliverabilityDashboardOption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_email_identity_dkim_attributes(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_email_identity_dkim_attributes']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutEmailIdentityDkimAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_email_identity_feedback_attributes(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_email_identity_feedback_attributes']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutEmailIdentityFeedbackAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_email_identity_mail_from_attributes(self, *args, **kwargs):
        __protego_used['pinpoint-email']['put_email_identity_mail_from_attributes']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "PutEmailIdentityMailFromAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_email(self, *args, **kwargs):
        __protego_used['pinpoint-email']['send_email']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["Content","Destination"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "SendEmail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['pinpoint-email']['tag_resource']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['pinpoint-email']['untag_resource']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['pinpoint-email']['update_configuration_set_event_destination']=['pinpoint-email:*']
        for p in ['pinpoint-email:*']:
            res = {}
            for nm in ["EventDestinationName","EventDestination","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-email'].append({'action': "UpdateConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class pinpoint_sms_voice:
    def __init__(self, region_name=__default_region):
        __protego_used['pinpoint-sms-voice']= __protego_used.get('pinpoint-sms-voice', {})
        __protego_resource_map['pinpoint-sms-voice']=__protego_resource_map.get('pinpoint-sms-voice', [])
        self.region = region_name
    def create_configuration_set(self, *args, **kwargs):
        __protego_used['pinpoint-sms-voice']['create_configuration_set']=['pinpoint-sms-voice:*']
        for p in ['pinpoint-sms-voice:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-sms-voice'].append({'action': "CreateConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['pinpoint-sms-voice']['create_configuration_set_event_destination']=['pinpoint-sms-voice:*']
        for p in ['pinpoint-sms-voice:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-sms-voice'].append({'action': "CreateConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_set(self, *args, **kwargs):
        __protego_used['pinpoint-sms-voice']['delete_configuration_set']=['pinpoint-sms-voice:*']
        for p in ['pinpoint-sms-voice:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-sms-voice'].append({'action': "DeleteConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['pinpoint-sms-voice']['delete_configuration_set_event_destination']=['pinpoint-sms-voice:*']
        for p in ['pinpoint-sms-voice:*']:
            res = {}
            for nm in ["EventDestinationName","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-sms-voice'].append({'action': "DeleteConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_configuration_set_event_destinations(self, *args, **kwargs):
        __protego_used['pinpoint-sms-voice']['get_configuration_set_event_destinations']=['pinpoint-sms-voice:*']
        for p in ['pinpoint-sms-voice:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-sms-voice'].append({'action': "GetConfigurationSetEventDestinations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_voice_message(self, *args, **kwargs):
        __protego_used['pinpoint-sms-voice']['send_voice_message']=['pinpoint-sms-voice:*']
        for p in ['pinpoint-sms-voice:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-sms-voice'].append({'action': "SendVoiceMessage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['pinpoint-sms-voice']['update_configuration_set_event_destination']=['pinpoint-sms-voice:*']
        for p in ['pinpoint-sms-voice:*']:
            res = {}
            for nm in ["EventDestinationName","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pinpoint-sms-voice'].append({'action': "UpdateConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class polly:
    def __init__(self, region_name=__default_region):
        __protego_used['polly']= __protego_used.get('polly', {})
        __protego_resource_map['polly']=__protego_resource_map.get('polly', [])
        self.region = region_name
    def delete_lexicon(self, *args, **kwargs):
        __protego_used['polly']['delete_lexicon']=['polly:DeleteLexicon']
        for p in ['polly:DeleteLexicon']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['polly'].append({'action': "DeleteLexicon", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_voices(self, *args, **kwargs):
        __protego_used['polly']['describe_voices']=['polly:DescribeVoices']
        for p in ['polly:DescribeVoices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['polly'].append({'action': "DescribeVoices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_lexicon(self, *args, **kwargs):
        __protego_used['polly']['get_lexicon']=['polly:GetLexicon']
        for p in ['polly:GetLexicon']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['polly'].append({'action': "GetLexicon", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_speech_synthesis_task(self, *args, **kwargs):
        __protego_used['polly']['get_speech_synthesis_task']=['polly:*']
        for p in ['polly:*']:
            res = {}
            for nm in ["TaskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['polly'].append({'action': "GetSpeechSynthesisTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_lexicons(self, *args, **kwargs):
        __protego_used['polly']['list_lexicons']=['polly:ListLexicons']
        for p in ['polly:ListLexicons']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['polly'].append({'action': "ListLexicons", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_speech_synthesis_tasks(self, *args, **kwargs):
        __protego_used['polly']['list_speech_synthesis_tasks']=['polly:*']
        for p in ['polly:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['polly'].append({'action': "ListSpeechSynthesisTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_lexicon(self, *args, **kwargs):
        __protego_used['polly']['put_lexicon']=['polly:PutLexicon']
        for p in ['polly:PutLexicon']:
            res = {}
            for nm in ["Content","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['polly'].append({'action': "PutLexicon", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_speech_synthesis_task(self, *args, **kwargs):
        __protego_used['polly']['start_speech_synthesis_task']=['polly:*']
        for p in ['polly:*']:
            res = {}
            for nm in ["OutputS3BucketName","Text","VoiceId","OutputFormat"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['polly'].append({'action': "StartSpeechSynthesisTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def synthesize_speech(self, *args, **kwargs):
        __protego_used['polly']['synthesize_speech']=['polly:SynthesizeSpeech']
        for p in ['polly:SynthesizeSpeech']:
            res = {}
            for nm in ["Text","VoiceId","OutputFormat"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['polly'].append({'action': "SynthesizeSpeech", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class pricing:
    def __init__(self, region_name=__default_region):
        __protego_used['pricing']= __protego_used.get('pricing', {})
        __protego_resource_map['pricing']=__protego_resource_map.get('pricing', [])
        self.region = region_name
    def describe_services(self, *args, **kwargs):
        __protego_used['pricing']['describe_services']=['pricing:DescribeServices']
        for p in ['pricing:DescribeServices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pricing'].append({'action': "DescribeServices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_attribute_values(self, *args, **kwargs):
        __protego_used['pricing']['get_attribute_values']=['pricing:GetAttributeValues']
        for p in ['pricing:GetAttributeValues']:
            res = {}
            for nm in ["ServiceCode","AttributeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pricing'].append({'action': "GetAttributeValues", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_products(self, *args, **kwargs):
        __protego_used['pricing']['get_products']=['pricing:GetProducts']
        for p in ['pricing:GetProducts']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['pricing'].append({'action': "GetProducts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class qldb:
    def __init__(self, region_name=__default_region):
        __protego_used['qldb']= __protego_used.get('qldb', {})
        __protego_resource_map['qldb']=__protego_resource_map.get('qldb', [])
        self.region = region_name
    def create_ledger(self, *args, **kwargs):
        __protego_used['qldb']['create_ledger']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["PermissionsMode","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "CreateLedger", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ledger(self, *args, **kwargs):
        __protego_used['qldb']['delete_ledger']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "DeleteLedger", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_journal_s3_export(self, *args, **kwargs):
        __protego_used['qldb']['describe_journal_s3_export']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["Name","ExportId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "DescribeJournalS3Export", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_ledger(self, *args, **kwargs):
        __protego_used['qldb']['describe_ledger']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "DescribeLedger", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def export_journal_to_s3(self, *args, **kwargs):
        __protego_used['qldb']['export_journal_to_s3']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["InclusiveStartTime","ExclusiveEndTime","Name","RoleArn","S3ExportConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "ExportJournalToS3", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_block(self, *args, **kwargs):
        __protego_used['qldb']['get_block']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["BlockAddress","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "GetBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_digest(self, *args, **kwargs):
        __protego_used['qldb']['get_digest']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "GetDigest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_revision(self, *args, **kwargs):
        __protego_used['qldb']['get_revision']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["BlockAddress","Name","DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "GetRevision", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_journal_s3_exports(self, *args, **kwargs):
        __protego_used['qldb']['list_journal_s3_exports']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "ListJournalS3Exports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_journal_s3_exports_for_ledger(self, *args, **kwargs):
        __protego_used['qldb']['list_journal_s3_exports_for_ledger']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "ListJournalS3ExportsForLedger", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_ledgers(self, *args, **kwargs):
        __protego_used['qldb']['list_ledgers']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "ListLedgers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['qldb']['list_tags_for_resource']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['qldb']['tag_resource']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['qldb']['untag_resource']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_ledger(self, *args, **kwargs):
        __protego_used['qldb']['update_ledger']=['qldb:*']
        for p in ['qldb:*']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb'].append({'action': "UpdateLedger", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class qldb_session:
    def __init__(self, region_name=__default_region):
        __protego_used['qldb-session']= __protego_used.get('qldb-session', {})
        __protego_resource_map['qldb-session']=__protego_resource_map.get('qldb-session', [])
        self.region = region_name
    def send_command(self, *args, **kwargs):
        __protego_used['qldb-session']['send_command']=['qldb-session:*']
        for p in ['qldb-session:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['qldb-session'].append({'action': "SendCommand", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class quicksight:
    def __init__(self, region_name=__default_region):
        __protego_used['quicksight']= __protego_used.get('quicksight', {})
        __protego_resource_map['quicksight']=__protego_resource_map.get('quicksight', [])
        self.region = region_name
    def cancel_ingestion(self, *args, **kwargs):
        __protego_used['quicksight']['cancel_ingestion']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DataSetId","IngestionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "CancelIngestion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dashboard(self, *args, **kwargs):
        __protego_used['quicksight']['create_dashboard']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DashboardId","Name","SourceEntity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "CreateDashboard", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_data_set(self, *args, **kwargs):
        __protego_used['quicksight']['create_data_set']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["Name","AwsAccountId","PhysicalTableMap","DataSetId","ImportMode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "CreateDataSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_data_source(self, *args, **kwargs):
        __protego_used['quicksight']['create_data_source']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","Type","DataSourceId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "CreateDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_group(self, *args, **kwargs):
        __protego_used['quicksight']['create_group']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","GroupName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "CreateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_group_membership(self, *args, **kwargs):
        __protego_used['quicksight']['create_group_membership']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","GroupName","Namespace","MemberName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "CreateGroupMembership", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_iam_policy_assignment(self, *args, **kwargs):
        __protego_used['quicksight']['create_iam_policy_assignment']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","AssignmentStatus","AssignmentName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "CreateIAMPolicyAssignment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_ingestion(self, *args, **kwargs):
        __protego_used['quicksight']['create_ingestion']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["DataSetId","AwsAccountId","IngestionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "CreateIngestion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_template(self, *args, **kwargs):
        __protego_used['quicksight']['create_template']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateId","SourceEntity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "CreateTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_template_alias(self, *args, **kwargs):
        __protego_used['quicksight']['create_template_alias']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateVersionNumber","TemplateId","AliasName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "CreateTemplateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dashboard(self, *args, **kwargs):
        __protego_used['quicksight']['delete_dashboard']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DashboardId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DeleteDashboard", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_data_set(self, *args, **kwargs):
        __protego_used['quicksight']['delete_data_set']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DataSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DeleteDataSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_data_source(self, *args, **kwargs):
        __protego_used['quicksight']['delete_data_source']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DataSourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DeleteDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_group(self, *args, **kwargs):
        __protego_used['quicksight']['delete_group']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","GroupName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DeleteGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_group_membership(self, *args, **kwargs):
        __protego_used['quicksight']['delete_group_membership']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","GroupName","Namespace","MemberName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DeleteGroupMembership", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_iam_policy_assignment(self, *args, **kwargs):
        __protego_used['quicksight']['delete_iam_policy_assignment']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","AssignmentName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DeleteIAMPolicyAssignment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_template(self, *args, **kwargs):
        __protego_used['quicksight']['delete_template']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DeleteTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_template_alias(self, *args, **kwargs):
        __protego_used['quicksight']['delete_template_alias']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateId","AliasName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DeleteTemplateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user(self, *args, **kwargs):
        __protego_used['quicksight']['delete_user']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","UserName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DeleteUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_by_principal_id(self, *args, **kwargs):
        __protego_used['quicksight']['delete_user_by_principal_id']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["PrincipalId","AwsAccountId","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DeleteUserByPrincipalId", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dashboard(self, *args, **kwargs):
        __protego_used['quicksight']['describe_dashboard']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DashboardId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeDashboard", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_dashboard_permissions(self, *args, **kwargs):
        __protego_used['quicksight']['describe_dashboard_permissions']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DashboardId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeDashboardPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_data_set(self, *args, **kwargs):
        __protego_used['quicksight']['describe_data_set']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DataSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeDataSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_data_set_permissions(self, *args, **kwargs):
        __protego_used['quicksight']['describe_data_set_permissions']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DataSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeDataSetPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_data_source(self, *args, **kwargs):
        __protego_used['quicksight']['describe_data_source']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DataSourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_data_source_permissions(self, *args, **kwargs):
        __protego_used['quicksight']['describe_data_source_permissions']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DataSourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeDataSourcePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_group(self, *args, **kwargs):
        __protego_used['quicksight']['describe_group']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","GroupName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_iam_policy_assignment(self, *args, **kwargs):
        __protego_used['quicksight']['describe_iam_policy_assignment']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","AssignmentName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeIAMPolicyAssignment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_ingestion(self, *args, **kwargs):
        __protego_used['quicksight']['describe_ingestion']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DataSetId","IngestionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeIngestion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_template(self, *args, **kwargs):
        __protego_used['quicksight']['describe_template']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_template_alias(self, *args, **kwargs):
        __protego_used['quicksight']['describe_template_alias']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateId","AliasName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeTemplateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_template_permissions(self, *args, **kwargs):
        __protego_used['quicksight']['describe_template_permissions']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeTemplatePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user(self, *args, **kwargs):
        __protego_used['quicksight']['describe_user']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","UserName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "DescribeUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dashboard_embed_url(self, *args, **kwargs):
        __protego_used['quicksight']['get_dashboard_embed_url']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DashboardId","IdentityType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "GetDashboardEmbedUrl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dashboard_versions(self, *args, **kwargs):
        __protego_used['quicksight']['list_dashboard_versions']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DashboardId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListDashboardVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dashboards(self, *args, **kwargs):
        __protego_used['quicksight']['list_dashboards']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListDashboards", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_data_sets(self, *args, **kwargs):
        __protego_used['quicksight']['list_data_sets']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListDataSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_data_sources(self, *args, **kwargs):
        __protego_used['quicksight']['list_data_sources']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListDataSources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_group_memberships(self, *args, **kwargs):
        __protego_used['quicksight']['list_group_memberships']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","GroupName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListGroupMemberships", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_groups(self, *args, **kwargs):
        __protego_used['quicksight']['list_groups']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_iam_policy_assignments(self, *args, **kwargs):
        __protego_used['quicksight']['list_iam_policy_assignments']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListIAMPolicyAssignments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_iam_policy_assignments_for_user(self, *args, **kwargs):
        __protego_used['quicksight']['list_iam_policy_assignments_for_user']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","UserName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListIAMPolicyAssignmentsForUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_ingestions(self, *args, **kwargs):
        __protego_used['quicksight']['list_ingestions']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["DataSetId","AwsAccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListIngestions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['quicksight']['list_tags_for_resource']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_template_aliases(self, *args, **kwargs):
        __protego_used['quicksight']['list_template_aliases']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListTemplateAliases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_template_versions(self, *args, **kwargs):
        __protego_used['quicksight']['list_template_versions']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListTemplateVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_templates(self, *args, **kwargs):
        __protego_used['quicksight']['list_templates']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_user_groups(self, *args, **kwargs):
        __protego_used['quicksight']['list_user_groups']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","UserName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListUserGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_users(self, *args, **kwargs):
        __protego_used['quicksight']['list_users']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "ListUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_user(self, *args, **kwargs):
        __protego_used['quicksight']['register_user']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["IdentityType","UserRole","AwsAccountId","Email","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "RegisterUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['quicksight']['tag_resource']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['quicksight']['untag_resource']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_dashboard(self, *args, **kwargs):
        __protego_used['quicksight']['update_dashboard']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DashboardId","Name","SourceEntity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateDashboard", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_dashboard_permissions(self, *args, **kwargs):
        __protego_used['quicksight']['update_dashboard_permissions']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DashboardId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateDashboardPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_dashboard_published_version(self, *args, **kwargs):
        __protego_used['quicksight']['update_dashboard_published_version']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DashboardId","VersionNumber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateDashboardPublishedVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_data_set(self, *args, **kwargs):
        __protego_used['quicksight']['update_data_set']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["Name","AwsAccountId","PhysicalTableMap","DataSetId","ImportMode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateDataSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_data_set_permissions(self, *args, **kwargs):
        __protego_used['quicksight']['update_data_set_permissions']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DataSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateDataSetPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_data_source(self, *args, **kwargs):
        __protego_used['quicksight']['update_data_source']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DataSourceId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateDataSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_data_source_permissions(self, *args, **kwargs):
        __protego_used['quicksight']['update_data_source_permissions']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","DataSourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateDataSourcePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_group(self, *args, **kwargs):
        __protego_used['quicksight']['update_group']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","GroupName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_iam_policy_assignment(self, *args, **kwargs):
        __protego_used['quicksight']['update_iam_policy_assignment']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","AssignmentName","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateIAMPolicyAssignment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_template(self, *args, **kwargs):
        __protego_used['quicksight']['update_template']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateId","SourceEntity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_template_alias(self, *args, **kwargs):
        __protego_used['quicksight']['update_template_alias']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateVersionNumber","TemplateId","AliasName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateTemplateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_template_permissions(self, *args, **kwargs):
        __protego_used['quicksight']['update_template_permissions']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["AwsAccountId","TemplateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateTemplatePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user(self, *args, **kwargs):
        __protego_used['quicksight']['update_user']=['quicksight:*']
        for p in ['quicksight:*']:
            res = {}
            for nm in ["UserName","AwsAccountId","Email","Role","Namespace"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['quicksight'].append({'action': "UpdateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class ram:
    def __init__(self, region_name=__default_region):
        __protego_used['ram']= __protego_used.get('ram', {})
        __protego_resource_map['ram']=__protego_resource_map.get('ram', [])
        self.region = region_name
    def accept_resource_share_invitation(self, *args, **kwargs):
        __protego_used['ram']['accept_resource_share_invitation']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareInvitationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "AcceptResourceShareInvitation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_resource_share(self, *args, **kwargs):
        __protego_used['ram']['associate_resource_share']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "AssociateResourceShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_resource_share_permission(self, *args, **kwargs):
        __protego_used['ram']['associate_resource_share_permission']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareArn","permissionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "AssociateResourceSharePermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_resource_share(self, *args, **kwargs):
        __protego_used['ram']['create_resource_share']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "CreateResourceShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resource_share(self, *args, **kwargs):
        __protego_used['ram']['delete_resource_share']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "DeleteResourceShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_resource_share(self, *args, **kwargs):
        __protego_used['ram']['disassociate_resource_share']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "DisassociateResourceShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_resource_share_permission(self, *args, **kwargs):
        __protego_used['ram']['disassociate_resource_share_permission']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareArn","permissionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "DisassociateResourceSharePermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_sharing_with_aws_organization(self, *args, **kwargs):
        __protego_used['ram']['enable_sharing_with_aws_organization']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "EnableSharingWithAwsOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_permission(self, *args, **kwargs):
        __protego_used['ram']['get_permission']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["permissionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "GetPermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource_policies(self, *args, **kwargs):
        __protego_used['ram']['get_resource_policies']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "GetResourcePolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource_share_associations(self, *args, **kwargs):
        __protego_used['ram']['get_resource_share_associations']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["associationType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "GetResourceShareAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource_share_invitations(self, *args, **kwargs):
        __protego_used['ram']['get_resource_share_invitations']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "GetResourceShareInvitations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource_shares(self, *args, **kwargs):
        __protego_used['ram']['get_resource_shares']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceOwner"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "GetResourceShares", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_pending_invitation_resources(self, *args, **kwargs):
        __protego_used['ram']['list_pending_invitation_resources']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareInvitationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "ListPendingInvitationResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_permissions(self, *args, **kwargs):
        __protego_used['ram']['list_permissions']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "ListPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_principals(self, *args, **kwargs):
        __protego_used['ram']['list_principals']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceOwner"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "ListPrincipals", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resource_share_permissions(self, *args, **kwargs):
        __protego_used['ram']['list_resource_share_permissions']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "ListResourceSharePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resources(self, *args, **kwargs):
        __protego_used['ram']['list_resources']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceOwner"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "ListResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def promote_resource_share_created_from_policy(self, *args, **kwargs):
        __protego_used['ram']['promote_resource_share_created_from_policy']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "PromoteResourceShareCreatedFromPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_resource_share_invitation(self, *args, **kwargs):
        __protego_used['ram']['reject_resource_share_invitation']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareInvitationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "RejectResourceShareInvitation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['ram']['tag_resource']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['ram']['untag_resource']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareArn","tagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_resource_share(self, *args, **kwargs):
        __protego_used['ram']['update_resource_share']=['ram:*']
        for p in ['ram:*']:
            res = {}
            for nm in ["resourceShareArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ram'].append({'action': "UpdateResourceShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class rds:
    def __init__(self, region_name=__default_region):
        __protego_used['rds']= __protego_used.get('rds', {})
        __protego_resource_map['rds']=__protego_resource_map.get('rds', [])
        self.region = region_name
    def add_role_to_db_cluster(self, *args, **kwargs):
        __protego_used['rds']['add_role_to_db_cluster']=['rds:AddRoleToDBCluster','rds:AddRoleToDBCluster']
        for p in ['rds:AddRoleToDBCluster','rds:AddRoleToDBCluster']:
            res = {}
            for nm in ["RoleArn","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "AddRoleToDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_role_to_db_instance(self, *args, **kwargs):
        __protego_used['rds']['add_role_to_db_instance']=['rds:AddRoleToDBInstance','rds:AddRoleToDBInstance']
        for p in ['rds:AddRoleToDBInstance','rds:AddRoleToDBInstance']:
            res = {}
            for nm in ["RoleArn","DBInstanceIdentifier","FeatureName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "AddRoleToDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_source_identifier_to_subscription(self, *args, **kwargs):
        __protego_used['rds']['add_source_identifier_to_subscription']=['rds:AddSourceIdentifierToSubscription']
        for p in ['rds:AddSourceIdentifierToSubscription']:
            res = {}
            for nm in ["SourceIdentifier","SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "AddSourceIdentifierToSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_tags_to_resource(self, *args, **kwargs):
        __protego_used['rds']['add_tags_to_resource']=['rds:AddTagsToResource']
        for p in ['rds:AddTagsToResource']:
            res = {}
            for nm in ["ResourceName","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "AddTagsToResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def apply_pending_maintenance_action(self, *args, **kwargs):
        __protego_used['rds']['apply_pending_maintenance_action']=['rds:ApplyPendingMaintenanceAction']
        for p in ['rds:ApplyPendingMaintenanceAction']:
            res = {}
            for nm in ["ResourceIdentifier","ApplyAction","OptInType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ApplyPendingMaintenanceAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def authorize_db_security_group_ingress(self, *args, **kwargs):
        __protego_used['rds']['authorize_db_security_group_ingress']=['rds:AuthorizeDBSecurityGroupIngress']
        for p in ['rds:AuthorizeDBSecurityGroupIngress']:
            res = {}
            for nm in ["DBSecurityGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "AuthorizeDBSecurityGroupIngress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def backtrack_db_cluster(self, *args, **kwargs):
        __protego_used['rds']['backtrack_db_cluster']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["BacktrackTo","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "BacktrackDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['rds']['copy_db_cluster_parameter_group']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["SourceDBClusterParameterGroupIdentifier","TargetDBClusterParameterGroupIdentifier","TargetDBClusterParameterGroupDescription"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CopyDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_db_cluster_snapshot(self, *args, **kwargs):
        __protego_used['rds']['copy_db_cluster_snapshot']=['rds:CopyDBClusterSnapshot']
        for p in ['rds:CopyDBClusterSnapshot']:
            res = {}
            for nm in ["TargetDBClusterSnapshotIdentifier","SourceDBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CopyDBClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_db_parameter_group(self, *args, **kwargs):
        __protego_used['rds']['copy_db_parameter_group']=['rds:CopyDBParameterGroup']
        for p in ['rds:CopyDBParameterGroup']:
            res = {}
            for nm in ["TargetDBParameterGroupIdentifier","SourceDBParameterGroupIdentifier","TargetDBParameterGroupDescription"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CopyDBParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_db_snapshot(self, *args, **kwargs):
        __protego_used['rds']['copy_db_snapshot']=['rds:CopyDBSnapshot']
        for p in ['rds:CopyDBSnapshot']:
            res = {}
            for nm in ["TargetDBSnapshotIdentifier","SourceDBSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CopyDBSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_option_group(self, *args, **kwargs):
        __protego_used['rds']['copy_option_group']=['rds:CopyOptionGroup']
        for p in ['rds:CopyOptionGroup']:
            res = {}
            for nm in ["TargetOptionGroupIdentifier","SourceOptionGroupIdentifier","TargetOptionGroupDescription"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CopyOptionGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_custom_availability_zone(self, *args, **kwargs):
        __protego_used['rds']['create_custom_availability_zone']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["CustomAvailabilityZoneName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateCustomAvailabilityZone", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_cluster(self, *args, **kwargs):
        __protego_used['rds']['create_db_cluster']=['rds:CreateDBCluster','rds:CreateDBCluster','rds:CreateDBCluster','rds:CreateDBCluster']
        for p in ['rds:CreateDBCluster','rds:CreateDBCluster','rds:CreateDBCluster','rds:CreateDBCluster']:
            res = {}
            for nm in ["Engine","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_cluster_endpoint(self, *args, **kwargs):
        __protego_used['rds']['create_db_cluster_endpoint']=['rds:CreateDBClusterEndpoint','rds:CreateDBClusterEndpoint']
        for p in ['rds:CreateDBClusterEndpoint','rds:CreateDBClusterEndpoint']:
            res = {}
            for nm in ["EndpointType","DBClusterEndpointIdentifier","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateDBClusterEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['rds']['create_db_cluster_parameter_group']=['rds:CreateDBClusterParameterGroup']
        for p in ['rds:CreateDBClusterParameterGroup']:
            res = {}
            for nm in ["DBParameterGroupFamily","Description","DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_cluster_snapshot(self, *args, **kwargs):
        __protego_used['rds']['create_db_cluster_snapshot']=['rds:CreateDBClusterSnapshot','rds:CreateDBClusterSnapshot']
        for p in ['rds:CreateDBClusterSnapshot','rds:CreateDBClusterSnapshot']:
            res = {}
            for nm in ["DBClusterIdentifier","DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateDBClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_instance(self, *args, **kwargs):
        __protego_used['rds']['create_db_instance']=['rds:CreateDBInstance','rds:CreateDBInstance','rds:CreateDBInstance','rds:CreateDBInstance','rds:CreateDBInstance']
        for p in ['rds:CreateDBInstance','rds:CreateDBInstance','rds:CreateDBInstance','rds:CreateDBInstance','rds:CreateDBInstance']:
            res = {}
            for nm in ["DBInstanceIdentifier","Engine","DBInstanceClass"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_instance_read_replica(self, *args, **kwargs):
        __protego_used['rds']['create_db_instance_read_replica']=['rds:CreateDBInstanceReadReplica','rds:CreateDBInstanceReadReplica','rds:CreateDBInstanceReadReplica']
        for p in ['rds:CreateDBInstanceReadReplica','rds:CreateDBInstanceReadReplica','rds:CreateDBInstanceReadReplica']:
            res = {}
            for nm in ["DBInstanceIdentifier","SourceDBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateDBInstanceReadReplica", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_parameter_group(self, *args, **kwargs):
        __protego_used['rds']['create_db_parameter_group']=['rds:CreateDBParameterGroup']
        for p in ['rds:CreateDBParameterGroup']:
            res = {}
            for nm in ["DBParameterGroupFamily","Description","DBParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateDBParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_proxy(self, *args, **kwargs):
        __protego_used['rds']['create_db_proxy']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["Auth","RoleArn","DBProxyName","EngineFamily","VpcSubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateDBProxy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_security_group(self, *args, **kwargs):
        __protego_used['rds']['create_db_security_group']=['rds:CreateDBSecurityGroup']
        for p in ['rds:CreateDBSecurityGroup']:
            res = {}
            for nm in ["DBSecurityGroupDescription","DBSecurityGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateDBSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_snapshot(self, *args, **kwargs):
        __protego_used['rds']['create_db_snapshot']=['rds:CreateDBSnapshot','rds:CreateDBSnapshot']
        for p in ['rds:CreateDBSnapshot','rds:CreateDBSnapshot']:
            res = {}
            for nm in ["DBSnapshotIdentifier","DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateDBSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_db_subnet_group(self, *args, **kwargs):
        __protego_used['rds']['create_db_subnet_group']=['rds:CreateDBSubnetGroup']
        for p in ['rds:CreateDBSubnetGroup']:
            res = {}
            for nm in ["DBSubnetGroupName","DBSubnetGroupDescription","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateDBSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_event_subscription(self, *args, **kwargs):
        __protego_used['rds']['create_event_subscription']=['rds:CreateEventSubscription']
        for p in ['rds:CreateEventSubscription']:
            res = {}
            for nm in ["SnsTopicArn","SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_global_cluster(self, *args, **kwargs):
        __protego_used['rds']['create_global_cluster']=['rds:CreateGlobalCluster','rds:CreateGlobalCluster']
        for p in ['rds:CreateGlobalCluster','rds:CreateGlobalCluster']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateGlobalCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_option_group(self, *args, **kwargs):
        __protego_used['rds']['create_option_group']=['rds:CreateOptionGroup']
        for p in ['rds:CreateOptionGroup']:
            res = {}
            for nm in ["EngineName","MajorEngineVersion","OptionGroupDescription","OptionGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "CreateOptionGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_custom_availability_zone(self, *args, **kwargs):
        __protego_used['rds']['delete_custom_availability_zone']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["CustomAvailabilityZoneId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteCustomAvailabilityZone", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_cluster(self, *args, **kwargs):
        __protego_used['rds']['delete_db_cluster']=['rds:DeleteDBCluster','rds:DeleteDBCluster']
        for p in ['rds:DeleteDBCluster','rds:DeleteDBCluster']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_cluster_endpoint(self, *args, **kwargs):
        __protego_used['rds']['delete_db_cluster_endpoint']=['rds:DeleteDBClusterEndpoint']
        for p in ['rds:DeleteDBClusterEndpoint']:
            res = {}
            for nm in ["DBClusterEndpointIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteDBClusterEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['rds']['delete_db_cluster_parameter_group']=['rds:DeleteDBClusterParameterGroup']
        for p in ['rds:DeleteDBClusterParameterGroup']:
            res = {}
            for nm in ["DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_cluster_snapshot(self, *args, **kwargs):
        __protego_used['rds']['delete_db_cluster_snapshot']=['rds:DeleteDBClusterSnapshot']
        for p in ['rds:DeleteDBClusterSnapshot']:
            res = {}
            for nm in ["DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteDBClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_instance(self, *args, **kwargs):
        __protego_used['rds']['delete_db_instance']=['rds:DeleteDBInstance']
        for p in ['rds:DeleteDBInstance']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_instance_automated_backup(self, *args, **kwargs):
        __protego_used['rds']['delete_db_instance_automated_backup']=['rds:DeleteDBInstanceAutomatedBackup']
        for p in ['rds:DeleteDBInstanceAutomatedBackup']:
            res = {}
            for nm in ["DbiResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteDBInstanceAutomatedBackup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_parameter_group(self, *args, **kwargs):
        __protego_used['rds']['delete_db_parameter_group']=['rds:DeleteDBParameterGroup']
        for p in ['rds:DeleteDBParameterGroup']:
            res = {}
            for nm in ["DBParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteDBParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_proxy(self, *args, **kwargs):
        __protego_used['rds']['delete_db_proxy']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["DBProxyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteDBProxy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_security_group(self, *args, **kwargs):
        __protego_used['rds']['delete_db_security_group']=['rds:DeleteDBSecurityGroup']
        for p in ['rds:DeleteDBSecurityGroup']:
            res = {}
            for nm in ["DBSecurityGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteDBSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_snapshot(self, *args, **kwargs):
        __protego_used['rds']['delete_db_snapshot']=['rds:DeleteDBSnapshot']
        for p in ['rds:DeleteDBSnapshot']:
            res = {}
            for nm in ["DBSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteDBSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_db_subnet_group(self, *args, **kwargs):
        __protego_used['rds']['delete_db_subnet_group']=['rds:DeleteDBSubnetGroup']
        for p in ['rds:DeleteDBSubnetGroup']:
            res = {}
            for nm in ["DBSubnetGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteDBSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_event_subscription(self, *args, **kwargs):
        __protego_used['rds']['delete_event_subscription']=['rds:DeleteEventSubscription']
        for p in ['rds:DeleteEventSubscription']:
            res = {}
            for nm in ["SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_global_cluster(self, *args, **kwargs):
        __protego_used['rds']['delete_global_cluster']=['rds:DeleteGlobalCluster']
        for p in ['rds:DeleteGlobalCluster']:
            res = {}
            for nm in ["GlobalClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteGlobalCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_installation_media(self, *args, **kwargs):
        __protego_used['rds']['delete_installation_media']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["InstallationMediaId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteInstallationMedia", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_option_group(self, *args, **kwargs):
        __protego_used['rds']['delete_option_group']=['rds:DeleteOptionGroup']
        for p in ['rds:DeleteOptionGroup']:
            res = {}
            for nm in ["OptionGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeleteOptionGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_db_proxy_targets(self, *args, **kwargs):
        __protego_used['rds']['deregister_db_proxy_targets']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["DBProxyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DeregisterDBProxyTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_attributes(self, *args, **kwargs):
        __protego_used['rds']['describe_account_attributes']=['rds:DescribeAccountAttributes']
        for p in ['rds:DescribeAccountAttributes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeAccountAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_certificates(self, *args, **kwargs):
        __protego_used['rds']['describe_certificates']=['rds:DescribeCertificates']
        for p in ['rds:DescribeCertificates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_custom_availability_zones(self, *args, **kwargs):
        __protego_used['rds']['describe_custom_availability_zones']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeCustomAvailabilityZones", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_backtracks(self, *args, **kwargs):
        __protego_used['rds']['describe_db_cluster_backtracks']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBClusterBacktracks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_endpoints(self, *args, **kwargs):
        __protego_used['rds']['describe_db_cluster_endpoints']=['rds:DescribeDBClusterEndpoints']
        for p in ['rds:DescribeDBClusterEndpoints']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBClusterEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_parameter_groups(self, *args, **kwargs):
        __protego_used['rds']['describe_db_cluster_parameter_groups']=['rds:DescribeDBClusterParameterGroups']
        for p in ['rds:DescribeDBClusterParameterGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBClusterParameterGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_parameters(self, *args, **kwargs):
        __protego_used['rds']['describe_db_cluster_parameters']=['rds:DescribeDBClusterParameters']
        for p in ['rds:DescribeDBClusterParameters']:
            res = {}
            for nm in ["DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBClusterParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_snapshot_attributes(self, *args, **kwargs):
        __protego_used['rds']['describe_db_cluster_snapshot_attributes']=['rds:DescribeDBClusterSnapshotAttributes']
        for p in ['rds:DescribeDBClusterSnapshotAttributes']:
            res = {}
            for nm in ["DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBClusterSnapshotAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_cluster_snapshots(self, *args, **kwargs):
        __protego_used['rds']['describe_db_cluster_snapshots']=['rds:DescribeDBClusterSnapshots']
        for p in ['rds:DescribeDBClusterSnapshots']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBClusterSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_clusters(self, *args, **kwargs):
        __protego_used['rds']['describe_db_clusters']=['rds:DescribeDBClusters']
        for p in ['rds:DescribeDBClusters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_engine_versions(self, *args, **kwargs):
        __protego_used['rds']['describe_db_engine_versions']=['rds:DescribeDBEngineVersions']
        for p in ['rds:DescribeDBEngineVersions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBEngineVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_instance_automated_backups(self, *args, **kwargs):
        __protego_used['rds']['describe_db_instance_automated_backups']=['rds:DescribeDBInstanceAutomatedBackups']
        for p in ['rds:DescribeDBInstanceAutomatedBackups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBInstanceAutomatedBackups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_instances(self, *args, **kwargs):
        __protego_used['rds']['describe_db_instances']=['rds:DescribeDBInstances']
        for p in ['rds:DescribeDBInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_log_files(self, *args, **kwargs):
        __protego_used['rds']['describe_db_log_files']=['rds:DescribeDBLogFiles']
        for p in ['rds:DescribeDBLogFiles']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBLogFiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_parameter_groups(self, *args, **kwargs):
        __protego_used['rds']['describe_db_parameter_groups']=['rds:DescribeDBParameterGroups']
        for p in ['rds:DescribeDBParameterGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBParameterGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_parameters(self, *args, **kwargs):
        __protego_used['rds']['describe_db_parameters']=['rds:DescribeDBParameters']
        for p in ['rds:DescribeDBParameters']:
            res = {}
            for nm in ["DBParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_proxies(self, *args, **kwargs):
        __protego_used['rds']['describe_db_proxies']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBProxies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_proxy_target_groups(self, *args, **kwargs):
        __protego_used['rds']['describe_db_proxy_target_groups']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["DBProxyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBProxyTargetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_proxy_targets(self, *args, **kwargs):
        __protego_used['rds']['describe_db_proxy_targets']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["DBProxyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBProxyTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_security_groups(self, *args, **kwargs):
        __protego_used['rds']['describe_db_security_groups']=['rds:DescribeDBSecurityGroups']
        for p in ['rds:DescribeDBSecurityGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBSecurityGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_snapshot_attributes(self, *args, **kwargs):
        __protego_used['rds']['describe_db_snapshot_attributes']=['rds:DescribeDBSnapshotAttributes']
        for p in ['rds:DescribeDBSnapshotAttributes']:
            res = {}
            for nm in ["DBSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBSnapshotAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_snapshots(self, *args, **kwargs):
        __protego_used['rds']['describe_db_snapshots']=['rds:DescribeDBSnapshots','rds:DescribeDBSnapshots']
        for p in ['rds:DescribeDBSnapshots','rds:DescribeDBSnapshots']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_db_subnet_groups(self, *args, **kwargs):
        __protego_used['rds']['describe_db_subnet_groups']=['rds:DescribeDBSubnetGroups']
        for p in ['rds:DescribeDBSubnetGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeDBSubnetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_engine_default_cluster_parameters(self, *args, **kwargs):
        __protego_used['rds']['describe_engine_default_cluster_parameters']=['rds:DescribeEngineDefaultClusterParameters']
        for p in ['rds:DescribeEngineDefaultClusterParameters']:
            res = {}
            for nm in ["DBParameterGroupFamily"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeEngineDefaultClusterParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_engine_default_parameters(self, *args, **kwargs):
        __protego_used['rds']['describe_engine_default_parameters']=['rds:DescribeEngineDefaultParameters']
        for p in ['rds:DescribeEngineDefaultParameters']:
            res = {}
            for nm in ["DBParameterGroupFamily"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeEngineDefaultParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_categories(self, *args, **kwargs):
        __protego_used['rds']['describe_event_categories']=['rds:DescribeEventCategories']
        for p in ['rds:DescribeEventCategories']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeEventCategories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_subscriptions(self, *args, **kwargs):
        __protego_used['rds']['describe_event_subscriptions']=['rds:DescribeEventSubscriptions']
        for p in ['rds:DescribeEventSubscriptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeEventSubscriptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_events(self, *args, **kwargs):
        __protego_used['rds']['describe_events']=['rds:DescribeEvents']
        for p in ['rds:DescribeEvents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_global_clusters(self, *args, **kwargs):
        __protego_used['rds']['describe_global_clusters']=['rds:DescribeGlobalClusters']
        for p in ['rds:DescribeGlobalClusters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeGlobalClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_installation_media(self, *args, **kwargs):
        __protego_used['rds']['describe_installation_media']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeInstallationMedia", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_option_group_options(self, *args, **kwargs):
        __protego_used['rds']['describe_option_group_options']=['rds:DescribeOptionGroupOptions']
        for p in ['rds:DescribeOptionGroupOptions']:
            res = {}
            for nm in ["EngineName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeOptionGroupOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_option_groups(self, *args, **kwargs):
        __protego_used['rds']['describe_option_groups']=['rds:DescribeOptionGroups']
        for p in ['rds:DescribeOptionGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeOptionGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_orderable_db_instance_options(self, *args, **kwargs):
        __protego_used['rds']['describe_orderable_db_instance_options']=['rds:DescribeOrderableDBInstanceOptions']
        for p in ['rds:DescribeOrderableDBInstanceOptions']:
            res = {}
            for nm in ["Engine"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeOrderableDBInstanceOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_pending_maintenance_actions(self, *args, **kwargs):
        __protego_used['rds']['describe_pending_maintenance_actions']=['rds:DescribePendingMaintenanceActions']
        for p in ['rds:DescribePendingMaintenanceActions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribePendingMaintenanceActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_db_instances(self, *args, **kwargs):
        __protego_used['rds']['describe_reserved_db_instances']=['rds:DescribeReservedDBInstances']
        for p in ['rds:DescribeReservedDBInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeReservedDBInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_db_instances_offerings(self, *args, **kwargs):
        __protego_used['rds']['describe_reserved_db_instances_offerings']=['rds:DescribeReservedDBInstancesOfferings']
        for p in ['rds:DescribeReservedDBInstancesOfferings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeReservedDBInstancesOfferings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_source_regions(self, *args, **kwargs):
        __protego_used['rds']['describe_source_regions']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeSourceRegions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_valid_db_instance_modifications(self, *args, **kwargs):
        __protego_used['rds']['describe_valid_db_instance_modifications']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DescribeValidDBInstanceModifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def download_db_log_file_portion(self, *args, **kwargs):
        __protego_used['rds']['download_db_log_file_portion']=['rds:DownloadDBLogFilePortion']
        for p in ['rds:DownloadDBLogFilePortion']:
            res = {}
            for nm in ["DBInstanceIdentifier","LogFileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "DownloadDBLogFilePortion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def failover_db_cluster(self, *args, **kwargs):
        __protego_used['rds']['failover_db_cluster']=['rds:FailoverDBCluster']
        for p in ['rds:FailoverDBCluster']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "FailoverDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_installation_media(self, *args, **kwargs):
        __protego_used['rds']['import_installation_media']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["Engine","EngineVersion","EngineInstallationMediaPath","CustomAvailabilityZoneId","OSInstallationMediaPath"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ImportInstallationMedia", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['rds']['list_tags_for_resource']=['rds:ListTagsForResource']
        for p in ['rds:ListTagsForResource']:
            res = {}
            for nm in ["ResourceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_current_db_cluster_capacity(self, *args, **kwargs):
        __protego_used['rds']['modify_current_db_cluster_capacity']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyCurrentDBClusterCapacity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_cluster(self, *args, **kwargs):
        __protego_used['rds']['modify_db_cluster']=['rds:ModifyDBCluster','rds:ModifyDBCluster','rds:ModifyDBCluster']
        for p in ['rds:ModifyDBCluster','rds:ModifyDBCluster','rds:ModifyDBCluster']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_cluster_endpoint(self, *args, **kwargs):
        __protego_used['rds']['modify_db_cluster_endpoint']=['rds:ModifyDBClusterEndpoint']
        for p in ['rds:ModifyDBClusterEndpoint']:
            res = {}
            for nm in ["DBClusterEndpointIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyDBClusterEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['rds']['modify_db_cluster_parameter_group']=['rds:ModifyDBClusterParameterGroup']
        for p in ['rds:ModifyDBClusterParameterGroup']:
            res = {}
            for nm in ["Parameters","DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_cluster_snapshot_attribute(self, *args, **kwargs):
        __protego_used['rds']['modify_db_cluster_snapshot_attribute']=['rds:ModifyDBClusterSnapshotAttribute']
        for p in ['rds:ModifyDBClusterSnapshotAttribute']:
            res = {}
            for nm in ["AttributeName","DBClusterSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyDBClusterSnapshotAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_instance(self, *args, **kwargs):
        __protego_used['rds']['modify_db_instance']=['rds:ModifyDBInstance','rds:ModifyDBInstance','rds:ModifyDBInstance','rds:ModifyDBInstance']
        for p in ['rds:ModifyDBInstance','rds:ModifyDBInstance','rds:ModifyDBInstance','rds:ModifyDBInstance']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_parameter_group(self, *args, **kwargs):
        __protego_used['rds']['modify_db_parameter_group']=['rds:ModifyDBParameterGroup']
        for p in ['rds:ModifyDBParameterGroup']:
            res = {}
            for nm in ["Parameters","DBParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyDBParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_proxy(self, *args, **kwargs):
        __protego_used['rds']['modify_db_proxy']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["DBProxyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyDBProxy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_proxy_target_group(self, *args, **kwargs):
        __protego_used['rds']['modify_db_proxy_target_group']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["TargetGroupName","DBProxyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyDBProxyTargetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_snapshot(self, *args, **kwargs):
        __protego_used['rds']['modify_db_snapshot']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["DBSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyDBSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_snapshot_attribute(self, *args, **kwargs):
        __protego_used['rds']['modify_db_snapshot_attribute']=['rds:ModifyDBSnapshotAttribute']
        for p in ['rds:ModifyDBSnapshotAttribute']:
            res = {}
            for nm in ["DBSnapshotIdentifier","AttributeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyDBSnapshotAttribute", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_db_subnet_group(self, *args, **kwargs):
        __protego_used['rds']['modify_db_subnet_group']=['rds:ModifyDBSubnetGroup']
        for p in ['rds:ModifyDBSubnetGroup']:
            res = {}
            for nm in ["DBSubnetGroupName","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyDBSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_event_subscription(self, *args, **kwargs):
        __protego_used['rds']['modify_event_subscription']=['rds:ModifyEventSubscription']
        for p in ['rds:ModifyEventSubscription']:
            res = {}
            for nm in ["SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_global_cluster(self, *args, **kwargs):
        __protego_used['rds']['modify_global_cluster']=['rds:ModifyGlobalCluster']
        for p in ['rds:ModifyGlobalCluster']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyGlobalCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_option_group(self, *args, **kwargs):
        __protego_used['rds']['modify_option_group']=['rds:ModifyOptionGroup']
        for p in ['rds:ModifyOptionGroup']:
            res = {}
            for nm in ["OptionGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ModifyOptionGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def promote_read_replica(self, *args, **kwargs):
        __protego_used['rds']['promote_read_replica']=['rds:PromoteReadReplica']
        for p in ['rds:PromoteReadReplica']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "PromoteReadReplica", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def promote_read_replica_db_cluster(self, *args, **kwargs):
        __protego_used['rds']['promote_read_replica_db_cluster']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "PromoteReadReplicaDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def purchase_reserved_db_instances_offering(self, *args, **kwargs):
        __protego_used['rds']['purchase_reserved_db_instances_offering']=['rds:PurchaseReservedDBInstancesOffering']
        for p in ['rds:PurchaseReservedDBInstancesOffering']:
            res = {}
            for nm in ["ReservedDBInstancesOfferingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "PurchaseReservedDBInstancesOffering", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_db_instance(self, *args, **kwargs):
        __protego_used['rds']['reboot_db_instance']=['rds:RebootDBInstance']
        for p in ['rds:RebootDBInstance']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RebootDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_db_proxy_targets(self, *args, **kwargs):
        __protego_used['rds']['register_db_proxy_targets']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["DBProxyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RegisterDBProxyTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_from_global_cluster(self, *args, **kwargs):
        __protego_used['rds']['remove_from_global_cluster']=['rds:RemoveFromGlobalCluster','rds:RemoveFromGlobalCluster']
        for p in ['rds:RemoveFromGlobalCluster','rds:RemoveFromGlobalCluster']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RemoveFromGlobalCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_role_from_db_cluster(self, *args, **kwargs):
        __protego_used['rds']['remove_role_from_db_cluster']=['rds:*','rds:*']
        for p in ['rds:*','rds:*']:
            res = {}
            for nm in ["RoleArn","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RemoveRoleFromDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_role_from_db_instance(self, *args, **kwargs):
        __protego_used['rds']['remove_role_from_db_instance']=['rds:RemoveRoleFromDBInstance','rds:RemoveRoleFromDBInstance']
        for p in ['rds:RemoveRoleFromDBInstance','rds:RemoveRoleFromDBInstance']:
            res = {}
            for nm in ["RoleArn","DBInstanceIdentifier","FeatureName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RemoveRoleFromDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_source_identifier_from_subscription(self, *args, **kwargs):
        __protego_used['rds']['remove_source_identifier_from_subscription']=['rds:RemoveSourceIdentifierFromSubscription']
        for p in ['rds:RemoveSourceIdentifierFromSubscription']:
            res = {}
            for nm in ["SourceIdentifier","SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RemoveSourceIdentifierFromSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_resource(self, *args, **kwargs):
        __protego_used['rds']['remove_tags_from_resource']=['rds:RemoveTagsFromResource']
        for p in ['rds:RemoveTagsFromResource']:
            res = {}
            for nm in ["ResourceName","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RemoveTagsFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_db_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['rds']['reset_db_cluster_parameter_group']=['rds:ResetDBClusterParameterGroup']
        for p in ['rds:ResetDBClusterParameterGroup']:
            res = {}
            for nm in ["DBClusterParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ResetDBClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_db_parameter_group(self, *args, **kwargs):
        __protego_used['rds']['reset_db_parameter_group']=['rds:ResetDBParameterGroup']
        for p in ['rds:ResetDBParameterGroup']:
            res = {}
            for nm in ["DBParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "ResetDBParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_db_cluster_from_s3(self, *args, **kwargs):
        __protego_used['rds']['restore_db_cluster_from_s3']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["Engine","MasterUserPassword","SourceEngineVersion","S3BucketName","S3IngestionRoleArn","DBClusterIdentifier","MasterUsername","SourceEngine"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RestoreDBClusterFromS3", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_db_cluster_from_snapshot(self, *args, **kwargs):
        __protego_used['rds']['restore_db_cluster_from_snapshot']=['rds:RestoreDBClusterFromSnapshot','rds:RestoreDBClusterFromSnapshot','rds:RestoreDBClusterFromSnapshot']
        for p in ['rds:RestoreDBClusterFromSnapshot','rds:RestoreDBClusterFromSnapshot','rds:RestoreDBClusterFromSnapshot']:
            res = {}
            for nm in ["Engine","DBClusterIdentifier","SnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RestoreDBClusterFromSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_db_cluster_to_point_in_time(self, *args, **kwargs):
        __protego_used['rds']['restore_db_cluster_to_point_in_time']=['rds:RestoreDBClusterToPointInTime','rds:RestoreDBClusterToPointInTime','rds:RestoreDBClusterToPointInTime']
        for p in ['rds:RestoreDBClusterToPointInTime','rds:RestoreDBClusterToPointInTime','rds:RestoreDBClusterToPointInTime']:
            res = {}
            for nm in ["SourceDBClusterIdentifier","DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RestoreDBClusterToPointInTime", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_db_instance_from_db_snapshot(self, *args, **kwargs):
        __protego_used['rds']['restore_db_instance_from_db_snapshot']=['rds:RestoreDBInstanceFromDBSnapshot','rds:RestoreDBInstanceFromDBSnapshot','rds:RestoreDBInstanceFromDBSnapshot','rds:RestoreDBInstanceFromDBSnapshot']
        for p in ['rds:RestoreDBInstanceFromDBSnapshot','rds:RestoreDBInstanceFromDBSnapshot','rds:RestoreDBInstanceFromDBSnapshot','rds:RestoreDBInstanceFromDBSnapshot']:
            res = {}
            for nm in ["DBInstanceIdentifier","DBSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RestoreDBInstanceFromDBSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_db_instance_from_s3(self, *args, **kwargs):
        __protego_used['rds']['restore_db_instance_from_s3']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["Engine","DBInstanceIdentifier","SourceEngineVersion","S3BucketName","S3IngestionRoleArn","DBInstanceClass","SourceEngine"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RestoreDBInstanceFromS3", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_db_instance_to_point_in_time(self, *args, **kwargs):
        __protego_used['rds']['restore_db_instance_to_point_in_time']=['rds:RestoreDBInstanceToPointInTime','rds:RestoreDBInstanceToPointInTime','rds:RestoreDBInstanceToPointInTime','rds:RestoreDBInstanceToPointInTime']
        for p in ['rds:RestoreDBInstanceToPointInTime','rds:RestoreDBInstanceToPointInTime','rds:RestoreDBInstanceToPointInTime','rds:RestoreDBInstanceToPointInTime']:
            res = {}
            for nm in ["TargetDBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RestoreDBInstanceToPointInTime", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_db_security_group_ingress(self, *args, **kwargs):
        __protego_used['rds']['revoke_db_security_group_ingress']=['rds:RevokeDBSecurityGroupIngress']
        for p in ['rds:RevokeDBSecurityGroupIngress']:
            res = {}
            for nm in ["DBSecurityGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "RevokeDBSecurityGroupIngress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_activity_stream(self, *args, **kwargs):
        __protego_used['rds']['start_activity_stream']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["ResourceArn","Mode","KmsKeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "StartActivityStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_db_cluster(self, *args, **kwargs):
        __protego_used['rds']['start_db_cluster']=['rds:StartDBCluster']
        for p in ['rds:StartDBCluster']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "StartDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_db_instance(self, *args, **kwargs):
        __protego_used['rds']['start_db_instance']=['rds:StartDBInstance']
        for p in ['rds:StartDBInstance']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "StartDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_activity_stream(self, *args, **kwargs):
        __protego_used['rds']['stop_activity_stream']=['rds:*']
        for p in ['rds:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "StopActivityStream", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_db_cluster(self, *args, **kwargs):
        __protego_used['rds']['stop_db_cluster']=['rds:StopDBCluster']
        for p in ['rds:StopDBCluster']:
            res = {}
            for nm in ["DBClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "StopDBCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_db_instance(self, *args, **kwargs):
        __protego_used['rds']['stop_db_instance']=['rds:StopDBInstance']
        for p in ['rds:StopDBInstance']:
            res = {}
            for nm in ["DBInstanceIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds'].append({'action': "StopDBInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class rds_data:
    def __init__(self, region_name=__default_region):
        __protego_used['rds-data']= __protego_used.get('rds-data', {})
        __protego_resource_map['rds-data']=__protego_resource_map.get('rds-data', [])
        self.region = region_name
    def batch_execute_statement(self, *args, **kwargs):
        __protego_used['rds-data']['batch_execute_statement']=['rds-data:*']
        for p in ['rds-data:*']:
            res = {}
            for nm in ["resourceArn","sql","secretArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds-data'].append({'action': "BatchExecuteStatement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def begin_transaction(self, *args, **kwargs):
        __protego_used['rds-data']['begin_transaction']=['rds-data:*']
        for p in ['rds-data:*']:
            res = {}
            for nm in ["resourceArn","secretArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds-data'].append({'action': "BeginTransaction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def commit_transaction(self, *args, **kwargs):
        __protego_used['rds-data']['commit_transaction']=['rds-data:*']
        for p in ['rds-data:*']:
            res = {}
            for nm in ["transactionId","resourceArn","secretArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds-data'].append({'action': "CommitTransaction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def execute_sql(self, *args, **kwargs):
        __protego_used['rds-data']['execute_sql']=['rds-data:*']
        for p in ['rds-data:*']:
            res = {}
            for nm in ["sqlStatements","dbClusterOrInstanceArn","awsSecretStoreArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds-data'].append({'action': "ExecuteSql", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def execute_statement(self, *args, **kwargs):
        __protego_used['rds-data']['execute_statement']=['rds-data:*']
        for p in ['rds-data:*']:
            res = {}
            for nm in ["resourceArn","sql","secretArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds-data'].append({'action': "ExecuteStatement", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def rollback_transaction(self, *args, **kwargs):
        __protego_used['rds-data']['rollback_transaction']=['rds-data:*']
        for p in ['rds-data:*']:
            res = {}
            for nm in ["transactionId","resourceArn","secretArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rds-data'].append({'action': "RollbackTransaction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class redshift:
    def __init__(self, region_name=__default_region):
        __protego_used['redshift']= __protego_used.get('redshift', {})
        __protego_resource_map['redshift']=__protego_resource_map.get('redshift', [])
        self.region = region_name
    def accept_reserved_node_exchange(self, *args, **kwargs):
        __protego_used['redshift']['accept_reserved_node_exchange']=['redshift:*']
        for p in ['redshift:*']:
            res = {}
            for nm in ["TargetReservedNodeOfferingId","ReservedNodeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "AcceptReservedNodeExchange", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def authorize_cluster_security_group_ingress(self, *args, **kwargs):
        __protego_used['redshift']['authorize_cluster_security_group_ingress']=['redshift:AuthorizeClusterSecurityGroupIngress','redshift:AuthorizeClusterSecurityGroupIngress']
        for p in ['redshift:AuthorizeClusterSecurityGroupIngress','redshift:AuthorizeClusterSecurityGroupIngress']:
            res = {}
            for nm in ["ClusterSecurityGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "AuthorizeClusterSecurityGroupIngress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def authorize_snapshot_access(self, *args, **kwargs):
        __protego_used['redshift']['authorize_snapshot_access']=['redshift:AuthorizeSnapshotAccess']
        for p in ['redshift:AuthorizeSnapshotAccess']:
            res = {}
            for nm in ["AccountWithRestoreAccess","SnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "AuthorizeSnapshotAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_delete_cluster_snapshots(self, *args, **kwargs):
        __protego_used['redshift']['batch_delete_cluster_snapshots']=['redshift:BatchDeleteClusterSnapshots']
        for p in ['redshift:BatchDeleteClusterSnapshots']:
            res = {}
            for nm in ["Identifiers"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "BatchDeleteClusterSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_modify_cluster_snapshots(self, *args, **kwargs):
        __protego_used['redshift']['batch_modify_cluster_snapshots']=['redshift:BatchModifyClusterSnapshots']
        for p in ['redshift:BatchModifyClusterSnapshots']:
            res = {}
            for nm in ["SnapshotIdentifierList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "BatchModifyClusterSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_resize(self, *args, **kwargs):
        __protego_used['redshift']['cancel_resize']=['redshift:CancelResize']
        for p in ['redshift:CancelResize']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CancelResize", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_cluster_snapshot(self, *args, **kwargs):
        __protego_used['redshift']['copy_cluster_snapshot']=['redshift:CopyClusterSnapshot']
        for p in ['redshift:CopyClusterSnapshot']:
            res = {}
            for nm in ["TargetSnapshotIdentifier","SourceSnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CopyClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cluster(self, *args, **kwargs):
        __protego_used['redshift']['create_cluster']=['redshift:CreateCluster']
        for p in ['redshift:CreateCluster']:
            res = {}
            for nm in ["MasterUsername","NodeType","MasterUserPassword","ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['redshift']['create_cluster_parameter_group']=['redshift:CreateClusterParameterGroup']
        for p in ['redshift:CreateClusterParameterGroup']:
            res = {}
            for nm in ["Description","ParameterGroupName","ParameterGroupFamily"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cluster_security_group(self, *args, **kwargs):
        __protego_used['redshift']['create_cluster_security_group']=['redshift:CreateClusterSecurityGroup']
        for p in ['redshift:CreateClusterSecurityGroup']:
            res = {}
            for nm in ["ClusterSecurityGroupName","Description"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateClusterSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cluster_snapshot(self, *args, **kwargs):
        __protego_used['redshift']['create_cluster_snapshot']=['redshift:CreateClusterSnapshot']
        for p in ['redshift:CreateClusterSnapshot']:
            res = {}
            for nm in ["SnapshotIdentifier","ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cluster_subnet_group(self, *args, **kwargs):
        __protego_used['redshift']['create_cluster_subnet_group']=['redshift:CreateClusterSubnetGroup']
        for p in ['redshift:CreateClusterSubnetGroup']:
            res = {}
            for nm in ["Description","ClusterSubnetGroupName","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateClusterSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_event_subscription(self, *args, **kwargs):
        __protego_used['redshift']['create_event_subscription']=['redshift:CreateEventSubscription']
        for p in ['redshift:CreateEventSubscription']:
            res = {}
            for nm in ["SnsTopicArn","SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_hsm_client_certificate(self, *args, **kwargs):
        __protego_used['redshift']['create_hsm_client_certificate']=['redshift:CreateHsmClientCertificate']
        for p in ['redshift:CreateHsmClientCertificate']:
            res = {}
            for nm in ["HsmClientCertificateIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateHsmClientCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_hsm_configuration(self, *args, **kwargs):
        __protego_used['redshift']['create_hsm_configuration']=['redshift:CreateHsmConfiguration']
        for p in ['redshift:CreateHsmConfiguration']:
            res = {}
            for nm in ["HsmPartitionName","HsmConfigurationIdentifier","HsmPartitionPassword","HsmServerPublicCertificate","HsmIpAddress","Description"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateHsmConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_scheduled_action(self, *args, **kwargs):
        __protego_used['redshift']['create_scheduled_action']=['redshift:*']
        for p in ['redshift:*']:
            res = {}
            for nm in ["IamRole","TargetAction","ScheduledActionName","Schedule"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateScheduledAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_snapshot_copy_grant(self, *args, **kwargs):
        __protego_used['redshift']['create_snapshot_copy_grant']=['redshift:CreateSnapshotCopyGrant']
        for p in ['redshift:CreateSnapshotCopyGrant']:
            res = {}
            for nm in ["SnapshotCopyGrantName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateSnapshotCopyGrant", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_snapshot_schedule(self, *args, **kwargs):
        __protego_used['redshift']['create_snapshot_schedule']=['redshift:CreateSnapshotSchedule']
        for p in ['redshift:CreateSnapshotSchedule']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateSnapshotSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_tags(self, *args, **kwargs):
        __protego_used['redshift']['create_tags']=['redshift:CreateTags']
        for p in ['redshift:CreateTags']:
            res = {}
            for nm in ["ResourceName","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "CreateTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cluster(self, *args, **kwargs):
        __protego_used['redshift']['delete_cluster']=['redshift:DeleteCluster']
        for p in ['redshift:DeleteCluster']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['redshift']['delete_cluster_parameter_group']=['redshift:DeleteClusterParameterGroup']
        for p in ['redshift:DeleteClusterParameterGroup']:
            res = {}
            for nm in ["ParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cluster_security_group(self, *args, **kwargs):
        __protego_used['redshift']['delete_cluster_security_group']=['redshift:DeleteClusterSecurityGroup']
        for p in ['redshift:DeleteClusterSecurityGroup']:
            res = {}
            for nm in ["ClusterSecurityGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteClusterSecurityGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cluster_snapshot(self, *args, **kwargs):
        __protego_used['redshift']['delete_cluster_snapshot']=['redshift:DeleteClusterSnapshot']
        for p in ['redshift:DeleteClusterSnapshot']:
            res = {}
            for nm in ["SnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_cluster_subnet_group(self, *args, **kwargs):
        __protego_used['redshift']['delete_cluster_subnet_group']=['redshift:DeleteClusterSubnetGroup']
        for p in ['redshift:DeleteClusterSubnetGroup']:
            res = {}
            for nm in ["ClusterSubnetGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteClusterSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_event_subscription(self, *args, **kwargs):
        __protego_used['redshift']['delete_event_subscription']=['redshift:DeleteEventSubscription']
        for p in ['redshift:DeleteEventSubscription']:
            res = {}
            for nm in ["SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_hsm_client_certificate(self, *args, **kwargs):
        __protego_used['redshift']['delete_hsm_client_certificate']=['redshift:DeleteHsmClientCertificate']
        for p in ['redshift:DeleteHsmClientCertificate']:
            res = {}
            for nm in ["HsmClientCertificateIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteHsmClientCertificate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_hsm_configuration(self, *args, **kwargs):
        __protego_used['redshift']['delete_hsm_configuration']=['redshift:DeleteHsmConfiguration']
        for p in ['redshift:DeleteHsmConfiguration']:
            res = {}
            for nm in ["HsmConfigurationIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteHsmConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_scheduled_action(self, *args, **kwargs):
        __protego_used['redshift']['delete_scheduled_action']=['redshift:*']
        for p in ['redshift:*']:
            res = {}
            for nm in ["ScheduledActionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteScheduledAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_snapshot_copy_grant(self, *args, **kwargs):
        __protego_used['redshift']['delete_snapshot_copy_grant']=['redshift:DeleteSnapshotCopyGrant']
        for p in ['redshift:DeleteSnapshotCopyGrant']:
            res = {}
            for nm in ["SnapshotCopyGrantName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteSnapshotCopyGrant", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_snapshot_schedule(self, *args, **kwargs):
        __protego_used['redshift']['delete_snapshot_schedule']=['redshift:DeleteSnapshotSchedule']
        for p in ['redshift:DeleteSnapshotSchedule']:
            res = {}
            for nm in ["ScheduleIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteSnapshotSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tags(self, *args, **kwargs):
        __protego_used['redshift']['delete_tags']=['redshift:DeleteTags']
        for p in ['redshift:DeleteTags']:
            res = {}
            for nm in ["ResourceName","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DeleteTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_attributes(self, *args, **kwargs):
        __protego_used['redshift']['describe_account_attributes']=['redshift:DescribeAccountAttributes']
        for p in ['redshift:DescribeAccountAttributes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeAccountAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster_db_revisions(self, *args, **kwargs):
        __protego_used['redshift']['describe_cluster_db_revisions']=['redshift:*','redshift:DescribeClusterDbRevisions']
        for p in ['redshift:*','redshift:DescribeClusterDbRevisions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeClusterDbRevisions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster_parameter_groups(self, *args, **kwargs):
        __protego_used['redshift']['describe_cluster_parameter_groups']=['redshift:DescribeClusterParameterGroups']
        for p in ['redshift:DescribeClusterParameterGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeClusterParameterGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster_parameters(self, *args, **kwargs):
        __protego_used['redshift']['describe_cluster_parameters']=['redshift:DescribeClusterParameters']
        for p in ['redshift:DescribeClusterParameters']:
            res = {}
            for nm in ["ParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeClusterParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster_security_groups(self, *args, **kwargs):
        __protego_used['redshift']['describe_cluster_security_groups']=['redshift:DescribeClusterSecurityGroups']
        for p in ['redshift:DescribeClusterSecurityGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeClusterSecurityGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster_snapshots(self, *args, **kwargs):
        __protego_used['redshift']['describe_cluster_snapshots']=['redshift:DescribeClusterSnapshots']
        for p in ['redshift:DescribeClusterSnapshots']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeClusterSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster_subnet_groups(self, *args, **kwargs):
        __protego_used['redshift']['describe_cluster_subnet_groups']=['redshift:DescribeClusterSubnetGroups']
        for p in ['redshift:DescribeClusterSubnetGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeClusterSubnetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster_tracks(self, *args, **kwargs):
        __protego_used['redshift']['describe_cluster_tracks']=['redshift:*']
        for p in ['redshift:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeClusterTracks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster_versions(self, *args, **kwargs):
        __protego_used['redshift']['describe_cluster_versions']=['redshift:DescribeClusterVersions']
        for p in ['redshift:DescribeClusterVersions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeClusterVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_clusters(self, *args, **kwargs):
        __protego_used['redshift']['describe_clusters']=['redshift:DescribeClusters']
        for p in ['redshift:DescribeClusters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_default_cluster_parameters(self, *args, **kwargs):
        __protego_used['redshift']['describe_default_cluster_parameters']=['redshift:DescribeDefaultClusterParameters']
        for p in ['redshift:DescribeDefaultClusterParameters']:
            res = {}
            for nm in ["ParameterGroupFamily"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeDefaultClusterParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_categories(self, *args, **kwargs):
        __protego_used['redshift']['describe_event_categories']=['redshift:DescribeEventCategories']
        for p in ['redshift:DescribeEventCategories']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeEventCategories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_event_subscriptions(self, *args, **kwargs):
        __protego_used['redshift']['describe_event_subscriptions']=['redshift:DescribeEventSubscriptions']
        for p in ['redshift:DescribeEventSubscriptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeEventSubscriptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_events(self, *args, **kwargs):
        __protego_used['redshift']['describe_events']=['redshift:DescribeEvents']
        for p in ['redshift:DescribeEvents']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeEvents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_hsm_client_certificates(self, *args, **kwargs):
        __protego_used['redshift']['describe_hsm_client_certificates']=['redshift:DescribeHsmClientCertificates']
        for p in ['redshift:DescribeHsmClientCertificates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeHsmClientCertificates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_hsm_configurations(self, *args, **kwargs):
        __protego_used['redshift']['describe_hsm_configurations']=['redshift:DescribeHsmConfigurations']
        for p in ['redshift:DescribeHsmConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeHsmConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_logging_status(self, *args, **kwargs):
        __protego_used['redshift']['describe_logging_status']=['redshift:DescribeLoggingStatus']
        for p in ['redshift:DescribeLoggingStatus']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeLoggingStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_node_configuration_options(self, *args, **kwargs):
        __protego_used['redshift']['describe_node_configuration_options']=['redshift:*']
        for p in ['redshift:*']:
            res = {}
            for nm in ["ActionType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeNodeConfigurationOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_orderable_cluster_options(self, *args, **kwargs):
        __protego_used['redshift']['describe_orderable_cluster_options']=['redshift:DescribeOrderableClusterOptions']
        for p in ['redshift:DescribeOrderableClusterOptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeOrderableClusterOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_node_offerings(self, *args, **kwargs):
        __protego_used['redshift']['describe_reserved_node_offerings']=['redshift:DescribeReservedNodeOfferings']
        for p in ['redshift:DescribeReservedNodeOfferings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeReservedNodeOfferings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_reserved_nodes(self, *args, **kwargs):
        __protego_used['redshift']['describe_reserved_nodes']=['redshift:DescribeReservedNodes']
        for p in ['redshift:DescribeReservedNodes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeReservedNodes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_resize(self, *args, **kwargs):
        __protego_used['redshift']['describe_resize']=['redshift:DescribeResize']
        for p in ['redshift:DescribeResize']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeResize", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_scheduled_actions(self, *args, **kwargs):
        __protego_used['redshift']['describe_scheduled_actions']=['redshift:*']
        for p in ['redshift:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeScheduledActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_snapshot_copy_grants(self, *args, **kwargs):
        __protego_used['redshift']['describe_snapshot_copy_grants']=['redshift:DescribeSnapshotCopyGrants']
        for p in ['redshift:DescribeSnapshotCopyGrants']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeSnapshotCopyGrants", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_snapshot_schedules(self, *args, **kwargs):
        __protego_used['redshift']['describe_snapshot_schedules']=['redshift:DescribeSnapshotSchedules']
        for p in ['redshift:DescribeSnapshotSchedules']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeSnapshotSchedules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_storage(self, *args, **kwargs):
        __protego_used['redshift']['describe_storage']=['redshift:DescribeStorage']
        for p in ['redshift:DescribeStorage']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeStorage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_table_restore_status(self, *args, **kwargs):
        __protego_used['redshift']['describe_table_restore_status']=['redshift:DescribeTableRestoreStatus']
        for p in ['redshift:DescribeTableRestoreStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeTableRestoreStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tags(self, *args, **kwargs):
        __protego_used['redshift']['describe_tags']=['redshift:DescribeTags']
        for p in ['redshift:DescribeTags']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DescribeTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_logging(self, *args, **kwargs):
        __protego_used['redshift']['disable_logging']=['redshift:DisableLogging']
        for p in ['redshift:DisableLogging']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DisableLogging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_snapshot_copy(self, *args, **kwargs):
        __protego_used['redshift']['disable_snapshot_copy']=['redshift:DisableSnapshotCopy']
        for p in ['redshift:DisableSnapshotCopy']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "DisableSnapshotCopy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_logging(self, *args, **kwargs):
        __protego_used['redshift']['enable_logging']=['redshift:EnableLogging']
        for p in ['redshift:EnableLogging']:
            res = {}
            for nm in ["BucketName","ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "EnableLogging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_snapshot_copy(self, *args, **kwargs):
        __protego_used['redshift']['enable_snapshot_copy']=['redshift:EnableSnapshotCopy']
        for p in ['redshift:EnableSnapshotCopy']:
            res = {}
            for nm in ["DestinationRegion","ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "EnableSnapshotCopy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_cluster_credentials(self, *args, **kwargs):
        __protego_used['redshift']['get_cluster_credentials']=['redshift:GetClusterCredentials','redshift:GetClusterCredentials','redshift:GetClusterCredentials']
        for p in ['redshift:GetClusterCredentials','redshift:GetClusterCredentials','redshift:GetClusterCredentials']:
            res = {}
            for nm in ["DbUser","ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "GetClusterCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_reserved_node_exchange_offerings(self, *args, **kwargs):
        __protego_used['redshift']['get_reserved_node_exchange_offerings']=['redshift:*']
        for p in ['redshift:*']:
            res = {}
            for nm in ["ReservedNodeId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "GetReservedNodeExchangeOfferings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cluster(self, *args, **kwargs):
        __protego_used['redshift']['modify_cluster']=['redshift:ModifyCluster']
        for p in ['redshift:ModifyCluster']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifyCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cluster_db_revision(self, *args, **kwargs):
        __protego_used['redshift']['modify_cluster_db_revision']=['redshift:*']
        for p in ['redshift:*']:
            res = {}
            for nm in ["RevisionTarget","ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifyClusterDbRevision", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cluster_iam_roles(self, *args, **kwargs):
        __protego_used['redshift']['modify_cluster_iam_roles']=['redshift:ModifyClusterIamRoles']
        for p in ['redshift:ModifyClusterIamRoles']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifyClusterIamRoles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cluster_maintenance(self, *args, **kwargs):
        __protego_used['redshift']['modify_cluster_maintenance']=[':ModifyClusterMaintenance']
        for p in [':ModifyClusterMaintenance']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifyClusterMaintenance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['redshift']['modify_cluster_parameter_group']=['redshift:ModifyClusterParameterGroup']
        for p in ['redshift:ModifyClusterParameterGroup']:
            res = {}
            for nm in ["Parameters","ParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifyClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cluster_snapshot(self, *args, **kwargs):
        __protego_used['redshift']['modify_cluster_snapshot']=['redshift:ModifyClusterSnapshot']
        for p in ['redshift:ModifyClusterSnapshot']:
            res = {}
            for nm in ["SnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifyClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cluster_snapshot_schedule(self, *args, **kwargs):
        __protego_used['redshift']['modify_cluster_snapshot_schedule']=['redshift:ModifyClusterSnapshotSchedule']
        for p in ['redshift:ModifyClusterSnapshotSchedule']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifyClusterSnapshotSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_cluster_subnet_group(self, *args, **kwargs):
        __protego_used['redshift']['modify_cluster_subnet_group']=['redshift:ModifyClusterSubnetGroup']
        for p in ['redshift:ModifyClusterSubnetGroup']:
            res = {}
            for nm in ["ClusterSubnetGroupName","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifyClusterSubnetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_event_subscription(self, *args, **kwargs):
        __protego_used['redshift']['modify_event_subscription']=['redshift:ModifyEventSubscription']
        for p in ['redshift:ModifyEventSubscription']:
            res = {}
            for nm in ["SubscriptionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifyEventSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_scheduled_action(self, *args, **kwargs):
        __protego_used['redshift']['modify_scheduled_action']=['redshift:*']
        for p in ['redshift:*']:
            res = {}
            for nm in ["ScheduledActionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifyScheduledAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_snapshot_copy_retention_period(self, *args, **kwargs):
        __protego_used['redshift']['modify_snapshot_copy_retention_period']=['redshift:ModifySnapshotCopyRetentionPeriod']
        for p in ['redshift:ModifySnapshotCopyRetentionPeriod']:
            res = {}
            for nm in ["RetentionPeriod","ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifySnapshotCopyRetentionPeriod", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_snapshot_schedule(self, *args, **kwargs):
        __protego_used['redshift']['modify_snapshot_schedule']=['redshift:ModifySnapshotSchedule']
        for p in ['redshift:ModifySnapshotSchedule']:
            res = {}
            for nm in ["ScheduleDefinitions","ScheduleIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ModifySnapshotSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def purchase_reserved_node_offering(self, *args, **kwargs):
        __protego_used['redshift']['purchase_reserved_node_offering']=['redshift:PurchaseReservedNodeOffering']
        for p in ['redshift:PurchaseReservedNodeOffering']:
            res = {}
            for nm in ["ReservedNodeOfferingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "PurchaseReservedNodeOffering", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_cluster(self, *args, **kwargs):
        __protego_used['redshift']['reboot_cluster']=['redshift:RebootCluster']
        for p in ['redshift:RebootCluster']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "RebootCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_cluster_parameter_group(self, *args, **kwargs):
        __protego_used['redshift']['reset_cluster_parameter_group']=['redshift:ResetClusterParameterGroup']
        for p in ['redshift:ResetClusterParameterGroup']:
            res = {}
            for nm in ["ParameterGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ResetClusterParameterGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def resize_cluster(self, *args, **kwargs):
        __protego_used['redshift']['resize_cluster']=['redshift:*']
        for p in ['redshift:*']:
            res = {}
            for nm in ["NumberOfNodes","ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "ResizeCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_from_cluster_snapshot(self, *args, **kwargs):
        __protego_used['redshift']['restore_from_cluster_snapshot']=['redshift:RestoreFromClusterSnapshot']
        for p in ['redshift:RestoreFromClusterSnapshot']:
            res = {}
            for nm in ["SnapshotIdentifier","ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "RestoreFromClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_table_from_cluster_snapshot(self, *args, **kwargs):
        __protego_used['redshift']['restore_table_from_cluster_snapshot']=['redshift:RestoreTableFromClusterSnapshot','redshift:RestoreTableFromClusterSnapshot']
        for p in ['redshift:RestoreTableFromClusterSnapshot','redshift:RestoreTableFromClusterSnapshot']:
            res = {}
            for nm in ["SnapshotIdentifier","NewTableName","SourceDatabaseName","SourceTableName","ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "RestoreTableFromClusterSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_cluster_security_group_ingress(self, *args, **kwargs):
        __protego_used['redshift']['revoke_cluster_security_group_ingress']=['redshift:RevokeClusterSecurityGroupIngress','redshift:RevokeClusterSecurityGroupIngress']
        for p in ['redshift:RevokeClusterSecurityGroupIngress','redshift:RevokeClusterSecurityGroupIngress']:
            res = {}
            for nm in ["ClusterSecurityGroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "RevokeClusterSecurityGroupIngress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_snapshot_access(self, *args, **kwargs):
        __protego_used['redshift']['revoke_snapshot_access']=['redshift:RevokeSnapshotAccess']
        for p in ['redshift:RevokeSnapshotAccess']:
            res = {}
            for nm in ["AccountWithRestoreAccess","SnapshotIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "RevokeSnapshotAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def rotate_encryption_key(self, *args, **kwargs):
        __protego_used['redshift']['rotate_encryption_key']=['redshift:RotateEncryptionKey']
        for p in ['redshift:RotateEncryptionKey']:
            res = {}
            for nm in ["ClusterIdentifier"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['redshift'].append({'action': "RotateEncryptionKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class rekognition:
    def __init__(self, region_name=__default_region):
        __protego_used['rekognition']= __protego_used.get('rekognition', {})
        __protego_resource_map['rekognition']=__protego_resource_map.get('rekognition', [])
        self.region = region_name
    def compare_faces(self, *args, **kwargs):
        __protego_used['rekognition']['compare_faces']=['rekognition:CompareFaces']
        for p in ['rekognition:CompareFaces']:
            res = {}
            for nm in ["TargetImage","SourceImage"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "CompareFaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_collection(self, *args, **kwargs):
        __protego_used['rekognition']['create_collection']=['rekognition:CreateCollection']
        for p in ['rekognition:CreateCollection']:
            res = {}
            for nm in ["CollectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "CreateCollection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_project(self, *args, **kwargs):
        __protego_used['rekognition']['create_project']=['rekognition:*']
        for p in ['rekognition:*']:
            res = {}
            for nm in ["ProjectName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "CreateProject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_project_version(self, *args, **kwargs):
        __protego_used['rekognition']['create_project_version']=['rekognition:*']
        for p in ['rekognition:*']:
            res = {}
            for nm in ["VersionName","OutputConfig","ProjectArn","TestingData","TrainingData"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "CreateProjectVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stream_processor(self, *args, **kwargs):
        __protego_used['rekognition']['create_stream_processor']=['rekognition:CreateStreamProcessor','rekognition:CreateStreamProcessor']
        for p in ['rekognition:CreateStreamProcessor','rekognition:CreateStreamProcessor']:
            res = {}
            for nm in ["Settings","Name","RoleArn","Output","Input"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "CreateStreamProcessor", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_collection(self, *args, **kwargs):
        __protego_used['rekognition']['delete_collection']=['rekognition:*']
        for p in ['rekognition:*']:
            res = {}
            for nm in ["CollectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DeleteCollection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_faces(self, *args, **kwargs):
        __protego_used['rekognition']['delete_faces']=['rekognition:DeleteFaces']
        for p in ['rekognition:DeleteFaces']:
            res = {}
            for nm in ["CollectionId","FaceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DeleteFaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_stream_processor(self, *args, **kwargs):
        __protego_used['rekognition']['delete_stream_processor']=['rekognition:DeleteStreamProcessor']
        for p in ['rekognition:DeleteStreamProcessor']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DeleteStreamProcessor", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_collection(self, *args, **kwargs):
        __protego_used['rekognition']['describe_collection']=['rekognition:DescribeCollection']
        for p in ['rekognition:DescribeCollection']:
            res = {}
            for nm in ["CollectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DescribeCollection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_project_versions(self, *args, **kwargs):
        __protego_used['rekognition']['describe_project_versions']=['rekognition:*']
        for p in ['rekognition:*']:
            res = {}
            for nm in ["ProjectArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DescribeProjectVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_projects(self, *args, **kwargs):
        __protego_used['rekognition']['describe_projects']=['rekognition:*']
        for p in ['rekognition:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DescribeProjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stream_processor(self, *args, **kwargs):
        __protego_used['rekognition']['describe_stream_processor']=['rekognition:DescribeStreamProcessor']
        for p in ['rekognition:DescribeStreamProcessor']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DescribeStreamProcessor", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_custom_labels(self, *args, **kwargs):
        __protego_used['rekognition']['detect_custom_labels']=['rekognition:*']
        for p in ['rekognition:*']:
            res = {}
            for nm in ["ProjectVersionArn","Image"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DetectCustomLabels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_faces(self, *args, **kwargs):
        __protego_used['rekognition']['detect_faces']=['rekognition:DetectFaces']
        for p in ['rekognition:DetectFaces']:
            res = {}
            for nm in ["Image"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DetectFaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_labels(self, *args, **kwargs):
        __protego_used['rekognition']['detect_labels']=['rekognition:DetectLabels']
        for p in ['rekognition:DetectLabels']:
            res = {}
            for nm in ["Image"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DetectLabels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_moderation_labels(self, *args, **kwargs):
        __protego_used['rekognition']['detect_moderation_labels']=['rekognition:DetectModerationLabels']
        for p in ['rekognition:DetectModerationLabels']:
            res = {}
            for nm in ["Image"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DetectModerationLabels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_text(self, *args, **kwargs):
        __protego_used['rekognition']['detect_text']=['rekognition:DetectText']
        for p in ['rekognition:DetectText']:
            res = {}
            for nm in ["Image"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "DetectText", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_celebrity_info(self, *args, **kwargs):
        __protego_used['rekognition']['get_celebrity_info']=['rekognition:GetCelebrityInfo']
        for p in ['rekognition:GetCelebrityInfo']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "GetCelebrityInfo", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_celebrity_recognition(self, *args, **kwargs):
        __protego_used['rekognition']['get_celebrity_recognition']=['rekognition:GetCelebrityRecognition']
        for p in ['rekognition:GetCelebrityRecognition']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "GetCelebrityRecognition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_content_moderation(self, *args, **kwargs):
        __protego_used['rekognition']['get_content_moderation']=['rekognition:GetContentModeration']
        for p in ['rekognition:GetContentModeration']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "GetContentModeration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_face_detection(self, *args, **kwargs):
        __protego_used['rekognition']['get_face_detection']=['rekognition:GetFaceDetection']
        for p in ['rekognition:GetFaceDetection']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "GetFaceDetection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_face_search(self, *args, **kwargs):
        __protego_used['rekognition']['get_face_search']=['rekognition:GetFaceSearch']
        for p in ['rekognition:GetFaceSearch']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "GetFaceSearch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_label_detection(self, *args, **kwargs):
        __protego_used['rekognition']['get_label_detection']=['rekognition:GetLabelDetection']
        for p in ['rekognition:GetLabelDetection']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "GetLabelDetection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_person_tracking(self, *args, **kwargs):
        __protego_used['rekognition']['get_person_tracking']=['rekognition:GetPersonTracking']
        for p in ['rekognition:GetPersonTracking']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "GetPersonTracking", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def index_faces(self, *args, **kwargs):
        __protego_used['rekognition']['index_faces']=['rekognition:IndexFaces']
        for p in ['rekognition:IndexFaces']:
            res = {}
            for nm in ["CollectionId","Image"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "IndexFaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_collections(self, *args, **kwargs):
        __protego_used['rekognition']['list_collections']=['rekognition:ListCollections']
        for p in ['rekognition:ListCollections']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "ListCollections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_faces(self, *args, **kwargs):
        __protego_used['rekognition']['list_faces']=['rekognition:ListFaces']
        for p in ['rekognition:ListFaces']:
            res = {}
            for nm in ["CollectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "ListFaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_stream_processors(self, *args, **kwargs):
        __protego_used['rekognition']['list_stream_processors']=['rekognition:ListStreamProcessors']
        for p in ['rekognition:ListStreamProcessors']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "ListStreamProcessors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def recognize_celebrities(self, *args, **kwargs):
        __protego_used['rekognition']['recognize_celebrities']=['rekognition:RecognizeCelebrities']
        for p in ['rekognition:RecognizeCelebrities']:
            res = {}
            for nm in ["Image"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "RecognizeCelebrities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_faces(self, *args, **kwargs):
        __protego_used['rekognition']['search_faces']=['rekognition:SearchFaces']
        for p in ['rekognition:SearchFaces']:
            res = {}
            for nm in ["CollectionId","FaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "SearchFaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_faces_by_image(self, *args, **kwargs):
        __protego_used['rekognition']['search_faces_by_image']=['rekognition:SearchFacesByImage']
        for p in ['rekognition:SearchFacesByImage']:
            res = {}
            for nm in ["CollectionId","Image"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "SearchFacesByImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_celebrity_recognition(self, *args, **kwargs):
        __protego_used['rekognition']['start_celebrity_recognition']=['rekognition:StartCelebrityRecognition']
        for p in ['rekognition:StartCelebrityRecognition']:
            res = {}
            for nm in ["Video"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "StartCelebrityRecognition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_content_moderation(self, *args, **kwargs):
        __protego_used['rekognition']['start_content_moderation']=['rekognition:StartContentModeration']
        for p in ['rekognition:StartContentModeration']:
            res = {}
            for nm in ["Video"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "StartContentModeration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_face_detection(self, *args, **kwargs):
        __protego_used['rekognition']['start_face_detection']=['rekognition:StartFaceDetection']
        for p in ['rekognition:StartFaceDetection']:
            res = {}
            for nm in ["Video"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "StartFaceDetection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_face_search(self, *args, **kwargs):
        __protego_used['rekognition']['start_face_search']=['rekognition:StartFaceSearch']
        for p in ['rekognition:StartFaceSearch']:
            res = {}
            for nm in ["CollectionId","Video"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "StartFaceSearch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_label_detection(self, *args, **kwargs):
        __protego_used['rekognition']['start_label_detection']=['rekognition:StartLabelDetection']
        for p in ['rekognition:StartLabelDetection']:
            res = {}
            for nm in ["Video"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "StartLabelDetection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_person_tracking(self, *args, **kwargs):
        __protego_used['rekognition']['start_person_tracking']=['rekognition:StartPersonTracking']
        for p in ['rekognition:StartPersonTracking']:
            res = {}
            for nm in ["Video"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "StartPersonTracking", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_project_version(self, *args, **kwargs):
        __protego_used['rekognition']['start_project_version']=['rekognition:*']
        for p in ['rekognition:*']:
            res = {}
            for nm in ["ProjectVersionArn","MinInferenceUnits"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "StartProjectVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_stream_processor(self, *args, **kwargs):
        __protego_used['rekognition']['start_stream_processor']=['rekognition:StartStreamProcessor']
        for p in ['rekognition:StartStreamProcessor']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "StartStreamProcessor", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_project_version(self, *args, **kwargs):
        __protego_used['rekognition']['stop_project_version']=['rekognition:*']
        for p in ['rekognition:*']:
            res = {}
            for nm in ["ProjectVersionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "StopProjectVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_stream_processor(self, *args, **kwargs):
        __protego_used['rekognition']['stop_stream_processor']=['rekognition:StopStreamProcessor']
        for p in ['rekognition:StopStreamProcessor']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['rekognition'].append({'action': "StopStreamProcessor", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class resource_groups:
    def __init__(self, region_name=__default_region):
        __protego_used['resource-groups']= __protego_used.get('resource-groups', {})
        __protego_resource_map['resource-groups']=__protego_resource_map.get('resource-groups', [])
        self.region = region_name
    def create_group(self, *args, **kwargs):
        __protego_used['resource-groups']['create_group']=['resource-groups:CreateGroup']
        for p in ['resource-groups:CreateGroup']:
            res = {}
            for nm in ["ResourceQuery","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "CreateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_group(self, *args, **kwargs):
        __protego_used['resource-groups']['delete_group']=['resource-groups:DeleteGroup']
        for p in ['resource-groups:DeleteGroup']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "DeleteGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_group(self, *args, **kwargs):
        __protego_used['resource-groups']['get_group']=['resource-groups:GetGroup']
        for p in ['resource-groups:GetGroup']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "GetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_group_query(self, *args, **kwargs):
        __protego_used['resource-groups']['get_group_query']=['resource-groups:GetGroupQuery']
        for p in ['resource-groups:GetGroupQuery']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "GetGroupQuery", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_tags(self, *args, **kwargs):
        __protego_used['resource-groups']['get_tags']=['resource-groups:GetTags']
        for p in ['resource-groups:GetTags']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "GetTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_group_resources(self, *args, **kwargs):
        __protego_used['resource-groups']['list_group_resources']=['resource-groups:ListGroupResources']
        for p in ['resource-groups:ListGroupResources']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "ListGroupResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_groups(self, *args, **kwargs):
        __protego_used['resource-groups']['list_groups']=['resource-groups:ListGroups']
        for p in ['resource-groups:ListGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "ListGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_resources(self, *args, **kwargs):
        __protego_used['resource-groups']['search_resources']=['resource-groups:SearchResources']
        for p in ['resource-groups:SearchResources']:
            res = {}
            for nm in ["ResourceQuery"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "SearchResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag(self, *args, **kwargs):
        __protego_used['resource-groups']['tag']=['resource-groups:Tag']
        for p in ['resource-groups:Tag']:
            res = {}
            for nm in ["Arn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "Tag", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag(self, *args, **kwargs):
        __protego_used['resource-groups']['untag']=['resource-groups:Untag']
        for p in ['resource-groups:Untag']:
            res = {}
            for nm in ["Arn","Keys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "Untag", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_group(self, *args, **kwargs):
        __protego_used['resource-groups']['update_group']=['resource-groups:UpdateGroup']
        for p in ['resource-groups:UpdateGroup']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "UpdateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_group_query(self, *args, **kwargs):
        __protego_used['resource-groups']['update_group_query']=['resource-groups:UpdateGroupQuery']
        for p in ['resource-groups:UpdateGroupQuery']:
            res = {}
            for nm in ["GroupName","ResourceQuery"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resource-groups'].append({'action': "UpdateGroupQuery", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class resourcegroupstaggingapi:
    def __init__(self, region_name=__default_region):
        __protego_used['resourcegroupstaggingapi']= __protego_used.get('resourcegroupstaggingapi', {})
        __protego_resource_map['resourcegroupstaggingapi']=__protego_resource_map.get('resourcegroupstaggingapi', [])
        self.region = region_name
    def describe_report_creation(self, *args, **kwargs):
        __protego_used['resourcegroupstaggingapi']['describe_report_creation']=['resourcegroupstaggingapi:*']
        for p in ['resourcegroupstaggingapi:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resourcegroupstaggingapi'].append({'action': "DescribeReportCreation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_compliance_summary(self, *args, **kwargs):
        __protego_used['resourcegroupstaggingapi']['get_compliance_summary']=['resourcegroupstaggingapi:*']
        for p in ['resourcegroupstaggingapi:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resourcegroupstaggingapi'].append({'action': "GetComplianceSummary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resources(self, *args, **kwargs):
        __protego_used['resourcegroupstaggingapi']['get_resources']=['tag:GetResources']
        for p in ['tag:GetResources']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resourcegroupstaggingapi'].append({'action': "GetResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_tag_keys(self, *args, **kwargs):
        __protego_used['resourcegroupstaggingapi']['get_tag_keys']=['tag:GetTagKeys']
        for p in ['tag:GetTagKeys']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resourcegroupstaggingapi'].append({'action': "GetTagKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_tag_values(self, *args, **kwargs):
        __protego_used['resourcegroupstaggingapi']['get_tag_values']=['tag:GetTagValues']
        for p in ['tag:GetTagValues']:
            res = {}
            for nm in ["Key"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resourcegroupstaggingapi'].append({'action': "GetTagValues", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_report_creation(self, *args, **kwargs):
        __protego_used['resourcegroupstaggingapi']['start_report_creation']=['resourcegroupstaggingapi:*']
        for p in ['resourcegroupstaggingapi:*']:
            res = {}
            for nm in ["S3Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resourcegroupstaggingapi'].append({'action': "StartReportCreation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resources(self, *args, **kwargs):
        __protego_used['resourcegroupstaggingapi']['tag_resources']=['tag:TagResources']
        for p in ['tag:TagResources']:
            res = {}
            for nm in ["ResourceARNList","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resourcegroupstaggingapi'].append({'action': "TagResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resources(self, *args, **kwargs):
        __protego_used['resourcegroupstaggingapi']['untag_resources']=['tag:UntagResources']
        for p in ['tag:UntagResources']:
            res = {}
            for nm in ["ResourceARNList","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['resourcegroupstaggingapi'].append({'action': "UntagResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class robomaker:
    def __init__(self, region_name=__default_region):
        __protego_used['robomaker']= __protego_used.get('robomaker', {})
        __protego_resource_map['robomaker']=__protego_resource_map.get('robomaker', [])
        self.region = region_name
    def batch_describe_simulation_job(self, *args, **kwargs):
        __protego_used['robomaker']['batch_describe_simulation_job']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["jobs"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "BatchDescribeSimulationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_deployment_job(self, *args, **kwargs):
        __protego_used['robomaker']['cancel_deployment_job']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["job"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "CancelDeploymentJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_simulation_job(self, *args, **kwargs):
        __protego_used['robomaker']['cancel_simulation_job']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["job"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "CancelSimulationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deployment_job(self, *args, **kwargs):
        __protego_used['robomaker']['create_deployment_job']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["clientRequestToken","deploymentApplicationConfigs","fleet"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "CreateDeploymentJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_fleet(self, *args, **kwargs):
        __protego_used['robomaker']['create_fleet']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "CreateFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_robot(self, *args, **kwargs):
        __protego_used['robomaker']['create_robot']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["greengrassGroupId","name","architecture"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "CreateRobot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_robot_application(self, *args, **kwargs):
        __protego_used['robomaker']['create_robot_application']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["sources","name","robotSoftwareSuite"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "CreateRobotApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_robot_application_version(self, *args, **kwargs):
        __protego_used['robomaker']['create_robot_application_version']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["application"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "CreateRobotApplicationVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_simulation_application(self, *args, **kwargs):
        __protego_used['robomaker']['create_simulation_application']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["sources","name","robotSoftwareSuite","simulationSoftwareSuite"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "CreateSimulationApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_simulation_application_version(self, *args, **kwargs):
        __protego_used['robomaker']['create_simulation_application_version']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["application"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "CreateSimulationApplicationVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_simulation_job(self, *args, **kwargs):
        __protego_used['robomaker']['create_simulation_job']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["iamRole","maxJobDurationInSeconds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "CreateSimulationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_fleet(self, *args, **kwargs):
        __protego_used['robomaker']['delete_fleet']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["fleet"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "DeleteFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_robot(self, *args, **kwargs):
        __protego_used['robomaker']['delete_robot']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["robot"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "DeleteRobot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_robot_application(self, *args, **kwargs):
        __protego_used['robomaker']['delete_robot_application']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["application"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "DeleteRobotApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_simulation_application(self, *args, **kwargs):
        __protego_used['robomaker']['delete_simulation_application']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["application"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "DeleteSimulationApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_robot(self, *args, **kwargs):
        __protego_used['robomaker']['deregister_robot']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["robot","fleet"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "DeregisterRobot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_deployment_job(self, *args, **kwargs):
        __protego_used['robomaker']['describe_deployment_job']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["job"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "DescribeDeploymentJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fleet(self, *args, **kwargs):
        __protego_used['robomaker']['describe_fleet']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["fleet"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "DescribeFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_robot(self, *args, **kwargs):
        __protego_used['robomaker']['describe_robot']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["robot"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "DescribeRobot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_robot_application(self, *args, **kwargs):
        __protego_used['robomaker']['describe_robot_application']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["application"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "DescribeRobotApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_simulation_application(self, *args, **kwargs):
        __protego_used['robomaker']['describe_simulation_application']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["application"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "DescribeSimulationApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_simulation_job(self, *args, **kwargs):
        __protego_used['robomaker']['describe_simulation_job']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["job"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "DescribeSimulationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_deployment_jobs(self, *args, **kwargs):
        __protego_used['robomaker']['list_deployment_jobs']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "ListDeploymentJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_fleets(self, *args, **kwargs):
        __protego_used['robomaker']['list_fleets']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "ListFleets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_robot_applications(self, *args, **kwargs):
        __protego_used['robomaker']['list_robot_applications']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "ListRobotApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_robots(self, *args, **kwargs):
        __protego_used['robomaker']['list_robots']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "ListRobots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_simulation_applications(self, *args, **kwargs):
        __protego_used['robomaker']['list_simulation_applications']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "ListSimulationApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_simulation_jobs(self, *args, **kwargs):
        __protego_used['robomaker']['list_simulation_jobs']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "ListSimulationJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['robomaker']['list_tags_for_resource']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_robot(self, *args, **kwargs):
        __protego_used['robomaker']['register_robot']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["robot","fleet"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "RegisterRobot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restart_simulation_job(self, *args, **kwargs):
        __protego_used['robomaker']['restart_simulation_job']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["job"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "RestartSimulationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def sync_deployment_job(self, *args, **kwargs):
        __protego_used['robomaker']['sync_deployment_job']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["clientRequestToken","fleet"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "SyncDeploymentJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['robomaker']['tag_resource']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['robomaker']['untag_resource']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_robot_application(self, *args, **kwargs):
        __protego_used['robomaker']['update_robot_application']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["sources","application","robotSoftwareSuite"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "UpdateRobotApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_simulation_application(self, *args, **kwargs):
        __protego_used['robomaker']['update_simulation_application']=['robomaker:*']
        for p in ['robomaker:*']:
            res = {}
            for nm in ["sources","simulationSoftwareSuite","application","robotSoftwareSuite"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['robomaker'].append({'action': "UpdateSimulationApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class route53:
    def __init__(self, region_name=__default_region):
        __protego_used['route53']= __protego_used.get('route53', {})
        __protego_resource_map['route53']=__protego_resource_map.get('route53', [])
        self.region = region_name
    def associate_vpc_with_hosted_zone(self, *args, **kwargs):
        __protego_used['route53']['associate_vpc_with_hosted_zone']=['route53:AssociateVPCWithHostedZone']
        for p in ['route53:AssociateVPCWithHostedZone']:
            res = {}
            for nm in ["VPC","HostedZoneId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "AssociateVPCWithHostedZone", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def change_resource_record_sets(self, *args, **kwargs):
        __protego_used['route53']['change_resource_record_sets']=['route53:ChangeResourceRecordSets']
        for p in ['route53:ChangeResourceRecordSets']:
            res = {}
            for nm in ["HostedZoneId","ChangeBatch"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ChangeResourceRecordSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def change_tags_for_resource(self, *args, **kwargs):
        __protego_used['route53']['change_tags_for_resource']=['route53:ChangeTagsForResource','route53:ChangeTagsForResource']
        for p in ['route53:ChangeTagsForResource','route53:ChangeTagsForResource']:
            res = {}
            for nm in ["ResourceId","ResourceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ChangeTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_health_check(self, *args, **kwargs):
        __protego_used['route53']['create_health_check']=['route53:CreateHealthCheck']
        for p in ['route53:CreateHealthCheck']:
            res = {}
            for nm in ["HealthCheckConfig","CallerReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "CreateHealthCheck", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_hosted_zone(self, *args, **kwargs):
        __protego_used['route53']['create_hosted_zone']=['route53:CreateHostedZone']
        for p in ['route53:CreateHostedZone']:
            res = {}
            for nm in ["Name","CallerReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "CreateHostedZone", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_query_logging_config(self, *args, **kwargs):
        __protego_used['route53']['create_query_logging_config']=['route53:CreateQueryLoggingConfig']
        for p in ['route53:CreateQueryLoggingConfig']:
            res = {}
            for nm in ["CloudWatchLogsLogGroupArn","HostedZoneId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "CreateQueryLoggingConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_reusable_delegation_set(self, *args, **kwargs):
        __protego_used['route53']['create_reusable_delegation_set']=['route53:CreateReusableDelegationSet']
        for p in ['route53:CreateReusableDelegationSet']:
            res = {}
            for nm in ["CallerReference"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "CreateReusableDelegationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_traffic_policy(self, *args, **kwargs):
        __protego_used['route53']['create_traffic_policy']=['route53:CreateTrafficPolicy']
        for p in ['route53:CreateTrafficPolicy']:
            res = {}
            for nm in ["Document","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "CreateTrafficPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_traffic_policy_instance(self, *args, **kwargs):
        __protego_used['route53']['create_traffic_policy_instance']=['route53:CreateTrafficPolicyInstance','route53:CreateTrafficPolicyInstance']
        for p in ['route53:CreateTrafficPolicyInstance','route53:CreateTrafficPolicyInstance']:
            res = {}
            for nm in ["TrafficPolicyVersion","Name","HostedZoneId","TrafficPolicyId","TTL"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "CreateTrafficPolicyInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_traffic_policy_version(self, *args, **kwargs):
        __protego_used['route53']['create_traffic_policy_version']=['route53:CreateTrafficPolicyVersion']
        for p in ['route53:CreateTrafficPolicyVersion']:
            res = {}
            for nm in ["Document","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "CreateTrafficPolicyVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vpc_association_authorization(self, *args, **kwargs):
        __protego_used['route53']['create_vpc_association_authorization']=['route53:CreateVPCAssociationAuthorization']
        for p in ['route53:CreateVPCAssociationAuthorization']:
            res = {}
            for nm in ["VPC","HostedZoneId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "CreateVPCAssociationAuthorization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_health_check(self, *args, **kwargs):
        __protego_used['route53']['delete_health_check']=['route53:DeleteHealthCheck']
        for p in ['route53:DeleteHealthCheck']:
            res = {}
            for nm in ["HealthCheckId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "DeleteHealthCheck", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_hosted_zone(self, *args, **kwargs):
        __protego_used['route53']['delete_hosted_zone']=['route53:DeleteHostedZone']
        for p in ['route53:DeleteHostedZone']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "DeleteHostedZone", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_query_logging_config(self, *args, **kwargs):
        __protego_used['route53']['delete_query_logging_config']=['route53:DeleteQueryLoggingConfig']
        for p in ['route53:DeleteQueryLoggingConfig']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "DeleteQueryLoggingConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_reusable_delegation_set(self, *args, **kwargs):
        __protego_used['route53']['delete_reusable_delegation_set']=['route53:DeleteReusableDelegationSet']
        for p in ['route53:DeleteReusableDelegationSet']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "DeleteReusableDelegationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_traffic_policy(self, *args, **kwargs):
        __protego_used['route53']['delete_traffic_policy']=['route53:DeleteTrafficPolicy']
        for p in ['route53:DeleteTrafficPolicy']:
            res = {}
            for nm in ["Version","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "DeleteTrafficPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_traffic_policy_instance(self, *args, **kwargs):
        __protego_used['route53']['delete_traffic_policy_instance']=['route53:DeleteTrafficPolicyInstance']
        for p in ['route53:DeleteTrafficPolicyInstance']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "DeleteTrafficPolicyInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vpc_association_authorization(self, *args, **kwargs):
        __protego_used['route53']['delete_vpc_association_authorization']=['route53:DeleteVPCAssociationAuthorization']
        for p in ['route53:DeleteVPCAssociationAuthorization']:
            res = {}
            for nm in ["VPC","HostedZoneId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "DeleteVPCAssociationAuthorization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_vpc_from_hosted_zone(self, *args, **kwargs):
        __protego_used['route53']['disassociate_vpc_from_hosted_zone']=['route53:DisassociateVPCFromHostedZone']
        for p in ['route53:DisassociateVPCFromHostedZone']:
            res = {}
            for nm in ["VPC","HostedZoneId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "DisassociateVPCFromHostedZone", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account_limit(self, *args, **kwargs):
        __protego_used['route53']['get_account_limit']=['route53:GetAccountLimit']
        for p in ['route53:GetAccountLimit']:
            res = {}
            for nm in ["Type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetAccountLimit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_change(self, *args, **kwargs):
        __protego_used['route53']['get_change']=['route53:GetChange']
        for p in ['route53:GetChange']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetChange", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_checker_ip_ranges(self, *args, **kwargs):
        __protego_used['route53']['get_checker_ip_ranges']=['route53:GetCheckerIpRanges']
        for p in ['route53:GetCheckerIpRanges']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetCheckerIpRanges", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_geo_location(self, *args, **kwargs):
        __protego_used['route53']['get_geo_location']=['route53:GetGeoLocation']
        for p in ['route53:GetGeoLocation']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetGeoLocation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_health_check(self, *args, **kwargs):
        __protego_used['route53']['get_health_check']=['route53:GetHealthCheck']
        for p in ['route53:GetHealthCheck']:
            res = {}
            for nm in ["HealthCheckId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetHealthCheck", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_health_check_count(self, *args, **kwargs):
        __protego_used['route53']['get_health_check_count']=['route53:GetHealthCheckCount']
        for p in ['route53:GetHealthCheckCount']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetHealthCheckCount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_health_check_last_failure_reason(self, *args, **kwargs):
        __protego_used['route53']['get_health_check_last_failure_reason']=['route53:GetHealthCheckLastFailureReason']
        for p in ['route53:GetHealthCheckLastFailureReason']:
            res = {}
            for nm in ["HealthCheckId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetHealthCheckLastFailureReason", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_health_check_status(self, *args, **kwargs):
        __protego_used['route53']['get_health_check_status']=['route53:GetHealthCheckStatus']
        for p in ['route53:GetHealthCheckStatus']:
            res = {}
            for nm in ["HealthCheckId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetHealthCheckStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_hosted_zone(self, *args, **kwargs):
        __protego_used['route53']['get_hosted_zone']=['route53:GetHostedZone']
        for p in ['route53:GetHostedZone']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetHostedZone", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_hosted_zone_count(self, *args, **kwargs):
        __protego_used['route53']['get_hosted_zone_count']=['route53:GetHostedZoneCount']
        for p in ['route53:GetHostedZoneCount']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetHostedZoneCount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_hosted_zone_limit(self, *args, **kwargs):
        __protego_used['route53']['get_hosted_zone_limit']=['route53:GetHostedZoneLimit']
        for p in ['route53:GetHostedZoneLimit']:
            res = {}
            for nm in ["HostedZoneId","Type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetHostedZoneLimit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_query_logging_config(self, *args, **kwargs):
        __protego_used['route53']['get_query_logging_config']=['route53:GetQueryLoggingConfig']
        for p in ['route53:GetQueryLoggingConfig']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetQueryLoggingConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_reusable_delegation_set(self, *args, **kwargs):
        __protego_used['route53']['get_reusable_delegation_set']=['route53:GetReusableDelegationSet']
        for p in ['route53:GetReusableDelegationSet']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetReusableDelegationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_reusable_delegation_set_limit(self, *args, **kwargs):
        __protego_used['route53']['get_reusable_delegation_set_limit']=['route53:GetReusableDelegationSetLimit']
        for p in ['route53:GetReusableDelegationSetLimit']:
            res = {}
            for nm in ["DelegationSetId","Type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetReusableDelegationSetLimit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_traffic_policy(self, *args, **kwargs):
        __protego_used['route53']['get_traffic_policy']=['route53:GetTrafficPolicy']
        for p in ['route53:GetTrafficPolicy']:
            res = {}
            for nm in ["Version","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetTrafficPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_traffic_policy_instance(self, *args, **kwargs):
        __protego_used['route53']['get_traffic_policy_instance']=['route53:GetTrafficPolicyInstance']
        for p in ['route53:GetTrafficPolicyInstance']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetTrafficPolicyInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_traffic_policy_instance_count(self, *args, **kwargs):
        __protego_used['route53']['get_traffic_policy_instance_count']=['route53:GetTrafficPolicyInstanceCount']
        for p in ['route53:GetTrafficPolicyInstanceCount']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "GetTrafficPolicyInstanceCount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_geo_locations(self, *args, **kwargs):
        __protego_used['route53']['list_geo_locations']=['route53:ListGeoLocations']
        for p in ['route53:ListGeoLocations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListGeoLocations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_health_checks(self, *args, **kwargs):
        __protego_used['route53']['list_health_checks']=['route53:ListHealthChecks']
        for p in ['route53:ListHealthChecks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListHealthChecks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_hosted_zones(self, *args, **kwargs):
        __protego_used['route53']['list_hosted_zones']=['route53:ListHostedZones']
        for p in ['route53:ListHostedZones']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListHostedZones", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_hosted_zones_by_name(self, *args, **kwargs):
        __protego_used['route53']['list_hosted_zones_by_name']=['route53:ListHostedZonesByName']
        for p in ['route53:ListHostedZonesByName']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListHostedZonesByName", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_query_logging_configs(self, *args, **kwargs):
        __protego_used['route53']['list_query_logging_configs']=['route53:ListQueryLoggingConfigs']
        for p in ['route53:ListQueryLoggingConfigs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListQueryLoggingConfigs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resource_record_sets(self, *args, **kwargs):
        __protego_used['route53']['list_resource_record_sets']=['route53:ListResourceRecordSets']
        for p in ['route53:ListResourceRecordSets']:
            res = {}
            for nm in ["HostedZoneId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListResourceRecordSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_reusable_delegation_sets(self, *args, **kwargs):
        __protego_used['route53']['list_reusable_delegation_sets']=['route53:ListReusableDelegationSets']
        for p in ['route53:ListReusableDelegationSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListReusableDelegationSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['route53']['list_tags_for_resource']=['route53:ListTagsForResource','route53:ListTagsForResource']
        for p in ['route53:ListTagsForResource','route53:ListTagsForResource']:
            res = {}
            for nm in ["ResourceId","ResourceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resources(self, *args, **kwargs):
        __protego_used['route53']['list_tags_for_resources']=['route53:ListTagsForResources','route53:ListTagsForResources']
        for p in ['route53:ListTagsForResources','route53:ListTagsForResources']:
            res = {}
            for nm in ["ResourceType","ResourceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListTagsForResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_traffic_policies(self, *args, **kwargs):
        __protego_used['route53']['list_traffic_policies']=['route53:ListTrafficPolicies']
        for p in ['route53:ListTrafficPolicies']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListTrafficPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_traffic_policy_instances(self, *args, **kwargs):
        __protego_used['route53']['list_traffic_policy_instances']=['route53:ListTrafficPolicyInstances']
        for p in ['route53:ListTrafficPolicyInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListTrafficPolicyInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_traffic_policy_instances_by_hosted_zone(self, *args, **kwargs):
        __protego_used['route53']['list_traffic_policy_instances_by_hosted_zone']=['route53:ListTrafficPolicyInstancesByHostedZone']
        for p in ['route53:ListTrafficPolicyInstancesByHostedZone']:
            res = {}
            for nm in ["HostedZoneId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListTrafficPolicyInstancesByHostedZone", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_traffic_policy_instances_by_policy(self, *args, **kwargs):
        __protego_used['route53']['list_traffic_policy_instances_by_policy']=['route53:ListTrafficPolicyInstancesByPolicy']
        for p in ['route53:ListTrafficPolicyInstancesByPolicy']:
            res = {}
            for nm in ["TrafficPolicyVersion","TrafficPolicyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListTrafficPolicyInstancesByPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_traffic_policy_versions(self, *args, **kwargs):
        __protego_used['route53']['list_traffic_policy_versions']=['route53:ListTrafficPolicyVersions']
        for p in ['route53:ListTrafficPolicyVersions']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListTrafficPolicyVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_vpc_association_authorizations(self, *args, **kwargs):
        __protego_used['route53']['list_vpc_association_authorizations']=['route53:ListVPCAssociationAuthorizations']
        for p in ['route53:ListVPCAssociationAuthorizations']:
            res = {}
            for nm in ["HostedZoneId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "ListVPCAssociationAuthorizations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_dns_answer(self, *args, **kwargs):
        __protego_used['route53']['test_dns_answer']=['route53:TestDNSAnswer']
        for p in ['route53:TestDNSAnswer']:
            res = {}
            for nm in ["RecordName","HostedZoneId","RecordType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "TestDNSAnswer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_health_check(self, *args, **kwargs):
        __protego_used['route53']['update_health_check']=['route53:UpdateHealthCheck']
        for p in ['route53:UpdateHealthCheck']:
            res = {}
            for nm in ["HealthCheckId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "UpdateHealthCheck", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_hosted_zone_comment(self, *args, **kwargs):
        __protego_used['route53']['update_hosted_zone_comment']=['route53:UpdateHostedZoneComment']
        for p in ['route53:UpdateHostedZoneComment']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "UpdateHostedZoneComment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_traffic_policy_comment(self, *args, **kwargs):
        __protego_used['route53']['update_traffic_policy_comment']=['route53:UpdateTrafficPolicyComment']
        for p in ['route53:UpdateTrafficPolicyComment']:
            res = {}
            for nm in ["Comment","Version","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "UpdateTrafficPolicyComment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_traffic_policy_instance(self, *args, **kwargs):
        __protego_used['route53']['update_traffic_policy_instance']=['route53:UpdateTrafficPolicyInstance']
        for p in ['route53:UpdateTrafficPolicyInstance']:
            res = {}
            for nm in ["TTL","TrafficPolicyVersion","TrafficPolicyId","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53'].append({'action': "UpdateTrafficPolicyInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class route53domains:
    def __init__(self, region_name=__default_region):
        __protego_used['route53domains']= __protego_used.get('route53domains', {})
        __protego_resource_map['route53domains']=__protego_resource_map.get('route53domains', [])
        self.region = region_name
    def check_domain_availability(self, *args, **kwargs):
        __protego_used['route53domains']['check_domain_availability']=['route53domains:CheckDomainAvailability']
        for p in ['route53domains:CheckDomainAvailability']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "CheckDomainAvailability", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def check_domain_transferability(self, *args, **kwargs):
        __protego_used['route53domains']['check_domain_transferability']=['route53domains:*']
        for p in ['route53domains:*']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "CheckDomainTransferability", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tags_for_domain(self, *args, **kwargs):
        __protego_used['route53domains']['delete_tags_for_domain']=['route53domains:DeleteTagsForDomain']
        for p in ['route53domains:DeleteTagsForDomain']:
            res = {}
            for nm in ["DomainName","TagsToDelete"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "DeleteTagsForDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_domain_auto_renew(self, *args, **kwargs):
        __protego_used['route53domains']['disable_domain_auto_renew']=['route53domains:DisableDomainAutoRenew']
        for p in ['route53domains:DisableDomainAutoRenew']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "DisableDomainAutoRenew", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_domain_transfer_lock(self, *args, **kwargs):
        __protego_used['route53domains']['disable_domain_transfer_lock']=['route53domains:DisableDomainTransferLock']
        for p in ['route53domains:DisableDomainTransferLock']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "DisableDomainTransferLock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_domain_auto_renew(self, *args, **kwargs):
        __protego_used['route53domains']['enable_domain_auto_renew']=['route53domains:EnableDomainAutoRenew']
        for p in ['route53domains:EnableDomainAutoRenew']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "EnableDomainAutoRenew", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_domain_transfer_lock(self, *args, **kwargs):
        __protego_used['route53domains']['enable_domain_transfer_lock']=['route53domains:EnableDomainTransferLock']
        for p in ['route53domains:EnableDomainTransferLock']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "EnableDomainTransferLock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_contact_reachability_status(self, *args, **kwargs):
        __protego_used['route53domains']['get_contact_reachability_status']=['route53domains:GetContactReachabilityStatus']
        for p in ['route53domains:GetContactReachabilityStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "GetContactReachabilityStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain_detail(self, *args, **kwargs):
        __protego_used['route53domains']['get_domain_detail']=['route53domains:GetDomainDetail']
        for p in ['route53domains:GetDomainDetail']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "GetDomainDetail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain_suggestions(self, *args, **kwargs):
        __protego_used['route53domains']['get_domain_suggestions']=['route53domains:GetDomainSuggestions']
        for p in ['route53domains:GetDomainSuggestions']:
            res = {}
            for nm in ["DomainName","OnlyAvailable","SuggestionCount"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "GetDomainSuggestions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_operation_detail(self, *args, **kwargs):
        __protego_used['route53domains']['get_operation_detail']=['route53domains:GetOperationDetail']
        for p in ['route53domains:GetOperationDetail']:
            res = {}
            for nm in ["OperationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "GetOperationDetail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_domains(self, *args, **kwargs):
        __protego_used['route53domains']['list_domains']=['route53domains:ListDomains']
        for p in ['route53domains:ListDomains']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "ListDomains", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_operations(self, *args, **kwargs):
        __protego_used['route53domains']['list_operations']=['route53domains:ListOperations']
        for p in ['route53domains:ListOperations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "ListOperations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_domain(self, *args, **kwargs):
        __protego_used['route53domains']['list_tags_for_domain']=['route53domains:ListTagsForDomain']
        for p in ['route53domains:ListTagsForDomain']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "ListTagsForDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_domain(self, *args, **kwargs):
        __protego_used['route53domains']['register_domain']=['route53domains:RegisterDomain']
        for p in ['route53domains:RegisterDomain']:
            res = {}
            for nm in ["RegistrantContact","AdminContact","TechContact","DurationInYears","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "RegisterDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def renew_domain(self, *args, **kwargs):
        __protego_used['route53domains']['renew_domain']=['route53domains:RenewDomain']
        for p in ['route53domains:RenewDomain']:
            res = {}
            for nm in ["CurrentExpiryYear","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "RenewDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def resend_contact_reachability_email(self, *args, **kwargs):
        __protego_used['route53domains']['resend_contact_reachability_email']=['route53domains:ResendContactReachabilityEmail']
        for p in ['route53domains:ResendContactReachabilityEmail']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "ResendContactReachabilityEmail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def retrieve_domain_auth_code(self, *args, **kwargs):
        __protego_used['route53domains']['retrieve_domain_auth_code']=['route53domains:RetrieveDomainAuthCode']
        for p in ['route53domains:RetrieveDomainAuthCode']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "RetrieveDomainAuthCode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def transfer_domain(self, *args, **kwargs):
        __protego_used['route53domains']['transfer_domain']=['route53domains:TransferDomain']
        for p in ['route53domains:TransferDomain']:
            res = {}
            for nm in ["RegistrantContact","AdminContact","TechContact","DurationInYears","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "TransferDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_domain_contact(self, *args, **kwargs):
        __protego_used['route53domains']['update_domain_contact']=['route53domains:UpdateDomainContact']
        for p in ['route53domains:UpdateDomainContact']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "UpdateDomainContact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_domain_contact_privacy(self, *args, **kwargs):
        __protego_used['route53domains']['update_domain_contact_privacy']=['route53domains:UpdateDomainContactPrivacy']
        for p in ['route53domains:UpdateDomainContactPrivacy']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "UpdateDomainContactPrivacy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_domain_nameservers(self, *args, **kwargs):
        __protego_used['route53domains']['update_domain_nameservers']=['route53domains:UpdateDomainNameservers']
        for p in ['route53domains:UpdateDomainNameservers']:
            res = {}
            for nm in ["DomainName","Nameservers"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "UpdateDomainNameservers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_tags_for_domain(self, *args, **kwargs):
        __protego_used['route53domains']['update_tags_for_domain']=['route53domains:UpdateTagsForDomain']
        for p in ['route53domains:UpdateTagsForDomain']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "UpdateTagsForDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def view_billing(self, *args, **kwargs):
        __protego_used['route53domains']['view_billing']=['route53domains:ViewBilling']
        for p in ['route53domains:ViewBilling']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53domains'].append({'action': "ViewBilling", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class route53resolver:
    def __init__(self, region_name=__default_region):
        __protego_used['route53resolver']= __protego_used.get('route53resolver', {})
        __protego_resource_map['route53resolver']=__protego_resource_map.get('route53resolver', [])
        self.region = region_name
    def associate_resolver_endpoint_ip_address(self, *args, **kwargs):
        __protego_used['route53resolver']['associate_resolver_endpoint_ip_address']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResolverEndpointId","IpAddress"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "AssociateResolverEndpointIpAddress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_resolver_rule(self, *args, **kwargs):
        __protego_used['route53resolver']['associate_resolver_rule']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["VPCId","ResolverRuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "AssociateResolverRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_resolver_endpoint(self, *args, **kwargs):
        __protego_used['route53resolver']['create_resolver_endpoint']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["SecurityGroupIds","IpAddresses","CreatorRequestId","Direction"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "CreateResolverEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_resolver_rule(self, *args, **kwargs):
        __protego_used['route53resolver']['create_resolver_rule']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["DomainName","RuleType","CreatorRequestId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "CreateResolverRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resolver_endpoint(self, *args, **kwargs):
        __protego_used['route53resolver']['delete_resolver_endpoint']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResolverEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "DeleteResolverEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resolver_rule(self, *args, **kwargs):
        __protego_used['route53resolver']['delete_resolver_rule']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResolverRuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "DeleteResolverRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_resolver_endpoint_ip_address(self, *args, **kwargs):
        __protego_used['route53resolver']['disassociate_resolver_endpoint_ip_address']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResolverEndpointId","IpAddress"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "DisassociateResolverEndpointIpAddress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_resolver_rule(self, *args, **kwargs):
        __protego_used['route53resolver']['disassociate_resolver_rule']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["VPCId","ResolverRuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "DisassociateResolverRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resolver_endpoint(self, *args, **kwargs):
        __protego_used['route53resolver']['get_resolver_endpoint']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResolverEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "GetResolverEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resolver_rule(self, *args, **kwargs):
        __protego_used['route53resolver']['get_resolver_rule']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResolverRuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "GetResolverRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resolver_rule_association(self, *args, **kwargs):
        __protego_used['route53resolver']['get_resolver_rule_association']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResolverRuleAssociationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "GetResolverRuleAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resolver_rule_policy(self, *args, **kwargs):
        __protego_used['route53resolver']['get_resolver_rule_policy']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "GetResolverRulePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resolver_endpoint_ip_addresses(self, *args, **kwargs):
        __protego_used['route53resolver']['list_resolver_endpoint_ip_addresses']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResolverEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "ListResolverEndpointIpAddresses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resolver_endpoints(self, *args, **kwargs):
        __protego_used['route53resolver']['list_resolver_endpoints']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "ListResolverEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resolver_rule_associations(self, *args, **kwargs):
        __protego_used['route53resolver']['list_resolver_rule_associations']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "ListResolverRuleAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resolver_rules(self, *args, **kwargs):
        __protego_used['route53resolver']['list_resolver_rules']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "ListResolverRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['route53resolver']['list_tags_for_resource']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_resolver_rule_policy(self, *args, **kwargs):
        __protego_used['route53resolver']['put_resolver_rule_policy']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["Arn","ResolverRulePolicy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "PutResolverRulePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['route53resolver']['tag_resource']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['route53resolver']['untag_resource']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_resolver_endpoint(self, *args, **kwargs):
        __protego_used['route53resolver']['update_resolver_endpoint']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResolverEndpointId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "UpdateResolverEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_resolver_rule(self, *args, **kwargs):
        __protego_used['route53resolver']['update_resolver_rule']=['route53resolver:*']
        for p in ['route53resolver:*']:
            res = {}
            for nm in ["ResolverRuleId","Config"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['route53resolver'].append({'action': "UpdateResolverRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class s3:
    def __init__(self, region_name=__default_region):
        __protego_used['s3']= __protego_used.get('s3', {})
        __protego_resource_map['s3']=__protego_resource_map.get('s3', [])
        self.region = region_name
    def abort_multipart_upload(self, *args, **kwargs):
        __protego_used['s3']['abort_multipart_upload']=['s3:AbortMultipartUpload']
        for p in ['s3:AbortMultipartUpload']:
            res = {}
            for nm in ["Key","Bucket","UploadId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "AbortMultipartUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def complete_multipart_upload(self, *args, **kwargs):
        __protego_used['s3']['complete_multipart_upload']=['s3:PutObject']
        for p in ['s3:PutObject']:
            res = {}
            for nm in ["Key","Bucket","UploadId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "CompleteMultipartUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_object(self, *args, **kwargs):
        __protego_used['s3']['copy_object']=['s3:GetObject','s3:PutObject']
        for p in ['s3:GetObject','s3:PutObject']:
            res = {}
            for nm in ["CopySource","Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "CopyObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_bucket(self, *args, **kwargs):
        __protego_used['s3']['create_bucket']=['s3:CreateBucket']
        for p in ['s3:CreateBucket']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "CreateBucket", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_multipart_upload(self, *args, **kwargs):
        __protego_used['s3']['create_multipart_upload']=['s3:PutObject']
        for p in ['s3:PutObject']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "CreateMultipartUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bucket(self, *args, **kwargs):
        __protego_used['s3']['delete_bucket']=['s3:DeleteBucket']
        for p in ['s3:DeleteBucket']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteBucket", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bucket_analytics_configuration(self, *args, **kwargs):
        __protego_used['s3']['delete_bucket_analytics_configuration']=['s3:PutAnalyticsConfiguration']
        for p in ['s3:PutAnalyticsConfiguration']:
            res = {}
            for nm in ["Bucket","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteBucketAnalyticsConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bucket_cors(self, *args, **kwargs):
        __protego_used['s3']['delete_bucket_cors']=['s3:PutBucketCORS']
        for p in ['s3:PutBucketCORS']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteBucketCors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bucket_encryption(self, *args, **kwargs):
        __protego_used['s3']['delete_bucket_encryption']=['s3:PutEncryptionConfiguration']
        for p in ['s3:PutEncryptionConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteBucketEncryption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bucket_inventory_configuration(self, *args, **kwargs):
        __protego_used['s3']['delete_bucket_inventory_configuration']=['s3:PutInventoryConfiguration']
        for p in ['s3:PutInventoryConfiguration']:
            res = {}
            for nm in ["Bucket","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteBucketInventoryConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bucket_lifecycle(self, *args, **kwargs):
        __protego_used['s3']['delete_bucket_lifecycle']=['s3:PutLifecycleConfiguration']
        for p in ['s3:PutLifecycleConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteBucketLifecycle", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bucket_metrics_configuration(self, *args, **kwargs):
        __protego_used['s3']['delete_bucket_metrics_configuration']=['s3:PutMetricsConfiguration']
        for p in ['s3:PutMetricsConfiguration']:
            res = {}
            for nm in ["Bucket","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteBucketMetricsConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bucket_policy(self, *args, **kwargs):
        __protego_used['s3']['delete_bucket_policy']=['s3:DeleteBucketPolicy']
        for p in ['s3:DeleteBucketPolicy']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteBucketPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bucket_replication(self, *args, **kwargs):
        __protego_used['s3']['delete_bucket_replication']=['s3:PutReplicationConfiguration']
        for p in ['s3:PutReplicationConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteBucketReplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bucket_tagging(self, *args, **kwargs):
        __protego_used['s3']['delete_bucket_tagging']=['s3:PutBucketTagging']
        for p in ['s3:PutBucketTagging']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteBucketTagging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bucket_website(self, *args, **kwargs):
        __protego_used['s3']['delete_bucket_website']=['s3:DeleteBucketWebsite']
        for p in ['s3:DeleteBucketWebsite']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteBucketWebsite", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_object(self, *args, **kwargs):
        __protego_used['s3']['delete_object']=['s3:DeleteObject']
        for p in ['s3:DeleteObject']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_object_tagging(self, *args, **kwargs):
        __protego_used['s3']['delete_object_tagging']=['s3:DeleteObjectTagging']
        for p in ['s3:DeleteObjectTagging']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteObjectTagging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_objects(self, *args, **kwargs):
        __protego_used['s3']['delete_objects']=['s3:PutLifecycleConfiguration','s3:DeleteObjectVersion','s3:DeleteObject']
        for p in ['s3:PutLifecycleConfiguration','s3:DeleteObjectVersion','s3:DeleteObject']:
            res = {}
            for nm in ["Delete","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeleteObjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_public_access_block(self, *args, **kwargs):
        __protego_used['s3']['delete_public_access_block']=['s3:*']
        for p in ['s3:*']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "DeletePublicAccessBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_accelerate_configuration(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_accelerate_configuration']=['s3:GetAccelerateConfiguration']
        for p in ['s3:GetAccelerateConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketAccelerateConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_acl(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_acl']=['s3:GetBucketAcl']
        for p in ['s3:GetBucketAcl']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketAcl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_analytics_configuration(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_analytics_configuration']=['s3:GetAnalyticsConfiguration']
        for p in ['s3:GetAnalyticsConfiguration']:
            res = {}
            for nm in ["Bucket","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketAnalyticsConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_cors(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_cors']=['s3:GetBucketCORS']
        for p in ['s3:GetBucketCORS']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketCors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_encryption(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_encryption']=['s3:GetEncryptionConfiguration']
        for p in ['s3:GetEncryptionConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketEncryption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_inventory_configuration(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_inventory_configuration']=['s3:GetInventoryConfiguration']
        for p in ['s3:GetInventoryConfiguration']:
            res = {}
            for nm in ["Bucket","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketInventoryConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_lifecycle(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_lifecycle']=['s3:GetLifecycleConfiguration']
        for p in ['s3:GetLifecycleConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketLifecycle", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_lifecycle_configuration(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_lifecycle_configuration']=['s3:GetLifecycleConfiguration']
        for p in ['s3:GetLifecycleConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketLifecycleConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_location(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_location']=['s3:GetBucketLocation']
        for p in ['s3:GetBucketLocation']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketLocation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_logging(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_logging']=['s3:GetBucketLogging']
        for p in ['s3:GetBucketLogging']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketLogging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_metrics_configuration(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_metrics_configuration']=['s3:GetMetricsConfiguration']
        for p in ['s3:GetMetricsConfiguration']:
            res = {}
            for nm in ["Bucket","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketMetricsConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_notification(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_notification']=['s3:GetBucketNotification']
        for p in ['s3:GetBucketNotification']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketNotification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_notification_configuration(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_notification_configuration']=['s3:GetBucketNotification']
        for p in ['s3:GetBucketNotification']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketNotificationConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_policy(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_policy']=['s3:GetBucketPolicy']
        for p in ['s3:GetBucketPolicy']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_policy_status(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_policy_status']=['s3:GetBucketPolicyStatus']
        for p in ['s3:GetBucketPolicyStatus']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketPolicyStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_replication(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_replication']=['s3:GetReplicationConfiguration']
        for p in ['s3:GetReplicationConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketReplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_request_payment(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_request_payment']=['s3:GetBucketRequestPayment']
        for p in ['s3:GetBucketRequestPayment']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketRequestPayment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_tagging(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_tagging']=['s3:GetBucketTagging']
        for p in ['s3:GetBucketTagging']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketTagging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_versioning(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_versioning']=['s3:GetBucketVersioning']
        for p in ['s3:GetBucketVersioning']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketVersioning", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_bucket_website(self, *args, **kwargs):
        __protego_used['s3']['get_bucket_website']=['s3:GetBucketWebsite']
        for p in ['s3:GetBucketWebsite']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetBucketWebsite", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_object(self, *args, **kwargs):
        __protego_used['s3']['get_object']=['s3:GetObjectVersion','s3:GetObject']
        for p in ['s3:GetObjectVersion','s3:GetObject']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_object_acl(self, *args, **kwargs):
        __protego_used['s3']['get_object_acl']=['s3:GetObjectAcl']
        for p in ['s3:GetObjectAcl']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetObjectAcl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_object_legal_hold(self, *args, **kwargs):
        __protego_used['s3']['get_object_legal_hold']=['s3:GetObjectLegalHold']
        for p in ['s3:GetObjectLegalHold']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetObjectLegalHold", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_object_lock_configuration(self, *args, **kwargs):
        __protego_used['s3']['get_object_lock_configuration']=['s3:*']
        for p in ['s3:*']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetObjectLockConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_object_retention(self, *args, **kwargs):
        __protego_used['s3']['get_object_retention']=['s3:GetObjectRetention']
        for p in ['s3:GetObjectRetention']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetObjectRetention", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_object_tagging(self, *args, **kwargs):
        __protego_used['s3']['get_object_tagging']=['s3:GetObjectTagging']
        for p in ['s3:GetObjectTagging']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetObjectTagging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_object_torrent(self, *args, **kwargs):
        __protego_used['s3']['get_object_torrent']=['s3:GetObjectTorrent']
        for p in ['s3:GetObjectTorrent']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetObjectTorrent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_public_access_block(self, *args, **kwargs):
        __protego_used['s3']['get_public_access_block']=['s3:*']
        for p in ['s3:*']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetPublicAccessBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def head_bucket(self, *args, **kwargs):
        __protego_used['s3']['head_bucket']=['s3:ListBucket']
        for p in ['s3:ListBucket']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "HeadBucket", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def head_object(self, *args, **kwargs):
        __protego_used['s3']['head_object']=['s3:GetObject']
        for p in ['s3:GetObject']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "HeadObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_bucket_analytics_configurations(self, *args, **kwargs):
        __protego_used['s3']['list_bucket_analytics_configurations']=['s3:GetAnalyticsConfiguration']
        for p in ['s3:GetAnalyticsConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "ListBucketAnalyticsConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_bucket_inventory_configurations(self, *args, **kwargs):
        __protego_used['s3']['list_bucket_inventory_configurations']=['s3:GetInventoryConfiguration']
        for p in ['s3:GetInventoryConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "ListBucketInventoryConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_bucket_metrics_configurations(self, *args, **kwargs):
        __protego_used['s3']['list_bucket_metrics_configurations']=['s3:GetMetricsConfiguration']
        for p in ['s3:GetMetricsConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "ListBucketMetricsConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_buckets(self, *args, **kwargs):
        __protego_used['s3']['list_buckets']=['s3:ListAllMyBuckets']
        for p in ['s3:ListAllMyBuckets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "ListBuckets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_multipart_uploads(self, *args, **kwargs):
        __protego_used['s3']['list_multipart_uploads']=['s3:ListBucketMultipartUploads']
        for p in ['s3:ListBucketMultipartUploads']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "ListMultipartUploads", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_object_versions(self, *args, **kwargs):
        __protego_used['s3']['list_object_versions']=['s3:ListBucketVersions']
        for p in ['s3:ListBucketVersions']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "ListObjectVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_objects(self, *args, **kwargs):
        __protego_used['s3']['list_objects']=['s3:ListBucket']
        for p in ['s3:ListBucket']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "ListObjects", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_objects_v2(self, *args, **kwargs):
        __protego_used['s3']['list_objects_v2']=['s3:ListBucket']
        for p in ['s3:ListBucket']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "ListObjectsV2", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_parts(self, *args, **kwargs):
        __protego_used['s3']['list_parts']=['s3:ListMultipartUploadParts']
        for p in ['s3:ListMultipartUploadParts']:
            res = {}
            for nm in ["Key","Bucket","UploadId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "ListParts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_accelerate_configuration(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_accelerate_configuration']=['s3:PutAccelerateConfiguration']
        for p in ['s3:PutAccelerateConfiguration']:
            res = {}
            for nm in ["AccelerateConfiguration","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketAccelerateConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_acl(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_acl']=['s3:PutBucketAcl']
        for p in ['s3:PutBucketAcl']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketAcl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_analytics_configuration(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_analytics_configuration']=['s3:PutAnalyticsConfiguration']
        for p in ['s3:PutAnalyticsConfiguration']:
            res = {}
            for nm in ["Bucket","AnalyticsConfiguration","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketAnalyticsConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_cors(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_cors']=['s3:PutBucketCORS']
        for p in ['s3:PutBucketCORS']:
            res = {}
            for nm in ["CORSConfiguration","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketCors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_encryption(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_encryption']=['s3:PutEncryptionConfiguration']
        for p in ['s3:PutEncryptionConfiguration']:
            res = {}
            for nm in ["ServerSideEncryptionConfiguration","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketEncryption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_inventory_configuration(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_inventory_configuration']=['s3:PutInventoryConfiguration']
        for p in ['s3:PutInventoryConfiguration']:
            res = {}
            for nm in ["InventoryConfiguration","Bucket","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketInventoryConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_lifecycle(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_lifecycle']=['s3:PutLifecycleConfiguration']
        for p in ['s3:PutLifecycleConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketLifecycle", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_lifecycle_configuration(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_lifecycle_configuration']=['s3:PutLifecycleConfiguration']
        for p in ['s3:PutLifecycleConfiguration']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketLifecycleConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_logging(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_logging']=['s3:PutBucketLogging']
        for p in ['s3:PutBucketLogging']:
            res = {}
            for nm in ["Bucket","BucketLoggingStatus"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketLogging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_metrics_configuration(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_metrics_configuration']=['s3:PutMetricsConfiguration']
        for p in ['s3:PutMetricsConfiguration']:
            res = {}
            for nm in ["MetricsConfiguration","Bucket","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketMetricsConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_notification(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_notification']=['s3:PutBucketNotification']
        for p in ['s3:PutBucketNotification']:
            res = {}
            for nm in ["Bucket","NotificationConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketNotification", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_notification_configuration(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_notification_configuration']=['s3:PutBucketNotification']
        for p in ['s3:PutBucketNotification']:
            res = {}
            for nm in ["Bucket","NotificationConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketNotificationConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_policy(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_policy']=['s3:PutBucketPolicy']
        for p in ['s3:PutBucketPolicy']:
            res = {}
            for nm in ["Bucket","Policy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_replication(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_replication']=['s3:PutReplicationConfiguration']
        for p in ['s3:PutReplicationConfiguration']:
            res = {}
            for nm in ["ReplicationConfiguration","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketReplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_request_payment(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_request_payment']=['s3:PutBucketRequestPayment']
        for p in ['s3:PutBucketRequestPayment']:
            res = {}
            for nm in ["Bucket","RequestPaymentConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketRequestPayment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_tagging(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_tagging']=['s3:PutBucketTagging']
        for p in ['s3:PutBucketTagging']:
            res = {}
            for nm in ["Bucket","Tagging"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketTagging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_versioning(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_versioning']=['s3:PutBucketVersioning']
        for p in ['s3:PutBucketVersioning']:
            res = {}
            for nm in ["VersioningConfiguration","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketVersioning", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_bucket_website(self, *args, **kwargs):
        __protego_used['s3']['put_bucket_website']=['s3:PutBucketWebsite']
        for p in ['s3:PutBucketWebsite']:
            res = {}
            for nm in ["WebsiteConfiguration","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutBucketWebsite", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_object(self, *args, **kwargs):
        __protego_used['s3']['put_object']=['s3:PutObject']
        for p in ['s3:PutObject']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_object_acl(self, *args, **kwargs):
        __protego_used['s3']['put_object_acl']=['s3:PutObjectAcl']
        for p in ['s3:PutObjectAcl']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutObjectAcl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_object_legal_hold(self, *args, **kwargs):
        __protego_used['s3']['put_object_legal_hold']=['s3:PutObjectLegalHold']
        for p in ['s3:PutObjectLegalHold']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutObjectLegalHold", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_object_lock_configuration(self, *args, **kwargs):
        __protego_used['s3']['put_object_lock_configuration']=['s3:*']
        for p in ['s3:*']:
            res = {}
            for nm in ["Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutObjectLockConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_object_retention(self, *args, **kwargs):
        __protego_used['s3']['put_object_retention']=['s3:PutObjectRetention']
        for p in ['s3:PutObjectRetention']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutObjectRetention", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_object_tagging(self, *args, **kwargs):
        __protego_used['s3']['put_object_tagging']=['s3:PutObjectTagging']
        for p in ['s3:PutObjectTagging']:
            res = {}
            for nm in ["Key","Bucket","Tagging"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutObjectTagging", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_public_access_block(self, *args, **kwargs):
        __protego_used['s3']['put_public_access_block']=['s3:*']
        for p in ['s3:*']:
            res = {}
            for nm in ["PublicAccessBlockConfiguration","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutPublicAccessBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_object(self, *args, **kwargs):
        __protego_used['s3']['restore_object']=['s3:RestoreObject']
        for p in ['s3:RestoreObject']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "RestoreObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def select_object_content(self, *args, **kwargs):
        __protego_used['s3']['select_object_content']=['s3:GetObject']
        for p in ['s3:GetObject']:
            res = {}
            for nm in ["Expression","Bucket","OutputSerialization","ExpressionType","Key","InputSerialization"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "SelectObjectContent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_part(self, *args, **kwargs):
        __protego_used['s3']['upload_part']=['s3:PutObject']
        for p in ['s3:PutObject']:
            res = {}
            for nm in ["PartNumber","Key","Bucket","UploadId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "UploadPart", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_part_copy(self, *args, **kwargs):
        __protego_used['s3']['upload_part_copy']=['s3:*']
        for p in ['s3:*']:
            res = {}
            for nm in ["PartNumber","CopySource","Bucket","UploadId","Key"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "UploadPartCopy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy(self, *args, **kwargs):
        __protego_used['s3']['copy']=['s3:GetObject','s3:PutObject']
        for p in ['s3:GetObject','s3:PutObject']:
            res = {}
            for nm in ["CopySource","Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "CopyObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def download_file(self, *args, **kwargs):
        __protego_used['s3']['download_file']=['s3:GetObjectVersion','s3:GetObject']
        for p in ['s3:GetObjectVersion','s3:GetObject']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_file(self, *args, **kwargs):
        __protego_used['s3']['upload_file']=['s3:PutObject']
        for p in ['s3:PutObject']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def upload_fileobj(self, *args, **kwargs):
        __protego_used['s3']['upload_fileobj']=['s3:PutObject']
        for p in ['s3:PutObject']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "PutObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def download_fileobj(self, *args, **kwargs):
        __protego_used['s3']['download_fileobj']=['s3:GetObjectVersion','s3:GetObject']
        for p in ['s3:GetObjectVersion','s3:GetObject']:
            res = {}
            for nm in ["Key","Bucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3'].append({'action': "GetObject", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_presigned_url(self, ClientMethod, params):
        getattr(self, ClientMethod)(self, **params)
    def generate_presigned_post(self, Bucket, Key):
        getattr(self, 'put_object')(self, Bucket=Bucket, Key=Key)
    def get_paginator(self, op):
        getattr(self, op)(self)
class s3control:
    def __init__(self, region_name=__default_region):
        __protego_used['s3control']= __protego_used.get('s3control', {})
        __protego_resource_map['s3control']=__protego_resource_map.get('s3control', [])
        self.region = region_name
    def create_access_point(self, *args, **kwargs):
        __protego_used['s3control']['create_access_point']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId","Bucket","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "CreateAccessPoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_job(self, *args, **kwargs):
        __protego_used['s3control']['create_job']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId","Report","Manifest","RoleArn","Operation","ClientRequestToken","Priority"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "CreateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_access_point(self, *args, **kwargs):
        __protego_used['s3control']['delete_access_point']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "DeleteAccessPoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_access_point_policy(self, *args, **kwargs):
        __protego_used['s3control']['delete_access_point_policy']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "DeleteAccessPointPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_public_access_block(self, *args, **kwargs):
        __protego_used['s3control']['delete_public_access_block']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "DeletePublicAccessBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_job(self, *args, **kwargs):
        __protego_used['s3control']['describe_job']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId","JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "DescribeJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_access_point(self, *args, **kwargs):
        __protego_used['s3control']['get_access_point']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "GetAccessPoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_access_point_policy(self, *args, **kwargs):
        __protego_used['s3control']['get_access_point_policy']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "GetAccessPointPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_access_point_policy_status(self, *args, **kwargs):
        __protego_used['s3control']['get_access_point_policy_status']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "GetAccessPointPolicyStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_public_access_block(self, *args, **kwargs):
        __protego_used['s3control']['get_public_access_block']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "GetPublicAccessBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_access_points(self, *args, **kwargs):
        __protego_used['s3control']['list_access_points']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "ListAccessPoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs(self, *args, **kwargs):
        __protego_used['s3control']['list_jobs']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "ListJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_access_point_policy(self, *args, **kwargs):
        __protego_used['s3control']['put_access_point_policy']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId","Policy","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "PutAccessPointPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_public_access_block(self, *args, **kwargs):
        __protego_used['s3control']['put_public_access_block']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["PublicAccessBlockConfiguration","AccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "PutPublicAccessBlock", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_job_priority(self, *args, **kwargs):
        __protego_used['s3control']['update_job_priority']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId","JobId","Priority"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "UpdateJobPriority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_job_status(self, *args, **kwargs):
        __protego_used['s3control']['update_job_status']=['s3control:*']
        for p in ['s3control:*']:
            res = {}
            for nm in ["AccountId","JobId","RequestedJobStatus"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['s3control'].append({'action': "UpdateJobStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sagemaker:
    def __init__(self, region_name=__default_region):
        __protego_used['sagemaker']= __protego_used.get('sagemaker', {})
        __protego_resource_map['sagemaker']=__protego_resource_map.get('sagemaker', [])
        self.region = region_name
    def add_tags(self, *args, **kwargs):
        __protego_used['sagemaker']['add_tags']=['sagemaker:AddTags']
        for p in ['sagemaker:AddTags']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "AddTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_trial_component(self, *args, **kwargs):
        __protego_used['sagemaker']['associate_trial_component']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TrialName","TrialComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "AssociateTrialComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_algorithm(self, *args, **kwargs):
        __protego_used['sagemaker']['create_algorithm']=['sagemaker:CreateAlgorithm']
        for p in ['sagemaker:CreateAlgorithm']:
            res = {}
            for nm in ["AlgorithmName","TrainingSpecification"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateAlgorithm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_app(self, *args, **kwargs):
        __protego_used['sagemaker']['create_app']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["AppType","UserProfileName","DomainId","AppName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_auto_ml_job(self, *args, **kwargs):
        __protego_used['sagemaker']['create_auto_ml_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["RoleArn","InputDataConfig","AutoMLJobName","OutputDataConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateAutoMLJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_code_repository(self, *args, **kwargs):
        __protego_used['sagemaker']['create_code_repository']=['sagemaker:CreateCodeRepository']
        for p in ['sagemaker:CreateCodeRepository']:
            res = {}
            for nm in ["GitConfig","CodeRepositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateCodeRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_compilation_job(self, *args, **kwargs):
        __protego_used['sagemaker']['create_compilation_job']=['sagemaker:CreateCompilationJob']
        for p in ['sagemaker:CreateCompilationJob']:
            res = {}
            for nm in ["OutputConfig","InputConfig","RoleArn","StoppingCondition","CompilationJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateCompilationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_domain(self, *args, **kwargs):
        __protego_used['sagemaker']['create_domain']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["DefaultUserSettings","VpcId","AuthMode","DomainName","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_endpoint(self, *args, **kwargs):
        __protego_used['sagemaker']['create_endpoint']=['sagemaker:CreateEndpoint']
        for p in ['sagemaker:CreateEndpoint']:
            res = {}
            for nm in ["EndpointName","EndpointConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_endpoint_config(self, *args, **kwargs):
        __protego_used['sagemaker']['create_endpoint_config']=['sagemaker:CreateEndpointConfig']
        for p in ['sagemaker:CreateEndpointConfig']:
            res = {}
            for nm in ["ProductionVariants","EndpointConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateEndpointConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_experiment(self, *args, **kwargs):
        __protego_used['sagemaker']['create_experiment']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["ExperimentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateExperiment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_flow_definition(self, *args, **kwargs):
        __protego_used['sagemaker']['create_flow_definition']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["HumanLoopConfig","RoleArn","OutputConfig","FlowDefinitionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateFlowDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_human_task_ui(self, *args, **kwargs):
        __protego_used['sagemaker']['create_human_task_ui']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["HumanTaskUiName","UiTemplate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateHumanTaskUi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_hyper_parameter_tuning_job(self, *args, **kwargs):
        __protego_used['sagemaker']['create_hyper_parameter_tuning_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["HyperParameterTuningJobName","HyperParameterTuningJobConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateHyperParameterTuningJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_labeling_job(self, *args, **kwargs):
        __protego_used['sagemaker']['create_labeling_job']=['sagemaker:CreateLabelingJob']
        for p in ['sagemaker:CreateLabelingJob']:
            res = {}
            for nm in ["OutputConfig","LabelAttributeName","InputConfig","HumanTaskConfig","RoleArn","LabelingJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateLabelingJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_model(self, *args, **kwargs):
        __protego_used['sagemaker']['create_model']=['sagemaker:CreateModel']
        for p in ['sagemaker:CreateModel']:
            res = {}
            for nm in ["ExecutionRoleArn","ModelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_model_package(self, *args, **kwargs):
        __protego_used['sagemaker']['create_model_package']=['sagemaker:CreateModelPackage']
        for p in ['sagemaker:CreateModelPackage']:
            res = {}
            for nm in ["ModelPackageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateModelPackage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_monitoring_schedule(self, *args, **kwargs):
        __protego_used['sagemaker']['create_monitoring_schedule']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["MonitoringScheduleConfig","MonitoringScheduleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateMonitoringSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_notebook_instance(self, *args, **kwargs):
        __protego_used['sagemaker']['create_notebook_instance']=['sagemaker:CreateNotebookInstance']
        for p in ['sagemaker:CreateNotebookInstance']:
            res = {}
            for nm in ["RoleArn","InstanceType","NotebookInstanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateNotebookInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_notebook_instance_lifecycle_config(self, *args, **kwargs):
        __protego_used['sagemaker']['create_notebook_instance_lifecycle_config']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["NotebookInstanceLifecycleConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateNotebookInstanceLifecycleConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_presigned_domain_url(self, *args, **kwargs):
        __protego_used['sagemaker']['create_presigned_domain_url']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["UserProfileName","DomainId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreatePresignedDomainUrl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_presigned_notebook_instance_url(self, *args, **kwargs):
        __protego_used['sagemaker']['create_presigned_notebook_instance_url']=['sagemaker:CreatePresignedNotebookInstanceUrl']
        for p in ['sagemaker:CreatePresignedNotebookInstanceUrl']:
            res = {}
            for nm in ["NotebookInstanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreatePresignedNotebookInstanceUrl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_processing_job(self, *args, **kwargs):
        __protego_used['sagemaker']['create_processing_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["RoleArn","ProcessingResources","AppSpecification","ProcessingJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateProcessingJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_training_job(self, *args, **kwargs):
        __protego_used['sagemaker']['create_training_job']=['sagemaker:CreateTrainingJob']
        for p in ['sagemaker:CreateTrainingJob']:
            res = {}
            for nm in ["AlgorithmSpecification","ResourceConfig","RoleArn","StoppingCondition","OutputDataConfig","TrainingJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateTrainingJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_transform_job(self, *args, **kwargs):
        __protego_used['sagemaker']['create_transform_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TransformOutput","TransformInput","ModelName","TransformResources","TransformJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateTransformJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_trial(self, *args, **kwargs):
        __protego_used['sagemaker']['create_trial']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TrialName","ExperimentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateTrial", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_trial_component(self, *args, **kwargs):
        __protego_used['sagemaker']['create_trial_component']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TrialComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateTrialComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user_profile(self, *args, **kwargs):
        __protego_used['sagemaker']['create_user_profile']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["UserProfileName","DomainId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_workteam(self, *args, **kwargs):
        __protego_used['sagemaker']['create_workteam']=['sagemaker:CreateWorkteam']
        for p in ['sagemaker:CreateWorkteam']:
            res = {}
            for nm in ["Description","WorkteamName","MemberDefinitions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "CreateWorkteam", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_algorithm(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_algorithm']=['sagemaker:DeleteAlgorithm']
        for p in ['sagemaker:DeleteAlgorithm']:
            res = {}
            for nm in ["AlgorithmName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteAlgorithm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_app(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_app']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["AppType","UserProfileName","DomainId","AppName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_code_repository(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_code_repository']=['sagemaker:DeleteCodeRepository']
        for p in ['sagemaker:DeleteCodeRepository']:
            res = {}
            for nm in ["CodeRepositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteCodeRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_domain(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_domain']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["DomainId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_endpoint(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_endpoint']=['sagemaker:DeleteEndpoint']
        for p in ['sagemaker:DeleteEndpoint']:
            res = {}
            for nm in ["EndpointName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_endpoint_config(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_endpoint_config']=['sagemaker:DeleteEndpointConfig']
        for p in ['sagemaker:DeleteEndpointConfig']:
            res = {}
            for nm in ["EndpointConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteEndpointConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_experiment(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_experiment']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["ExperimentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteExperiment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_flow_definition(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_flow_definition']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["FlowDefinitionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteFlowDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_model(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_model']=['sagemaker:DeleteModel']
        for p in ['sagemaker:DeleteModel']:
            res = {}
            for nm in ["ModelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_model_package(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_model_package']=['sagemaker:DeleteModelPackage']
        for p in ['sagemaker:DeleteModelPackage']:
            res = {}
            for nm in ["ModelPackageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteModelPackage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_monitoring_schedule(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_monitoring_schedule']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["MonitoringScheduleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteMonitoringSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_notebook_instance(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_notebook_instance']=['sagemaker:DeleteNotebookInstance']
        for p in ['sagemaker:DeleteNotebookInstance']:
            res = {}
            for nm in ["NotebookInstanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteNotebookInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_notebook_instance_lifecycle_config(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_notebook_instance_lifecycle_config']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["NotebookInstanceLifecycleConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteNotebookInstanceLifecycleConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tags(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_tags']=['sagemaker:DeleteTags']
        for p in ['sagemaker:DeleteTags']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_trial(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_trial']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TrialName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteTrial", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_trial_component(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_trial_component']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TrialComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteTrialComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user_profile(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_user_profile']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["UserProfileName","DomainId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_workteam(self, *args, **kwargs):
        __protego_used['sagemaker']['delete_workteam']=['sagemaker:DeleteWorkteam']
        for p in ['sagemaker:DeleteWorkteam']:
            res = {}
            for nm in ["WorkteamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DeleteWorkteam", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_algorithm(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_algorithm']=['sagemaker:DescribeAlgorithm']
        for p in ['sagemaker:DescribeAlgorithm']:
            res = {}
            for nm in ["AlgorithmName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeAlgorithm", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_app(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_app']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["AppType","UserProfileName","DomainId","AppName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_auto_ml_job(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_auto_ml_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["AutoMLJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeAutoMLJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_code_repository(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_code_repository']=['sagemaker:DescribeCodeRepository']
        for p in ['sagemaker:DescribeCodeRepository']:
            res = {}
            for nm in ["CodeRepositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeCodeRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_compilation_job(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_compilation_job']=['sagemaker:DescribeCompilationJob']
        for p in ['sagemaker:DescribeCompilationJob']:
            res = {}
            for nm in ["CompilationJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeCompilationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_domain(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_domain']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["DomainId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_endpoint(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_endpoint']=['sagemaker:DescribeEndpoint']
        for p in ['sagemaker:DescribeEndpoint']:
            res = {}
            for nm in ["EndpointName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_endpoint_config(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_endpoint_config']=['sagemaker:DescribeEndpointConfig']
        for p in ['sagemaker:DescribeEndpointConfig']:
            res = {}
            for nm in ["EndpointConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeEndpointConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_experiment(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_experiment']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["ExperimentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeExperiment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_flow_definition(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_flow_definition']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["FlowDefinitionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeFlowDefinition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_human_task_ui(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_human_task_ui']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["HumanTaskUiName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeHumanTaskUi", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_hyper_parameter_tuning_job(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_hyper_parameter_tuning_job']=['sagemaker:DescribeHyperParameterTuningJob']
        for p in ['sagemaker:DescribeHyperParameterTuningJob']:
            res = {}
            for nm in ["HyperParameterTuningJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeHyperParameterTuningJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_labeling_job(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_labeling_job']=['sagemaker:DescribeLabelingJob']
        for p in ['sagemaker:DescribeLabelingJob']:
            res = {}
            for nm in ["LabelingJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeLabelingJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_model(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_model']=['sagemaker:DescribeModel']
        for p in ['sagemaker:DescribeModel']:
            res = {}
            for nm in ["ModelName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeModel", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_model_package(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_model_package']=['sagemaker:DescribeModelPackage']
        for p in ['sagemaker:DescribeModelPackage']:
            res = {}
            for nm in ["ModelPackageName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeModelPackage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_monitoring_schedule(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_monitoring_schedule']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["MonitoringScheduleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeMonitoringSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_notebook_instance(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_notebook_instance']=['sagemaker:DescribeNotebookInstance']
        for p in ['sagemaker:DescribeNotebookInstance']:
            res = {}
            for nm in ["NotebookInstanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeNotebookInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_notebook_instance_lifecycle_config(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_notebook_instance_lifecycle_config']=['sagemaker:DescribeNotebookInstanceLifecycleConfig']
        for p in ['sagemaker:DescribeNotebookInstanceLifecycleConfig']:
            res = {}
            for nm in ["NotebookInstanceLifecycleConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeNotebookInstanceLifecycleConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_processing_job(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_processing_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["ProcessingJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeProcessingJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_subscribed_workteam(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_subscribed_workteam']=['sagemaker:DescribeSubscribedWorkteam']
        for p in ['sagemaker:DescribeSubscribedWorkteam']:
            res = {}
            for nm in ["WorkteamArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeSubscribedWorkteam", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_training_job(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_training_job']=['sagemaker:DescribeTrainingJob']
        for p in ['sagemaker:DescribeTrainingJob']:
            res = {}
            for nm in ["TrainingJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeTrainingJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_transform_job(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_transform_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TransformJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeTransformJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_trial(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_trial']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TrialName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeTrial", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_trial_component(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_trial_component']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TrialComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeTrialComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user_profile(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_user_profile']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["UserProfileName","DomainId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_workteam(self, *args, **kwargs):
        __protego_used['sagemaker']['describe_workteam']=['sagemaker:DescribeWorkteam']
        for p in ['sagemaker:DescribeWorkteam']:
            res = {}
            for nm in ["WorkteamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DescribeWorkteam", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_trial_component(self, *args, **kwargs):
        __protego_used['sagemaker']['disassociate_trial_component']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TrialName","TrialComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "DisassociateTrialComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_search_suggestions(self, *args, **kwargs):
        __protego_used['sagemaker']['get_search_suggestions']=['sagemaker:GetSearchSuggestions']
        for p in ['sagemaker:GetSearchSuggestions']:
            res = {}
            for nm in ["Resource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "GetSearchSuggestions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_algorithms(self, *args, **kwargs):
        __protego_used['sagemaker']['list_algorithms']=['sagemaker:ListAlgorithms']
        for p in ['sagemaker:ListAlgorithms']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListAlgorithms", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_apps(self, *args, **kwargs):
        __protego_used['sagemaker']['list_apps']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListApps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_auto_ml_jobs(self, *args, **kwargs):
        __protego_used['sagemaker']['list_auto_ml_jobs']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListAutoMLJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_candidates_for_auto_ml_job(self, *args, **kwargs):
        __protego_used['sagemaker']['list_candidates_for_auto_ml_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["AutoMLJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListCandidatesForAutoMLJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_code_repositories(self, *args, **kwargs):
        __protego_used['sagemaker']['list_code_repositories']=['sagemaker:ListCodeRepositories']
        for p in ['sagemaker:ListCodeRepositories']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListCodeRepositories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_compilation_jobs(self, *args, **kwargs):
        __protego_used['sagemaker']['list_compilation_jobs']=['sagemaker:ListCompilationJobs']
        for p in ['sagemaker:ListCompilationJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListCompilationJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_domains(self, *args, **kwargs):
        __protego_used['sagemaker']['list_domains']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListDomains", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_endpoint_configs(self, *args, **kwargs):
        __protego_used['sagemaker']['list_endpoint_configs']=['sagemaker:ListEndpointConfigs']
        for p in ['sagemaker:ListEndpointConfigs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListEndpointConfigs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_endpoints(self, *args, **kwargs):
        __protego_used['sagemaker']['list_endpoints']=['sagemaker:ListEndpoints']
        for p in ['sagemaker:ListEndpoints']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListEndpoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_experiments(self, *args, **kwargs):
        __protego_used['sagemaker']['list_experiments']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListExperiments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_flow_definitions(self, *args, **kwargs):
        __protego_used['sagemaker']['list_flow_definitions']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListFlowDefinitions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_human_task_uis(self, *args, **kwargs):
        __protego_used['sagemaker']['list_human_task_uis']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListHumanTaskUis", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_hyper_parameter_tuning_jobs(self, *args, **kwargs):
        __protego_used['sagemaker']['list_hyper_parameter_tuning_jobs']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListHyperParameterTuningJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_labeling_jobs(self, *args, **kwargs):
        __protego_used['sagemaker']['list_labeling_jobs']=['sagemaker:ListLabelingJobs']
        for p in ['sagemaker:ListLabelingJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListLabelingJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_labeling_jobs_for_workteam(self, *args, **kwargs):
        __protego_used['sagemaker']['list_labeling_jobs_for_workteam']=['sagemaker:ListLabelingJobsForWorkteam']
        for p in ['sagemaker:ListLabelingJobsForWorkteam']:
            res = {}
            for nm in ["WorkteamArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListLabelingJobsForWorkteam", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_model_packages(self, *args, **kwargs):
        __protego_used['sagemaker']['list_model_packages']=['sagemaker:ListModelPackages']
        for p in ['sagemaker:ListModelPackages']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListModelPackages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_models(self, *args, **kwargs):
        __protego_used['sagemaker']['list_models']=['sagemaker:ListModels']
        for p in ['sagemaker:ListModels']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListModels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_monitoring_executions(self, *args, **kwargs):
        __protego_used['sagemaker']['list_monitoring_executions']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListMonitoringExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_monitoring_schedules(self, *args, **kwargs):
        __protego_used['sagemaker']['list_monitoring_schedules']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListMonitoringSchedules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_notebook_instance_lifecycle_configs(self, *args, **kwargs):
        __protego_used['sagemaker']['list_notebook_instance_lifecycle_configs']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListNotebookInstanceLifecycleConfigs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_notebook_instances(self, *args, **kwargs):
        __protego_used['sagemaker']['list_notebook_instances']=['sagemaker:ListNotebookInstances']
        for p in ['sagemaker:ListNotebookInstances']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListNotebookInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_processing_jobs(self, *args, **kwargs):
        __protego_used['sagemaker']['list_processing_jobs']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListProcessingJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_subscribed_workteams(self, *args, **kwargs):
        __protego_used['sagemaker']['list_subscribed_workteams']=['sagemaker:ListSubscribedWorkteams']
        for p in ['sagemaker:ListSubscribedWorkteams']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListSubscribedWorkteams", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags(self, *args, **kwargs):
        __protego_used['sagemaker']['list_tags']=['sagemaker:ListTags']
        for p in ['sagemaker:ListTags']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_training_jobs(self, *args, **kwargs):
        __protego_used['sagemaker']['list_training_jobs']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListTrainingJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_training_jobs_for_hyper_parameter_tuning_job(self, *args, **kwargs):
        __protego_used['sagemaker']['list_training_jobs_for_hyper_parameter_tuning_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["HyperParameterTuningJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListTrainingJobsForHyperParameterTuningJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_transform_jobs(self, *args, **kwargs):
        __protego_used['sagemaker']['list_transform_jobs']=['sagemaker:ListTransformJobs']
        for p in ['sagemaker:ListTransformJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListTransformJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_trial_components(self, *args, **kwargs):
        __protego_used['sagemaker']['list_trial_components']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListTrialComponents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_trials(self, *args, **kwargs):
        __protego_used['sagemaker']['list_trials']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListTrials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_user_profiles(self, *args, **kwargs):
        __protego_used['sagemaker']['list_user_profiles']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListUserProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_workteams(self, *args, **kwargs):
        __protego_used['sagemaker']['list_workteams']=['sagemaker:ListWorkteams']
        for p in ['sagemaker:ListWorkteams']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "ListWorkteams", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def render_ui_template(self, *args, **kwargs):
        __protego_used['sagemaker']['render_ui_template']=['sagemaker:RenderUiTemplate']
        for p in ['sagemaker:RenderUiTemplate']:
            res = {}
            for nm in ["RoleArn","Task","UiTemplate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "RenderUiTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search(self, *args, **kwargs):
        __protego_used['sagemaker']['search']=['sagemaker:Search']
        for p in ['sagemaker:Search']:
            res = {}
            for nm in ["Resource"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "Search", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_monitoring_schedule(self, *args, **kwargs):
        __protego_used['sagemaker']['start_monitoring_schedule']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["MonitoringScheduleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "StartMonitoringSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_notebook_instance(self, *args, **kwargs):
        __protego_used['sagemaker']['start_notebook_instance']=['sagemaker:StartNotebookInstance']
        for p in ['sagemaker:StartNotebookInstance']:
            res = {}
            for nm in ["NotebookInstanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "StartNotebookInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_auto_ml_job(self, *args, **kwargs):
        __protego_used['sagemaker']['stop_auto_ml_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["AutoMLJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "StopAutoMLJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_compilation_job(self, *args, **kwargs):
        __protego_used['sagemaker']['stop_compilation_job']=['sagemaker:StopCompilationJob']
        for p in ['sagemaker:StopCompilationJob']:
            res = {}
            for nm in ["CompilationJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "StopCompilationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_hyper_parameter_tuning_job(self, *args, **kwargs):
        __protego_used['sagemaker']['stop_hyper_parameter_tuning_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["HyperParameterTuningJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "StopHyperParameterTuningJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_labeling_job(self, *args, **kwargs):
        __protego_used['sagemaker']['stop_labeling_job']=['sagemaker:StopLabelingJob']
        for p in ['sagemaker:StopLabelingJob']:
            res = {}
            for nm in ["LabelingJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "StopLabelingJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_monitoring_schedule(self, *args, **kwargs):
        __protego_used['sagemaker']['stop_monitoring_schedule']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["MonitoringScheduleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "StopMonitoringSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_notebook_instance(self, *args, **kwargs):
        __protego_used['sagemaker']['stop_notebook_instance']=['sagemaker:StopNotebookInstance']
        for p in ['sagemaker:StopNotebookInstance']:
            res = {}
            for nm in ["NotebookInstanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "StopNotebookInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_processing_job(self, *args, **kwargs):
        __protego_used['sagemaker']['stop_processing_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["ProcessingJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "StopProcessingJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_training_job(self, *args, **kwargs):
        __protego_used['sagemaker']['stop_training_job']=['sagemaker:StopTrainingJob']
        for p in ['sagemaker:StopTrainingJob']:
            res = {}
            for nm in ["TrainingJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "StopTrainingJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_transform_job(self, *args, **kwargs):
        __protego_used['sagemaker']['stop_transform_job']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TransformJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "StopTransformJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_code_repository(self, *args, **kwargs):
        __protego_used['sagemaker']['update_code_repository']=['sagemaker:UpdateCodeRepository']
        for p in ['sagemaker:UpdateCodeRepository']:
            res = {}
            for nm in ["CodeRepositoryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateCodeRepository", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_domain(self, *args, **kwargs):
        __protego_used['sagemaker']['update_domain']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["DomainId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_endpoint(self, *args, **kwargs):
        __protego_used['sagemaker']['update_endpoint']=['sagemaker:UpdateEndpoint']
        for p in ['sagemaker:UpdateEndpoint']:
            res = {}
            for nm in ["EndpointName","EndpointConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_endpoint_weights_and_capacities(self, *args, **kwargs):
        __protego_used['sagemaker']['update_endpoint_weights_and_capacities']=['sagemaker:UpdateEndpointWeightsAndCapacities']
        for p in ['sagemaker:UpdateEndpointWeightsAndCapacities']:
            res = {}
            for nm in ["EndpointName","DesiredWeightsAndCapacities"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateEndpointWeightsAndCapacities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_experiment(self, *args, **kwargs):
        __protego_used['sagemaker']['update_experiment']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["ExperimentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateExperiment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_monitoring_schedule(self, *args, **kwargs):
        __protego_used['sagemaker']['update_monitoring_schedule']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["MonitoringScheduleConfig","MonitoringScheduleName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateMonitoringSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_notebook_instance(self, *args, **kwargs):
        __protego_used['sagemaker']['update_notebook_instance']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["NotebookInstanceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateNotebookInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_notebook_instance_lifecycle_config(self, *args, **kwargs):
        __protego_used['sagemaker']['update_notebook_instance_lifecycle_config']=['sagemaker:UpdateNotebookInstanceLifecycleConfig']
        for p in ['sagemaker:UpdateNotebookInstanceLifecycleConfig']:
            res = {}
            for nm in ["NotebookInstanceLifecycleConfigName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateNotebookInstanceLifecycleConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_trial(self, *args, **kwargs):
        __protego_used['sagemaker']['update_trial']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TrialName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateTrial", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_trial_component(self, *args, **kwargs):
        __protego_used['sagemaker']['update_trial_component']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["TrialComponentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateTrialComponent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user_profile(self, *args, **kwargs):
        __protego_used['sagemaker']['update_user_profile']=['sagemaker:*']
        for p in ['sagemaker:*']:
            res = {}
            for nm in ["UserProfileName","DomainId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateUserProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_workteam(self, *args, **kwargs):
        __protego_used['sagemaker']['update_workteam']=['sagemaker:UpdateWorkteam']
        for p in ['sagemaker:UpdateWorkteam']:
            res = {}
            for nm in ["WorkteamName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker'].append({'action': "UpdateWorkteam", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sagemaker_a2i_runtime:
    def __init__(self, region_name=__default_region):
        __protego_used['sagemaker-a2i-runtime']= __protego_used.get('sagemaker-a2i-runtime', {})
        __protego_resource_map['sagemaker-a2i-runtime']=__protego_resource_map.get('sagemaker-a2i-runtime', [])
        self.region = region_name
    def delete_human_loop(self, *args, **kwargs):
        __protego_used['sagemaker-a2i-runtime']['delete_human_loop']=['sagemaker-a2i-runtime:*']
        for p in ['sagemaker-a2i-runtime:*']:
            res = {}
            for nm in ["HumanLoopName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker-a2i-runtime'].append({'action': "DeleteHumanLoop", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_human_loop(self, *args, **kwargs):
        __protego_used['sagemaker-a2i-runtime']['describe_human_loop']=['sagemaker-a2i-runtime:*']
        for p in ['sagemaker-a2i-runtime:*']:
            res = {}
            for nm in ["HumanLoopName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker-a2i-runtime'].append({'action': "DescribeHumanLoop", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_human_loops(self, *args, **kwargs):
        __protego_used['sagemaker-a2i-runtime']['list_human_loops']=['sagemaker-a2i-runtime:*']
        for p in ['sagemaker-a2i-runtime:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker-a2i-runtime'].append({'action': "ListHumanLoops", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_human_loop(self, *args, **kwargs):
        __protego_used['sagemaker-a2i-runtime']['start_human_loop']=['sagemaker-a2i-runtime:*']
        for p in ['sagemaker-a2i-runtime:*']:
            res = {}
            for nm in ["FlowDefinitionArn","HumanLoopInput","HumanLoopName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker-a2i-runtime'].append({'action': "StartHumanLoop", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_human_loop(self, *args, **kwargs):
        __protego_used['sagemaker-a2i-runtime']['stop_human_loop']=['sagemaker-a2i-runtime:*']
        for p in ['sagemaker-a2i-runtime:*']:
            res = {}
            for nm in ["HumanLoopName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker-a2i-runtime'].append({'action': "StopHumanLoop", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sagemaker_runtime:
    def __init__(self, region_name=__default_region):
        __protego_used['sagemaker-runtime']= __protego_used.get('sagemaker-runtime', {})
        __protego_resource_map['sagemaker-runtime']=__protego_resource_map.get('sagemaker-runtime', [])
        self.region = region_name
    def invoke_endpoint(self, *args, **kwargs):
        __protego_used['sagemaker-runtime']['invoke_endpoint']=['sagemaker:InvokeEndpoint']
        for p in ['sagemaker:InvokeEndpoint']:
            res = {}
            for nm in ["Body","EndpointName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sagemaker-runtime'].append({'action': "InvokeEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class savingsplans:
    def __init__(self, region_name=__default_region):
        __protego_used['savingsplans']= __protego_used.get('savingsplans', {})
        __protego_resource_map['savingsplans']=__protego_resource_map.get('savingsplans', [])
        self.region = region_name
    def create_savings_plan(self, *args, **kwargs):
        __protego_used['savingsplans']['create_savings_plan']=['savingsplans:*']
        for p in ['savingsplans:*']:
            res = {}
            for nm in ["savingsPlanOfferingId","commitment"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['savingsplans'].append({'action': "CreateSavingsPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_savings_plan_rates(self, *args, **kwargs):
        __protego_used['savingsplans']['describe_savings_plan_rates']=['savingsplans:*']
        for p in ['savingsplans:*']:
            res = {}
            for nm in ["savingsPlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['savingsplans'].append({'action': "DescribeSavingsPlanRates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_savings_plans(self, *args, **kwargs):
        __protego_used['savingsplans']['describe_savings_plans']=['savingsplans:*']
        for p in ['savingsplans:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['savingsplans'].append({'action': "DescribeSavingsPlans", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_savings_plans_offering_rates(self, *args, **kwargs):
        __protego_used['savingsplans']['describe_savings_plans_offering_rates']=['savingsplans:*']
        for p in ['savingsplans:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['savingsplans'].append({'action': "DescribeSavingsPlansOfferingRates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_savings_plans_offerings(self, *args, **kwargs):
        __protego_used['savingsplans']['describe_savings_plans_offerings']=['savingsplans:*']
        for p in ['savingsplans:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['savingsplans'].append({'action': "DescribeSavingsPlansOfferings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['savingsplans']['list_tags_for_resource']=['savingsplans:*']
        for p in ['savingsplans:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['savingsplans'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['savingsplans']['tag_resource']=['savingsplans:*']
        for p in ['savingsplans:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['savingsplans'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['savingsplans']['untag_resource']=['savingsplans:*']
        for p in ['savingsplans:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['savingsplans'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class schemas:
    def __init__(self, region_name=__default_region):
        __protego_used['schemas']= __protego_used.get('schemas', {})
        __protego_resource_map['schemas']=__protego_resource_map.get('schemas', [])
        self.region = region_name
    def create_discoverer(self, *args, **kwargs):
        __protego_used['schemas']['create_discoverer']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["SourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "CreateDiscoverer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_registry(self, *args, **kwargs):
        __protego_used['schemas']['create_registry']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["RegistryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "CreateRegistry", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_schema(self, *args, **kwargs):
        __protego_used['schemas']['create_schema']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["Content","Type","RegistryName","SchemaName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "CreateSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_discoverer(self, *args, **kwargs):
        __protego_used['schemas']['delete_discoverer']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["DiscovererId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "DeleteDiscoverer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_registry(self, *args, **kwargs):
        __protego_used['schemas']['delete_registry']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["RegistryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "DeleteRegistry", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_schema(self, *args, **kwargs):
        __protego_used['schemas']['delete_schema']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["RegistryName","SchemaName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "DeleteSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_schema_version(self, *args, **kwargs):
        __protego_used['schemas']['delete_schema_version']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["SchemaVersion","RegistryName","SchemaName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "DeleteSchemaVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_code_binding(self, *args, **kwargs):
        __protego_used['schemas']['describe_code_binding']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["Language","RegistryName","SchemaName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "DescribeCodeBinding", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_discoverer(self, *args, **kwargs):
        __protego_used['schemas']['describe_discoverer']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["DiscovererId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "DescribeDiscoverer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_registry(self, *args, **kwargs):
        __protego_used['schemas']['describe_registry']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["RegistryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "DescribeRegistry", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_schema(self, *args, **kwargs):
        __protego_used['schemas']['describe_schema']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["RegistryName","SchemaName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "DescribeSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_code_binding_source(self, *args, **kwargs):
        __protego_used['schemas']['get_code_binding_source']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["Language","RegistryName","SchemaName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "GetCodeBindingSource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_discovered_schema(self, *args, **kwargs):
        __protego_used['schemas']['get_discovered_schema']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["Type","Events"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "GetDiscoveredSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_discoverers(self, *args, **kwargs):
        __protego_used['schemas']['list_discoverers']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "ListDiscoverers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_registries(self, *args, **kwargs):
        __protego_used['schemas']['list_registries']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "ListRegistries", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_schema_versions(self, *args, **kwargs):
        __protego_used['schemas']['list_schema_versions']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["RegistryName","SchemaName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "ListSchemaVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_schemas(self, *args, **kwargs):
        __protego_used['schemas']['list_schemas']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["RegistryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "ListSchemas", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['schemas']['list_tags_for_resource']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def lock_service_linked_role(self, *args, **kwargs):
        __protego_used['schemas']['lock_service_linked_role']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["RoleArn","Timeout"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "LockServiceLinkedRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_code_binding(self, *args, **kwargs):
        __protego_used['schemas']['put_code_binding']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["Language","RegistryName","SchemaName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "PutCodeBinding", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_schemas(self, *args, **kwargs):
        __protego_used['schemas']['search_schemas']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["Keywords","RegistryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "SearchSchemas", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_discoverer(self, *args, **kwargs):
        __protego_used['schemas']['start_discoverer']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["DiscovererId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "StartDiscoverer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_discoverer(self, *args, **kwargs):
        __protego_used['schemas']['stop_discoverer']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["DiscovererId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "StopDiscoverer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['schemas']['tag_resource']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unlock_service_linked_role(self, *args, **kwargs):
        __protego_used['schemas']['unlock_service_linked_role']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["RoleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "UnlockServiceLinkedRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['schemas']['untag_resource']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_discoverer(self, *args, **kwargs):
        __protego_used['schemas']['update_discoverer']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["DiscovererId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "UpdateDiscoverer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_registry(self, *args, **kwargs):
        __protego_used['schemas']['update_registry']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["RegistryName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "UpdateRegistry", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_schema(self, *args, **kwargs):
        __protego_used['schemas']['update_schema']=['schemas:*']
        for p in ['schemas:*']:
            res = {}
            for nm in ["RegistryName","SchemaName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['schemas'].append({'action': "UpdateSchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sdb:
    def __init__(self, region_name=__default_region):
        __protego_used['sdb']= __protego_used.get('sdb', {})
        __protego_resource_map['sdb']=__protego_resource_map.get('sdb', [])
        self.region = region_name
    def batch_delete_attributes(self, *args, **kwargs):
        __protego_used['sdb']['batch_delete_attributes']=['sdb:BatchDeleteAttributes']
        for p in ['sdb:BatchDeleteAttributes']:
            res = {}
            for nm in ["DomainName","Items"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sdb'].append({'action': "BatchDeleteAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_put_attributes(self, *args, **kwargs):
        __protego_used['sdb']['batch_put_attributes']=['sdb:BatchPutAttributes']
        for p in ['sdb:BatchPutAttributes']:
            res = {}
            for nm in ["DomainName","Items"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sdb'].append({'action': "BatchPutAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_domain(self, *args, **kwargs):
        __protego_used['sdb']['create_domain']=['sdb:CreateDomain']
        for p in ['sdb:CreateDomain']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sdb'].append({'action': "CreateDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_attributes(self, *args, **kwargs):
        __protego_used['sdb']['delete_attributes']=['sdb:DeleteAttributes']
        for p in ['sdb:DeleteAttributes']:
            res = {}
            for nm in ["ItemName","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sdb'].append({'action': "DeleteAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_domain(self, *args, **kwargs):
        __protego_used['sdb']['delete_domain']=['sdb:DeleteDomain']
        for p in ['sdb:DeleteDomain']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sdb'].append({'action': "DeleteDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def domain_metadata(self, *args, **kwargs):
        __protego_used['sdb']['domain_metadata']=['sdb:DomainMetadata']
        for p in ['sdb:DomainMetadata']:
            res = {}
            for nm in ["DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sdb'].append({'action': "DomainMetadata", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_attributes(self, *args, **kwargs):
        __protego_used['sdb']['get_attributes']=['sdb:GetAttributes']
        for p in ['sdb:GetAttributes']:
            res = {}
            for nm in ["ItemName","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sdb'].append({'action': "GetAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_domains(self, *args, **kwargs):
        __protego_used['sdb']['list_domains']=['sdb:ListDomains']
        for p in ['sdb:ListDomains']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sdb'].append({'action': "ListDomains", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_attributes(self, *args, **kwargs):
        __protego_used['sdb']['put_attributes']=['sdb:PutAttributes']
        for p in ['sdb:PutAttributes']:
            res = {}
            for nm in ["ItemName","DomainName","Attributes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sdb'].append({'action': "PutAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def select(self, *args, **kwargs):
        __protego_used['sdb']['select']=['sdb:Select']
        for p in ['sdb:Select']:
            res = {}
            for nm in ["SelectExpression"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sdb'].append({'action': "Select", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class secretsmanager:
    def __init__(self, region_name=__default_region):
        __protego_used['secretsmanager']= __protego_used.get('secretsmanager', {})
        __protego_resource_map['secretsmanager']=__protego_resource_map.get('secretsmanager', [])
        self.region = region_name
    def cancel_rotate_secret(self, *args, **kwargs):
        __protego_used['secretsmanager']['cancel_rotate_secret']=['secretsmanager:CancelRotateSecret']
        for p in ['secretsmanager:CancelRotateSecret']:
            res = {}
            for nm in ["SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "CancelRotateSecret", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_secret(self, *args, **kwargs):
        __protego_used['secretsmanager']['create_secret']=['secretsmanager:CreateSecret']
        for p in ['secretsmanager:CreateSecret']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "CreateSecret", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resource_policy(self, *args, **kwargs):
        __protego_used['secretsmanager']['delete_resource_policy']=['secretsmanager:*']
        for p in ['secretsmanager:*']:
            res = {}
            for nm in ["SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "DeleteResourcePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_secret(self, *args, **kwargs):
        __protego_used['secretsmanager']['delete_secret']=['secretsmanager:DeleteSecret']
        for p in ['secretsmanager:DeleteSecret']:
            res = {}
            for nm in ["SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "DeleteSecret", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_secret(self, *args, **kwargs):
        __protego_used['secretsmanager']['describe_secret']=['secretsmanager:DescribeSecret']
        for p in ['secretsmanager:DescribeSecret']:
            res = {}
            for nm in ["SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "DescribeSecret", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_random_password(self, *args, **kwargs):
        __protego_used['secretsmanager']['get_random_password']=['secretsmanager:GetRandomPassword']
        for p in ['secretsmanager:GetRandomPassword']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "GetRandomPassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resource_policy(self, *args, **kwargs):
        __protego_used['secretsmanager']['get_resource_policy']=['secretsmanager:*']
        for p in ['secretsmanager:*']:
            res = {}
            for nm in ["SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "GetResourcePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_secret_value(self, *args, **kwargs):
        __protego_used['secretsmanager']['get_secret_value']=['secretsmanager:GetSecretValue']
        for p in ['secretsmanager:GetSecretValue']:
            res = {}
            for nm in ["SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "GetSecretValue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_secret_version_ids(self, *args, **kwargs):
        __protego_used['secretsmanager']['list_secret_version_ids']=['secretsmanager:ListSecretVersionIds']
        for p in ['secretsmanager:ListSecretVersionIds']:
            res = {}
            for nm in ["SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "ListSecretVersionIds", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_secrets(self, *args, **kwargs):
        __protego_used['secretsmanager']['list_secrets']=['secretsmanager:ListSecrets']
        for p in ['secretsmanager:ListSecrets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "ListSecrets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_resource_policy(self, *args, **kwargs):
        __protego_used['secretsmanager']['put_resource_policy']=['secretsmanager:*']
        for p in ['secretsmanager:*']:
            res = {}
            for nm in ["SecretId","ResourcePolicy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "PutResourcePolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_secret_value(self, *args, **kwargs):
        __protego_used['secretsmanager']['put_secret_value']=['secretsmanager:PutSecretValue']
        for p in ['secretsmanager:PutSecretValue']:
            res = {}
            for nm in ["SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "PutSecretValue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_secret(self, *args, **kwargs):
        __protego_used['secretsmanager']['restore_secret']=['secretsmanager:RestoreSecret']
        for p in ['secretsmanager:RestoreSecret']:
            res = {}
            for nm in ["SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "RestoreSecret", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def rotate_secret(self, *args, **kwargs):
        __protego_used['secretsmanager']['rotate_secret']=['secretsmanager:RotateSecret']
        for p in ['secretsmanager:RotateSecret']:
            res = {}
            for nm in ["SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "RotateSecret", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['secretsmanager']['tag_resource']=['secretsmanager:TagResource']
        for p in ['secretsmanager:TagResource']:
            res = {}
            for nm in ["SecretId","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['secretsmanager']['untag_resource']=['secretsmanager:UntagResource']
        for p in ['secretsmanager:UntagResource']:
            res = {}
            for nm in ["TagKeys","SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_secret(self, *args, **kwargs):
        __protego_used['secretsmanager']['update_secret']=['secretsmanager:UpdateSecret']
        for p in ['secretsmanager:UpdateSecret']:
            res = {}
            for nm in ["SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "UpdateSecret", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_secret_version_stage(self, *args, **kwargs):
        __protego_used['secretsmanager']['update_secret_version_stage']=['secretsmanager:UpdateSecretVersionStage']
        for p in ['secretsmanager:UpdateSecretVersionStage']:
            res = {}
            for nm in ["VersionStage","SecretId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['secretsmanager'].append({'action': "UpdateSecretVersionStage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class securityhub:
    def __init__(self, region_name=__default_region):
        __protego_used['securityhub']= __protego_used.get('securityhub', {})
        __protego_resource_map['securityhub']=__protego_resource_map.get('securityhub', [])
        self.region = region_name
    def accept_invitation(self, *args, **kwargs):
        __protego_used['securityhub']['accept_invitation']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["MasterId","InvitationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "AcceptInvitation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_disable_standards(self, *args, **kwargs):
        __protego_used['securityhub']['batch_disable_standards']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["StandardsSubscriptionArns"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "BatchDisableStandards", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_enable_standards(self, *args, **kwargs):
        __protego_used['securityhub']['batch_enable_standards']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["StandardsSubscriptionRequests"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "BatchEnableStandards", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_import_findings(self, *args, **kwargs):
        __protego_used['securityhub']['batch_import_findings']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["Findings"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "BatchImportFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_action_target(self, *args, **kwargs):
        __protego_used['securityhub']['create_action_target']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["Description","Name","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "CreateActionTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_insight(self, *args, **kwargs):
        __protego_used['securityhub']['create_insight']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["GroupByAttribute","Name","Filters"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "CreateInsight", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_members(self, *args, **kwargs):
        __protego_used['securityhub']['create_members']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "CreateMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def decline_invitations(self, *args, **kwargs):
        __protego_used['securityhub']['decline_invitations']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["AccountIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DeclineInvitations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_action_target(self, *args, **kwargs):
        __protego_used['securityhub']['delete_action_target']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["ActionTargetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DeleteActionTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_insight(self, *args, **kwargs):
        __protego_used['securityhub']['delete_insight']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["InsightArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DeleteInsight", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_invitations(self, *args, **kwargs):
        __protego_used['securityhub']['delete_invitations']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["AccountIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DeleteInvitations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_members(self, *args, **kwargs):
        __protego_used['securityhub']['delete_members']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DeleteMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_action_targets(self, *args, **kwargs):
        __protego_used['securityhub']['describe_action_targets']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DescribeActionTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_hub(self, *args, **kwargs):
        __protego_used['securityhub']['describe_hub']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DescribeHub", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_products(self, *args, **kwargs):
        __protego_used['securityhub']['describe_products']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DescribeProducts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_import_findings_for_product(self, *args, **kwargs):
        __protego_used['securityhub']['disable_import_findings_for_product']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["ProductSubscriptionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DisableImportFindingsForProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_security_hub(self, *args, **kwargs):
        __protego_used['securityhub']['disable_security_hub']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DisableSecurityHub", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_from_master_account(self, *args, **kwargs):
        __protego_used['securityhub']['disassociate_from_master_account']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DisassociateFromMasterAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_members(self, *args, **kwargs):
        __protego_used['securityhub']['disassociate_members']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "DisassociateMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_import_findings_for_product(self, *args, **kwargs):
        __protego_used['securityhub']['enable_import_findings_for_product']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["ProductArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "EnableImportFindingsForProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_security_hub(self, *args, **kwargs):
        __protego_used['securityhub']['enable_security_hub']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "EnableSecurityHub", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_enabled_standards(self, *args, **kwargs):
        __protego_used['securityhub']['get_enabled_standards']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "GetEnabledStandards", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_findings(self, *args, **kwargs):
        __protego_used['securityhub']['get_findings']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "GetFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_insight_results(self, *args, **kwargs):
        __protego_used['securityhub']['get_insight_results']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["InsightArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "GetInsightResults", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_insights(self, *args, **kwargs):
        __protego_used['securityhub']['get_insights']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "GetInsights", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_invitations_count(self, *args, **kwargs):
        __protego_used['securityhub']['get_invitations_count']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "GetInvitationsCount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_master_account(self, *args, **kwargs):
        __protego_used['securityhub']['get_master_account']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "GetMasterAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_members(self, *args, **kwargs):
        __protego_used['securityhub']['get_members']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["AccountIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "GetMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def invite_members(self, *args, **kwargs):
        __protego_used['securityhub']['invite_members']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "InviteMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_enabled_products_for_import(self, *args, **kwargs):
        __protego_used['securityhub']['list_enabled_products_for_import']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "ListEnabledProductsForImport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_invitations(self, *args, **kwargs):
        __protego_used['securityhub']['list_invitations']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "ListInvitations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_members(self, *args, **kwargs):
        __protego_used['securityhub']['list_members']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "ListMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['securityhub']['list_tags_for_resource']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['securityhub']['tag_resource']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['securityhub']['untag_resource']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_action_target(self, *args, **kwargs):
        __protego_used['securityhub']['update_action_target']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["ActionTargetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "UpdateActionTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_findings(self, *args, **kwargs):
        __protego_used['securityhub']['update_findings']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["Filters"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "UpdateFindings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_insight(self, *args, **kwargs):
        __protego_used['securityhub']['update_insight']=['securityhub:*']
        for p in ['securityhub:*']:
            res = {}
            for nm in ["InsightArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['securityhub'].append({'action': "UpdateInsight", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class serverlessrepo:
    def __init__(self, region_name=__default_region):
        __protego_used['serverlessrepo']= __protego_used.get('serverlessrepo', {})
        __protego_resource_map['serverlessrepo']=__protego_resource_map.get('serverlessrepo', [])
        self.region = region_name
    def create_application(self, *args, **kwargs):
        __protego_used['serverlessrepo']['create_application']=['serverlessrepo:CreateApplication']
        for p in ['serverlessrepo:CreateApplication']:
            res = {}
            for nm in ["Description","Author","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "CreateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_application_version(self, *args, **kwargs):
        __protego_used['serverlessrepo']['create_application_version']=['serverlessrepo:CreateApplicationVersion']
        for p in ['serverlessrepo:CreateApplicationVersion']:
            res = {}
            for nm in ["SemanticVersion","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "CreateApplicationVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cloud_formation_change_set(self, *args, **kwargs):
        __protego_used['serverlessrepo']['create_cloud_formation_change_set']=['serverlessrepo:CreateCloudFormationChangeSet']
        for p in ['serverlessrepo:CreateCloudFormationChangeSet']:
            res = {}
            for nm in ["ApplicationId","StackName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "CreateCloudFormationChangeSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cloud_formation_template(self, *args, **kwargs):
        __protego_used['serverlessrepo']['create_cloud_formation_template']=['serverlessrepo:CreateCloudFormationTemplate']
        for p in ['serverlessrepo:CreateCloudFormationTemplate']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "CreateCloudFormationTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_application(self, *args, **kwargs):
        __protego_used['serverlessrepo']['delete_application']=['serverlessrepo:DeleteApplication']
        for p in ['serverlessrepo:DeleteApplication']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "DeleteApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_application(self, *args, **kwargs):
        __protego_used['serverlessrepo']['get_application']=['serverlessrepo:GetApplication']
        for p in ['serverlessrepo:GetApplication']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "GetApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_application_policy(self, *args, **kwargs):
        __protego_used['serverlessrepo']['get_application_policy']=['serverlessrepo:GetApplicationPolicy']
        for p in ['serverlessrepo:GetApplicationPolicy']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "GetApplicationPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_cloud_formation_template(self, *args, **kwargs):
        __protego_used['serverlessrepo']['get_cloud_formation_template']=['serverlessrepo:GetCloudFormationTemplate']
        for p in ['serverlessrepo:GetCloudFormationTemplate']:
            res = {}
            for nm in ["ApplicationId","TemplateId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "GetCloudFormationTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_application_dependencies(self, *args, **kwargs):
        __protego_used['serverlessrepo']['list_application_dependencies']=['serverlessrepo:ListApplicationDependencies']
        for p in ['serverlessrepo:ListApplicationDependencies']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "ListApplicationDependencies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_application_versions(self, *args, **kwargs):
        __protego_used['serverlessrepo']['list_application_versions']=['serverlessrepo:ListApplicationVersions']
        for p in ['serverlessrepo:ListApplicationVersions']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "ListApplicationVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_applications(self, *args, **kwargs):
        __protego_used['serverlessrepo']['list_applications']=['serverlessrepo:ListApplications']
        for p in ['serverlessrepo:ListApplications']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "ListApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_application_policy(self, *args, **kwargs):
        __protego_used['serverlessrepo']['put_application_policy']=['serverlessrepo:PutApplicationPolicy']
        for p in ['serverlessrepo:PutApplicationPolicy']:
            res = {}
            for nm in ["Statements","ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "PutApplicationPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_application(self, *args, **kwargs):
        __protego_used['serverlessrepo']['update_application']=['serverlessrepo:UpdateApplication']
        for p in ['serverlessrepo:UpdateApplication']:
            res = {}
            for nm in ["ApplicationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['serverlessrepo'].append({'action': "UpdateApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class service_quotas:
    def __init__(self, region_name=__default_region):
        __protego_used['service-quotas']= __protego_used.get('service-quotas', {})
        __protego_resource_map['service-quotas']=__protego_resource_map.get('service-quotas', [])
        self.region = region_name
    def associate_service_quota_template(self, *args, **kwargs):
        __protego_used['service-quotas']['associate_service_quota_template']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "AssociateServiceQuotaTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_service_quota_increase_request_from_template(self, *args, **kwargs):
        __protego_used['service-quotas']['delete_service_quota_increase_request_from_template']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in ["ServiceCode","AwsRegion","QuotaCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "DeleteServiceQuotaIncreaseRequestFromTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_service_quota_template(self, *args, **kwargs):
        __protego_used['service-quotas']['disassociate_service_quota_template']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "DisassociateServiceQuotaTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_aws_default_service_quota(self, *args, **kwargs):
        __protego_used['service-quotas']['get_aws_default_service_quota']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in ["ServiceCode","QuotaCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "GetAWSDefaultServiceQuota", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_association_for_service_quota_template(self, *args, **kwargs):
        __protego_used['service-quotas']['get_association_for_service_quota_template']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "GetAssociationForServiceQuotaTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_requested_service_quota_change(self, *args, **kwargs):
        __protego_used['service-quotas']['get_requested_service_quota_change']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in ["RequestId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "GetRequestedServiceQuotaChange", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_service_quota(self, *args, **kwargs):
        __protego_used['service-quotas']['get_service_quota']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in ["ServiceCode","QuotaCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "GetServiceQuota", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_service_quota_increase_request_from_template(self, *args, **kwargs):
        __protego_used['service-quotas']['get_service_quota_increase_request_from_template']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in ["ServiceCode","AwsRegion","QuotaCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "GetServiceQuotaIncreaseRequestFromTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_aws_default_service_quotas(self, *args, **kwargs):
        __protego_used['service-quotas']['list_aws_default_service_quotas']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in ["ServiceCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "ListAWSDefaultServiceQuotas", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_requested_service_quota_change_history(self, *args, **kwargs):
        __protego_used['service-quotas']['list_requested_service_quota_change_history']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "ListRequestedServiceQuotaChangeHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_requested_service_quota_change_history_by_quota(self, *args, **kwargs):
        __protego_used['service-quotas']['list_requested_service_quota_change_history_by_quota']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in ["ServiceCode","QuotaCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "ListRequestedServiceQuotaChangeHistoryByQuota", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_service_quota_increase_requests_in_template(self, *args, **kwargs):
        __protego_used['service-quotas']['list_service_quota_increase_requests_in_template']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "ListServiceQuotaIncreaseRequestsInTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_service_quotas(self, *args, **kwargs):
        __protego_used['service-quotas']['list_service_quotas']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in ["ServiceCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "ListServiceQuotas", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_services(self, *args, **kwargs):
        __protego_used['service-quotas']['list_services']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "ListServices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_service_quota_increase_request_into_template(self, *args, **kwargs):
        __protego_used['service-quotas']['put_service_quota_increase_request_into_template']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in ["ServiceCode","AwsRegion","QuotaCode","DesiredValue"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "PutServiceQuotaIncreaseRequestIntoTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def request_service_quota_increase(self, *args, **kwargs):
        __protego_used['service-quotas']['request_service_quota_increase']=['service-quotas:*']
        for p in ['service-quotas:*']:
            res = {}
            for nm in ["ServiceCode","DesiredValue","QuotaCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['service-quotas'].append({'action': "RequestServiceQuotaIncrease", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class servicecatalog:
    def __init__(self, region_name=__default_region):
        __protego_used['servicecatalog']= __protego_used.get('servicecatalog', {})
        __protego_resource_map['servicecatalog']=__protego_resource_map.get('servicecatalog', [])
        self.region = region_name
    def accept_portfolio_share(self, *args, **kwargs):
        __protego_used['servicecatalog']['accept_portfolio_share']=['servicecatalog:AcceptPortfolioShare']
        for p in ['servicecatalog:AcceptPortfolioShare']:
            res = {}
            for nm in ["PortfolioId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "AcceptPortfolioShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_budget_with_resource(self, *args, **kwargs):
        __protego_used['servicecatalog']['associate_budget_with_resource']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["ResourceId","BudgetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "AssociateBudgetWithResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_principal_with_portfolio(self, *args, **kwargs):
        __protego_used['servicecatalog']['associate_principal_with_portfolio']=['servicecatalog:AssociatePrincipalWithPortfolio']
        for p in ['servicecatalog:AssociatePrincipalWithPortfolio']:
            res = {}
            for nm in ["PortfolioId","PrincipalType","PrincipalARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "AssociatePrincipalWithPortfolio", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_product_with_portfolio(self, *args, **kwargs):
        __protego_used['servicecatalog']['associate_product_with_portfolio']=['servicecatalog:AssociateProductWithPortfolio']
        for p in ['servicecatalog:AssociateProductWithPortfolio']:
            res = {}
            for nm in ["PortfolioId","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "AssociateProductWithPortfolio", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_service_action_with_provisioning_artifact(self, *args, **kwargs):
        __protego_used['servicecatalog']['associate_service_action_with_provisioning_artifact']=['servicecatalog:AssociateServiceActionWithProvisioningArtifact']
        for p in ['servicecatalog:AssociateServiceActionWithProvisioningArtifact']:
            res = {}
            for nm in ["ServiceActionId","ProvisioningArtifactId","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "AssociateServiceActionWithProvisioningArtifact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_tag_option_with_resource(self, *args, **kwargs):
        __protego_used['servicecatalog']['associate_tag_option_with_resource']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["ResourceId","TagOptionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "AssociateTagOptionWithResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_associate_service_action_with_provisioning_artifact(self, *args, **kwargs):
        __protego_used['servicecatalog']['batch_associate_service_action_with_provisioning_artifact']=['servicecatalog:BatchAssociateServiceActionWithProvisioningArtifact']
        for p in ['servicecatalog:BatchAssociateServiceActionWithProvisioningArtifact']:
            res = {}
            for nm in ["ServiceActionAssociations"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "BatchAssociateServiceActionWithProvisioningArtifact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def batch_disassociate_service_action_from_provisioning_artifact(self, *args, **kwargs):
        __protego_used['servicecatalog']['batch_disassociate_service_action_from_provisioning_artifact']=['servicecatalog:BatchDisassociateServiceActionFromProvisioningArtifact']
        for p in ['servicecatalog:BatchDisassociateServiceActionFromProvisioningArtifact']:
            res = {}
            for nm in ["ServiceActionAssociations"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "BatchDisassociateServiceActionFromProvisioningArtifact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_product(self, *args, **kwargs):
        __protego_used['servicecatalog']['copy_product']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["IdempotencyToken","SourceProductArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "CopyProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_constraint(self, *args, **kwargs):
        __protego_used['servicecatalog']['create_constraint']=['servicecatalog:CreateConstraint']
        for p in ['servicecatalog:CreateConstraint']:
            res = {}
            for nm in ["IdempotencyToken","Parameters","PortfolioId","Type","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "CreateConstraint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_portfolio(self, *args, **kwargs):
        __protego_used['servicecatalog']['create_portfolio']=['servicecatalog:CreatePortfolio']
        for p in ['servicecatalog:CreatePortfolio']:
            res = {}
            for nm in ["IdempotencyToken","DisplayName","ProviderName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "CreatePortfolio", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_portfolio_share(self, *args, **kwargs):
        __protego_used['servicecatalog']['create_portfolio_share']=['servicecatalog:CreatePortfolioShare']
        for p in ['servicecatalog:CreatePortfolioShare']:
            res = {}
            for nm in ["PortfolioId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "CreatePortfolioShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_product(self, *args, **kwargs):
        __protego_used['servicecatalog']['create_product']=['servicecatalog:CreateProduct']
        for p in ['servicecatalog:CreateProduct']:
            res = {}
            for nm in ["IdempotencyToken","Name","ProvisioningArtifactParameters","Owner","ProductType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "CreateProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_provisioned_product_plan(self, *args, **kwargs):
        __protego_used['servicecatalog']['create_provisioned_product_plan']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["IdempotencyToken","PlanType","ProvisionedProductName","PlanName","ProvisioningArtifactId","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "CreateProvisionedProductPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_provisioning_artifact(self, *args, **kwargs):
        __protego_used['servicecatalog']['create_provisioning_artifact']=['servicecatalog:CreateProvisioningArtifact']
        for p in ['servicecatalog:CreateProvisioningArtifact']:
            res = {}
            for nm in ["IdempotencyToken","Parameters","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "CreateProvisioningArtifact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_service_action(self, *args, **kwargs):
        __protego_used['servicecatalog']['create_service_action']=['servicecatalog:CreateServiceAction']
        for p in ['servicecatalog:CreateServiceAction']:
            res = {}
            for nm in ["IdempotencyToken","Definition","DefinitionType","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "CreateServiceAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_tag_option(self, *args, **kwargs):
        __protego_used['servicecatalog']['create_tag_option']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["Value","Key"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "CreateTagOption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_constraint(self, *args, **kwargs):
        __protego_used['servicecatalog']['delete_constraint']=['servicecatalog:DeleteConstraint']
        for p in ['servicecatalog:DeleteConstraint']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DeleteConstraint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_portfolio(self, *args, **kwargs):
        __protego_used['servicecatalog']['delete_portfolio']=['servicecatalog:DeletePortfolio']
        for p in ['servicecatalog:DeletePortfolio']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DeletePortfolio", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_portfolio_share(self, *args, **kwargs):
        __protego_used['servicecatalog']['delete_portfolio_share']=['servicecatalog:DeletePortfolioShare']
        for p in ['servicecatalog:DeletePortfolioShare']:
            res = {}
            for nm in ["PortfolioId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DeletePortfolioShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_product(self, *args, **kwargs):
        __protego_used['servicecatalog']['delete_product']=['servicecatalog:DeleteProduct']
        for p in ['servicecatalog:DeleteProduct']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DeleteProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_provisioned_product_plan(self, *args, **kwargs):
        __protego_used['servicecatalog']['delete_provisioned_product_plan']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["PlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DeleteProvisionedProductPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_provisioning_artifact(self, *args, **kwargs):
        __protego_used['servicecatalog']['delete_provisioning_artifact']=['servicecatalog:DeleteProvisioningArtifact']
        for p in ['servicecatalog:DeleteProvisioningArtifact']:
            res = {}
            for nm in ["ProvisioningArtifactId","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DeleteProvisioningArtifact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_service_action(self, *args, **kwargs):
        __protego_used['servicecatalog']['delete_service_action']=['servicecatalog:DeleteServiceAction']
        for p in ['servicecatalog:DeleteServiceAction']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DeleteServiceAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tag_option(self, *args, **kwargs):
        __protego_used['servicecatalog']['delete_tag_option']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DeleteTagOption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_constraint(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_constraint']=['servicecatalog:DescribeConstraint']
        for p in ['servicecatalog:DescribeConstraint']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeConstraint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_copy_product_status(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_copy_product_status']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["CopyProductToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeCopyProductStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_portfolio(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_portfolio']=['servicecatalog:DescribePortfolio']
        for p in ['servicecatalog:DescribePortfolio']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribePortfolio", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_portfolio_share_status(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_portfolio_share_status']=['servicecatalog:DescribePortfolioShareStatus']
        for p in ['servicecatalog:DescribePortfolioShareStatus']:
            res = {}
            for nm in ["PortfolioShareToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribePortfolioShareStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_product(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_product']=['servicecatalog:DescribeProduct']
        for p in ['servicecatalog:DescribeProduct']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_product_as_admin(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_product_as_admin']=['servicecatalog:DescribeProductAsAdmin']
        for p in ['servicecatalog:DescribeProductAsAdmin']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeProductAsAdmin", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_product_view(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_product_view']=['servicecatalog:DescribeProductView']
        for p in ['servicecatalog:DescribeProductView']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeProductView", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_provisioned_product(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_provisioned_product']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeProvisionedProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_provisioned_product_plan(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_provisioned_product_plan']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["PlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeProvisionedProductPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_provisioning_artifact(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_provisioning_artifact']=['servicecatalog:DescribeProvisioningArtifact']
        for p in ['servicecatalog:DescribeProvisioningArtifact']:
            res = {}
            for nm in ["ProvisioningArtifactId","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeProvisioningArtifact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_provisioning_parameters(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_provisioning_parameters']=['servicecatalog:DescribeProvisioningParameters']
        for p in ['servicecatalog:DescribeProvisioningParameters']:
            res = {}
            for nm in ["ProvisioningArtifactId","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeProvisioningParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_record(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_record']=['servicecatalog:DescribeRecord']
        for p in ['servicecatalog:DescribeRecord']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeRecord", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_service_action(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_service_action']=['servicecatalog:DescribeServiceAction']
        for p in ['servicecatalog:DescribeServiceAction']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeServiceAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_service_action_execution_parameters(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_service_action_execution_parameters']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["ServiceActionId","ProvisionedProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeServiceActionExecutionParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tag_option(self, *args, **kwargs):
        __protego_used['servicecatalog']['describe_tag_option']=['servicecatalog:DescribeTagOption']
        for p in ['servicecatalog:DescribeTagOption']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DescribeTagOption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_aws_organizations_access(self, *args, **kwargs):
        __protego_used['servicecatalog']['disable_aws_organizations_access']=['servicecatalog:DisableAWSOrganizationsAccess']
        for p in ['servicecatalog:DisableAWSOrganizationsAccess']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DisableAWSOrganizationsAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_budget_from_resource(self, *args, **kwargs):
        __protego_used['servicecatalog']['disassociate_budget_from_resource']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["ResourceId","BudgetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DisassociateBudgetFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_principal_from_portfolio(self, *args, **kwargs):
        __protego_used['servicecatalog']['disassociate_principal_from_portfolio']=['servicecatalog:DisassociatePrincipalFromPortfolio']
        for p in ['servicecatalog:DisassociatePrincipalFromPortfolio']:
            res = {}
            for nm in ["PortfolioId","PrincipalARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DisassociatePrincipalFromPortfolio", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_product_from_portfolio(self, *args, **kwargs):
        __protego_used['servicecatalog']['disassociate_product_from_portfolio']=['servicecatalog:DisassociateProductFromPortfolio']
        for p in ['servicecatalog:DisassociateProductFromPortfolio']:
            res = {}
            for nm in ["PortfolioId","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DisassociateProductFromPortfolio", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_service_action_from_provisioning_artifact(self, *args, **kwargs):
        __protego_used['servicecatalog']['disassociate_service_action_from_provisioning_artifact']=['servicecatalog:DisassociateServiceActionFromProvisioningArtifact']
        for p in ['servicecatalog:DisassociateServiceActionFromProvisioningArtifact']:
            res = {}
            for nm in ["ServiceActionId","ProvisioningArtifactId","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DisassociateServiceActionFromProvisioningArtifact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_tag_option_from_resource(self, *args, **kwargs):
        __protego_used['servicecatalog']['disassociate_tag_option_from_resource']=['servicecatalog:DisassociateTagOptionFromResource']
        for p in ['servicecatalog:DisassociateTagOptionFromResource']:
            res = {}
            for nm in ["ResourceId","TagOptionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "DisassociateTagOptionFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def enable_aws_organizations_access(self, *args, **kwargs):
        __protego_used['servicecatalog']['enable_aws_organizations_access']=['servicecatalog:EnableAWSOrganizationsAccess']
        for p in ['servicecatalog:EnableAWSOrganizationsAccess']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "EnableAWSOrganizationsAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def execute_provisioned_product_plan(self, *args, **kwargs):
        __protego_used['servicecatalog']['execute_provisioned_product_plan']=['servicecatalog:ExecuteProvisionedProductPlan']
        for p in ['servicecatalog:ExecuteProvisionedProductPlan']:
            res = {}
            for nm in ["IdempotencyToken","PlanId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ExecuteProvisionedProductPlan", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def execute_provisioned_product_service_action(self, *args, **kwargs):
        __protego_used['servicecatalog']['execute_provisioned_product_service_action']=['servicecatalog:ExecuteProvisionedProductServiceAction']
        for p in ['servicecatalog:ExecuteProvisionedProductServiceAction']:
            res = {}
            for nm in ["ServiceActionId","ProvisionedProductId","ExecuteToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ExecuteProvisionedProductServiceAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_aws_organizations_access_status(self, *args, **kwargs):
        __protego_used['servicecatalog']['get_aws_organizations_access_status']=['servicecatalog:GetAWSOrganizationsAccessStatus']
        for p in ['servicecatalog:GetAWSOrganizationsAccessStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "GetAWSOrganizationsAccessStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_accepted_portfolio_shares(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_accepted_portfolio_shares']=['servicecatalog:ListAcceptedPortfolioShares']
        for p in ['servicecatalog:ListAcceptedPortfolioShares']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListAcceptedPortfolioShares", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_budgets_for_resource(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_budgets_for_resource']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListBudgetsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_constraints_for_portfolio(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_constraints_for_portfolio']=['servicecatalog:ListConstraintsForPortfolio']
        for p in ['servicecatalog:ListConstraintsForPortfolio']:
            res = {}
            for nm in ["PortfolioId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListConstraintsForPortfolio", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_launch_paths(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_launch_paths']=['servicecatalog:ListLaunchPaths']
        for p in ['servicecatalog:ListLaunchPaths']:
            res = {}
            for nm in ["ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListLaunchPaths", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_organization_portfolio_access(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_organization_portfolio_access']=['servicecatalog:ListOrganizationPortfolioAccess']
        for p in ['servicecatalog:ListOrganizationPortfolioAccess']:
            res = {}
            for nm in ["OrganizationNodeType","PortfolioId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListOrganizationPortfolioAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_portfolio_access(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_portfolio_access']=['servicecatalog:ListPortfolioAccess']
        for p in ['servicecatalog:ListPortfolioAccess']:
            res = {}
            for nm in ["PortfolioId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListPortfolioAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_portfolios(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_portfolios']=['servicecatalog:ListPortfolios']
        for p in ['servicecatalog:ListPortfolios']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListPortfolios", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_portfolios_for_product(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_portfolios_for_product']=['servicecatalog:ListPortfoliosForProduct']
        for p in ['servicecatalog:ListPortfoliosForProduct']:
            res = {}
            for nm in ["ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListPortfoliosForProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_principals_for_portfolio(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_principals_for_portfolio']=['servicecatalog:ListPrincipalsForPortfolio']
        for p in ['servicecatalog:ListPrincipalsForPortfolio']:
            res = {}
            for nm in ["PortfolioId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListPrincipalsForPortfolio", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_provisioned_product_plans(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_provisioned_product_plans']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListProvisionedProductPlans", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_provisioning_artifacts(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_provisioning_artifacts']=['servicecatalog:ListProvisioningArtifacts']
        for p in ['servicecatalog:ListProvisioningArtifacts']:
            res = {}
            for nm in ["ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListProvisioningArtifacts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_provisioning_artifacts_for_service_action(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_provisioning_artifacts_for_service_action']=['servicecatalog:ListProvisioningArtifactsForServiceAction']
        for p in ['servicecatalog:ListProvisioningArtifactsForServiceAction']:
            res = {}
            for nm in ["ServiceActionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListProvisioningArtifactsForServiceAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_record_history(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_record_history']=['servicecatalog:ListRecordHistory']
        for p in ['servicecatalog:ListRecordHistory']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListRecordHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resources_for_tag_option(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_resources_for_tag_option']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["TagOptionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListResourcesForTagOption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_service_actions(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_service_actions']=['servicecatalog:ListServiceActions']
        for p in ['servicecatalog:ListServiceActions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListServiceActions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_service_actions_for_provisioning_artifact(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_service_actions_for_provisioning_artifact']=['servicecatalog:ListServiceActionsForProvisioningArtifact']
        for p in ['servicecatalog:ListServiceActionsForProvisioningArtifact']:
            res = {}
            for nm in ["ProvisioningArtifactId","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListServiceActionsForProvisioningArtifact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_stack_instances_for_provisioned_product(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_stack_instances_for_provisioned_product']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["ProvisionedProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListStackInstancesForProvisionedProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tag_options(self, *args, **kwargs):
        __protego_used['servicecatalog']['list_tag_options']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ListTagOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def provision_product(self, *args, **kwargs):
        __protego_used['servicecatalog']['provision_product']=['servicecatalog:ProvisionProduct']
        for p in ['servicecatalog:ProvisionProduct']:
            res = {}
            for nm in ["ProvisionToken","ProvisioningArtifactId","ProductId","ProvisionedProductName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ProvisionProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reject_portfolio_share(self, *args, **kwargs):
        __protego_used['servicecatalog']['reject_portfolio_share']=['servicecatalog:RejectPortfolioShare']
        for p in ['servicecatalog:RejectPortfolioShare']:
            res = {}
            for nm in ["PortfolioId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "RejectPortfolioShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def scan_provisioned_products(self, *args, **kwargs):
        __protego_used['servicecatalog']['scan_provisioned_products']=['servicecatalog:ScanProvisionedProducts']
        for p in ['servicecatalog:ScanProvisionedProducts']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "ScanProvisionedProducts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_products(self, *args, **kwargs):
        __protego_used['servicecatalog']['search_products']=['servicecatalog:SearchProducts']
        for p in ['servicecatalog:SearchProducts']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "SearchProducts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_products_as_admin(self, *args, **kwargs):
        __protego_used['servicecatalog']['search_products_as_admin']=['servicecatalog:SearchProductsAsAdmin']
        for p in ['servicecatalog:SearchProductsAsAdmin']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "SearchProductsAsAdmin", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def search_provisioned_products(self, *args, **kwargs):
        __protego_used['servicecatalog']['search_provisioned_products']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "SearchProvisionedProducts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def terminate_provisioned_product(self, *args, **kwargs):
        __protego_used['servicecatalog']['terminate_provisioned_product']=['servicecatalog:TerminateProvisionedProduct']
        for p in ['servicecatalog:TerminateProvisionedProduct']:
            res = {}
            for nm in ["TerminateToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "TerminateProvisionedProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_constraint(self, *args, **kwargs):
        __protego_used['servicecatalog']['update_constraint']=['servicecatalog:UpdateConstraint']
        for p in ['servicecatalog:UpdateConstraint']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "UpdateConstraint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_portfolio(self, *args, **kwargs):
        __protego_used['servicecatalog']['update_portfolio']=['servicecatalog:UpdatePortfolio']
        for p in ['servicecatalog:UpdatePortfolio']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "UpdatePortfolio", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_product(self, *args, **kwargs):
        __protego_used['servicecatalog']['update_product']=['servicecatalog:UpdateProduct']
        for p in ['servicecatalog:UpdateProduct']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "UpdateProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_provisioned_product(self, *args, **kwargs):
        __protego_used['servicecatalog']['update_provisioned_product']=['servicecatalog:UpdateProvisionedProduct']
        for p in ['servicecatalog:UpdateProvisionedProduct']:
            res = {}
            for nm in ["UpdateToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "UpdateProvisionedProduct", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_provisioned_product_properties(self, *args, **kwargs):
        __protego_used['servicecatalog']['update_provisioned_product_properties']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["ProvisionedProductProperties","IdempotencyToken","ProvisionedProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "UpdateProvisionedProductProperties", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_provisioning_artifact(self, *args, **kwargs):
        __protego_used['servicecatalog']['update_provisioning_artifact']=['servicecatalog:UpdateProvisioningArtifact']
        for p in ['servicecatalog:UpdateProvisioningArtifact']:
            res = {}
            for nm in ["ProvisioningArtifactId","ProductId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "UpdateProvisioningArtifact", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_service_action(self, *args, **kwargs):
        __protego_used['servicecatalog']['update_service_action']=['servicecatalog:UpdateServiceAction']
        for p in ['servicecatalog:UpdateServiceAction']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "UpdateServiceAction", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_tag_option(self, *args, **kwargs):
        __protego_used['servicecatalog']['update_tag_option']=['servicecatalog:*']
        for p in ['servicecatalog:*']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicecatalog'].append({'action': "UpdateTagOption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class servicediscovery:
    def __init__(self, region_name=__default_region):
        __protego_used['servicediscovery']= __protego_used.get('servicediscovery', {})
        __protego_resource_map['servicediscovery']=__protego_resource_map.get('servicediscovery', [])
        self.region = region_name
    def create_http_namespace(self, *args, **kwargs):
        __protego_used['servicediscovery']['create_http_namespace']=['servicediscovery:CreateHttpNamespace']
        for p in ['servicediscovery:CreateHttpNamespace']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "CreateHttpNamespace", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_private_dns_namespace(self, *args, **kwargs):
        __protego_used['servicediscovery']['create_private_dns_namespace']=['servicediscovery:CreatePrivateDnsNamespace']
        for p in ['servicediscovery:CreatePrivateDnsNamespace']:
            res = {}
            for nm in ["Vpc","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "CreatePrivateDnsNamespace", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_public_dns_namespace(self, *args, **kwargs):
        __protego_used['servicediscovery']['create_public_dns_namespace']=['servicediscovery:CreatePublicDnsNamespace']
        for p in ['servicediscovery:CreatePublicDnsNamespace']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "CreatePublicDnsNamespace", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_service(self, *args, **kwargs):
        __protego_used['servicediscovery']['create_service']=['servicediscovery:CreateService']
        for p in ['servicediscovery:CreateService']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "CreateService", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_namespace(self, *args, **kwargs):
        __protego_used['servicediscovery']['delete_namespace']=['servicediscovery:DeleteNamespace','servicediscovery:DeleteNamespace']
        for p in ['servicediscovery:DeleteNamespace','servicediscovery:DeleteNamespace']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "DeleteNamespace", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_service(self, *args, **kwargs):
        __protego_used['servicediscovery']['delete_service']=['servicediscovery:DeleteService']
        for p in ['servicediscovery:DeleteService']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "DeleteService", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_instance(self, *args, **kwargs):
        __protego_used['servicediscovery']['deregister_instance']=['servicediscovery:DeregisterInstance']
        for p in ['servicediscovery:DeregisterInstance']:
            res = {}
            for nm in ["ServiceId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "DeregisterInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def discover_instances(self, *args, **kwargs):
        __protego_used['servicediscovery']['discover_instances']=['servicediscovery:DiscoverInstances']
        for p in ['servicediscovery:DiscoverInstances']:
            res = {}
            for nm in ["NamespaceName","ServiceName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "DiscoverInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instance(self, *args, **kwargs):
        __protego_used['servicediscovery']['get_instance']=['servicediscovery:GetInstance']
        for p in ['servicediscovery:GetInstance']:
            res = {}
            for nm in ["ServiceId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "GetInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_instances_health_status(self, *args, **kwargs):
        __protego_used['servicediscovery']['get_instances_health_status']=['servicediscovery:GetInstancesHealthStatus']
        for p in ['servicediscovery:GetInstancesHealthStatus']:
            res = {}
            for nm in ["ServiceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "GetInstancesHealthStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_namespace(self, *args, **kwargs):
        __protego_used['servicediscovery']['get_namespace']=['servicediscovery:GetNamespace']
        for p in ['servicediscovery:GetNamespace']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "GetNamespace", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_operation(self, *args, **kwargs):
        __protego_used['servicediscovery']['get_operation']=['servicediscovery:GetOperation']
        for p in ['servicediscovery:GetOperation']:
            res = {}
            for nm in ["OperationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "GetOperation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_service(self, *args, **kwargs):
        __protego_used['servicediscovery']['get_service']=['servicediscovery:GetService']
        for p in ['servicediscovery:GetService']:
            res = {}
            for nm in ["Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "GetService", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_instances(self, *args, **kwargs):
        __protego_used['servicediscovery']['list_instances']=['servicediscovery:ListInstances']
        for p in ['servicediscovery:ListInstances']:
            res = {}
            for nm in ["ServiceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "ListInstances", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_namespaces(self, *args, **kwargs):
        __protego_used['servicediscovery']['list_namespaces']=['servicediscovery:ListNamespaces']
        for p in ['servicediscovery:ListNamespaces']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "ListNamespaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_operations(self, *args, **kwargs):
        __protego_used['servicediscovery']['list_operations']=['servicediscovery:ListOperations']
        for p in ['servicediscovery:ListOperations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "ListOperations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_services(self, *args, **kwargs):
        __protego_used['servicediscovery']['list_services']=['servicediscovery:ListServices']
        for p in ['servicediscovery:ListServices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "ListServices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_instance(self, *args, **kwargs):
        __protego_used['servicediscovery']['register_instance']=['servicediscovery:RegisterInstance']
        for p in ['servicediscovery:RegisterInstance']:
            res = {}
            for nm in ["Attributes","ServiceId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "RegisterInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_instance_custom_health_status(self, *args, **kwargs):
        __protego_used['servicediscovery']['update_instance_custom_health_status']=['servicediscovery:*']
        for p in ['servicediscovery:*']:
            res = {}
            for nm in ["Status","ServiceId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "UpdateInstanceCustomHealthStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_service(self, *args, **kwargs):
        __protego_used['servicediscovery']['update_service']=['servicediscovery:UpdateService']
        for p in ['servicediscovery:UpdateService']:
            res = {}
            for nm in ["Service","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['servicediscovery'].append({'action': "UpdateService", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class ses:
    def __init__(self, region_name=__default_region):
        __protego_used['ses']= __protego_used.get('ses', {})
        __protego_resource_map['ses']=__protego_resource_map.get('ses', [])
        self.region = region_name
    def clone_receipt_rule_set(self, *args, **kwargs):
        __protego_used['ses']['clone_receipt_rule_set']=['ses:CloneReceiptRuleSet']
        for p in ['ses:CloneReceiptRuleSet']:
            res = {}
            for nm in ["RuleSetName","OriginalRuleSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "CloneReceiptRuleSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_configuration_set(self, *args, **kwargs):
        __protego_used['ses']['create_configuration_set']=['ses:CreateConfigurationSet']
        for p in ['ses:CreateConfigurationSet']:
            res = {}
            for nm in ["ConfigurationSet"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "CreateConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['ses']['create_configuration_set_event_destination']=['ses:CreateConfigurationSetEventDestination']
        for p in ['ses:CreateConfigurationSetEventDestination']:
            res = {}
            for nm in ["EventDestination","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "CreateConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_configuration_set_tracking_options(self, *args, **kwargs):
        __protego_used['ses']['create_configuration_set_tracking_options']=['ses:CreateConfigurationSetTrackingOptions']
        for p in ['ses:CreateConfigurationSetTrackingOptions']:
            res = {}
            for nm in ["ConfigurationSetName","TrackingOptions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "CreateConfigurationSetTrackingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_custom_verification_email_template(self, *args, **kwargs):
        __protego_used['ses']['create_custom_verification_email_template']=['ses:CreateCustomVerificationEmailTemplate']
        for p in ['ses:CreateCustomVerificationEmailTemplate']:
            res = {}
            for nm in ["TemplateSubject","TemplateName","FailureRedirectionURL","FromEmailAddress","SuccessRedirectionURL","TemplateContent"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "CreateCustomVerificationEmailTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_receipt_filter(self, *args, **kwargs):
        __protego_used['ses']['create_receipt_filter']=['ses:CreateReceiptFilter']
        for p in ['ses:CreateReceiptFilter']:
            res = {}
            for nm in ["Filter"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "CreateReceiptFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_receipt_rule(self, *args, **kwargs):
        __protego_used['ses']['create_receipt_rule']=['ses:CreateReceiptRule']
        for p in ['ses:CreateReceiptRule']:
            res = {}
            for nm in ["RuleSetName","Rule"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "CreateReceiptRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_receipt_rule_set(self, *args, **kwargs):
        __protego_used['ses']['create_receipt_rule_set']=['ses:CreateReceiptRuleSet']
        for p in ['ses:CreateReceiptRuleSet']:
            res = {}
            for nm in ["RuleSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "CreateReceiptRuleSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_template(self, *args, **kwargs):
        __protego_used['ses']['create_template']=['ses:CreateTemplate']
        for p in ['ses:CreateTemplate']:
            res = {}
            for nm in ["Template"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "CreateTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_set(self, *args, **kwargs):
        __protego_used['ses']['delete_configuration_set']=['ses:DeleteConfigurationSet']
        for p in ['ses:DeleteConfigurationSet']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DeleteConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['ses']['delete_configuration_set_event_destination']=['ses:DeleteConfigurationSetEventDestination']
        for p in ['ses:DeleteConfigurationSetEventDestination']:
            res = {}
            for nm in ["EventDestinationName","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DeleteConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_set_tracking_options(self, *args, **kwargs):
        __protego_used['ses']['delete_configuration_set_tracking_options']=['ses:DeleteConfigurationSetTrackingOptions']
        for p in ['ses:DeleteConfigurationSetTrackingOptions']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DeleteConfigurationSetTrackingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_custom_verification_email_template(self, *args, **kwargs):
        __protego_used['ses']['delete_custom_verification_email_template']=['ses:DeleteCustomVerificationEmailTemplate']
        for p in ['ses:DeleteCustomVerificationEmailTemplate']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DeleteCustomVerificationEmailTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_identity(self, *args, **kwargs):
        __protego_used['ses']['delete_identity']=['ses:DeleteIdentity']
        for p in ['ses:DeleteIdentity']:
            res = {}
            for nm in ["Identity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DeleteIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_identity_policy(self, *args, **kwargs):
        __protego_used['ses']['delete_identity_policy']=['ses:DeleteIdentityPolicy']
        for p in ['ses:DeleteIdentityPolicy']:
            res = {}
            for nm in ["Identity","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DeleteIdentityPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_receipt_filter(self, *args, **kwargs):
        __protego_used['ses']['delete_receipt_filter']=['ses:DeleteReceiptFilter']
        for p in ['ses:DeleteReceiptFilter']:
            res = {}
            for nm in ["FilterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DeleteReceiptFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_receipt_rule(self, *args, **kwargs):
        __protego_used['ses']['delete_receipt_rule']=['ses:DeleteReceiptRule']
        for p in ['ses:DeleteReceiptRule']:
            res = {}
            for nm in ["RuleName","RuleSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DeleteReceiptRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_receipt_rule_set(self, *args, **kwargs):
        __protego_used['ses']['delete_receipt_rule_set']=['ses:DeleteReceiptRuleSet']
        for p in ['ses:DeleteReceiptRuleSet']:
            res = {}
            for nm in ["RuleSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DeleteReceiptRuleSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_template(self, *args, **kwargs):
        __protego_used['ses']['delete_template']=['ses:DeleteTemplate']
        for p in ['ses:DeleteTemplate']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DeleteTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_verified_email_address(self, *args, **kwargs):
        __protego_used['ses']['delete_verified_email_address']=['ses:DeleteVerifiedEmailAddress']
        for p in ['ses:DeleteVerifiedEmailAddress']:
            res = {}
            for nm in ["EmailAddress"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DeleteVerifiedEmailAddress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_active_receipt_rule_set(self, *args, **kwargs):
        __protego_used['ses']['describe_active_receipt_rule_set']=['ses:DescribeActiveReceiptRuleSet']
        for p in ['ses:DescribeActiveReceiptRuleSet']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DescribeActiveReceiptRuleSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_configuration_set(self, *args, **kwargs):
        __protego_used['ses']['describe_configuration_set']=['ses:DescribeConfigurationSet']
        for p in ['ses:DescribeConfigurationSet']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DescribeConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_receipt_rule(self, *args, **kwargs):
        __protego_used['ses']['describe_receipt_rule']=['ses:DescribeReceiptRule']
        for p in ['ses:DescribeReceiptRule']:
            res = {}
            for nm in ["RuleName","RuleSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DescribeReceiptRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_receipt_rule_set(self, *args, **kwargs):
        __protego_used['ses']['describe_receipt_rule_set']=['ses:DescribeReceiptRuleSet']
        for p in ['ses:DescribeReceiptRuleSet']:
            res = {}
            for nm in ["RuleSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "DescribeReceiptRuleSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account_sending_enabled(self, *args, **kwargs):
        __protego_used['ses']['get_account_sending_enabled']=['ses:GetAccountSendingEnabled']
        for p in ['ses:GetAccountSendingEnabled']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "GetAccountSendingEnabled", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_custom_verification_email_template(self, *args, **kwargs):
        __protego_used['ses']['get_custom_verification_email_template']=['ses:GetCustomVerificationEmailTemplate']
        for p in ['ses:GetCustomVerificationEmailTemplate']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "GetCustomVerificationEmailTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_identity_dkim_attributes(self, *args, **kwargs):
        __protego_used['ses']['get_identity_dkim_attributes']=['ses:GetIdentityDkimAttributes']
        for p in ['ses:GetIdentityDkimAttributes']:
            res = {}
            for nm in ["Identities"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "GetIdentityDkimAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_identity_mail_from_domain_attributes(self, *args, **kwargs):
        __protego_used['ses']['get_identity_mail_from_domain_attributes']=['ses:GetIdentityMailFromDomainAttributes']
        for p in ['ses:GetIdentityMailFromDomainAttributes']:
            res = {}
            for nm in ["Identities"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "GetIdentityMailFromDomainAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_identity_notification_attributes(self, *args, **kwargs):
        __protego_used['ses']['get_identity_notification_attributes']=['ses:GetIdentityNotificationAttributes']
        for p in ['ses:GetIdentityNotificationAttributes']:
            res = {}
            for nm in ["Identities"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "GetIdentityNotificationAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_identity_policies(self, *args, **kwargs):
        __protego_used['ses']['get_identity_policies']=['ses:GetIdentityPolicies']
        for p in ['ses:GetIdentityPolicies']:
            res = {}
            for nm in ["PolicyNames","Identity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "GetIdentityPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_identity_verification_attributes(self, *args, **kwargs):
        __protego_used['ses']['get_identity_verification_attributes']=['ses:GetIdentityVerificationAttributes']
        for p in ['ses:GetIdentityVerificationAttributes']:
            res = {}
            for nm in ["Identities"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "GetIdentityVerificationAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_send_quota(self, *args, **kwargs):
        __protego_used['ses']['get_send_quota']=['ses:GetSendQuota']
        for p in ['ses:GetSendQuota']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "GetSendQuota", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_send_statistics(self, *args, **kwargs):
        __protego_used['ses']['get_send_statistics']=['ses:GetSendStatistics']
        for p in ['ses:GetSendStatistics']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "GetSendStatistics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_template(self, *args, **kwargs):
        __protego_used['ses']['get_template']=['ses:GetTemplate']
        for p in ['ses:GetTemplate']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "GetTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_configuration_sets(self, *args, **kwargs):
        __protego_used['ses']['list_configuration_sets']=['ses:ListConfigurationSets']
        for p in ['ses:ListConfigurationSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "ListConfigurationSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_custom_verification_email_templates(self, *args, **kwargs):
        __protego_used['ses']['list_custom_verification_email_templates']=['ses:ListCustomVerificationEmailTemplates']
        for p in ['ses:ListCustomVerificationEmailTemplates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "ListCustomVerificationEmailTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_identities(self, *args, **kwargs):
        __protego_used['ses']['list_identities']=['ses:ListIdentities']
        for p in ['ses:ListIdentities']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "ListIdentities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_identity_policies(self, *args, **kwargs):
        __protego_used['ses']['list_identity_policies']=['ses:ListIdentityPolicies']
        for p in ['ses:ListIdentityPolicies']:
            res = {}
            for nm in ["Identity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "ListIdentityPolicies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_receipt_filters(self, *args, **kwargs):
        __protego_used['ses']['list_receipt_filters']=['ses:ListReceiptFilters']
        for p in ['ses:ListReceiptFilters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "ListReceiptFilters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_receipt_rule_sets(self, *args, **kwargs):
        __protego_used['ses']['list_receipt_rule_sets']=['ses:ListReceiptRuleSets']
        for p in ['ses:ListReceiptRuleSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "ListReceiptRuleSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_templates(self, *args, **kwargs):
        __protego_used['ses']['list_templates']=['ses:ListTemplates']
        for p in ['ses:ListTemplates']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "ListTemplates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_verified_email_addresses(self, *args, **kwargs):
        __protego_used['ses']['list_verified_email_addresses']=['ses:ListVerifiedEmailAddresses']
        for p in ['ses:ListVerifiedEmailAddresses']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "ListVerifiedEmailAddresses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_set_delivery_options(self, *args, **kwargs):
        __protego_used['ses']['put_configuration_set_delivery_options']=['ses:*']
        for p in ['ses:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "PutConfigurationSetDeliveryOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_identity_policy(self, *args, **kwargs):
        __protego_used['ses']['put_identity_policy']=['ses:PutIdentityPolicy']
        for p in ['ses:PutIdentityPolicy']:
            res = {}
            for nm in ["Identity","Policy","PolicyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "PutIdentityPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reorder_receipt_rule_set(self, *args, **kwargs):
        __protego_used['ses']['reorder_receipt_rule_set']=['ses:ReorderReceiptRuleSet']
        for p in ['ses:ReorderReceiptRuleSet']:
            res = {}
            for nm in ["RuleNames","RuleSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "ReorderReceiptRuleSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_bounce(self, *args, **kwargs):
        __protego_used['ses']['send_bounce']=['ses:SendBounce']
        for p in ['ses:SendBounce']:
            res = {}
            for nm in ["OriginalMessageId","BounceSender","BouncedRecipientInfoList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SendBounce", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_bulk_templated_email(self, *args, **kwargs):
        __protego_used['ses']['send_bulk_templated_email']=['ses:SendBulkTemplatedEmail']
        for p in ['ses:SendBulkTemplatedEmail']:
            res = {}
            for nm in ["Source","Template","Destinations"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SendBulkTemplatedEmail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_custom_verification_email(self, *args, **kwargs):
        __protego_used['ses']['send_custom_verification_email']=['ses:SendCustomVerificationEmail']
        for p in ['ses:SendCustomVerificationEmail']:
            res = {}
            for nm in ["EmailAddress","TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SendCustomVerificationEmail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_email(self, *args, **kwargs):
        __protego_used['ses']['send_email']=['ses:SendEmail']
        for p in ['ses:SendEmail']:
            res = {}
            for nm in ["Source","Message","Destination"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SendEmail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_raw_email(self, *args, **kwargs):
        __protego_used['ses']['send_raw_email']=['ses:SendRawEmail']
        for p in ['ses:SendRawEmail']:
            res = {}
            for nm in ["RawMessage"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SendRawEmail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_templated_email(self, *args, **kwargs):
        __protego_used['ses']['send_templated_email']=['ses:SendTemplatedEmail']
        for p in ['ses:SendTemplatedEmail']:
            res = {}
            for nm in ["Source","Destination","Template","TemplateData"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SendTemplatedEmail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_active_receipt_rule_set(self, *args, **kwargs):
        __protego_used['ses']['set_active_receipt_rule_set']=['ses:SetActiveReceiptRuleSet']
        for p in ['ses:SetActiveReceiptRuleSet']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SetActiveReceiptRuleSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_identity_dkim_enabled(self, *args, **kwargs):
        __protego_used['ses']['set_identity_dkim_enabled']=['ses:SetIdentityDkimEnabled']
        for p in ['ses:SetIdentityDkimEnabled']:
            res = {}
            for nm in ["Identity","DkimEnabled"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SetIdentityDkimEnabled", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_identity_feedback_forwarding_enabled(self, *args, **kwargs):
        __protego_used['ses']['set_identity_feedback_forwarding_enabled']=['ses:SetIdentityFeedbackForwardingEnabled']
        for p in ['ses:SetIdentityFeedbackForwardingEnabled']:
            res = {}
            for nm in ["Identity","ForwardingEnabled"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SetIdentityFeedbackForwardingEnabled", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_identity_headers_in_notifications_enabled(self, *args, **kwargs):
        __protego_used['ses']['set_identity_headers_in_notifications_enabled']=['ses:SetIdentityHeadersInNotificationsEnabled']
        for p in ['ses:SetIdentityHeadersInNotificationsEnabled']:
            res = {}
            for nm in ["Identity","Enabled","NotificationType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SetIdentityHeadersInNotificationsEnabled", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_identity_mail_from_domain(self, *args, **kwargs):
        __protego_used['ses']['set_identity_mail_from_domain']=['ses:SetIdentityMailFromDomain']
        for p in ['ses:SetIdentityMailFromDomain']:
            res = {}
            for nm in ["Identity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SetIdentityMailFromDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_identity_notification_topic(self, *args, **kwargs):
        __protego_used['ses']['set_identity_notification_topic']=['ses:SetIdentityNotificationTopic']
        for p in ['ses:SetIdentityNotificationTopic']:
            res = {}
            for nm in ["Identity","NotificationType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SetIdentityNotificationTopic", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_receipt_rule_position(self, *args, **kwargs):
        __protego_used['ses']['set_receipt_rule_position']=['ses:SetReceiptRulePosition']
        for p in ['ses:SetReceiptRulePosition']:
            res = {}
            for nm in ["RuleName","RuleSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "SetReceiptRulePosition", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_render_template(self, *args, **kwargs):
        __protego_used['ses']['test_render_template']=['ses:TestRenderTemplate']
        for p in ['ses:TestRenderTemplate']:
            res = {}
            for nm in ["TemplateName","TemplateData"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "TestRenderTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_account_sending_enabled(self, *args, **kwargs):
        __protego_used['ses']['update_account_sending_enabled']=['ses:UpdateAccountSendingEnabled']
        for p in ['ses:UpdateAccountSendingEnabled']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "UpdateAccountSendingEnabled", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['ses']['update_configuration_set_event_destination']=['ses:UpdateConfigurationSetEventDestination']
        for p in ['ses:UpdateConfigurationSetEventDestination']:
            res = {}
            for nm in ["EventDestination","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "UpdateConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_configuration_set_reputation_metrics_enabled(self, *args, **kwargs):
        __protego_used['ses']['update_configuration_set_reputation_metrics_enabled']=['ses:UpdateConfigurationSetReputationMetricsEnabled']
        for p in ['ses:UpdateConfigurationSetReputationMetricsEnabled']:
            res = {}
            for nm in ["Enabled","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "UpdateConfigurationSetReputationMetricsEnabled", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_configuration_set_sending_enabled(self, *args, **kwargs):
        __protego_used['ses']['update_configuration_set_sending_enabled']=['ses:UpdateConfigurationSetSendingEnabled']
        for p in ['ses:UpdateConfigurationSetSendingEnabled']:
            res = {}
            for nm in ["Enabled","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "UpdateConfigurationSetSendingEnabled", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_configuration_set_tracking_options(self, *args, **kwargs):
        __protego_used['ses']['update_configuration_set_tracking_options']=['ses:UpdateConfigurationSetTrackingOptions']
        for p in ['ses:UpdateConfigurationSetTrackingOptions']:
            res = {}
            for nm in ["ConfigurationSetName","TrackingOptions"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "UpdateConfigurationSetTrackingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_custom_verification_email_template(self, *args, **kwargs):
        __protego_used['ses']['update_custom_verification_email_template']=['ses:UpdateCustomVerificationEmailTemplate']
        for p in ['ses:UpdateCustomVerificationEmailTemplate']:
            res = {}
            for nm in ["TemplateName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "UpdateCustomVerificationEmailTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_receipt_rule(self, *args, **kwargs):
        __protego_used['ses']['update_receipt_rule']=['ses:UpdateReceiptRule']
        for p in ['ses:UpdateReceiptRule']:
            res = {}
            for nm in ["RuleSetName","Rule"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "UpdateReceiptRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_template(self, *args, **kwargs):
        __protego_used['ses']['update_template']=['ses:UpdateTemplate']
        for p in ['ses:UpdateTemplate']:
            res = {}
            for nm in ["Template"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "UpdateTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def verify_domain_dkim(self, *args, **kwargs):
        __protego_used['ses']['verify_domain_dkim']=['ses:VerifyDomainDkim']
        for p in ['ses:VerifyDomainDkim']:
            res = {}
            for nm in ["Domain"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "VerifyDomainDkim", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def verify_domain_identity(self, *args, **kwargs):
        __protego_used['ses']['verify_domain_identity']=['ses:VerifyDomainIdentity']
        for p in ['ses:VerifyDomainIdentity']:
            res = {}
            for nm in ["Domain"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "VerifyDomainIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def verify_email_address(self, *args, **kwargs):
        __protego_used['ses']['verify_email_address']=['ses:VerifyEmailAddress']
        for p in ['ses:VerifyEmailAddress']:
            res = {}
            for nm in ["EmailAddress"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "VerifyEmailAddress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def verify_email_identity(self, *args, **kwargs):
        __protego_used['ses']['verify_email_identity']=['ses:VerifyEmailIdentity']
        for p in ['ses:VerifyEmailIdentity']:
            res = {}
            for nm in ["EmailAddress"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ses'].append({'action': "VerifyEmailIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sesv2:
    def __init__(self, region_name=__default_region):
        __protego_used['sesv2']= __protego_used.get('sesv2', {})
        __protego_resource_map['sesv2']=__protego_resource_map.get('sesv2', [])
        self.region = region_name
    def create_configuration_set(self, *args, **kwargs):
        __protego_used['sesv2']['create_configuration_set']=['ses:CreateConfigurationSet']
        for p in ['ses:CreateConfigurationSet']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "CreateConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['sesv2']['create_configuration_set_event_destination']=['ses:CreateConfigurationSetEventDestination']
        for p in ['ses:CreateConfigurationSetEventDestination']:
            res = {}
            for nm in ["EventDestinationName","EventDestination","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "CreateConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_dedicated_ip_pool(self, *args, **kwargs):
        __protego_used['sesv2']['create_dedicated_ip_pool']=['ses:CreateDedicatedIpPool']
        for p in ['ses:CreateDedicatedIpPool']:
            res = {}
            for nm in ["PoolName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "CreateDedicatedIpPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_deliverability_test_report(self, *args, **kwargs):
        __protego_used['sesv2']['create_deliverability_test_report']=['ses:CreateDeliverabilityTestReport']
        for p in ['ses:CreateDeliverabilityTestReport']:
            res = {}
            for nm in ["Content","FromEmailAddress"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "CreateDeliverabilityTestReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_email_identity(self, *args, **kwargs):
        __protego_used['sesv2']['create_email_identity']=['ses:CreateEmailIdentity']
        for p in ['ses:CreateEmailIdentity']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "CreateEmailIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_set(self, *args, **kwargs):
        __protego_used['sesv2']['delete_configuration_set']=['ses:DeleteConfigurationSet']
        for p in ['ses:DeleteConfigurationSet']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "DeleteConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['sesv2']['delete_configuration_set_event_destination']=['ses:DeleteConfigurationSetEventDestination']
        for p in ['ses:DeleteConfigurationSetEventDestination']:
            res = {}
            for nm in ["EventDestinationName","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "DeleteConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_dedicated_ip_pool(self, *args, **kwargs):
        __protego_used['sesv2']['delete_dedicated_ip_pool']=['ses:DeleteDedicatedIpPool']
        for p in ['ses:DeleteDedicatedIpPool']:
            res = {}
            for nm in ["PoolName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "DeleteDedicatedIpPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_email_identity(self, *args, **kwargs):
        __protego_used['sesv2']['delete_email_identity']=['ses:DeleteEmailIdentity']
        for p in ['ses:DeleteEmailIdentity']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "DeleteEmailIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_suppressed_destination(self, *args, **kwargs):
        __protego_used['sesv2']['delete_suppressed_destination']=['ses:DeleteSuppressedDestination']
        for p in ['ses:DeleteSuppressedDestination']:
            res = {}
            for nm in ["EmailAddress"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "DeleteSuppressedDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_account(self, *args, **kwargs):
        __protego_used['sesv2']['get_account']=['ses:GetAccount']
        for p in ['ses:GetAccount']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_blacklist_reports(self, *args, **kwargs):
        __protego_used['sesv2']['get_blacklist_reports']=['ses:GetBlacklistReports']
        for p in ['ses:GetBlacklistReports']:
            res = {}
            for nm in ["BlacklistItemNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetBlacklistReports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_configuration_set(self, *args, **kwargs):
        __protego_used['sesv2']['get_configuration_set']=['ses:GetConfigurationSet']
        for p in ['ses:GetConfigurationSet']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_configuration_set_event_destinations(self, *args, **kwargs):
        __protego_used['sesv2']['get_configuration_set_event_destinations']=['ses:GetConfigurationSetEventDestinations']
        for p in ['ses:GetConfigurationSetEventDestinations']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetConfigurationSetEventDestinations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dedicated_ip(self, *args, **kwargs):
        __protego_used['sesv2']['get_dedicated_ip']=['ses:GetDedicatedIp']
        for p in ['ses:GetDedicatedIp']:
            res = {}
            for nm in ["Ip"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetDedicatedIp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_dedicated_ips(self, *args, **kwargs):
        __protego_used['sesv2']['get_dedicated_ips']=['ses:GetDedicatedIps']
        for p in ['ses:GetDedicatedIps']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetDedicatedIps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deliverability_dashboard_options(self, *args, **kwargs):
        __protego_used['sesv2']['get_deliverability_dashboard_options']=['ses:GetDeliverabilityDashboardOptions']
        for p in ['ses:GetDeliverabilityDashboardOptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetDeliverabilityDashboardOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deliverability_test_report(self, *args, **kwargs):
        __protego_used['sesv2']['get_deliverability_test_report']=['ses:GetDeliverabilityTestReport']
        for p in ['ses:GetDeliverabilityTestReport']:
            res = {}
            for nm in ["ReportId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetDeliverabilityTestReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain_deliverability_campaign(self, *args, **kwargs):
        __protego_used['sesv2']['get_domain_deliverability_campaign']=['ses:GetDomainDeliverabilityCampaign']
        for p in ['ses:GetDomainDeliverabilityCampaign']:
            res = {}
            for nm in ["CampaignId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetDomainDeliverabilityCampaign", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_domain_statistics_report(self, *args, **kwargs):
        __protego_used['sesv2']['get_domain_statistics_report']=['ses:GetDomainStatisticsReport']
        for p in ['ses:GetDomainStatisticsReport']:
            res = {}
            for nm in ["EndDate","StartDate","Domain"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetDomainStatisticsReport", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_email_identity(self, *args, **kwargs):
        __protego_used['sesv2']['get_email_identity']=['ses:GetEmailIdentity']
        for p in ['ses:GetEmailIdentity']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetEmailIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_suppressed_destination(self, *args, **kwargs):
        __protego_used['sesv2']['get_suppressed_destination']=['ses:GetSuppressedDestination']
        for p in ['ses:GetSuppressedDestination']:
            res = {}
            for nm in ["EmailAddress"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "GetSuppressedDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_configuration_sets(self, *args, **kwargs):
        __protego_used['sesv2']['list_configuration_sets']=['ses:ListConfigurationSets']
        for p in ['ses:ListConfigurationSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "ListConfigurationSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dedicated_ip_pools(self, *args, **kwargs):
        __protego_used['sesv2']['list_dedicated_ip_pools']=['ses:ListDedicatedIpPools']
        for p in ['ses:ListDedicatedIpPools']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "ListDedicatedIpPools", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_deliverability_test_reports(self, *args, **kwargs):
        __protego_used['sesv2']['list_deliverability_test_reports']=['ses:ListDeliverabilityTestReports']
        for p in ['ses:ListDeliverabilityTestReports']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "ListDeliverabilityTestReports", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_domain_deliverability_campaigns(self, *args, **kwargs):
        __protego_used['sesv2']['list_domain_deliverability_campaigns']=['ses:ListDomainDeliverabilityCampaigns']
        for p in ['ses:ListDomainDeliverabilityCampaigns']:
            res = {}
            for nm in ["EndDate","SubscribedDomain","StartDate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "ListDomainDeliverabilityCampaigns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_email_identities(self, *args, **kwargs):
        __protego_used['sesv2']['list_email_identities']=['ses:ListEmailIdentities']
        for p in ['ses:ListEmailIdentities']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "ListEmailIdentities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_suppressed_destinations(self, *args, **kwargs):
        __protego_used['sesv2']['list_suppressed_destinations']=['ses:ListSuppressedDestinations']
        for p in ['ses:ListSuppressedDestinations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "ListSuppressedDestinations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['sesv2']['list_tags_for_resource']=['ses:ListTagsForResource']
        for p in ['ses:ListTagsForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_account_dedicated_ip_warmup_attributes(self, *args, **kwargs):
        __protego_used['sesv2']['put_account_dedicated_ip_warmup_attributes']=['ses:PutAccountDedicatedIpWarmupAttributes']
        for p in ['ses:PutAccountDedicatedIpWarmupAttributes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutAccountDedicatedIpWarmupAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_account_sending_attributes(self, *args, **kwargs):
        __protego_used['sesv2']['put_account_sending_attributes']=['ses:PutAccountSendingAttributes']
        for p in ['ses:PutAccountSendingAttributes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutAccountSendingAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_account_suppression_attributes(self, *args, **kwargs):
        __protego_used['sesv2']['put_account_suppression_attributes']=['ses:PutAccountSuppressionAttributes']
        for p in ['ses:PutAccountSuppressionAttributes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutAccountSuppressionAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_set_delivery_options(self, *args, **kwargs):
        __protego_used['sesv2']['put_configuration_set_delivery_options']=['ses:PutConfigurationSetDeliveryOptions']
        for p in ['ses:PutConfigurationSetDeliveryOptions']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutConfigurationSetDeliveryOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_set_reputation_options(self, *args, **kwargs):
        __protego_used['sesv2']['put_configuration_set_reputation_options']=['ses:PutConfigurationSetReputationOptions']
        for p in ['ses:PutConfigurationSetReputationOptions']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutConfigurationSetReputationOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_set_sending_options(self, *args, **kwargs):
        __protego_used['sesv2']['put_configuration_set_sending_options']=['ses:PutConfigurationSetSendingOptions']
        for p in ['ses:PutConfigurationSetSendingOptions']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutConfigurationSetSendingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_set_suppression_options(self, *args, **kwargs):
        __protego_used['sesv2']['put_configuration_set_suppression_options']=['ses:PutConfigurationSetSuppressionOptions']
        for p in ['ses:PutConfigurationSetSuppressionOptions']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutConfigurationSetSuppressionOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_configuration_set_tracking_options(self, *args, **kwargs):
        __protego_used['sesv2']['put_configuration_set_tracking_options']=['ses:PutConfigurationSetTrackingOptions']
        for p in ['ses:PutConfigurationSetTrackingOptions']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutConfigurationSetTrackingOptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_dedicated_ip_in_pool(self, *args, **kwargs):
        __protego_used['sesv2']['put_dedicated_ip_in_pool']=['ses:PutDedicatedIpInPool']
        for p in ['ses:PutDedicatedIpInPool']:
            res = {}
            for nm in ["Ip","DestinationPoolName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutDedicatedIpInPool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_dedicated_ip_warmup_attributes(self, *args, **kwargs):
        __protego_used['sesv2']['put_dedicated_ip_warmup_attributes']=['ses:PutDedicatedIpWarmupAttributes']
        for p in ['ses:PutDedicatedIpWarmupAttributes']:
            res = {}
            for nm in ["WarmupPercentage","Ip"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutDedicatedIpWarmupAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_deliverability_dashboard_option(self, *args, **kwargs):
        __protego_used['sesv2']['put_deliverability_dashboard_option']=['ses:PutDeliverabilityDashboardOption']
        for p in ['ses:PutDeliverabilityDashboardOption']:
            res = {}
            for nm in ["DashboardEnabled"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutDeliverabilityDashboardOption", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_email_identity_dkim_attributes(self, *args, **kwargs):
        __protego_used['sesv2']['put_email_identity_dkim_attributes']=['ses:PutEmailIdentityDkimAttributes']
        for p in ['ses:PutEmailIdentityDkimAttributes']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutEmailIdentityDkimAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_email_identity_dkim_signing_attributes(self, *args, **kwargs):
        __protego_used['sesv2']['put_email_identity_dkim_signing_attributes']=['ses:PutEmailIdentityDkimSigningAttributes']
        for p in ['ses:PutEmailIdentityDkimSigningAttributes']:
            res = {}
            for nm in ["SigningAttributesOrigin","EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutEmailIdentityDkimSigningAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_email_identity_feedback_attributes(self, *args, **kwargs):
        __protego_used['sesv2']['put_email_identity_feedback_attributes']=['ses:PutEmailIdentityFeedbackAttributes']
        for p in ['ses:PutEmailIdentityFeedbackAttributes']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutEmailIdentityFeedbackAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_email_identity_mail_from_attributes(self, *args, **kwargs):
        __protego_used['sesv2']['put_email_identity_mail_from_attributes']=['ses:PutEmailIdentityMailFromAttributes']
        for p in ['ses:PutEmailIdentityMailFromAttributes']:
            res = {}
            for nm in ["EmailIdentity"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutEmailIdentityMailFromAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_suppressed_destination(self, *args, **kwargs):
        __protego_used['sesv2']['put_suppressed_destination']=['ses:PutSuppressedDestination']
        for p in ['ses:PutSuppressedDestination']:
            res = {}
            for nm in ["EmailAddress","Reason"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "PutSuppressedDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_email(self, *args, **kwargs):
        __protego_used['sesv2']['send_email']=['ses:SendEmail']
        for p in ['ses:SendEmail']:
            res = {}
            for nm in ["Content","Destination"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "SendEmail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['sesv2']['tag_resource']=['ses:TagResource']
        for p in ['ses:TagResource']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['sesv2']['untag_resource']=['ses:UntagResource']
        for p in ['ses:UntagResource']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['sesv2']['update_configuration_set_event_destination']=['ses:UpdateConfigurationSetEventDestination']
        for p in ['ses:UpdateConfigurationSetEventDestination']:
            res = {}
            for nm in ["EventDestinationName","EventDestination","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sesv2'].append({'action': "UpdateConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class shield:
    def __init__(self, region_name=__default_region):
        __protego_used['shield']= __protego_used.get('shield', {})
        __protego_resource_map['shield']=__protego_resource_map.get('shield', [])
        self.region = region_name
    def associate_drt_log_bucket(self, *args, **kwargs):
        __protego_used['shield']['associate_drt_log_bucket']=['s3:GetBucketPolicy','shield:AssociateDRTLogBucket','s3:PutBucketPolicy']
        for p in ['s3:GetBucketPolicy','shield:AssociateDRTLogBucket','s3:PutBucketPolicy']:
            res = {}
            for nm in ["LogBucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "AssociateDRTLogBucket", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_drt_role(self, *args, **kwargs):
        __protego_used['shield']['associate_drt_role']=['iam:GetRole','iam:ListAttachedRolePolicies','shield:AssociateDRTRole','iam:PassRole']
        for p in ['iam:GetRole','iam:ListAttachedRolePolicies','shield:AssociateDRTRole','iam:PassRole']:
            res = {}
            for nm in ["RoleArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "AssociateDRTRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_protection(self, *args, **kwargs):
        __protego_used['shield']['create_protection']=['shield:CreateProtection']
        for p in ['shield:CreateProtection']:
            res = {}
            for nm in ["ResourceArn","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "CreateProtection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_subscription(self, *args, **kwargs):
        __protego_used['shield']['create_subscription']=['shield:CreateSubscription']
        for p in ['shield:CreateSubscription']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "CreateSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_protection(self, *args, **kwargs):
        __protego_used['shield']['delete_protection']=['shield:DeleteProtection']
        for p in ['shield:DeleteProtection']:
            res = {}
            for nm in ["ProtectionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "DeleteProtection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_subscription(self, *args, **kwargs):
        __protego_used['shield']['delete_subscription']=['shield:DeleteSubscription']
        for p in ['shield:DeleteSubscription']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "DeleteSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_attack(self, *args, **kwargs):
        __protego_used['shield']['describe_attack']=['shield:DescribeAttack']
        for p in ['shield:DescribeAttack']:
            res = {}
            for nm in ["AttackId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "DescribeAttack", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_drt_access(self, *args, **kwargs):
        __protego_used['shield']['describe_drt_access']=['shield:DescribeDRTAccess']
        for p in ['shield:DescribeDRTAccess']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "DescribeDRTAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_emergency_contact_settings(self, *args, **kwargs):
        __protego_used['shield']['describe_emergency_contact_settings']=['shield:DescribeEmergencyContactSettings']
        for p in ['shield:DescribeEmergencyContactSettings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "DescribeEmergencyContactSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_protection(self, *args, **kwargs):
        __protego_used['shield']['describe_protection']=['shield:DescribeProtection']
        for p in ['shield:DescribeProtection']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "DescribeProtection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_subscription(self, *args, **kwargs):
        __protego_used['shield']['describe_subscription']=['shield:DescribeSubscription']
        for p in ['shield:DescribeSubscription']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "DescribeSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_drt_log_bucket(self, *args, **kwargs):
        __protego_used['shield']['disassociate_drt_log_bucket']=['shield:DisassociateDRTLogBucket','s3:GetBucketPolicy','s3:DeleteBucketPolicy','s3:PutBucketPolicy']
        for p in ['shield:DisassociateDRTLogBucket','s3:GetBucketPolicy','s3:DeleteBucketPolicy','s3:PutBucketPolicy']:
            res = {}
            for nm in ["LogBucket"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "DisassociateDRTLogBucket", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_drt_role(self, *args, **kwargs):
        __protego_used['shield']['disassociate_drt_role']=['shield:DisassociateDRTRole']
        for p in ['shield:DisassociateDRTRole']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "DisassociateDRTRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_subscription_state(self, *args, **kwargs):
        __protego_used['shield']['get_subscription_state']=['shield:GetSubscriptionState']
        for p in ['shield:GetSubscriptionState']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "GetSubscriptionState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_attacks(self, *args, **kwargs):
        __protego_used['shield']['list_attacks']=['shield:ListAttacks']
        for p in ['shield:ListAttacks']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "ListAttacks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_protections(self, *args, **kwargs):
        __protego_used['shield']['list_protections']=['shield:ListProtections']
        for p in ['shield:ListProtections']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "ListProtections", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_emergency_contact_settings(self, *args, **kwargs):
        __protego_used['shield']['update_emergency_contact_settings']=['shield:UpdateEmergencyContactSettings']
        for p in ['shield:UpdateEmergencyContactSettings']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "UpdateEmergencyContactSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_subscription(self, *args, **kwargs):
        __protego_used['shield']['update_subscription']=['shield:*']
        for p in ['shield:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['shield'].append({'action': "UpdateSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class signer:
    def __init__(self, region_name=__default_region):
        __protego_used['signer']= __protego_used.get('signer', {})
        __protego_resource_map['signer']=__protego_resource_map.get('signer', [])
        self.region = region_name
    def cancel_signing_profile(self, *args, **kwargs):
        __protego_used['signer']['cancel_signing_profile']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in ["profileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "CancelSigningProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_signing_job(self, *args, **kwargs):
        __protego_used['signer']['describe_signing_job']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in ["jobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "DescribeSigningJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_signing_platform(self, *args, **kwargs):
        __protego_used['signer']['get_signing_platform']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in ["platformId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "GetSigningPlatform", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_signing_profile(self, *args, **kwargs):
        __protego_used['signer']['get_signing_profile']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in ["profileName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "GetSigningProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_signing_jobs(self, *args, **kwargs):
        __protego_used['signer']['list_signing_jobs']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "ListSigningJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_signing_platforms(self, *args, **kwargs):
        __protego_used['signer']['list_signing_platforms']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "ListSigningPlatforms", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_signing_profiles(self, *args, **kwargs):
        __protego_used['signer']['list_signing_profiles']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "ListSigningProfiles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['signer']['list_tags_for_resource']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_signing_profile(self, *args, **kwargs):
        __protego_used['signer']['put_signing_profile']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in ["profileName","signingMaterial","platformId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "PutSigningProfile", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_signing_job(self, *args, **kwargs):
        __protego_used['signer']['start_signing_job']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in ["clientRequestToken","source","destination"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "StartSigningJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['signer']['tag_resource']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['signer']['untag_resource']=['signer:*']
        for p in ['signer:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['signer'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sms:
    def __init__(self, region_name=__default_region):
        __protego_used['sms']= __protego_used.get('sms', {})
        __protego_resource_map['sms']=__protego_resource_map.get('sms', [])
        self.region = region_name
    def create_app(self, *args, **kwargs):
        __protego_used['sms']['create_app']=['sms:CreateApp']
        for p in ['sms:CreateApp']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "CreateApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_replication_job(self, *args, **kwargs):
        __protego_used['sms']['create_replication_job']=['sms:CreateReplicationJob']
        for p in ['sms:CreateReplicationJob']:
            res = {}
            for nm in ["serverId","seedReplicationTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "CreateReplicationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_app(self, *args, **kwargs):
        __protego_used['sms']['delete_app']=['sms:DeleteApp']
        for p in ['sms:DeleteApp']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "DeleteApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_app_launch_configuration(self, *args, **kwargs):
        __protego_used['sms']['delete_app_launch_configuration']=['sms:DeleteAppLaunchConfiguration']
        for p in ['sms:DeleteAppLaunchConfiguration']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "DeleteAppLaunchConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_app_replication_configuration(self, *args, **kwargs):
        __protego_used['sms']['delete_app_replication_configuration']=['sms:DeleteAppReplicationConfiguration']
        for p in ['sms:DeleteAppReplicationConfiguration']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "DeleteAppReplicationConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_replication_job(self, *args, **kwargs):
        __protego_used['sms']['delete_replication_job']=['sms:DeleteReplicationJob']
        for p in ['sms:DeleteReplicationJob']:
            res = {}
            for nm in ["replicationJobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "DeleteReplicationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_server_catalog(self, *args, **kwargs):
        __protego_used['sms']['delete_server_catalog']=['sms:DeleteServerCatalog']
        for p in ['sms:DeleteServerCatalog']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "DeleteServerCatalog", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_connector(self, *args, **kwargs):
        __protego_used['sms']['disassociate_connector']=['sms:DisassociateConnector']
        for p in ['sms:DisassociateConnector']:
            res = {}
            for nm in ["connectorId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "DisassociateConnector", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_change_set(self, *args, **kwargs):
        __protego_used['sms']['generate_change_set']=['sms:GenerateChangeSet']
        for p in ['sms:GenerateChangeSet']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "GenerateChangeSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def generate_template(self, *args, **kwargs):
        __protego_used['sms']['generate_template']=['sms:GenerateTemplate']
        for p in ['sms:GenerateTemplate']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "GenerateTemplate", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_app(self, *args, **kwargs):
        __protego_used['sms']['get_app']=['sms:GetApp']
        for p in ['sms:GetApp']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "GetApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_app_launch_configuration(self, *args, **kwargs):
        __protego_used['sms']['get_app_launch_configuration']=['sms:GetAppLaunchConfiguration']
        for p in ['sms:GetAppLaunchConfiguration']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "GetAppLaunchConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_app_replication_configuration(self, *args, **kwargs):
        __protego_used['sms']['get_app_replication_configuration']=['sms:GetAppReplicationConfiguration']
        for p in ['sms:GetAppReplicationConfiguration']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "GetAppReplicationConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_connectors(self, *args, **kwargs):
        __protego_used['sms']['get_connectors']=['sms:GetConnectors']
        for p in ['sms:GetConnectors']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "GetConnectors", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_replication_jobs(self, *args, **kwargs):
        __protego_used['sms']['get_replication_jobs']=['sms:GetReplicationJobs']
        for p in ['sms:GetReplicationJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "GetReplicationJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_replication_runs(self, *args, **kwargs):
        __protego_used['sms']['get_replication_runs']=['sms:GetReplicationRuns']
        for p in ['sms:GetReplicationRuns']:
            res = {}
            for nm in ["replicationJobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "GetReplicationRuns", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_servers(self, *args, **kwargs):
        __protego_used['sms']['get_servers']=['sms:GetServers']
        for p in ['sms:GetServers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "GetServers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_server_catalog(self, *args, **kwargs):
        __protego_used['sms']['import_server_catalog']=['sms:ImportServerCatalog']
        for p in ['sms:ImportServerCatalog']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "ImportServerCatalog", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def launch_app(self, *args, **kwargs):
        __protego_used['sms']['launch_app']=['sms:LaunchApp']
        for p in ['sms:LaunchApp']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "LaunchApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_apps(self, *args, **kwargs):
        __protego_used['sms']['list_apps']=['sms:PutAppLaunchConfiguration']
        for p in ['sms:PutAppLaunchConfiguration']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "ListApps", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_app_launch_configuration(self, *args, **kwargs):
        __protego_used['sms']['put_app_launch_configuration']=['sms:PutAppLaunchConfiguration']
        for p in ['sms:PutAppLaunchConfiguration']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "PutAppLaunchConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_app_replication_configuration(self, *args, **kwargs):
        __protego_used['sms']['put_app_replication_configuration']=['sms:PutAppReplicationConfiguration']
        for p in ['sms:PutAppReplicationConfiguration']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "PutAppReplicationConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_app_replication(self, *args, **kwargs):
        __protego_used['sms']['start_app_replication']=['sms:StartAppReplication']
        for p in ['sms:StartAppReplication']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "StartAppReplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_on_demand_replication_run(self, *args, **kwargs):
        __protego_used['sms']['start_on_demand_replication_run']=['sms:StartOnDemandReplicationRun']
        for p in ['sms:StartOnDemandReplicationRun']:
            res = {}
            for nm in ["replicationJobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "StartOnDemandReplicationRun", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_app_replication(self, *args, **kwargs):
        __protego_used['sms']['stop_app_replication']=['sms:StopAppReplication']
        for p in ['sms:StopAppReplication']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "StopAppReplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def terminate_app(self, *args, **kwargs):
        __protego_used['sms']['terminate_app']=['sms:TerminateApp']
        for p in ['sms:TerminateApp']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "TerminateApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_app(self, *args, **kwargs):
        __protego_used['sms']['update_app']=['sms:UpdateApp']
        for p in ['sms:UpdateApp']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "UpdateApp", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_replication_job(self, *args, **kwargs):
        __protego_used['sms']['update_replication_job']=['sms:UpdateReplicationJob']
        for p in ['sms:UpdateReplicationJob']:
            res = {}
            for nm in ["replicationJobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms'].append({'action': "UpdateReplicationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sms_voice:
    def __init__(self, region_name=__default_region):
        __protego_used['sms-voice']= __protego_used.get('sms-voice', {})
        __protego_resource_map['sms-voice']=__protego_resource_map.get('sms-voice', [])
        self.region = region_name
    def create_configuration_set(self, *args, **kwargs):
        __protego_used['sms-voice']['create_configuration_set']=['sms-voice:*']
        for p in ['sms-voice:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms-voice'].append({'action': "CreateConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['sms-voice']['create_configuration_set_event_destination']=['sms-voice:*']
        for p in ['sms-voice:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms-voice'].append({'action': "CreateConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_set(self, *args, **kwargs):
        __protego_used['sms-voice']['delete_configuration_set']=['sms-voice:*']
        for p in ['sms-voice:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms-voice'].append({'action': "DeleteConfigurationSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['sms-voice']['delete_configuration_set_event_destination']=['sms-voice:*']
        for p in ['sms-voice:*']:
            res = {}
            for nm in ["EventDestinationName","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms-voice'].append({'action': "DeleteConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_configuration_set_event_destinations(self, *args, **kwargs):
        __protego_used['sms-voice']['get_configuration_set_event_destinations']=['sms-voice:*']
        for p in ['sms-voice:*']:
            res = {}
            for nm in ["ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms-voice'].append({'action': "GetConfigurationSetEventDestinations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_configuration_sets(self, *args, **kwargs):
        __protego_used['sms-voice']['list_configuration_sets']=['sms-voice:*']
        for p in ['sms-voice:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms-voice'].append({'action': "ListConfigurationSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_voice_message(self, *args, **kwargs):
        __protego_used['sms-voice']['send_voice_message']=['sms-voice:*']
        for p in ['sms-voice:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms-voice'].append({'action': "SendVoiceMessage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_configuration_set_event_destination(self, *args, **kwargs):
        __protego_used['sms-voice']['update_configuration_set_event_destination']=['sms-voice:*']
        for p in ['sms-voice:*']:
            res = {}
            for nm in ["EventDestinationName","ConfigurationSetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sms-voice'].append({'action': "UpdateConfigurationSetEventDestination", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class snowball:
    def __init__(self, region_name=__default_region):
        __protego_used['snowball']= __protego_used.get('snowball', {})
        __protego_resource_map['snowball']=__protego_resource_map.get('snowball', [])
        self.region = region_name
    def cancel_cluster(self, *args, **kwargs):
        __protego_used['snowball']['cancel_cluster']=['snowball:CancelCluster']
        for p in ['snowball:CancelCluster']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "CancelCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_job(self, *args, **kwargs):
        __protego_used['snowball']['cancel_job']=['snowball:CancelJob']
        for p in ['snowball:CancelJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "CancelJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_address(self, *args, **kwargs):
        __protego_used['snowball']['create_address']=['snowball:CreateAddress']
        for p in ['snowball:CreateAddress']:
            res = {}
            for nm in ["Address"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "CreateAddress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cluster(self, *args, **kwargs):
        __protego_used['snowball']['create_cluster']=['snowball:CreateCluster']
        for p in ['snowball:CreateCluster']:
            res = {}
            for nm in ["RoleARN","AddressId","JobType","ShippingOption","Resources"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "CreateCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_job(self, *args, **kwargs):
        __protego_used['snowball']['create_job']=['snowball:CreateJob']
        for p in ['snowball:CreateJob']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "CreateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_address(self, *args, **kwargs):
        __protego_used['snowball']['describe_address']=['snowball:DescribeAddress']
        for p in ['snowball:DescribeAddress']:
            res = {}
            for nm in ["AddressId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "DescribeAddress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_addresses(self, *args, **kwargs):
        __protego_used['snowball']['describe_addresses']=['snowball:DescribeAddresses']
        for p in ['snowball:DescribeAddresses']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "DescribeAddresses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cluster(self, *args, **kwargs):
        __protego_used['snowball']['describe_cluster']=['snowball:DescribeCluster']
        for p in ['snowball:DescribeCluster']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "DescribeCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_job(self, *args, **kwargs):
        __protego_used['snowball']['describe_job']=['snowball:DescribeJob']
        for p in ['snowball:DescribeJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "DescribeJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job_manifest(self, *args, **kwargs):
        __protego_used['snowball']['get_job_manifest']=['snowball:GetJobManifest']
        for p in ['snowball:GetJobManifest']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "GetJobManifest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_job_unlock_code(self, *args, **kwargs):
        __protego_used['snowball']['get_job_unlock_code']=['snowball:GetJobUnlockCode']
        for p in ['snowball:GetJobUnlockCode']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "GetJobUnlockCode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_snowball_usage(self, *args, **kwargs):
        __protego_used['snowball']['get_snowball_usage']=['snowball:GetSnowballUsage']
        for p in ['snowball:GetSnowballUsage']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "GetSnowballUsage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_software_updates(self, *args, **kwargs):
        __protego_used['snowball']['get_software_updates']=['snowball:*']
        for p in ['snowball:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "GetSoftwareUpdates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_cluster_jobs(self, *args, **kwargs):
        __protego_used['snowball']['list_cluster_jobs']=['snowball:ListClusterJobs']
        for p in ['snowball:ListClusterJobs']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "ListClusterJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_clusters(self, *args, **kwargs):
        __protego_used['snowball']['list_clusters']=['snowball:ListClusters']
        for p in ['snowball:ListClusters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "ListClusters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_compatible_images(self, *args, **kwargs):
        __protego_used['snowball']['list_compatible_images']=['snowball:*']
        for p in ['snowball:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "ListCompatibleImages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_jobs(self, *args, **kwargs):
        __protego_used['snowball']['list_jobs']=['snowball:ListJobs']
        for p in ['snowball:ListJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "ListJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_cluster(self, *args, **kwargs):
        __protego_used['snowball']['update_cluster']=['snowball:UpdateCluster']
        for p in ['snowball:UpdateCluster']:
            res = {}
            for nm in ["ClusterId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "UpdateCluster", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_job(self, *args, **kwargs):
        __protego_used['snowball']['update_job']=['snowball:UpdateJob']
        for p in ['snowball:UpdateJob']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['snowball'].append({'action': "UpdateJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sns:
    def __init__(self, region_name=__default_region):
        __protego_used['sns']= __protego_used.get('sns', {})
        __protego_resource_map['sns']=__protego_resource_map.get('sns', [])
        self.region = region_name
    def add_permission(self, *args, **kwargs):
        __protego_used['sns']['add_permission']=['sns:AddPermission']
        for p in ['sns:AddPermission']:
            res = {}
            for nm in ["TopicArn","Label","ActionName","AWSAccountId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "AddPermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def check_if_phone_number_is_opted_out(self, *args, **kwargs):
        __protego_used['sns']['check_if_phone_number_is_opted_out']=['sns:CheckIfPhoneNumberIsOptedOut']
        for p in ['sns:CheckIfPhoneNumberIsOptedOut']:
            res = {}
            for nm in ["phoneNumber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "CheckIfPhoneNumberIsOptedOut", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def confirm_subscription(self, *args, **kwargs):
        __protego_used['sns']['confirm_subscription']=['sns:ConfirmSubscription']
        for p in ['sns:ConfirmSubscription']:
            res = {}
            for nm in ["TopicArn","Token"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "ConfirmSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_platform_application(self, *args, **kwargs):
        __protego_used['sns']['create_platform_application']=['sns:CreatePlatformApplication']
        for p in ['sns:CreatePlatformApplication']:
            res = {}
            for nm in ["Platform","Attributes","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "CreatePlatformApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_platform_endpoint(self, *args, **kwargs):
        __protego_used['sns']['create_platform_endpoint']=['sns:CreatePlatformEndpoint']
        for p in ['sns:CreatePlatformEndpoint']:
            res = {}
            for nm in ["Token","PlatformApplicationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "CreatePlatformEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_topic(self, *args, **kwargs):
        __protego_used['sns']['create_topic']=['sns:CreateTopic']
        for p in ['sns:CreateTopic']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "CreateTopic", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_endpoint(self, *args, **kwargs):
        __protego_used['sns']['delete_endpoint']=['sns:DeleteEndpoint']
        for p in ['sns:DeleteEndpoint']:
            res = {}
            for nm in ["EndpointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "DeleteEndpoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_platform_application(self, *args, **kwargs):
        __protego_used['sns']['delete_platform_application']=['sns:DeletePlatformApplication']
        for p in ['sns:DeletePlatformApplication']:
            res = {}
            for nm in ["PlatformApplicationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "DeletePlatformApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_topic(self, *args, **kwargs):
        __protego_used['sns']['delete_topic']=['sns:DeleteTopic']
        for p in ['sns:DeleteTopic']:
            res = {}
            for nm in ["TopicArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "DeleteTopic", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_endpoint_attributes(self, *args, **kwargs):
        __protego_used['sns']['get_endpoint_attributes']=['sns:GetEndpointAttributes']
        for p in ['sns:GetEndpointAttributes']:
            res = {}
            for nm in ["EndpointArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "GetEndpointAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_platform_application_attributes(self, *args, **kwargs):
        __protego_used['sns']['get_platform_application_attributes']=['sns:GetPlatformApplicationAttributes']
        for p in ['sns:GetPlatformApplicationAttributes']:
            res = {}
            for nm in ["PlatformApplicationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "GetPlatformApplicationAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sms_attributes(self, *args, **kwargs):
        __protego_used['sns']['get_sms_attributes']=['sns:GetSMSAttributes']
        for p in ['sns:GetSMSAttributes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "GetSMSAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_subscription_attributes(self, *args, **kwargs):
        __protego_used['sns']['get_subscription_attributes']=['sns:GetSubscriptionAttributes']
        for p in ['sns:GetSubscriptionAttributes']:
            res = {}
            for nm in ["SubscriptionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "GetSubscriptionAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_topic_attributes(self, *args, **kwargs):
        __protego_used['sns']['get_topic_attributes']=['sns:GetTopicAttributes']
        for p in ['sns:GetTopicAttributes']:
            res = {}
            for nm in ["TopicArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "GetTopicAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_endpoints_by_platform_application(self, *args, **kwargs):
        __protego_used['sns']['list_endpoints_by_platform_application']=['sns:ListEndpointsByPlatformApplication']
        for p in ['sns:ListEndpointsByPlatformApplication']:
            res = {}
            for nm in ["PlatformApplicationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "ListEndpointsByPlatformApplication", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_phone_numbers_opted_out(self, *args, **kwargs):
        __protego_used['sns']['list_phone_numbers_opted_out']=['sns:ListPhoneNumbersOptedOut']
        for p in ['sns:ListPhoneNumbersOptedOut']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "ListPhoneNumbersOptedOut", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_platform_applications(self, *args, **kwargs):
        __protego_used['sns']['list_platform_applications']=['sns:ListPlatformApplications']
        for p in ['sns:ListPlatformApplications']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "ListPlatformApplications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_subscriptions(self, *args, **kwargs):
        __protego_used['sns']['list_subscriptions']=['sns:ListSubscriptions']
        for p in ['sns:ListSubscriptions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "ListSubscriptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_subscriptions_by_topic(self, *args, **kwargs):
        __protego_used['sns']['list_subscriptions_by_topic']=['sns:ListSubscriptionsByTopic']
        for p in ['sns:ListSubscriptionsByTopic']:
            res = {}
            for nm in ["TopicArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "ListSubscriptionsByTopic", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['sns']['list_tags_for_resource']=['sns:*']
        for p in ['sns:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_topics(self, *args, **kwargs):
        __protego_used['sns']['list_topics']=['sns:ListTopics']
        for p in ['sns:ListTopics']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "ListTopics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def opt_in_phone_number(self, *args, **kwargs):
        __protego_used['sns']['opt_in_phone_number']=['sns:OptInPhoneNumber']
        for p in ['sns:OptInPhoneNumber']:
            res = {}
            for nm in ["phoneNumber"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "OptInPhoneNumber", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def publish(self, *args, **kwargs):
        __protego_used['sns']['publish']=['sns:Publish']
        for p in ['sns:Publish']:
            res = {}
            for nm in ["Message"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "Publish", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_permission(self, *args, **kwargs):
        __protego_used['sns']['remove_permission']=['sns:RemovePermission']
        for p in ['sns:RemovePermission']:
            res = {}
            for nm in ["TopicArn","Label"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "RemovePermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_endpoint_attributes(self, *args, **kwargs):
        __protego_used['sns']['set_endpoint_attributes']=['sns:SetEndpointAttributes']
        for p in ['sns:SetEndpointAttributes']:
            res = {}
            for nm in ["EndpointArn","Attributes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "SetEndpointAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_platform_application_attributes(self, *args, **kwargs):
        __protego_used['sns']['set_platform_application_attributes']=['sns:SetPlatformApplicationAttributes']
        for p in ['sns:SetPlatformApplicationAttributes']:
            res = {}
            for nm in ["Attributes","PlatformApplicationArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "SetPlatformApplicationAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_sms_attributes(self, *args, **kwargs):
        __protego_used['sns']['set_sms_attributes']=['sns:SetSMSAttributes']
        for p in ['sns:SetSMSAttributes']:
            res = {}
            for nm in ["attributes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "SetSMSAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_subscription_attributes(self, *args, **kwargs):
        __protego_used['sns']['set_subscription_attributes']=['sns:SetSubscriptionAttributes']
        for p in ['sns:SetSubscriptionAttributes']:
            res = {}
            for nm in ["AttributeName","SubscriptionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "SetSubscriptionAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_topic_attributes(self, *args, **kwargs):
        __protego_used['sns']['set_topic_attributes']=['sns:SetTopicAttributes']
        for p in ['sns:SetTopicAttributes']:
            res = {}
            for nm in ["TopicArn","AttributeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "SetTopicAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def subscribe(self, *args, **kwargs):
        __protego_used['sns']['subscribe']=['sns:Subscribe']
        for p in ['sns:Subscribe']:
            res = {}
            for nm in ["TopicArn","Protocol"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "Subscribe", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['sns']['tag_resource']=['sns:*']
        for p in ['sns:*']:
            res = {}
            for nm in ["ResourceArn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def unsubscribe(self, *args, **kwargs):
        __protego_used['sns']['unsubscribe']=['sns:Unsubscribe']
        for p in ['sns:Unsubscribe']:
            res = {}
            for nm in ["SubscriptionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "Unsubscribe", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['sns']['untag_resource']=['sns:*']
        for p in ['sns:*']:
            res = {}
            for nm in ["ResourceArn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sns'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sqs:
    def __init__(self, region_name=__default_region):
        __protego_used['sqs']= __protego_used.get('sqs', {})
        __protego_resource_map['sqs']=__protego_resource_map.get('sqs', [])
        self.region = region_name
    def add_permission(self, *args, **kwargs):
        __protego_used['sqs']['add_permission']=['sqs:AddPermission']
        for p in ['sqs:AddPermission']:
            res = {}
            for nm in ["Label","QueueUrl","Actions","AWSAccountIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "AddPermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def change_message_visibility(self, *args, **kwargs):
        __protego_used['sqs']['change_message_visibility']=['sqs:ChangeMessageVisibility']
        for p in ['sqs:ChangeMessageVisibility']:
            res = {}
            for nm in ["QueueUrl","ReceiptHandle","VisibilityTimeout"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "ChangeMessageVisibility", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def change_message_visibility_batch(self, *args, **kwargs):
        __protego_used['sqs']['change_message_visibility_batch']=['sqs:ChangeMessageVisibility','sqs:ChangeMessageVisibilityBatch']
        for p in ['sqs:ChangeMessageVisibility','sqs:ChangeMessageVisibilityBatch']:
            res = {}
            for nm in ["QueueUrl","Entries"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "ChangeMessageVisibilityBatch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_queue(self, *args, **kwargs):
        __protego_used['sqs']['create_queue']=['sqs:CreateQueue']
        for p in ['sqs:CreateQueue']:
            res = {}
            for nm in ["QueueName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "CreateQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_message(self, *args, **kwargs):
        __protego_used['sqs']['delete_message']=['sqs:DeleteMessage']
        for p in ['sqs:DeleteMessage']:
            res = {}
            for nm in ["QueueUrl","ReceiptHandle"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "DeleteMessage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_message_batch(self, *args, **kwargs):
        __protego_used['sqs']['delete_message_batch']=['sqs:DeleteMessage','sqs:DeleteMessageBatch']
        for p in ['sqs:DeleteMessage','sqs:DeleteMessageBatch']:
            res = {}
            for nm in ["QueueUrl","Entries"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "DeleteMessageBatch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_queue(self, *args, **kwargs):
        __protego_used['sqs']['delete_queue']=['sqs:DeleteQueue']
        for p in ['sqs:DeleteQueue']:
            res = {}
            for nm in ["QueueUrl"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "DeleteQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_queue_attributes(self, *args, **kwargs):
        __protego_used['sqs']['get_queue_attributes']=['sqs:GetQueueAttributes']
        for p in ['sqs:GetQueueAttributes']:
            res = {}
            for nm in ["QueueUrl"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "GetQueueAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_queue_url(self, *args, **kwargs):
        __protego_used['sqs']['get_queue_url']=['sqs:GetQueueUrl']
        for p in ['sqs:GetQueueUrl']:
            res = {}
            for nm in ["QueueName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "GetQueueUrl", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_dead_letter_source_queues(self, *args, **kwargs):
        __protego_used['sqs']['list_dead_letter_source_queues']=['sqs:ListDeadLetterSourceQueues']
        for p in ['sqs:ListDeadLetterSourceQueues']:
            res = {}
            for nm in ["QueueUrl"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "ListDeadLetterSourceQueues", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_queue_tags(self, *args, **kwargs):
        __protego_used['sqs']['list_queue_tags']=['sqs:ListQueueTags']
        for p in ['sqs:ListQueueTags']:
            res = {}
            for nm in ["QueueUrl"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "ListQueueTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_queues(self, *args, **kwargs):
        __protego_used['sqs']['list_queues']=['sqs:ListQueues']
        for p in ['sqs:ListQueues']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "ListQueues", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def purge_queue(self, *args, **kwargs):
        __protego_used['sqs']['purge_queue']=['sqs:PurgeQueue']
        for p in ['sqs:PurgeQueue']:
            res = {}
            for nm in ["QueueUrl"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "PurgeQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def receive_message(self, *args, **kwargs):
        __protego_used['sqs']['receive_message']=['sqs:ReceiveMessage']
        for p in ['sqs:ReceiveMessage']:
            res = {}
            for nm in ["QueueUrl"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "ReceiveMessage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_permission(self, *args, **kwargs):
        __protego_used['sqs']['remove_permission']=['sqs:RemovePermission']
        for p in ['sqs:RemovePermission']:
            res = {}
            for nm in ["Label","QueueUrl"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "RemovePermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_message(self, *args, **kwargs):
        __protego_used['sqs']['send_message']=['sqs:SendMessage']
        for p in ['sqs:SendMessage']:
            res = {}
            for nm in ["QueueUrl","MessageBody"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "SendMessage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_message_batch(self, *args, **kwargs):
        __protego_used['sqs']['send_message_batch']=['sqs:SendMessageBatch','sqs:SendMessage']
        for p in ['sqs:SendMessageBatch','sqs:SendMessage']:
            res = {}
            for nm in ["QueueUrl","Entries"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "SendMessageBatch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_queue_attributes(self, *args, **kwargs):
        __protego_used['sqs']['set_queue_attributes']=['sqs:SetQueueAttributes']
        for p in ['sqs:SetQueueAttributes']:
            res = {}
            for nm in ["QueueUrl","Attributes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "SetQueueAttributes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_queue(self, *args, **kwargs):
        __protego_used['sqs']['tag_queue']=['sqs:TagQueue']
        for p in ['sqs:TagQueue']:
            res = {}
            for nm in ["QueueUrl","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "TagQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_queue(self, *args, **kwargs):
        __protego_used['sqs']['untag_queue']=['sqs:UntagQueue']
        for p in ['sqs:UntagQueue']:
            res = {}
            for nm in ["QueueUrl","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sqs'].append({'action': "UntagQueue", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class ssm:
    def __init__(self, region_name=__default_region):
        __protego_used['ssm']= __protego_used.get('ssm', {})
        __protego_resource_map['ssm']=__protego_resource_map.get('ssm', [])
        self.region = region_name
    def add_tags_to_resource(self, *args, **kwargs):
        __protego_used['ssm']['add_tags_to_resource']=['ssm:AddTagsToResource']
        for p in ['ssm:AddTagsToResource']:
            res = {}
            for nm in ["ResourceId","ResourceType","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "AddTagsToResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_command(self, *args, **kwargs):
        __protego_used['ssm']['cancel_command']=['ssm:CancelCommand']
        for p in ['ssm:CancelCommand']:
            res = {}
            for nm in ["CommandId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "CancelCommand", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_maintenance_window_execution(self, *args, **kwargs):
        __protego_used['ssm']['cancel_maintenance_window_execution']=['ssm:CancelMaintenanceWindowExecution']
        for p in ['ssm:CancelMaintenanceWindowExecution']:
            res = {}
            for nm in ["WindowExecutionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "CancelMaintenanceWindowExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_activation(self, *args, **kwargs):
        __protego_used['ssm']['create_activation']=['ssm:CreateActivation']
        for p in ['ssm:CreateActivation']:
            res = {}
            for nm in ["IamRole"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "CreateActivation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_association(self, *args, **kwargs):
        __protego_used['ssm']['create_association']=['ssm:CreateAssociation']
        for p in ['ssm:CreateAssociation']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "CreateAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_association_batch(self, *args, **kwargs):
        __protego_used['ssm']['create_association_batch']=['ssm:CreateAssociationBatch']
        for p in ['ssm:CreateAssociationBatch']:
            res = {}
            for nm in ["Entries"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "CreateAssociationBatch", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_document(self, *args, **kwargs):
        __protego_used['ssm']['create_document']=['ssm:CreateDocument']
        for p in ['ssm:CreateDocument']:
            res = {}
            for nm in ["Content","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "CreateDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_maintenance_window(self, *args, **kwargs):
        __protego_used['ssm']['create_maintenance_window']=['ssm:CreateMaintenanceWindow']
        for p in ['ssm:CreateMaintenanceWindow']:
            res = {}
            for nm in ["Cutoff","Name","Duration","Schedule","AllowUnassociatedTargets"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "CreateMaintenanceWindow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_ops_item(self, *args, **kwargs):
        __protego_used['ssm']['create_ops_item']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["Description","Title","Source"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "CreateOpsItem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_patch_baseline(self, *args, **kwargs):
        __protego_used['ssm']['create_patch_baseline']=['ssm:CreatePatchBaseline']
        for p in ['ssm:CreatePatchBaseline']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "CreatePatchBaseline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_resource_data_sync(self, *args, **kwargs):
        __protego_used['ssm']['create_resource_data_sync']=['ssm:CreateResourceDataSync']
        for p in ['ssm:CreateResourceDataSync']:
            res = {}
            for nm in ["SyncName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "CreateResourceDataSync", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_activation(self, *args, **kwargs):
        __protego_used['ssm']['delete_activation']=['ssm:DeleteActivation']
        for p in ['ssm:DeleteActivation']:
            res = {}
            for nm in ["ActivationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeleteActivation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_association(self, *args, **kwargs):
        __protego_used['ssm']['delete_association']=['ssm:DeleteAssociation']
        for p in ['ssm:DeleteAssociation']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeleteAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_document(self, *args, **kwargs):
        __protego_used['ssm']['delete_document']=['ssm:DeleteDocument']
        for p in ['ssm:DeleteDocument']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeleteDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_inventory(self, *args, **kwargs):
        __protego_used['ssm']['delete_inventory']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["TypeName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeleteInventory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_maintenance_window(self, *args, **kwargs):
        __protego_used['ssm']['delete_maintenance_window']=['ssm:DeleteMaintenanceWindow']
        for p in ['ssm:DeleteMaintenanceWindow']:
            res = {}
            for nm in ["WindowId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeleteMaintenanceWindow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_parameter(self, *args, **kwargs):
        __protego_used['ssm']['delete_parameter']=['ssm:DeleteParameter']
        for p in ['ssm:DeleteParameter']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeleteParameter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_parameters(self, *args, **kwargs):
        __protego_used['ssm']['delete_parameters']=['ssm:DeleteParameters']
        for p in ['ssm:DeleteParameters']:
            res = {}
            for nm in ["Names"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeleteParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_patch_baseline(self, *args, **kwargs):
        __protego_used['ssm']['delete_patch_baseline']=['ssm:DeletePatchBaseline']
        for p in ['ssm:DeletePatchBaseline']:
            res = {}
            for nm in ["BaselineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeletePatchBaseline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resource_data_sync(self, *args, **kwargs):
        __protego_used['ssm']['delete_resource_data_sync']=['ssm:DeleteResourceDataSync']
        for p in ['ssm:DeleteResourceDataSync']:
            res = {}
            for nm in ["SyncName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeleteResourceDataSync", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_managed_instance(self, *args, **kwargs):
        __protego_used['ssm']['deregister_managed_instance']=['ssm:DeregisterManagedInstance']
        for p in ['ssm:DeregisterManagedInstance']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeregisterManagedInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_patch_baseline_for_patch_group(self, *args, **kwargs):
        __protego_used['ssm']['deregister_patch_baseline_for_patch_group']=['ssm:DeregisterPatchBaselineForPatchGroup']
        for p in ['ssm:DeregisterPatchBaselineForPatchGroup']:
            res = {}
            for nm in ["PatchGroup","BaselineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeregisterPatchBaselineForPatchGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_target_from_maintenance_window(self, *args, **kwargs):
        __protego_used['ssm']['deregister_target_from_maintenance_window']=['ssm:DeregisterTargetFromMaintenanceWindow']
        for p in ['ssm:DeregisterTargetFromMaintenanceWindow']:
            res = {}
            for nm in ["WindowId","WindowTargetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeregisterTargetFromMaintenanceWindow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_task_from_maintenance_window(self, *args, **kwargs):
        __protego_used['ssm']['deregister_task_from_maintenance_window']=['ssm:DeregisterTaskFromMaintenanceWindow']
        for p in ['ssm:DeregisterTaskFromMaintenanceWindow']:
            res = {}
            for nm in ["WindowId","WindowTaskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DeregisterTaskFromMaintenanceWindow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_activations(self, *args, **kwargs):
        __protego_used['ssm']['describe_activations']=['ssm:DescribeActivations']
        for p in ['ssm:DescribeActivations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeActivations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_association(self, *args, **kwargs):
        __protego_used['ssm']['describe_association']=['ssm:DescribeAssociation']
        for p in ['ssm:DescribeAssociation']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_association_execution_targets(self, *args, **kwargs):
        __protego_used['ssm']['describe_association_execution_targets']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["AssociationId","ExecutionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeAssociationExecutionTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_association_executions(self, *args, **kwargs):
        __protego_used['ssm']['describe_association_executions']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["AssociationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeAssociationExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_automation_executions(self, *args, **kwargs):
        __protego_used['ssm']['describe_automation_executions']=['ssm:DescribeAutomationExecutions']
        for p in ['ssm:DescribeAutomationExecutions']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeAutomationExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_automation_step_executions(self, *args, **kwargs):
        __protego_used['ssm']['describe_automation_step_executions']=['ssm:DescribeAutomationStepExecutions']
        for p in ['ssm:DescribeAutomationStepExecutions']:
            res = {}
            for nm in ["AutomationExecutionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeAutomationStepExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_available_patches(self, *args, **kwargs):
        __protego_used['ssm']['describe_available_patches']=['ssm:DescribeAvailablePatches']
        for p in ['ssm:DescribeAvailablePatches']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeAvailablePatches", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_document(self, *args, **kwargs):
        __protego_used['ssm']['describe_document']=['ssm:DescribeDocument']
        for p in ['ssm:DescribeDocument']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_document_permission(self, *args, **kwargs):
        __protego_used['ssm']['describe_document_permission']=['ssm:DescribeDocumentPermission']
        for p in ['ssm:DescribeDocumentPermission']:
            res = {}
            for nm in ["PermissionType","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeDocumentPermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_effective_instance_associations(self, *args, **kwargs):
        __protego_used['ssm']['describe_effective_instance_associations']=['ssm:DescribeEffectiveInstanceAssociations']
        for p in ['ssm:DescribeEffectiveInstanceAssociations']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeEffectiveInstanceAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_effective_patches_for_patch_baseline(self, *args, **kwargs):
        __protego_used['ssm']['describe_effective_patches_for_patch_baseline']=['ssm:DescribeEffectivePatchesForPatchBaseline']
        for p in ['ssm:DescribeEffectivePatchesForPatchBaseline']:
            res = {}
            for nm in ["BaselineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeEffectivePatchesForPatchBaseline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instance_associations_status(self, *args, **kwargs):
        __protego_used['ssm']['describe_instance_associations_status']=['ssm:DescribeInstanceAssociationsStatus']
        for p in ['ssm:DescribeInstanceAssociationsStatus']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeInstanceAssociationsStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instance_information(self, *args, **kwargs):
        __protego_used['ssm']['describe_instance_information']=['ssm:DescribeInstanceInformation']
        for p in ['ssm:DescribeInstanceInformation']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeInstanceInformation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instance_patch_states(self, *args, **kwargs):
        __protego_used['ssm']['describe_instance_patch_states']=['ssm:DescribeInstancePatchStates']
        for p in ['ssm:DescribeInstancePatchStates']:
            res = {}
            for nm in ["InstanceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeInstancePatchStates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instance_patch_states_for_patch_group(self, *args, **kwargs):
        __protego_used['ssm']['describe_instance_patch_states_for_patch_group']=['ssm:DescribeInstancePatchStatesForPatchGroup']
        for p in ['ssm:DescribeInstancePatchStatesForPatchGroup']:
            res = {}
            for nm in ["PatchGroup"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeInstancePatchStatesForPatchGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_instance_patches(self, *args, **kwargs):
        __protego_used['ssm']['describe_instance_patches']=['ssm:DescribeInstancePatches']
        for p in ['ssm:DescribeInstancePatches']:
            res = {}
            for nm in ["InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeInstancePatches", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_inventory_deletions(self, *args, **kwargs):
        __protego_used['ssm']['describe_inventory_deletions']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeInventoryDeletions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_maintenance_window_execution_task_invocations(self, *args, **kwargs):
        __protego_used['ssm']['describe_maintenance_window_execution_task_invocations']=['ssm:DescribeMaintenanceWindowExecutionTaskInvocations']
        for p in ['ssm:DescribeMaintenanceWindowExecutionTaskInvocations']:
            res = {}
            for nm in ["WindowExecutionId","TaskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeMaintenanceWindowExecutionTaskInvocations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_maintenance_window_execution_tasks(self, *args, **kwargs):
        __protego_used['ssm']['describe_maintenance_window_execution_tasks']=['ssm:DescribeMaintenanceWindowExecutionTasks']
        for p in ['ssm:DescribeMaintenanceWindowExecutionTasks']:
            res = {}
            for nm in ["WindowExecutionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeMaintenanceWindowExecutionTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_maintenance_window_executions(self, *args, **kwargs):
        __protego_used['ssm']['describe_maintenance_window_executions']=['ssm:DescribeMaintenanceWindowExecutions']
        for p in ['ssm:DescribeMaintenanceWindowExecutions']:
            res = {}
            for nm in ["WindowId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeMaintenanceWindowExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_maintenance_window_schedule(self, *args, **kwargs):
        __protego_used['ssm']['describe_maintenance_window_schedule']=['ssm:DescribeMaintenanceWindowSchedule']
        for p in ['ssm:DescribeMaintenanceWindowSchedule']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeMaintenanceWindowSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_maintenance_window_targets(self, *args, **kwargs):
        __protego_used['ssm']['describe_maintenance_window_targets']=['ssm:DescribeMaintenanceWindowTargets']
        for p in ['ssm:DescribeMaintenanceWindowTargets']:
            res = {}
            for nm in ["WindowId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeMaintenanceWindowTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_maintenance_window_tasks(self, *args, **kwargs):
        __protego_used['ssm']['describe_maintenance_window_tasks']=['ssm:DescribeMaintenanceWindowTasks']
        for p in ['ssm:DescribeMaintenanceWindowTasks']:
            res = {}
            for nm in ["WindowId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeMaintenanceWindowTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_maintenance_windows(self, *args, **kwargs):
        __protego_used['ssm']['describe_maintenance_windows']=['ssm:DescribeMaintenanceWindows']
        for p in ['ssm:DescribeMaintenanceWindows']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeMaintenanceWindows", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_maintenance_windows_for_target(self, *args, **kwargs):
        __protego_used['ssm']['describe_maintenance_windows_for_target']=['ssm:DescribeMaintenanceWindowsForTarget']
        for p in ['ssm:DescribeMaintenanceWindowsForTarget']:
            res = {}
            for nm in ["ResourceType","Targets"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeMaintenanceWindowsForTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_ops_items(self, *args, **kwargs):
        __protego_used['ssm']['describe_ops_items']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeOpsItems", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_parameters(self, *args, **kwargs):
        __protego_used['ssm']['describe_parameters']=['ssm:DescribeParameters']
        for p in ['ssm:DescribeParameters']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_patch_baselines(self, *args, **kwargs):
        __protego_used['ssm']['describe_patch_baselines']=['ssm:DescribePatchBaselines']
        for p in ['ssm:DescribePatchBaselines']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribePatchBaselines", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_patch_group_state(self, *args, **kwargs):
        __protego_used['ssm']['describe_patch_group_state']=['ssm:DescribePatchGroupState']
        for p in ['ssm:DescribePatchGroupState']:
            res = {}
            for nm in ["PatchGroup"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribePatchGroupState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_patch_groups(self, *args, **kwargs):
        __protego_used['ssm']['describe_patch_groups']=['ssm:DescribePatchGroups']
        for p in ['ssm:DescribePatchGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribePatchGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_patch_properties(self, *args, **kwargs):
        __protego_used['ssm']['describe_patch_properties']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["OperatingSystem","Property"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribePatchProperties", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_sessions(self, *args, **kwargs):
        __protego_used['ssm']['describe_sessions']=['ssm:DescribeSessions']
        for p in ['ssm:DescribeSessions']:
            res = {}
            for nm in ["State"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "DescribeSessions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_automation_execution(self, *args, **kwargs):
        __protego_used['ssm']['get_automation_execution']=['ssm:GetAutomationExecution']
        for p in ['ssm:GetAutomationExecution']:
            res = {}
            for nm in ["AutomationExecutionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetAutomationExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_calendar_state(self, *args, **kwargs):
        __protego_used['ssm']['get_calendar_state']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["CalendarNames"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetCalendarState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_command_invocation(self, *args, **kwargs):
        __protego_used['ssm']['get_command_invocation']=['ssm:GetCommandInvocation']
        for p in ['ssm:GetCommandInvocation']:
            res = {}
            for nm in ["CommandId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetCommandInvocation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_connection_status(self, *args, **kwargs):
        __protego_used['ssm']['get_connection_status']=['ssm:GetConnectionStatus']
        for p in ['ssm:GetConnectionStatus']:
            res = {}
            for nm in ["Target"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetConnectionStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_default_patch_baseline(self, *args, **kwargs):
        __protego_used['ssm']['get_default_patch_baseline']=['ssm:GetDefaultPatchBaseline']
        for p in ['ssm:GetDefaultPatchBaseline']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetDefaultPatchBaseline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_deployable_patch_snapshot_for_instance(self, *args, **kwargs):
        __protego_used['ssm']['get_deployable_patch_snapshot_for_instance']=['ssm:GetDeployablePatchSnapshotForInstance']
        for p in ['ssm:GetDeployablePatchSnapshotForInstance']:
            res = {}
            for nm in ["SnapshotId","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetDeployablePatchSnapshotForInstance", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_document(self, *args, **kwargs):
        __protego_used['ssm']['get_document']=['ssm:GetDocument']
        for p in ['ssm:GetDocument']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_inventory(self, *args, **kwargs):
        __protego_used['ssm']['get_inventory']=['ssm:GetInventory']
        for p in ['ssm:GetInventory']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetInventory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_inventory_schema(self, *args, **kwargs):
        __protego_used['ssm']['get_inventory_schema']=['ssm:GetInventorySchema']
        for p in ['ssm:GetInventorySchema']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetInventorySchema", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_maintenance_window(self, *args, **kwargs):
        __protego_used['ssm']['get_maintenance_window']=['ssm:GetMaintenanceWindow']
        for p in ['ssm:GetMaintenanceWindow']:
            res = {}
            for nm in ["WindowId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetMaintenanceWindow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_maintenance_window_execution(self, *args, **kwargs):
        __protego_used['ssm']['get_maintenance_window_execution']=['ssm:GetMaintenanceWindowExecution']
        for p in ['ssm:GetMaintenanceWindowExecution']:
            res = {}
            for nm in ["WindowExecutionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetMaintenanceWindowExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_maintenance_window_execution_task(self, *args, **kwargs):
        __protego_used['ssm']['get_maintenance_window_execution_task']=['ssm:GetMaintenanceWindowExecutionTask']
        for p in ['ssm:GetMaintenanceWindowExecutionTask']:
            res = {}
            for nm in ["WindowExecutionId","TaskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetMaintenanceWindowExecutionTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_maintenance_window_execution_task_invocation(self, *args, **kwargs):
        __protego_used['ssm']['get_maintenance_window_execution_task_invocation']=['ssm:GetMaintenanceWindowExecutionTaskInvocation']
        for p in ['ssm:GetMaintenanceWindowExecutionTaskInvocation']:
            res = {}
            for nm in ["InvocationId","WindowExecutionId","TaskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetMaintenanceWindowExecutionTaskInvocation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_maintenance_window_task(self, *args, **kwargs):
        __protego_used['ssm']['get_maintenance_window_task']=['ssm:GetMaintenanceWindowTask']
        for p in ['ssm:GetMaintenanceWindowTask']:
            res = {}
            for nm in ["WindowId","WindowTaskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetMaintenanceWindowTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ops_item(self, *args, **kwargs):
        __protego_used['ssm']['get_ops_item']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["OpsItemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetOpsItem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ops_summary(self, *args, **kwargs):
        __protego_used['ssm']['get_ops_summary']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetOpsSummary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_parameter(self, *args, **kwargs):
        __protego_used['ssm']['get_parameter']=['ssm:GetParameter']
        for p in ['ssm:GetParameter']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetParameter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_parameter_history(self, *args, **kwargs):
        __protego_used['ssm']['get_parameter_history']=['ssm:GetParameterHistory']
        for p in ['ssm:GetParameterHistory']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetParameterHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_parameters(self, *args, **kwargs):
        __protego_used['ssm']['get_parameters']=['ssm:GetParameters']
        for p in ['ssm:GetParameters']:
            res = {}
            for nm in ["Names"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetParameters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_parameters_by_path(self, *args, **kwargs):
        __protego_used['ssm']['get_parameters_by_path']=['ssm:GetParametersByPath']
        for p in ['ssm:GetParametersByPath']:
            res = {}
            for nm in ["Path"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetParametersByPath", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_patch_baseline(self, *args, **kwargs):
        __protego_used['ssm']['get_patch_baseline']=['ssm:GetPatchBaseline']
        for p in ['ssm:GetPatchBaseline']:
            res = {}
            for nm in ["BaselineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetPatchBaseline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_patch_baseline_for_patch_group(self, *args, **kwargs):
        __protego_used['ssm']['get_patch_baseline_for_patch_group']=['ssm:GetPatchBaselineForPatchGroup']
        for p in ['ssm:GetPatchBaselineForPatchGroup']:
            res = {}
            for nm in ["PatchGroup"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetPatchBaselineForPatchGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_service_setting(self, *args, **kwargs):
        __protego_used['ssm']['get_service_setting']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["SettingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "GetServiceSetting", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def label_parameter_version(self, *args, **kwargs):
        __protego_used['ssm']['label_parameter_version']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["Labels","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "LabelParameterVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_association_versions(self, *args, **kwargs):
        __protego_used['ssm']['list_association_versions']=['ssm:ListAssociationVersions']
        for p in ['ssm:ListAssociationVersions']:
            res = {}
            for nm in ["AssociationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListAssociationVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_associations(self, *args, **kwargs):
        __protego_used['ssm']['list_associations']=['ssm:ListAssociations']
        for p in ['ssm:ListAssociations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListAssociations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_command_invocations(self, *args, **kwargs):
        __protego_used['ssm']['list_command_invocations']=['ssm:ListCommandInvocations']
        for p in ['ssm:ListCommandInvocations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListCommandInvocations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_commands(self, *args, **kwargs):
        __protego_used['ssm']['list_commands']=['ssm:ListCommands']
        for p in ['ssm:ListCommands']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListCommands", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_compliance_items(self, *args, **kwargs):
        __protego_used['ssm']['list_compliance_items']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListComplianceItems", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_compliance_summaries(self, *args, **kwargs):
        __protego_used['ssm']['list_compliance_summaries']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListComplianceSummaries", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_document_versions(self, *args, **kwargs):
        __protego_used['ssm']['list_document_versions']=['ssm:ListDocumentVersions']
        for p in ['ssm:ListDocumentVersions']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListDocumentVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_documents(self, *args, **kwargs):
        __protego_used['ssm']['list_documents']=['ssm:ListDocuments']
        for p in ['ssm:ListDocuments']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListDocuments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_inventory_entries(self, *args, **kwargs):
        __protego_used['ssm']['list_inventory_entries']=['ssm:ListInventoryEntries']
        for p in ['ssm:ListInventoryEntries']:
            res = {}
            for nm in ["TypeName","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListInventoryEntries", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resource_compliance_summaries(self, *args, **kwargs):
        __protego_used['ssm']['list_resource_compliance_summaries']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListResourceComplianceSummaries", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resource_data_sync(self, *args, **kwargs):
        __protego_used['ssm']['list_resource_data_sync']=['ssm:ListResourceDataSync']
        for p in ['ssm:ListResourceDataSync']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListResourceDataSync", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['ssm']['list_tags_for_resource']=['ssm:ListTagsForResource']
        for p in ['ssm:ListTagsForResource']:
            res = {}
            for nm in ["ResourceId","ResourceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_document_permission(self, *args, **kwargs):
        __protego_used['ssm']['modify_document_permission']=['ssm:ModifyDocumentPermission']
        for p in ['ssm:ModifyDocumentPermission']:
            res = {}
            for nm in ["PermissionType","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ModifyDocumentPermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_compliance_items(self, *args, **kwargs):
        __protego_used['ssm']['put_compliance_items']=['ssm:PutComplianceItems']
        for p in ['ssm:PutComplianceItems']:
            res = {}
            for nm in ["ExecutionSummary","ResourceId","ResourceType","ComplianceType","Items"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "PutComplianceItems", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_inventory(self, *args, **kwargs):
        __protego_used['ssm']['put_inventory']=['ssm:PutInventory']
        for p in ['ssm:PutInventory']:
            res = {}
            for nm in ["InstanceId","Items"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "PutInventory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_parameter(self, *args, **kwargs):
        __protego_used['ssm']['put_parameter']=['ssm:PutParameter']
        for p in ['ssm:PutParameter']:
            res = {}
            for nm in ["Value","Type","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "PutParameter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_default_patch_baseline(self, *args, **kwargs):
        __protego_used['ssm']['register_default_patch_baseline']=['ssm:RegisterDefaultPatchBaseline']
        for p in ['ssm:RegisterDefaultPatchBaseline']:
            res = {}
            for nm in ["BaselineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "RegisterDefaultPatchBaseline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_patch_baseline_for_patch_group(self, *args, **kwargs):
        __protego_used['ssm']['register_patch_baseline_for_patch_group']=['ssm:RegisterPatchBaselineForPatchGroup']
        for p in ['ssm:RegisterPatchBaselineForPatchGroup']:
            res = {}
            for nm in ["PatchGroup","BaselineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "RegisterPatchBaselineForPatchGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_target_with_maintenance_window(self, *args, **kwargs):
        __protego_used['ssm']['register_target_with_maintenance_window']=['ssm:RegisterTargetWithMaintenanceWindow']
        for p in ['ssm:RegisterTargetWithMaintenanceWindow']:
            res = {}
            for nm in ["WindowId","ResourceType","Targets"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "RegisterTargetWithMaintenanceWindow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_task_with_maintenance_window(self, *args, **kwargs):
        __protego_used['ssm']['register_task_with_maintenance_window']=['ssm:RegisterTaskWithMaintenanceWindow']
        for p in ['ssm:RegisterTaskWithMaintenanceWindow']:
            res = {}
            for nm in ["Targets","WindowId","TaskType","TaskArn","MaxConcurrency","MaxErrors"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "RegisterTaskWithMaintenanceWindow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_resource(self, *args, **kwargs):
        __protego_used['ssm']['remove_tags_from_resource']=['ssm:RemoveTagsFromResource']
        for p in ['ssm:RemoveTagsFromResource']:
            res = {}
            for nm in ["ResourceId","ResourceType","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "RemoveTagsFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_service_setting(self, *args, **kwargs):
        __protego_used['ssm']['reset_service_setting']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["SettingId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ResetServiceSetting", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def resume_session(self, *args, **kwargs):
        __protego_used['ssm']['resume_session']=['ssm:ResumeSession']
        for p in ['ssm:ResumeSession']:
            res = {}
            for nm in ["SessionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "ResumeSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_automation_signal(self, *args, **kwargs):
        __protego_used['ssm']['send_automation_signal']=['ssm:SendAutomationSignal']
        for p in ['ssm:SendAutomationSignal']:
            res = {}
            for nm in ["AutomationExecutionId","SignalType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "SendAutomationSignal", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_command(self, *args, **kwargs):
        __protego_used['ssm']['send_command']=['ssm:SendCommand']
        for p in ['ssm:SendCommand']:
            res = {}
            for nm in ["DocumentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "SendCommand", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_associations_once(self, *args, **kwargs):
        __protego_used['ssm']['start_associations_once']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["AssociationIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "StartAssociationsOnce", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_automation_execution(self, *args, **kwargs):
        __protego_used['ssm']['start_automation_execution']=['ssm:StartAutomationExecution']
        for p in ['ssm:StartAutomationExecution']:
            res = {}
            for nm in ["DocumentName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "StartAutomationExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_session(self, *args, **kwargs):
        __protego_used['ssm']['start_session']=['ssm:StartSession','ssm:StartSession']
        for p in ['ssm:StartSession','ssm:StartSession']:
            res = {}
            for nm in ["Target"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "StartSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_automation_execution(self, *args, **kwargs):
        __protego_used['ssm']['stop_automation_execution']=['ssm:StopAutomationExecution']
        for p in ['ssm:StopAutomationExecution']:
            res = {}
            for nm in ["AutomationExecutionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "StopAutomationExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def terminate_session(self, *args, **kwargs):
        __protego_used['ssm']['terminate_session']=['ssm:TerminateSession']
        for p in ['ssm:TerminateSession']:
            res = {}
            for nm in ["SessionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "TerminateSession", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_association(self, *args, **kwargs):
        __protego_used['ssm']['update_association']=['ssm:UpdateAssociation']
        for p in ['ssm:UpdateAssociation']:
            res = {}
            for nm in ["AssociationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdateAssociation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_association_status(self, *args, **kwargs):
        __protego_used['ssm']['update_association_status']=['ssm:UpdateAssociationStatus']
        for p in ['ssm:UpdateAssociationStatus']:
            res = {}
            for nm in ["AssociationStatus","InstanceId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdateAssociationStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_document(self, *args, **kwargs):
        __protego_used['ssm']['update_document']=['ssm:UpdateDocument']
        for p in ['ssm:UpdateDocument']:
            res = {}
            for nm in ["Content","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdateDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_document_default_version(self, *args, **kwargs):
        __protego_used['ssm']['update_document_default_version']=['ssm:UpdateDocumentDefaultVersion']
        for p in ['ssm:UpdateDocumentDefaultVersion']:
            res = {}
            for nm in ["DocumentVersion","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdateDocumentDefaultVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_maintenance_window(self, *args, **kwargs):
        __protego_used['ssm']['update_maintenance_window']=['ssm:UpdateMaintenanceWindow']
        for p in ['ssm:UpdateMaintenanceWindow']:
            res = {}
            for nm in ["WindowId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdateMaintenanceWindow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_maintenance_window_target(self, *args, **kwargs):
        __protego_used['ssm']['update_maintenance_window_target']=['ssm:UpdateMaintenanceWindowTarget']
        for p in ['ssm:UpdateMaintenanceWindowTarget']:
            res = {}
            for nm in ["WindowId","WindowTargetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdateMaintenanceWindowTarget", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_maintenance_window_task(self, *args, **kwargs):
        __protego_used['ssm']['update_maintenance_window_task']=['ssm:UpdateMaintenanceWindowTask']
        for p in ['ssm:UpdateMaintenanceWindowTask']:
            res = {}
            for nm in ["WindowId","WindowTaskId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdateMaintenanceWindowTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_managed_instance_role(self, *args, **kwargs):
        __protego_used['ssm']['update_managed_instance_role']=['ssm:UpdateManagedInstanceRole','ssm:UpdateManagedInstanceRole']
        for p in ['ssm:UpdateManagedInstanceRole','ssm:UpdateManagedInstanceRole']:
            res = {}
            for nm in ["IamRole","InstanceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdateManagedInstanceRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_ops_item(self, *args, **kwargs):
        __protego_used['ssm']['update_ops_item']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["OpsItemId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdateOpsItem", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_patch_baseline(self, *args, **kwargs):
        __protego_used['ssm']['update_patch_baseline']=['ssm:UpdatePatchBaseline']
        for p in ['ssm:UpdatePatchBaseline']:
            res = {}
            for nm in ["BaselineId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdatePatchBaseline", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_resource_data_sync(self, *args, **kwargs):
        __protego_used['ssm']['update_resource_data_sync']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["SyncName","SyncSource","SyncType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdateResourceDataSync", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_service_setting(self, *args, **kwargs):
        __protego_used['ssm']['update_service_setting']=['ssm:*']
        for p in ['ssm:*']:
            res = {}
            for nm in ["SettingId","SettingValue"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['ssm'].append({'action': "UpdateServiceSetting", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sso:
    def __init__(self, region_name=__default_region):
        __protego_used['sso']= __protego_used.get('sso', {})
        __protego_resource_map['sso']=__protego_resource_map.get('sso', [])
        self.region = region_name
    def get_role_credentials(self, *args, **kwargs):
        __protego_used['sso']['get_role_credentials']=['sso:*']
        for p in ['sso:*']:
            res = {}
            for nm in ["accountId","roleName","accessToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sso'].append({'action': "GetRoleCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_account_roles(self, *args, **kwargs):
        __protego_used['sso']['list_account_roles']=['sso:*']
        for p in ['sso:*']:
            res = {}
            for nm in ["accountId","accessToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sso'].append({'action': "ListAccountRoles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_accounts(self, *args, **kwargs):
        __protego_used['sso']['list_accounts']=['sso:*']
        for p in ['sso:*']:
            res = {}
            for nm in ["accessToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sso'].append({'action': "ListAccounts", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def logout(self, *args, **kwargs):
        __protego_used['sso']['logout']=['sso:*']
        for p in ['sso:*']:
            res = {}
            for nm in ["accessToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sso'].append({'action': "Logout", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sso_oidc:
    def __init__(self, region_name=__default_region):
        __protego_used['sso-oidc']= __protego_used.get('sso-oidc', {})
        __protego_resource_map['sso-oidc']=__protego_resource_map.get('sso-oidc', [])
        self.region = region_name
    def create_token(self, *args, **kwargs):
        __protego_used['sso-oidc']['create_token']=['sso-oidc:*']
        for p in ['sso-oidc:*']:
            res = {}
            for nm in ["clientId","deviceCode","clientSecret","grantType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sso-oidc'].append({'action': "CreateToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_client(self, *args, **kwargs):
        __protego_used['sso-oidc']['register_client']=['sso-oidc:*']
        for p in ['sso-oidc:*']:
            res = {}
            for nm in ["clientName","clientType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sso-oidc'].append({'action': "RegisterClient", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_device_authorization(self, *args, **kwargs):
        __protego_used['sso-oidc']['start_device_authorization']=['sso-oidc:*']
        for p in ['sso-oidc:*']:
            res = {}
            for nm in ["clientId","startUrl","clientSecret"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sso-oidc'].append({'action': "StartDeviceAuthorization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class stepfunctions:
    def __init__(self, region_name=__default_region):
        __protego_used['stepfunctions']= __protego_used.get('stepfunctions', {})
        __protego_resource_map['stepfunctions']=__protego_resource_map.get('stepfunctions', [])
        self.region = region_name
    def create_activity(self, *args, **kwargs):
        __protego_used['stepfunctions']['create_activity']=['states:CreateActivity']
        for p in ['states:CreateActivity']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "CreateActivity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_state_machine(self, *args, **kwargs):
        __protego_used['stepfunctions']['create_state_machine']=['states:CreateStateMachine']
        for p in ['states:CreateStateMachine']:
            res = {}
            for nm in ["name","roleArn","definition"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "CreateStateMachine", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_activity(self, *args, **kwargs):
        __protego_used['stepfunctions']['delete_activity']=['states:DeleteActivity']
        for p in ['states:DeleteActivity']:
            res = {}
            for nm in ["activityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "DeleteActivity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_state_machine(self, *args, **kwargs):
        __protego_used['stepfunctions']['delete_state_machine']=['states:DeleteStateMachine']
        for p in ['states:DeleteStateMachine']:
            res = {}
            for nm in ["stateMachineArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "DeleteStateMachine", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_activity(self, *args, **kwargs):
        __protego_used['stepfunctions']['describe_activity']=['states:DescribeActivity']
        for p in ['states:DescribeActivity']:
            res = {}
            for nm in ["activityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "DescribeActivity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_execution(self, *args, **kwargs):
        __protego_used['stepfunctions']['describe_execution']=['states:DescribeExecution']
        for p in ['states:DescribeExecution']:
            res = {}
            for nm in ["executionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "DescribeExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_state_machine(self, *args, **kwargs):
        __protego_used['stepfunctions']['describe_state_machine']=['states:DescribeStateMachine']
        for p in ['states:DescribeStateMachine']:
            res = {}
            for nm in ["stateMachineArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "DescribeStateMachine", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_state_machine_for_execution(self, *args, **kwargs):
        __protego_used['stepfunctions']['describe_state_machine_for_execution']=['states:DescribeStateMachineForExecution']
        for p in ['states:DescribeStateMachineForExecution']:
            res = {}
            for nm in ["executionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "DescribeStateMachineForExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_activity_task(self, *args, **kwargs):
        __protego_used['stepfunctions']['get_activity_task']=['states:GetActivityTask']
        for p in ['states:GetActivityTask']:
            res = {}
            for nm in ["activityArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "GetActivityTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_execution_history(self, *args, **kwargs):
        __protego_used['stepfunctions']['get_execution_history']=['states:GetExecutionHistory']
        for p in ['states:GetExecutionHistory']:
            res = {}
            for nm in ["executionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "GetExecutionHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_activities(self, *args, **kwargs):
        __protego_used['stepfunctions']['list_activities']=['states:ListActivities']
        for p in ['states:ListActivities']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "ListActivities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_executions(self, *args, **kwargs):
        __protego_used['stepfunctions']['list_executions']=['states:ListExecutions']
        for p in ['states:ListExecutions']:
            res = {}
            for nm in ["stateMachineArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "ListExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_state_machines(self, *args, **kwargs):
        __protego_used['stepfunctions']['list_state_machines']=['states:ListStateMachines']
        for p in ['states:ListStateMachines']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "ListStateMachines", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['stepfunctions']['list_tags_for_resource']=['states:ListTagsForResource']
        for p in ['states:ListTagsForResource']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_task_failure(self, *args, **kwargs):
        __protego_used['stepfunctions']['send_task_failure']=['states:SendTaskFailure']
        for p in ['states:SendTaskFailure']:
            res = {}
            for nm in ["taskToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "SendTaskFailure", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_task_heartbeat(self, *args, **kwargs):
        __protego_used['stepfunctions']['send_task_heartbeat']=['states:SendTaskHeartbeat']
        for p in ['states:SendTaskHeartbeat']:
            res = {}
            for nm in ["taskToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "SendTaskHeartbeat", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def send_task_success(self, *args, **kwargs):
        __protego_used['stepfunctions']['send_task_success']=['states:SendTaskSuccess']
        for p in ['states:SendTaskSuccess']:
            res = {}
            for nm in ["output","taskToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "SendTaskSuccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_execution(self, *args, **kwargs):
        __protego_used['stepfunctions']['start_execution']=['states:StartExecution']
        for p in ['states:StartExecution']:
            res = {}
            for nm in ["stateMachineArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "StartExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_execution(self, *args, **kwargs):
        __protego_used['stepfunctions']['stop_execution']=['states:StopExecution']
        for p in ['states:StopExecution']:
            res = {}
            for nm in ["executionArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "StopExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['stepfunctions']['tag_resource']=['states:TagResource']
        for p in ['states:TagResource']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['stepfunctions']['untag_resource']=['states:UntagResource']
        for p in ['states:UntagResource']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_state_machine(self, *args, **kwargs):
        __protego_used['stepfunctions']['update_state_machine']=['states:UpdateStateMachine']
        for p in ['states:UpdateStateMachine']:
            res = {}
            for nm in ["stateMachineArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['stepfunctions'].append({'action': "UpdateStateMachine", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class storagegateway:
    def __init__(self, region_name=__default_region):
        __protego_used['storagegateway']= __protego_used.get('storagegateway', {})
        __protego_resource_map['storagegateway']=__protego_resource_map.get('storagegateway', [])
        self.region = region_name
    def activate_gateway(self, *args, **kwargs):
        __protego_used['storagegateway']['activate_gateway']=['storagegateway:ActivateGateway']
        for p in ['storagegateway:ActivateGateway']:
            res = {}
            for nm in ["GatewayName","GatewayRegion","GatewayTimezone","ActivationKey"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "ActivateGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_cache(self, *args, **kwargs):
        __protego_used['storagegateway']['add_cache']=['storagegateway:AddCache']
        for p in ['storagegateway:AddCache']:
            res = {}
            for nm in ["DiskIds","GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "AddCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_tags_to_resource(self, *args, **kwargs):
        __protego_used['storagegateway']['add_tags_to_resource']=['storagegateway:AddTagsToResource']
        for p in ['storagegateway:AddTagsToResource']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "AddTagsToResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_upload_buffer(self, *args, **kwargs):
        __protego_used['storagegateway']['add_upload_buffer']=['storagegateway:AddUploadBuffer']
        for p in ['storagegateway:AddUploadBuffer']:
            res = {}
            for nm in ["DiskIds","GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "AddUploadBuffer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_working_storage(self, *args, **kwargs):
        __protego_used['storagegateway']['add_working_storage']=['storagegateway:AddWorkingStorage']
        for p in ['storagegateway:AddWorkingStorage']:
            res = {}
            for nm in ["DiskIds","GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "AddWorkingStorage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def assign_tape_pool(self, *args, **kwargs):
        __protego_used['storagegateway']['assign_tape_pool']=['storagegateway:AssignTapePool']
        for p in ['storagegateway:AssignTapePool']:
            res = {}
            for nm in ["TapeARN","PoolId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "AssignTapePool", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def attach_volume(self, *args, **kwargs):
        __protego_used['storagegateway']['attach_volume']=['storagegateway:AttachVolume','storagegateway:AttachVolume']
        for p in ['storagegateway:AttachVolume','storagegateway:AttachVolume']:
            res = {}
            for nm in ["VolumeARN","GatewayARN","NetworkInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "AttachVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_archival(self, *args, **kwargs):
        __protego_used['storagegateway']['cancel_archival']=['storagegateway:CancelArchival','storagegateway:CancelArchival']
        for p in ['storagegateway:CancelArchival','storagegateway:CancelArchival']:
            res = {}
            for nm in ["TapeARN","GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "CancelArchival", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def cancel_retrieval(self, *args, **kwargs):
        __protego_used['storagegateway']['cancel_retrieval']=['storagegateway:CancelRetrieval','storagegateway:CancelRetrieval']
        for p in ['storagegateway:CancelRetrieval','storagegateway:CancelRetrieval']:
            res = {}
            for nm in ["TapeARN","GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "CancelRetrieval", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_cached_iscsi_volume(self, *args, **kwargs):
        __protego_used['storagegateway']['create_cached_iscsi_volume']=['storagegateway:CreateCachediSCSIVolume','storagegateway:CreateCachediSCSIVolume']
        for p in ['storagegateway:CreateCachediSCSIVolume','storagegateway:CreateCachediSCSIVolume']:
            res = {}
            for nm in ["ClientToken","TargetName","VolumeSizeInBytes","GatewayARN","NetworkInterfaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "CreateCachediSCSIVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_nfs_file_share(self, *args, **kwargs):
        __protego_used['storagegateway']['create_nfs_file_share']=['storagegateway:CreateNFSFileShare']
        for p in ['storagegateway:CreateNFSFileShare']:
            res = {}
            for nm in ["LocationARN","GatewayARN","ClientToken","Role"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "CreateNFSFileShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_smb_file_share(self, *args, **kwargs):
        __protego_used['storagegateway']['create_smb_file_share']=['storagegateway:CreateSMBFileShare']
        for p in ['storagegateway:CreateSMBFileShare']:
            res = {}
            for nm in ["LocationARN","GatewayARN","ClientToken","Role"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "CreateSMBFileShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_snapshot(self, *args, **kwargs):
        __protego_used['storagegateway']['create_snapshot']=['storagegateway:CreateSnapshot']
        for p in ['storagegateway:CreateSnapshot']:
            res = {}
            for nm in ["VolumeARN","SnapshotDescription"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "CreateSnapshot", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_snapshot_from_volume_recovery_point(self, *args, **kwargs):
        __protego_used['storagegateway']['create_snapshot_from_volume_recovery_point']=['storagegateway:CreateSnapshotFromVolumeRecoveryPoint']
        for p in ['storagegateway:CreateSnapshotFromVolumeRecoveryPoint']:
            res = {}
            for nm in ["VolumeARN","SnapshotDescription"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "CreateSnapshotFromVolumeRecoveryPoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_stored_iscsi_volume(self, *args, **kwargs):
        __protego_used['storagegateway']['create_stored_iscsi_volume']=['storagegateway:CreateStorediSCSIVolume']
        for p in ['storagegateway:CreateStorediSCSIVolume']:
            res = {}
            for nm in ["DiskId","TargetName","GatewayARN","NetworkInterfaceId","PreserveExistingData"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "CreateStorediSCSIVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_tape_with_barcode(self, *args, **kwargs):
        __protego_used['storagegateway']['create_tape_with_barcode']=['storagegateway:CreateTapeWithBarcode']
        for p in ['storagegateway:CreateTapeWithBarcode']:
            res = {}
            for nm in ["GatewayARN","TapeSizeInBytes","TapeBarcode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "CreateTapeWithBarcode", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_tapes(self, *args, **kwargs):
        __protego_used['storagegateway']['create_tapes']=['storagegateway:CreateTapes']
        for p in ['storagegateway:CreateTapes']:
            res = {}
            for nm in ["TapeBarcodePrefix","ClientToken","GatewayARN","NumTapesToCreate","TapeSizeInBytes"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "CreateTapes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_bandwidth_rate_limit(self, *args, **kwargs):
        __protego_used['storagegateway']['delete_bandwidth_rate_limit']=['storagegateway:DeleteBandwidthRateLimit']
        for p in ['storagegateway:DeleteBandwidthRateLimit']:
            res = {}
            for nm in ["BandwidthType","GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DeleteBandwidthRateLimit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_chap_credentials(self, *args, **kwargs):
        __protego_used['storagegateway']['delete_chap_credentials']=['storagegateway:DeleteChapCredentials']
        for p in ['storagegateway:DeleteChapCredentials']:
            res = {}
            for nm in ["InitiatorName","TargetARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DeleteChapCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_file_share(self, *args, **kwargs):
        __protego_used['storagegateway']['delete_file_share']=['storagegateway:DeleteFileShare']
        for p in ['storagegateway:DeleteFileShare']:
            res = {}
            for nm in ["FileShareARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DeleteFileShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_gateway(self, *args, **kwargs):
        __protego_used['storagegateway']['delete_gateway']=['storagegateway:DeleteGateway']
        for p in ['storagegateway:DeleteGateway']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DeleteGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_snapshot_schedule(self, *args, **kwargs):
        __protego_used['storagegateway']['delete_snapshot_schedule']=['storagegateway:DeleteSnapshotSchedule']
        for p in ['storagegateway:DeleteSnapshotSchedule']:
            res = {}
            for nm in ["VolumeARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DeleteSnapshotSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tape(self, *args, **kwargs):
        __protego_used['storagegateway']['delete_tape']=['storagegateway:DeleteTape','storagegateway:DeleteTape']
        for p in ['storagegateway:DeleteTape','storagegateway:DeleteTape']:
            res = {}
            for nm in ["TapeARN","GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DeleteTape", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tape_archive(self, *args, **kwargs):
        __protego_used['storagegateway']['delete_tape_archive']=['storagegateway:DeleteTapeArchive']
        for p in ['storagegateway:DeleteTapeArchive']:
            res = {}
            for nm in ["TapeARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DeleteTapeArchive", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_volume(self, *args, **kwargs):
        __protego_used['storagegateway']['delete_volume']=['storagegateway:DeleteVolume']
        for p in ['storagegateway:DeleteVolume']:
            res = {}
            for nm in ["VolumeARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DeleteVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_availability_monitor_test(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_availability_monitor_test']=['storagegateway:*']
        for p in ['storagegateway:*']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeAvailabilityMonitorTest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_bandwidth_rate_limit(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_bandwidth_rate_limit']=['storagegateway:DescribeBandwidthRateLimit']
        for p in ['storagegateway:DescribeBandwidthRateLimit']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeBandwidthRateLimit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cache(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_cache']=['storagegateway:DescribeCache']
        for p in ['storagegateway:DescribeCache']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cached_iscsi_volumes(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_cached_iscsi_volumes']=['storagegateway:DescribeCachediSCSIVolumes']
        for p in ['storagegateway:DescribeCachediSCSIVolumes']:
            res = {}
            for nm in ["VolumeARNs"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeCachediSCSIVolumes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_chap_credentials(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_chap_credentials']=['storagegateway:DescribeChapCredentials']
        for p in ['storagegateway:DescribeChapCredentials']:
            res = {}
            for nm in ["TargetARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeChapCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_gateway_information(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_gateway_information']=['storagegateway:DescribeGatewayInformation']
        for p in ['storagegateway:DescribeGatewayInformation']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeGatewayInformation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_maintenance_start_time(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_maintenance_start_time']=['storagegateway:DescribeMaintenanceStartTime']
        for p in ['storagegateway:DescribeMaintenanceStartTime']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeMaintenanceStartTime", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_nfs_file_shares(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_nfs_file_shares']=['storagegateway:DescribeNFSFileShares']
        for p in ['storagegateway:DescribeNFSFileShares']:
            res = {}
            for nm in ["FileShareARNList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeNFSFileShares", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_smb_file_shares(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_smb_file_shares']=['storagegateway:DescribeSMBFileShares']
        for p in ['storagegateway:DescribeSMBFileShares']:
            res = {}
            for nm in ["FileShareARNList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeSMBFileShares", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_smb_settings(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_smb_settings']=['storagegateway:DescribeSMBSettings']
        for p in ['storagegateway:DescribeSMBSettings']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeSMBSettings", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_snapshot_schedule(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_snapshot_schedule']=['storagegateway:DescribeSnapshotSchedule']
        for p in ['storagegateway:DescribeSnapshotSchedule']:
            res = {}
            for nm in ["VolumeARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeSnapshotSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_stored_iscsi_volumes(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_stored_iscsi_volumes']=['storagegateway:DescribeStorediSCSIVolumes']
        for p in ['storagegateway:DescribeStorediSCSIVolumes']:
            res = {}
            for nm in ["VolumeARNs"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeStorediSCSIVolumes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tape_archives(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_tape_archives']=['storagegateway:DescribeTapeArchives']
        for p in ['storagegateway:DescribeTapeArchives']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeTapeArchives", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tape_recovery_points(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_tape_recovery_points']=['storagegateway:DescribeTapeRecoveryPoints']
        for p in ['storagegateway:DescribeTapeRecoveryPoints']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeTapeRecoveryPoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tapes(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_tapes']=['storagegateway:DescribeTapes']
        for p in ['storagegateway:DescribeTapes']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeTapes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_upload_buffer(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_upload_buffer']=['storagegateway:DescribeUploadBuffer']
        for p in ['storagegateway:DescribeUploadBuffer']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeUploadBuffer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_vtl_devices(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_vtl_devices']=['storagegateway:DescribeVTLDevices']
        for p in ['storagegateway:DescribeVTLDevices']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeVTLDevices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_working_storage(self, *args, **kwargs):
        __protego_used['storagegateway']['describe_working_storage']=['storagegateway:DescribeWorkingStorage']
        for p in ['storagegateway:DescribeWorkingStorage']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DescribeWorkingStorage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detach_volume(self, *args, **kwargs):
        __protego_used['storagegateway']['detach_volume']=['storagegateway:DetachVolume']
        for p in ['storagegateway:DetachVolume']:
            res = {}
            for nm in ["VolumeARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DetachVolume", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disable_gateway(self, *args, **kwargs):
        __protego_used['storagegateway']['disable_gateway']=['storagegateway:DisableGateway']
        for p in ['storagegateway:DisableGateway']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "DisableGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def join_domain(self, *args, **kwargs):
        __protego_used['storagegateway']['join_domain']=['storagegateway:JoinDomain']
        for p in ['storagegateway:JoinDomain']:
            res = {}
            for nm in ["GatewayARN","DomainName","UserName","Password"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "JoinDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_file_shares(self, *args, **kwargs):
        __protego_used['storagegateway']['list_file_shares']=['storagegateway:ListFileShares']
        for p in ['storagegateway:ListFileShares']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "ListFileShares", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_gateways(self, *args, **kwargs):
        __protego_used['storagegateway']['list_gateways']=['storagegateway:ListGateways']
        for p in ['storagegateway:ListGateways']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "ListGateways", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_local_disks(self, *args, **kwargs):
        __protego_used['storagegateway']['list_local_disks']=['storagegateway:ListLocalDisks']
        for p in ['storagegateway:ListLocalDisks']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "ListLocalDisks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['storagegateway']['list_tags_for_resource']=['storagegateway:ListTagsForResource']
        for p in ['storagegateway:ListTagsForResource']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tapes(self, *args, **kwargs):
        __protego_used['storagegateway']['list_tapes']=['storagegateway:ListTapes']
        for p in ['storagegateway:ListTapes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "ListTapes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_volume_initiators(self, *args, **kwargs):
        __protego_used['storagegateway']['list_volume_initiators']=['storagegateway:ListVolumeInitiators']
        for p in ['storagegateway:ListVolumeInitiators']:
            res = {}
            for nm in ["VolumeARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "ListVolumeInitiators", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_volume_recovery_points(self, *args, **kwargs):
        __protego_used['storagegateway']['list_volume_recovery_points']=['storagegateway:ListVolumeRecoveryPoints']
        for p in ['storagegateway:ListVolumeRecoveryPoints']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "ListVolumeRecoveryPoints", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_volumes(self, *args, **kwargs):
        __protego_used['storagegateway']['list_volumes']=['storagegateway:ListVolumes']
        for p in ['storagegateway:ListVolumes']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "ListVolumes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def notify_when_uploaded(self, *args, **kwargs):
        __protego_used['storagegateway']['notify_when_uploaded']=['storagegateway:NotifyWhenUploaded']
        for p in ['storagegateway:NotifyWhenUploaded']:
            res = {}
            for nm in ["FileShareARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "NotifyWhenUploaded", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def refresh_cache(self, *args, **kwargs):
        __protego_used['storagegateway']['refresh_cache']=['storagegateway:RefreshCache']
        for p in ['storagegateway:RefreshCache']:
            res = {}
            for nm in ["FileShareARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "RefreshCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_tags_from_resource(self, *args, **kwargs):
        __protego_used['storagegateway']['remove_tags_from_resource']=['storagegateway:RemoveTagsFromResource']
        for p in ['storagegateway:RemoveTagsFromResource']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "RemoveTagsFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_cache(self, *args, **kwargs):
        __protego_used['storagegateway']['reset_cache']=['storagegateway:ResetCache']
        for p in ['storagegateway:ResetCache']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "ResetCache", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def retrieve_tape_archive(self, *args, **kwargs):
        __protego_used['storagegateway']['retrieve_tape_archive']=['storagegateway:RetrieveTapeArchive','storagegateway:RetrieveTapeArchive']
        for p in ['storagegateway:RetrieveTapeArchive','storagegateway:RetrieveTapeArchive']:
            res = {}
            for nm in ["TapeARN","GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "RetrieveTapeArchive", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def retrieve_tape_recovery_point(self, *args, **kwargs):
        __protego_used['storagegateway']['retrieve_tape_recovery_point']=['storagegateway:RetrieveTapeRecoveryPoint','storagegateway:RetrieveTapeRecoveryPoint']
        for p in ['storagegateway:RetrieveTapeRecoveryPoint','storagegateway:RetrieveTapeRecoveryPoint']:
            res = {}
            for nm in ["TapeARN","GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "RetrieveTapeRecoveryPoint", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_local_console_password(self, *args, **kwargs):
        __protego_used['storagegateway']['set_local_console_password']=['storagegateway:SetLocalConsolePassword']
        for p in ['storagegateway:SetLocalConsolePassword']:
            res = {}
            for nm in ["LocalConsolePassword","GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "SetLocalConsolePassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def set_smb_guest_password(self, *args, **kwargs):
        __protego_used['storagegateway']['set_smb_guest_password']=['storagegateway:SetSMBGuestPassword']
        for p in ['storagegateway:SetSMBGuestPassword']:
            res = {}
            for nm in ["GatewayARN","Password"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "SetSMBGuestPassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def shutdown_gateway(self, *args, **kwargs):
        __protego_used['storagegateway']['shutdown_gateway']=['storagegateway:ShutdownGateway']
        for p in ['storagegateway:ShutdownGateway']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "ShutdownGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_availability_monitor_test(self, *args, **kwargs):
        __protego_used['storagegateway']['start_availability_monitor_test']=['storagegateway:*']
        for p in ['storagegateway:*']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "StartAvailabilityMonitorTest", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_gateway(self, *args, **kwargs):
        __protego_used['storagegateway']['start_gateway']=['storagegateway:StartGateway']
        for p in ['storagegateway:StartGateway']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "StartGateway", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_bandwidth_rate_limit(self, *args, **kwargs):
        __protego_used['storagegateway']['update_bandwidth_rate_limit']=['storagegateway:UpdateBandwidthRateLimit']
        for p in ['storagegateway:UpdateBandwidthRateLimit']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "UpdateBandwidthRateLimit", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_chap_credentials(self, *args, **kwargs):
        __protego_used['storagegateway']['update_chap_credentials']=['storagegateway:UpdateChapCredentials']
        for p in ['storagegateway:UpdateChapCredentials']:
            res = {}
            for nm in ["InitiatorName","TargetARN","SecretToAuthenticateInitiator"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "UpdateChapCredentials", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_gateway_information(self, *args, **kwargs):
        __protego_used['storagegateway']['update_gateway_information']=['storagegateway:UpdateGatewayInformation']
        for p in ['storagegateway:UpdateGatewayInformation']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "UpdateGatewayInformation", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_gateway_software_now(self, *args, **kwargs):
        __protego_used['storagegateway']['update_gateway_software_now']=['storagegateway:UpdateGatewaySoftwareNow']
        for p in ['storagegateway:UpdateGatewaySoftwareNow']:
            res = {}
            for nm in ["GatewayARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "UpdateGatewaySoftwareNow", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_maintenance_start_time(self, *args, **kwargs):
        __protego_used['storagegateway']['update_maintenance_start_time']=['storagegateway:UpdateMaintenanceStartTime']
        for p in ['storagegateway:UpdateMaintenanceStartTime']:
            res = {}
            for nm in ["HourOfDay","GatewayARN","MinuteOfHour"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "UpdateMaintenanceStartTime", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_nfs_file_share(self, *args, **kwargs):
        __protego_used['storagegateway']['update_nfs_file_share']=['storagegateway:UpdateNFSFileShare']
        for p in ['storagegateway:UpdateNFSFileShare']:
            res = {}
            for nm in ["FileShareARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "UpdateNFSFileShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_smb_file_share(self, *args, **kwargs):
        __protego_used['storagegateway']['update_smb_file_share']=['storagegateway:UpdateSMBFileShare']
        for p in ['storagegateway:UpdateSMBFileShare']:
            res = {}
            for nm in ["FileShareARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "UpdateSMBFileShare", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_smb_security_strategy(self, *args, **kwargs):
        __protego_used['storagegateway']['update_smb_security_strategy']=['storagegateway:UpdateSMBSecurityStrategy']
        for p in ['storagegateway:UpdateSMBSecurityStrategy']:
            res = {}
            for nm in ["GatewayARN","SMBSecurityStrategy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "UpdateSMBSecurityStrategy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_snapshot_schedule(self, *args, **kwargs):
        __protego_used['storagegateway']['update_snapshot_schedule']=['storagegateway:UpdateSnapshotSchedule']
        for p in ['storagegateway:UpdateSnapshotSchedule']:
            res = {}
            for nm in ["VolumeARN","StartAt","RecurrenceInHours"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "UpdateSnapshotSchedule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_vtl_device_type(self, *args, **kwargs):
        __protego_used['storagegateway']['update_vtl_device_type']=['storagegateway:UpdateVTLDeviceType']
        for p in ['storagegateway:UpdateVTLDeviceType']:
            res = {}
            for nm in ["VTLDeviceARN","DeviceType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['storagegateway'].append({'action': "UpdateVTLDeviceType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class sts:
    def __init__(self, region_name=__default_region):
        __protego_used['sts']= __protego_used.get('sts', {})
        __protego_resource_map['sts']=__protego_resource_map.get('sts', [])
        self.region = region_name
    def assume_role(self, *args, **kwargs):
        __protego_used['sts']['assume_role']=['sts:AssumeRole']
        for p in ['sts:AssumeRole']:
            res = {}
            for nm in ["RoleArn","RoleSessionName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sts'].append({'action': "AssumeRole", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def assume_role_with_saml(self, *args, **kwargs):
        __protego_used['sts']['assume_role_with_saml']=['sts:AssumeRoleWithSAML']
        for p in ['sts:AssumeRoleWithSAML']:
            res = {}
            for nm in ["RoleArn","SAMLAssertion","PrincipalArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sts'].append({'action': "AssumeRoleWithSAML", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def assume_role_with_web_identity(self, *args, **kwargs):
        __protego_used['sts']['assume_role_with_web_identity']=['sts:AssumeRoleWithWebIdentity']
        for p in ['sts:AssumeRoleWithWebIdentity']:
            res = {}
            for nm in ["RoleArn","RoleSessionName","WebIdentityToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sts'].append({'action': "AssumeRoleWithWebIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def decode_authorization_message(self, *args, **kwargs):
        __protego_used['sts']['decode_authorization_message']=['sts:DecodeAuthorizationMessage']
        for p in ['sts:DecodeAuthorizationMessage']:
            res = {}
            for nm in ["EncodedMessage"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sts'].append({'action': "DecodeAuthorizationMessage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_access_key_info(self, *args, **kwargs):
        __protego_used['sts']['get_access_key_info']=['sts:*']
        for p in ['sts:*']:
            res = {}
            for nm in ["AccessKeyId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sts'].append({'action': "GetAccessKeyInfo", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_caller_identity(self, *args, **kwargs):
        __protego_used['sts']['get_caller_identity']=['sts:GetCallerIdentity']
        for p in ['sts:GetCallerIdentity']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sts'].append({'action': "GetCallerIdentity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_federation_token(self, *args, **kwargs):
        __protego_used['sts']['get_federation_token']=['sts:GetFederationToken']
        for p in ['sts:GetFederationToken']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sts'].append({'action': "GetFederationToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_session_token(self, *args, **kwargs):
        __protego_used['sts']['get_session_token']=['sts:GetSessionToken']
        for p in ['sts:GetSessionToken']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['sts'].append({'action': "GetSessionToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class support:
    def __init__(self, region_name=__default_region):
        __protego_used['support']= __protego_used.get('support', {})
        __protego_resource_map['support']=__protego_resource_map.get('support', [])
        self.region = region_name
    def add_attachments_to_set(self, *args, **kwargs):
        __protego_used['support']['add_attachments_to_set']=['support:AddAttachmentsToSet']
        for p in ['support:AddAttachmentsToSet']:
            res = {}
            for nm in ["attachments"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "AddAttachmentsToSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_communication_to_case(self, *args, **kwargs):
        __protego_used['support']['add_communication_to_case']=['support:AddCommunicationToCase']
        for p in ['support:AddCommunicationToCase']:
            res = {}
            for nm in ["communicationBody"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "AddCommunicationToCase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_case(self, *args, **kwargs):
        __protego_used['support']['create_case']=['support:CreateCase']
        for p in ['support:CreateCase']:
            res = {}
            for nm in ["communicationBody","subject"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "CreateCase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_attachment(self, *args, **kwargs):
        __protego_used['support']['describe_attachment']=['support:DescribeAttachment']
        for p in ['support:DescribeAttachment']:
            res = {}
            for nm in ["attachmentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "DescribeAttachment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_cases(self, *args, **kwargs):
        __protego_used['support']['describe_cases']=['support:DescribeCases']
        for p in ['support:DescribeCases']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "DescribeCases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_communications(self, *args, **kwargs):
        __protego_used['support']['describe_communications']=['support:DescribeCommunications']
        for p in ['support:DescribeCommunications']:
            res = {}
            for nm in ["caseId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "DescribeCommunications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_services(self, *args, **kwargs):
        __protego_used['support']['describe_services']=['support:DescribeServices']
        for p in ['support:DescribeServices']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "DescribeServices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_severity_levels(self, *args, **kwargs):
        __protego_used['support']['describe_severity_levels']=['support:DescribeSeverityLevels']
        for p in ['support:DescribeSeverityLevels']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "DescribeSeverityLevels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_trusted_advisor_check_refresh_statuses(self, *args, **kwargs):
        __protego_used['support']['describe_trusted_advisor_check_refresh_statuses']=['support:DescribeTrustedAdvisorCheckRefreshStatuses']
        for p in ['support:DescribeTrustedAdvisorCheckRefreshStatuses']:
            res = {}
            for nm in ["checkIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "DescribeTrustedAdvisorCheckRefreshStatuses", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_trusted_advisor_check_result(self, *args, **kwargs):
        __protego_used['support']['describe_trusted_advisor_check_result']=['support:DescribeTrustedAdvisorCheckResult']
        for p in ['support:DescribeTrustedAdvisorCheckResult']:
            res = {}
            for nm in ["checkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "DescribeTrustedAdvisorCheckResult", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_trusted_advisor_check_summaries(self, *args, **kwargs):
        __protego_used['support']['describe_trusted_advisor_check_summaries']=['support:DescribeTrustedAdvisorCheckSummaries']
        for p in ['support:DescribeTrustedAdvisorCheckSummaries']:
            res = {}
            for nm in ["checkIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "DescribeTrustedAdvisorCheckSummaries", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_trusted_advisor_checks(self, *args, **kwargs):
        __protego_used['support']['describe_trusted_advisor_checks']=['support:DescribeTrustedAdvisorChecks']
        for p in ['support:DescribeTrustedAdvisorChecks']:
            res = {}
            for nm in ["language"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "DescribeTrustedAdvisorChecks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def refresh_trusted_advisor_check(self, *args, **kwargs):
        __protego_used['support']['refresh_trusted_advisor_check']=['support:RefreshTrustedAdvisorCheck']
        for p in ['support:RefreshTrustedAdvisorCheck']:
            res = {}
            for nm in ["checkId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "RefreshTrustedAdvisorCheck", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def resolve_case(self, *args, **kwargs):
        __protego_used['support']['resolve_case']=['support:ResolveCase']
        for p in ['support:ResolveCase']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['support'].append({'action': "ResolveCase", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class swf:
    def __init__(self, region_name=__default_region):
        __protego_used['swf']= __protego_used.get('swf', {})
        __protego_resource_map['swf']=__protego_resource_map.get('swf', [])
        self.region = region_name
    def count_closed_workflow_executions(self, *args, **kwargs):
        __protego_used['swf']['count_closed_workflow_executions']=['swf:CountClosedWorkflowExecutions']
        for p in ['swf:CountClosedWorkflowExecutions']:
            res = {}
            for nm in ["domain"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "CountClosedWorkflowExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def count_open_workflow_executions(self, *args, **kwargs):
        __protego_used['swf']['count_open_workflow_executions']=['swf:CountOpenWorkflowExecutions']
        for p in ['swf:CountOpenWorkflowExecutions']:
            res = {}
            for nm in ["domain","startTimeFilter"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "CountOpenWorkflowExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def count_pending_activity_tasks(self, *args, **kwargs):
        __protego_used['swf']['count_pending_activity_tasks']=['swf:CountPendingActivityTasks']
        for p in ['swf:CountPendingActivityTasks']:
            res = {}
            for nm in ["domain","taskList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "CountPendingActivityTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def count_pending_decision_tasks(self, *args, **kwargs):
        __protego_used['swf']['count_pending_decision_tasks']=['swf:CountPendingDecisionTasks']
        for p in ['swf:CountPendingDecisionTasks']:
            res = {}
            for nm in ["domain","taskList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "CountPendingDecisionTasks", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deprecate_activity_type(self, *args, **kwargs):
        __protego_used['swf']['deprecate_activity_type']=['swf:DeprecateActivityType']
        for p in ['swf:DeprecateActivityType']:
            res = {}
            for nm in ["domain","activityType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "DeprecateActivityType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deprecate_domain(self, *args, **kwargs):
        __protego_used['swf']['deprecate_domain']=['swf:DeprecateDomain']
        for p in ['swf:DeprecateDomain']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "DeprecateDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deprecate_workflow_type(self, *args, **kwargs):
        __protego_used['swf']['deprecate_workflow_type']=['swf:DeprecateWorkflowType']
        for p in ['swf:DeprecateWorkflowType']:
            res = {}
            for nm in ["domain","workflowType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "DeprecateWorkflowType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_activity_type(self, *args, **kwargs):
        __protego_used['swf']['describe_activity_type']=['swf:DescribeActivityType']
        for p in ['swf:DescribeActivityType']:
            res = {}
            for nm in ["domain","activityType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "DescribeActivityType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_domain(self, *args, **kwargs):
        __protego_used['swf']['describe_domain']=['swf:DescribeDomain']
        for p in ['swf:DescribeDomain']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "DescribeDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_workflow_execution(self, *args, **kwargs):
        __protego_used['swf']['describe_workflow_execution']=['swf:DescribeWorkflowExecution']
        for p in ['swf:DescribeWorkflowExecution']:
            res = {}
            for nm in ["domain","execution"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "DescribeWorkflowExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_workflow_type(self, *args, **kwargs):
        __protego_used['swf']['describe_workflow_type']=['swf:DescribeWorkflowType']
        for p in ['swf:DescribeWorkflowType']:
            res = {}
            for nm in ["domain","workflowType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "DescribeWorkflowType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_workflow_execution_history(self, *args, **kwargs):
        __protego_used['swf']['get_workflow_execution_history']=['swf:GetWorkflowExecutionHistory']
        for p in ['swf:GetWorkflowExecutionHistory']:
            res = {}
            for nm in ["domain","execution"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "GetWorkflowExecutionHistory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_activity_types(self, *args, **kwargs):
        __protego_used['swf']['list_activity_types']=['swf:ListActivityTypes']
        for p in ['swf:ListActivityTypes']:
            res = {}
            for nm in ["domain","registrationStatus"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "ListActivityTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_closed_workflow_executions(self, *args, **kwargs):
        __protego_used['swf']['list_closed_workflow_executions']=['swf:ListClosedWorkflowExecutions']
        for p in ['swf:ListClosedWorkflowExecutions']:
            res = {}
            for nm in ["domain"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "ListClosedWorkflowExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_domains(self, *args, **kwargs):
        __protego_used['swf']['list_domains']=['swf:ListDomains']
        for p in ['swf:ListDomains']:
            res = {}
            for nm in ["registrationStatus"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "ListDomains", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_open_workflow_executions(self, *args, **kwargs):
        __protego_used['swf']['list_open_workflow_executions']=['swf:ListOpenWorkflowExecutions']
        for p in ['swf:ListOpenWorkflowExecutions']:
            res = {}
            for nm in ["domain","startTimeFilter"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "ListOpenWorkflowExecutions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['swf']['list_tags_for_resource']=['swf:*']
        for p in ['swf:*']:
            res = {}
            for nm in ["resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_workflow_types(self, *args, **kwargs):
        __protego_used['swf']['list_workflow_types']=['swf:ListWorkflowTypes']
        for p in ['swf:ListWorkflowTypes']:
            res = {}
            for nm in ["domain","registrationStatus"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "ListWorkflowTypes", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def poll_for_activity_task(self, *args, **kwargs):
        __protego_used['swf']['poll_for_activity_task']=['swf:PollForActivityTask']
        for p in ['swf:PollForActivityTask']:
            res = {}
            for nm in ["domain","taskList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "PollForActivityTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def poll_for_decision_task(self, *args, **kwargs):
        __protego_used['swf']['poll_for_decision_task']=['swf:PollForDecisionTask']
        for p in ['swf:PollForDecisionTask']:
            res = {}
            for nm in ["domain","taskList"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "PollForDecisionTask", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def record_activity_task_heartbeat(self, *args, **kwargs):
        __protego_used['swf']['record_activity_task_heartbeat']=['swf:RecordActivityTaskHeartbeat']
        for p in ['swf:RecordActivityTaskHeartbeat']:
            res = {}
            for nm in ["taskToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "RecordActivityTaskHeartbeat", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_activity_type(self, *args, **kwargs):
        __protego_used['swf']['register_activity_type']=['swf:RegisterActivityType']
        for p in ['swf:RegisterActivityType']:
            res = {}
            for nm in ["domain","name","version"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "RegisterActivityType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_domain(self, *args, **kwargs):
        __protego_used['swf']['register_domain']=['swf:RegisterDomain']
        for p in ['swf:RegisterDomain']:
            res = {}
            for nm in ["name","workflowExecutionRetentionPeriodInDays"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "RegisterDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_workflow_type(self, *args, **kwargs):
        __protego_used['swf']['register_workflow_type']=['swf:RegisterWorkflowType']
        for p in ['swf:RegisterWorkflowType']:
            res = {}
            for nm in ["domain","name","version"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "RegisterWorkflowType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def request_cancel_workflow_execution(self, *args, **kwargs):
        __protego_used['swf']['request_cancel_workflow_execution']=['swf:RequestCancelWorkflowExecution']
        for p in ['swf:RequestCancelWorkflowExecution']:
            res = {}
            for nm in ["domain","workflowId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "RequestCancelWorkflowExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def respond_activity_task_canceled(self, *args, **kwargs):
        __protego_used['swf']['respond_activity_task_canceled']=['swf:RespondActivityTaskCanceled']
        for p in ['swf:RespondActivityTaskCanceled']:
            res = {}
            for nm in ["taskToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "RespondActivityTaskCanceled", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def respond_activity_task_completed(self, *args, **kwargs):
        __protego_used['swf']['respond_activity_task_completed']=['swf:RespondActivityTaskCompleted']
        for p in ['swf:RespondActivityTaskCompleted']:
            res = {}
            for nm in ["taskToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "RespondActivityTaskCompleted", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def respond_activity_task_failed(self, *args, **kwargs):
        __protego_used['swf']['respond_activity_task_failed']=['swf:RespondActivityTaskFailed']
        for p in ['swf:RespondActivityTaskFailed']:
            res = {}
            for nm in ["taskToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "RespondActivityTaskFailed", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def respond_decision_task_completed(self, *args, **kwargs):
        __protego_used['swf']['respond_decision_task_completed']=['swf:RespondDecisionTaskCompleted']
        for p in ['swf:RespondDecisionTaskCompleted']:
            res = {}
            for nm in ["taskToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "RespondDecisionTaskCompleted", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def signal_workflow_execution(self, *args, **kwargs):
        __protego_used['swf']['signal_workflow_execution']=['swf:SignalWorkflowExecution']
        for p in ['swf:SignalWorkflowExecution']:
            res = {}
            for nm in ["domain","workflowId","signalName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "SignalWorkflowExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_workflow_execution(self, *args, **kwargs):
        __protego_used['swf']['start_workflow_execution']=['swf:StartWorkflowExecution']
        for p in ['swf:StartWorkflowExecution']:
            res = {}
            for nm in ["domain","workflowId","workflowType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "StartWorkflowExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['swf']['tag_resource']=['swf:*']
        for p in ['swf:*']:
            res = {}
            for nm in ["resourceArn","tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def terminate_workflow_execution(self, *args, **kwargs):
        __protego_used['swf']['terminate_workflow_execution']=['swf:TerminateWorkflowExecution']
        for p in ['swf:TerminateWorkflowExecution']:
            res = {}
            for nm in ["domain","workflowId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "TerminateWorkflowExecution", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def undeprecate_activity_type(self, *args, **kwargs):
        __protego_used['swf']['undeprecate_activity_type']=['swf:*']
        for p in ['swf:*']:
            res = {}
            for nm in ["domain","activityType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "UndeprecateActivityType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def undeprecate_domain(self, *args, **kwargs):
        __protego_used['swf']['undeprecate_domain']=['swf:*']
        for p in ['swf:*']:
            res = {}
            for nm in ["name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "UndeprecateDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def undeprecate_workflow_type(self, *args, **kwargs):
        __protego_used['swf']['undeprecate_workflow_type']=['swf:*']
        for p in ['swf:*']:
            res = {}
            for nm in ["domain","workflowType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "UndeprecateWorkflowType", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['swf']['untag_resource']=['swf:*']
        for p in ['swf:*']:
            res = {}
            for nm in ["tagKeys","resourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['swf'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class textract:
    def __init__(self, region_name=__default_region):
        __protego_used['textract']= __protego_used.get('textract', {})
        __protego_resource_map['textract']=__protego_resource_map.get('textract', [])
        self.region = region_name
    def analyze_document(self, *args, **kwargs):
        __protego_used['textract']['analyze_document']=['textract:*']
        for p in ['textract:*']:
            res = {}
            for nm in ["FeatureTypes","Document"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['textract'].append({'action': "AnalyzeDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def detect_document_text(self, *args, **kwargs):
        __protego_used['textract']['detect_document_text']=['textract:*']
        for p in ['textract:*']:
            res = {}
            for nm in ["Document"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['textract'].append({'action': "DetectDocumentText", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_document_analysis(self, *args, **kwargs):
        __protego_used['textract']['get_document_analysis']=['textract:*']
        for p in ['textract:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['textract'].append({'action': "GetDocumentAnalysis", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_document_text_detection(self, *args, **kwargs):
        __protego_used['textract']['get_document_text_detection']=['textract:*']
        for p in ['textract:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['textract'].append({'action': "GetDocumentTextDetection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_document_analysis(self, *args, **kwargs):
        __protego_used['textract']['start_document_analysis']=['textract:*']
        for p in ['textract:*']:
            res = {}
            for nm in ["FeatureTypes","DocumentLocation"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['textract'].append({'action': "StartDocumentAnalysis", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_document_text_detection(self, *args, **kwargs):
        __protego_used['textract']['start_document_text_detection']=['textract:*']
        for p in ['textract:*']:
            res = {}
            for nm in ["DocumentLocation"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['textract'].append({'action': "StartDocumentTextDetection", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class transcribe:
    def __init__(self, region_name=__default_region):
        __protego_used['transcribe']= __protego_used.get('transcribe', {})
        __protego_resource_map['transcribe']=__protego_resource_map.get('transcribe', [])
        self.region = region_name
    def create_vocabulary(self, *args, **kwargs):
        __protego_used['transcribe']['create_vocabulary']=['transcribe:*']
        for p in ['transcribe:*']:
            res = {}
            for nm in ["LanguageCode","VocabularyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "CreateVocabulary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_vocabulary_filter(self, *args, **kwargs):
        __protego_used['transcribe']['create_vocabulary_filter']=['transcribe:*']
        for p in ['transcribe:*']:
            res = {}
            for nm in ["VocabularyFilterName","LanguageCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "CreateVocabularyFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_transcription_job(self, *args, **kwargs):
        __protego_used['transcribe']['delete_transcription_job']=['transcribe:*']
        for p in ['transcribe:*']:
            res = {}
            for nm in ["TranscriptionJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "DeleteTranscriptionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vocabulary(self, *args, **kwargs):
        __protego_used['transcribe']['delete_vocabulary']=['transcribe:*']
        for p in ['transcribe:*']:
            res = {}
            for nm in ["VocabularyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "DeleteVocabulary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_vocabulary_filter(self, *args, **kwargs):
        __protego_used['transcribe']['delete_vocabulary_filter']=['transcribe:*']
        for p in ['transcribe:*']:
            res = {}
            for nm in ["VocabularyFilterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "DeleteVocabularyFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_transcription_job(self, *args, **kwargs):
        __protego_used['transcribe']['get_transcription_job']=['transcribe:GetTranscriptionJob']
        for p in ['transcribe:GetTranscriptionJob']:
            res = {}
            for nm in ["TranscriptionJobName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "GetTranscriptionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_vocabulary(self, *args, **kwargs):
        __protego_used['transcribe']['get_vocabulary']=['transcribe:*']
        for p in ['transcribe:*']:
            res = {}
            for nm in ["VocabularyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "GetVocabulary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_vocabulary_filter(self, *args, **kwargs):
        __protego_used['transcribe']['get_vocabulary_filter']=['transcribe:*']
        for p in ['transcribe:*']:
            res = {}
            for nm in ["VocabularyFilterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "GetVocabularyFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_transcription_jobs(self, *args, **kwargs):
        __protego_used['transcribe']['list_transcription_jobs']=['transcribe:ListTranscriptionJobs']
        for p in ['transcribe:ListTranscriptionJobs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "ListTranscriptionJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_vocabularies(self, *args, **kwargs):
        __protego_used['transcribe']['list_vocabularies']=['transcribe:*']
        for p in ['transcribe:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "ListVocabularies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_vocabulary_filters(self, *args, **kwargs):
        __protego_used['transcribe']['list_vocabulary_filters']=['transcribe:*']
        for p in ['transcribe:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "ListVocabularyFilters", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_transcription_job(self, *args, **kwargs):
        __protego_used['transcribe']['start_transcription_job']=['transcribe:StartTranscriptionJob']
        for p in ['transcribe:StartTranscriptionJob']:
            res = {}
            for nm in ["LanguageCode","TranscriptionJobName","Media"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "StartTranscriptionJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_vocabulary(self, *args, **kwargs):
        __protego_used['transcribe']['update_vocabulary']=['transcribe:*']
        for p in ['transcribe:*']:
            res = {}
            for nm in ["LanguageCode","VocabularyName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "UpdateVocabulary", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_vocabulary_filter(self, *args, **kwargs):
        __protego_used['transcribe']['update_vocabulary_filter']=['transcribe:*']
        for p in ['transcribe:*']:
            res = {}
            for nm in ["VocabularyFilterName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transcribe'].append({'action': "UpdateVocabularyFilter", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class transfer:
    def __init__(self, region_name=__default_region):
        __protego_used['transfer']= __protego_used.get('transfer', {})
        __protego_resource_map['transfer']=__protego_resource_map.get('transfer', [])
        self.region = region_name
    def create_server(self, *args, **kwargs):
        __protego_used['transfer']['create_server']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "CreateServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user(self, *args, **kwargs):
        __protego_used['transfer']['create_user']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId","UserName","Role"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "CreateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_server(self, *args, **kwargs):
        __protego_used['transfer']['delete_server']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "DeleteServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ssh_public_key(self, *args, **kwargs):
        __protego_used['transfer']['delete_ssh_public_key']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["SshPublicKeyId","ServerId","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "DeleteSshPublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user(self, *args, **kwargs):
        __protego_used['transfer']['delete_user']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "DeleteUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_server(self, *args, **kwargs):
        __protego_used['transfer']['describe_server']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "DescribeServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user(self, *args, **kwargs):
        __protego_used['transfer']['describe_user']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "DescribeUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_ssh_public_key(self, *args, **kwargs):
        __protego_used['transfer']['import_ssh_public_key']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId","UserName","SshPublicKeyBody"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "ImportSshPublicKey", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_servers(self, *args, **kwargs):
        __protego_used['transfer']['list_servers']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "ListServers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['transfer']['list_tags_for_resource']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["Arn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_users(self, *args, **kwargs):
        __protego_used['transfer']['list_users']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "ListUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_server(self, *args, **kwargs):
        __protego_used['transfer']['start_server']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "StartServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_server(self, *args, **kwargs):
        __protego_used['transfer']['stop_server']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "StopServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['transfer']['tag_resource']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["Arn","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def test_identity_provider(self, *args, **kwargs):
        __protego_used['transfer']['test_identity_provider']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "TestIdentityProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['transfer']['untag_resource']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["Arn","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_server(self, *args, **kwargs):
        __protego_used['transfer']['update_server']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "UpdateServer", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user(self, *args, **kwargs):
        __protego_used['transfer']['update_user']=['transfer:*']
        for p in ['transfer:*']:
            res = {}
            for nm in ["ServerId","UserName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['transfer'].append({'action': "UpdateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class translate:
    def __init__(self, region_name=__default_region):
        __protego_used['translate']= __protego_used.get('translate', {})
        __protego_resource_map['translate']=__protego_resource_map.get('translate', [])
        self.region = region_name
    def delete_terminology(self, *args, **kwargs):
        __protego_used['translate']['delete_terminology']=['translate:DeleteTerminology']
        for p in ['translate:DeleteTerminology']:
            res = {}
            for nm in ["Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['translate'].append({'action': "DeleteTerminology", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_text_translation_job(self, *args, **kwargs):
        __protego_used['translate']['describe_text_translation_job']=['translate:*']
        for p in ['translate:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['translate'].append({'action': "DescribeTextTranslationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_terminology(self, *args, **kwargs):
        __protego_used['translate']['get_terminology']=['translate:GetTerminology']
        for p in ['translate:GetTerminology']:
            res = {}
            for nm in ["Name","TerminologyDataFormat"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['translate'].append({'action': "GetTerminology", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_terminology(self, *args, **kwargs):
        __protego_used['translate']['import_terminology']=['translate:ImportTerminology']
        for p in ['translate:ImportTerminology']:
            res = {}
            for nm in ["TerminologyData","MergeStrategy","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['translate'].append({'action': "ImportTerminology", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_terminologies(self, *args, **kwargs):
        __protego_used['translate']['list_terminologies']=['translate:ListTerminologies']
        for p in ['translate:ListTerminologies']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['translate'].append({'action': "ListTerminologies", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_text_translation_jobs(self, *args, **kwargs):
        __protego_used['translate']['list_text_translation_jobs']=['translate:*']
        for p in ['translate:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['translate'].append({'action': "ListTextTranslationJobs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_text_translation_job(self, *args, **kwargs):
        __protego_used['translate']['start_text_translation_job']=['translate:*']
        for p in ['translate:*']:
            res = {}
            for nm in ["InputDataConfig","DataAccessRoleArn","ClientToken","SourceLanguageCode","TargetLanguageCodes","OutputDataConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['translate'].append({'action': "StartTextTranslationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_text_translation_job(self, *args, **kwargs):
        __protego_used['translate']['stop_text_translation_job']=['translate:*']
        for p in ['translate:*']:
            res = {}
            for nm in ["JobId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['translate'].append({'action': "StopTextTranslationJob", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def translate_text(self, *args, **kwargs):
        __protego_used['translate']['translate_text']=['translate:TranslateText']
        for p in ['translate:TranslateText']:
            res = {}
            for nm in ["Text","TargetLanguageCode","SourceLanguageCode"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['translate'].append({'action': "TranslateText", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class waf:
    def __init__(self, region_name=__default_region):
        __protego_used['waf']= __protego_used.get('waf', {})
        __protego_resource_map['waf']=__protego_resource_map.get('waf', [])
        self.region = region_name
    def create_byte_match_set(self, *args, **kwargs):
        __protego_used['waf']['create_byte_match_set']=['waf:CreateByteMatchSet']
        for p in ['waf:CreateByteMatchSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateByteMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_geo_match_set(self, *args, **kwargs):
        __protego_used['waf']['create_geo_match_set']=['waf:CreateGeoMatchSet']
        for p in ['waf:CreateGeoMatchSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateGeoMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_ip_set(self, *args, **kwargs):
        __protego_used['waf']['create_ip_set']=['waf:CreateIPSet']
        for p in ['waf:CreateIPSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_rate_based_rule(self, *args, **kwargs):
        __protego_used['waf']['create_rate_based_rule']=['waf:CreateRateBasedRule']
        for p in ['waf:CreateRateBasedRule']:
            res = {}
            for nm in ["RateKey","Name","ChangeToken","MetricName","RateLimit"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateRateBasedRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_regex_match_set(self, *args, **kwargs):
        __protego_used['waf']['create_regex_match_set']=['waf:CreateRegexMatchSet']
        for p in ['waf:CreateRegexMatchSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateRegexMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_regex_pattern_set(self, *args, **kwargs):
        __protego_used['waf']['create_regex_pattern_set']=['waf:CreateRegexPatternSet']
        for p in ['waf:CreateRegexPatternSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_rule(self, *args, **kwargs):
        __protego_used['waf']['create_rule']=['waf:CreateRule']
        for p in ['waf:CreateRule']:
            res = {}
            for nm in ["ChangeToken","MetricName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_rule_group(self, *args, **kwargs):
        __protego_used['waf']['create_rule_group']=['waf:CreateRuleGroup']
        for p in ['waf:CreateRuleGroup']:
            res = {}
            for nm in ["ChangeToken","MetricName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_size_constraint_set(self, *args, **kwargs):
        __protego_used['waf']['create_size_constraint_set']=['waf:CreateSizeConstraintSet']
        for p in ['waf:CreateSizeConstraintSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateSizeConstraintSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_sql_injection_match_set(self, *args, **kwargs):
        __protego_used['waf']['create_sql_injection_match_set']=['waf:CreateSqlInjectionMatchSet']
        for p in ['waf:CreateSqlInjectionMatchSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateSqlInjectionMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_web_acl(self, *args, **kwargs):
        __protego_used['waf']['create_web_acl']=['waf:CreateWebACL']
        for p in ['waf:CreateWebACL']:
            res = {}
            for nm in ["ChangeToken","MetricName","DefaultAction","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_xss_match_set(self, *args, **kwargs):
        __protego_used['waf']['create_xss_match_set']=['waf:CreateXssMatchSet']
        for p in ['waf:CreateXssMatchSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "CreateXssMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_byte_match_set(self, *args, **kwargs):
        __protego_used['waf']['delete_byte_match_set']=['waf:DeleteByteMatchSet']
        for p in ['waf:DeleteByteMatchSet']:
            res = {}
            for nm in ["ChangeToken","ByteMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteByteMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_geo_match_set(self, *args, **kwargs):
        __protego_used['waf']['delete_geo_match_set']=['waf:DeleteGeoMatchSet']
        for p in ['waf:DeleteGeoMatchSet']:
            res = {}
            for nm in ["ChangeToken","GeoMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteGeoMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ip_set(self, *args, **kwargs):
        __protego_used['waf']['delete_ip_set']=['waf:DeleteIPSet']
        for p in ['waf:DeleteIPSet']:
            res = {}
            for nm in ["ChangeToken","IPSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_logging_configuration(self, *args, **kwargs):
        __protego_used['waf']['delete_logging_configuration']=['waf:DeleteLoggingConfiguration']
        for p in ['waf:DeleteLoggingConfiguration']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteLoggingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_permission_policy(self, *args, **kwargs):
        __protego_used['waf']['delete_permission_policy']=['waf:DeletePermissionPolicy']
        for p in ['waf:DeletePermissionPolicy']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeletePermissionPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_rate_based_rule(self, *args, **kwargs):
        __protego_used['waf']['delete_rate_based_rule']=['waf:DeleteRateBasedRule']
        for p in ['waf:DeleteRateBasedRule']:
            res = {}
            for nm in ["ChangeToken","RuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteRateBasedRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_regex_match_set(self, *args, **kwargs):
        __protego_used['waf']['delete_regex_match_set']=['waf:DeleteRegexMatchSet']
        for p in ['waf:DeleteRegexMatchSet']:
            res = {}
            for nm in ["ChangeToken","RegexMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteRegexMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_regex_pattern_set(self, *args, **kwargs):
        __protego_used['waf']['delete_regex_pattern_set']=['waf:DeleteRegexPatternSet']
        for p in ['waf:DeleteRegexPatternSet']:
            res = {}
            for nm in ["RegexPatternSetId","ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_rule(self, *args, **kwargs):
        __protego_used['waf']['delete_rule']=['waf:DeleteRule']
        for p in ['waf:DeleteRule']:
            res = {}
            for nm in ["ChangeToken","RuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_rule_group(self, *args, **kwargs):
        __protego_used['waf']['delete_rule_group']=['waf:DeleteRuleGroup']
        for p in ['waf:DeleteRuleGroup']:
            res = {}
            for nm in ["ChangeToken","RuleGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_size_constraint_set(self, *args, **kwargs):
        __protego_used['waf']['delete_size_constraint_set']=['waf:DeleteSizeConstraintSet']
        for p in ['waf:DeleteSizeConstraintSet']:
            res = {}
            for nm in ["ChangeToken","SizeConstraintSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteSizeConstraintSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_sql_injection_match_set(self, *args, **kwargs):
        __protego_used['waf']['delete_sql_injection_match_set']=['waf:DeleteSqlInjectionMatchSet']
        for p in ['waf:DeleteSqlInjectionMatchSet']:
            res = {}
            for nm in ["SqlInjectionMatchSetId","ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteSqlInjectionMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_web_acl(self, *args, **kwargs):
        __protego_used['waf']['delete_web_acl']=['waf:DeleteWebACL']
        for p in ['waf:DeleteWebACL']:
            res = {}
            for nm in ["WebACLId","ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_xss_match_set(self, *args, **kwargs):
        __protego_used['waf']['delete_xss_match_set']=['waf:DeleteXssMatchSet']
        for p in ['waf:DeleteXssMatchSet']:
            res = {}
            for nm in ["XssMatchSetId","ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "DeleteXssMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_byte_match_set(self, *args, **kwargs):
        __protego_used['waf']['get_byte_match_set']=['waf:GetByteMatchSet']
        for p in ['waf:GetByteMatchSet']:
            res = {}
            for nm in ["ByteMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetByteMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_change_token(self, *args, **kwargs):
        __protego_used['waf']['get_change_token']=['waf:GetChangeToken']
        for p in ['waf:GetChangeToken']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetChangeToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_change_token_status(self, *args, **kwargs):
        __protego_used['waf']['get_change_token_status']=['waf:GetChangeTokenStatus']
        for p in ['waf:GetChangeTokenStatus']:
            res = {}
            for nm in ["ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetChangeTokenStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_geo_match_set(self, *args, **kwargs):
        __protego_used['waf']['get_geo_match_set']=['waf:GetGeoMatchSet']
        for p in ['waf:GetGeoMatchSet']:
            res = {}
            for nm in ["GeoMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetGeoMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ip_set(self, *args, **kwargs):
        __protego_used['waf']['get_ip_set']=['waf:GetIPSet']
        for p in ['waf:GetIPSet']:
            res = {}
            for nm in ["IPSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_logging_configuration(self, *args, **kwargs):
        __protego_used['waf']['get_logging_configuration']=['waf:GetLoggingConfiguration']
        for p in ['waf:GetLoggingConfiguration']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetLoggingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_permission_policy(self, *args, **kwargs):
        __protego_used['waf']['get_permission_policy']=['waf:GetPermissionPolicy']
        for p in ['waf:GetPermissionPolicy']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetPermissionPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rate_based_rule(self, *args, **kwargs):
        __protego_used['waf']['get_rate_based_rule']=['waf:GetRateBasedRule']
        for p in ['waf:GetRateBasedRule']:
            res = {}
            for nm in ["RuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetRateBasedRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rate_based_rule_managed_keys(self, *args, **kwargs):
        __protego_used['waf']['get_rate_based_rule_managed_keys']=['waf:GetRateBasedRuleManagedKeys']
        for p in ['waf:GetRateBasedRuleManagedKeys']:
            res = {}
            for nm in ["RuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetRateBasedRuleManagedKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_regex_match_set(self, *args, **kwargs):
        __protego_used['waf']['get_regex_match_set']=['waf:GetRegexMatchSet']
        for p in ['waf:GetRegexMatchSet']:
            res = {}
            for nm in ["RegexMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetRegexMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_regex_pattern_set(self, *args, **kwargs):
        __protego_used['waf']['get_regex_pattern_set']=['waf:GetRegexPatternSet']
        for p in ['waf:GetRegexPatternSet']:
            res = {}
            for nm in ["RegexPatternSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rule(self, *args, **kwargs):
        __protego_used['waf']['get_rule']=['waf:GetRule']
        for p in ['waf:GetRule']:
            res = {}
            for nm in ["RuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rule_group(self, *args, **kwargs):
        __protego_used['waf']['get_rule_group']=['waf:GetRuleGroup']
        for p in ['waf:GetRuleGroup']:
            res = {}
            for nm in ["RuleGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sampled_requests(self, *args, **kwargs):
        __protego_used['waf']['get_sampled_requests']=['waf:GetSampledRequests','waf:GetSampledRequests']
        for p in ['waf:GetSampledRequests','waf:GetSampledRequests']:
            res = {}
            for nm in ["TimeWindow","RuleId","WebAclId","MaxItems"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetSampledRequests", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_size_constraint_set(self, *args, **kwargs):
        __protego_used['waf']['get_size_constraint_set']=['waf:GetSizeConstraintSet']
        for p in ['waf:GetSizeConstraintSet']:
            res = {}
            for nm in ["SizeConstraintSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetSizeConstraintSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sql_injection_match_set(self, *args, **kwargs):
        __protego_used['waf']['get_sql_injection_match_set']=['waf:GetSqlInjectionMatchSet']
        for p in ['waf:GetSqlInjectionMatchSet']:
            res = {}
            for nm in ["SqlInjectionMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetSqlInjectionMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_web_acl(self, *args, **kwargs):
        __protego_used['waf']['get_web_acl']=['waf:GetWebACL']
        for p in ['waf:GetWebACL']:
            res = {}
            for nm in ["WebACLId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_xss_match_set(self, *args, **kwargs):
        __protego_used['waf']['get_xss_match_set']=['waf:GetXssMatchSet']
        for p in ['waf:GetXssMatchSet']:
            res = {}
            for nm in ["XssMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "GetXssMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_activated_rules_in_rule_group(self, *args, **kwargs):
        __protego_used['waf']['list_activated_rules_in_rule_group']=['waf:ListActivatedRulesInRuleGroup']
        for p in ['waf:ListActivatedRulesInRuleGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListActivatedRulesInRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_byte_match_sets(self, *args, **kwargs):
        __protego_used['waf']['list_byte_match_sets']=['waf:ListByteMatchSets']
        for p in ['waf:ListByteMatchSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListByteMatchSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_geo_match_sets(self, *args, **kwargs):
        __protego_used['waf']['list_geo_match_sets']=['waf:ListGeoMatchSets']
        for p in ['waf:ListGeoMatchSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListGeoMatchSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_ip_sets(self, *args, **kwargs):
        __protego_used['waf']['list_ip_sets']=['waf:ListIPSets']
        for p in ['waf:ListIPSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListIPSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_logging_configurations(self, *args, **kwargs):
        __protego_used['waf']['list_logging_configurations']=['waf:ListLoggingConfigurations']
        for p in ['waf:ListLoggingConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListLoggingConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_rate_based_rules(self, *args, **kwargs):
        __protego_used['waf']['list_rate_based_rules']=['waf:ListRateBasedRules']
        for p in ['waf:ListRateBasedRules']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListRateBasedRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_regex_match_sets(self, *args, **kwargs):
        __protego_used['waf']['list_regex_match_sets']=['waf:ListRegexMatchSets']
        for p in ['waf:ListRegexMatchSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListRegexMatchSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_regex_pattern_sets(self, *args, **kwargs):
        __protego_used['waf']['list_regex_pattern_sets']=['waf:ListRegexPatternSets']
        for p in ['waf:ListRegexPatternSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListRegexPatternSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_rule_groups(self, *args, **kwargs):
        __protego_used['waf']['list_rule_groups']=['waf:ListRuleGroups']
        for p in ['waf:ListRuleGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListRuleGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_rules(self, *args, **kwargs):
        __protego_used['waf']['list_rules']=['waf:ListRules']
        for p in ['waf:ListRules']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_size_constraint_sets(self, *args, **kwargs):
        __protego_used['waf']['list_size_constraint_sets']=['waf:ListSizeConstraintSets']
        for p in ['waf:ListSizeConstraintSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListSizeConstraintSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_sql_injection_match_sets(self, *args, **kwargs):
        __protego_used['waf']['list_sql_injection_match_sets']=['waf:ListSqlInjectionMatchSets']
        for p in ['waf:ListSqlInjectionMatchSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListSqlInjectionMatchSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_subscribed_rule_groups(self, *args, **kwargs):
        __protego_used['waf']['list_subscribed_rule_groups']=['waf:ListSubscribedRuleGroups']
        for p in ['waf:ListSubscribedRuleGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListSubscribedRuleGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['waf']['list_tags_for_resource']=['waf:*']
        for p in ['waf:*']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_web_acls(self, *args, **kwargs):
        __protego_used['waf']['list_web_acls']=['waf:ListWebACLs']
        for p in ['waf:ListWebACLs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListWebACLs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_xss_match_sets(self, *args, **kwargs):
        __protego_used['waf']['list_xss_match_sets']=['waf:ListXssMatchSets']
        for p in ['waf:ListXssMatchSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "ListXssMatchSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_logging_configuration(self, *args, **kwargs):
        __protego_used['waf']['put_logging_configuration']=['waf:PutLoggingConfiguration']
        for p in ['waf:PutLoggingConfiguration']:
            res = {}
            for nm in ["LoggingConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "PutLoggingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_permission_policy(self, *args, **kwargs):
        __protego_used['waf']['put_permission_policy']=['waf:PutPermissionPolicy']
        for p in ['waf:PutPermissionPolicy']:
            res = {}
            for nm in ["ResourceArn","Policy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "PutPermissionPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['waf']['tag_resource']=['waf:*']
        for p in ['waf:*']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['waf']['untag_resource']=['waf:*']
        for p in ['waf:*']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_byte_match_set(self, *args, **kwargs):
        __protego_used['waf']['update_byte_match_set']=['waf:UpdateByteMatchSet']
        for p in ['waf:UpdateByteMatchSet']:
            res = {}
            for nm in ["ChangeToken","ByteMatchSetId","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateByteMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_geo_match_set(self, *args, **kwargs):
        __protego_used['waf']['update_geo_match_set']=['waf:UpdateGeoMatchSet']
        for p in ['waf:UpdateGeoMatchSet']:
            res = {}
            for nm in ["ChangeToken","GeoMatchSetId","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateGeoMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_ip_set(self, *args, **kwargs):
        __protego_used['waf']['update_ip_set']=['waf:UpdateIPSet']
        for p in ['waf:UpdateIPSet']:
            res = {}
            for nm in ["ChangeToken","Updates","IPSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rate_based_rule(self, *args, **kwargs):
        __protego_used['waf']['update_rate_based_rule']=['waf:UpdateRateBasedRule']
        for p in ['waf:UpdateRateBasedRule']:
            res = {}
            for nm in ["ChangeToken","RuleId","RateLimit","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateRateBasedRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_regex_match_set(self, *args, **kwargs):
        __protego_used['waf']['update_regex_match_set']=['waf:UpdateRegexMatchSet']
        for p in ['waf:UpdateRegexMatchSet']:
            res = {}
            for nm in ["ChangeToken","Updates","RegexMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateRegexMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_regex_pattern_set(self, *args, **kwargs):
        __protego_used['waf']['update_regex_pattern_set']=['waf:UpdateRegexPatternSet']
        for p in ['waf:UpdateRegexPatternSet']:
            res = {}
            for nm in ["RegexPatternSetId","ChangeToken","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rule(self, *args, **kwargs):
        __protego_used['waf']['update_rule']=['waf:UpdateRule']
        for p in ['waf:UpdateRule']:
            res = {}
            for nm in ["ChangeToken","RuleId","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rule_group(self, *args, **kwargs):
        __protego_used['waf']['update_rule_group']=['waf:UpdateRuleGroup']
        for p in ['waf:UpdateRuleGroup']:
            res = {}
            for nm in ["ChangeToken","RuleGroupId","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_size_constraint_set(self, *args, **kwargs):
        __protego_used['waf']['update_size_constraint_set']=['waf:UpdateSizeConstraintSet']
        for p in ['waf:UpdateSizeConstraintSet']:
            res = {}
            for nm in ["ChangeToken","Updates","SizeConstraintSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateSizeConstraintSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_sql_injection_match_set(self, *args, **kwargs):
        __protego_used['waf']['update_sql_injection_match_set']=['waf:UpdateSqlInjectionMatchSet']
        for p in ['waf:UpdateSqlInjectionMatchSet']:
            res = {}
            for nm in ["SqlInjectionMatchSetId","ChangeToken","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateSqlInjectionMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_web_acl(self, *args, **kwargs):
        __protego_used['waf']['update_web_acl']=['waf:UpdateWebACL']
        for p in ['waf:UpdateWebACL']:
            res = {}
            for nm in ["WebACLId","ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_xss_match_set(self, *args, **kwargs):
        __protego_used['waf']['update_xss_match_set']=['waf:UpdateXssMatchSet']
        for p in ['waf:UpdateXssMatchSet']:
            res = {}
            for nm in ["XssMatchSetId","ChangeToken","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf'].append({'action': "UpdateXssMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class waf_regional:
    def __init__(self, region_name=__default_region):
        __protego_used['waf-regional']= __protego_used.get('waf-regional', {})
        __protego_resource_map['waf-regional']=__protego_resource_map.get('waf-regional', [])
        self.region = region_name
    def associate_web_acl(self, *args, **kwargs):
        __protego_used['waf-regional']['associate_web_acl']=['waf-regional:AssociateWebACL','waf-regional:AssociateWebACL']
        for p in ['waf-regional:AssociateWebACL','waf-regional:AssociateWebACL']:
            res = {}
            for nm in ["ResourceArn","WebACLId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "AssociateWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_byte_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['create_byte_match_set']=['waf-regional:CreateByteMatchSet']
        for p in ['waf-regional:CreateByteMatchSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateByteMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_geo_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['create_geo_match_set']=['waf-regional:CreateGeoMatchSet']
        for p in ['waf-regional:CreateGeoMatchSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateGeoMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_ip_set(self, *args, **kwargs):
        __protego_used['waf-regional']['create_ip_set']=['waf-regional:CreateIPSet']
        for p in ['waf-regional:CreateIPSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_rate_based_rule(self, *args, **kwargs):
        __protego_used['waf-regional']['create_rate_based_rule']=['waf-regional:CreateRateBasedRule']
        for p in ['waf-regional:CreateRateBasedRule']:
            res = {}
            for nm in ["RateKey","Name","ChangeToken","MetricName","RateLimit"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateRateBasedRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_regex_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['create_regex_match_set']=['waf-regional:CreateRegexMatchSet']
        for p in ['waf-regional:CreateRegexMatchSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateRegexMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_regex_pattern_set(self, *args, **kwargs):
        __protego_used['waf-regional']['create_regex_pattern_set']=['waf-regional:CreateRegexPatternSet']
        for p in ['waf-regional:CreateRegexPatternSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_rule(self, *args, **kwargs):
        __protego_used['waf-regional']['create_rule']=['waf-regional:CreateRule']
        for p in ['waf-regional:CreateRule']:
            res = {}
            for nm in ["ChangeToken","MetricName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_rule_group(self, *args, **kwargs):
        __protego_used['waf-regional']['create_rule_group']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in ["ChangeToken","MetricName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_size_constraint_set(self, *args, **kwargs):
        __protego_used['waf-regional']['create_size_constraint_set']=['waf-regional:CreateSizeConstraintSet']
        for p in ['waf-regional:CreateSizeConstraintSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateSizeConstraintSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_sql_injection_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['create_sql_injection_match_set']=['waf-regional:CreateSqlInjectionMatchSet']
        for p in ['waf-regional:CreateSqlInjectionMatchSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateSqlInjectionMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_web_acl(self, *args, **kwargs):
        __protego_used['waf-regional']['create_web_acl']=['waf-regional:CreateWebACL']
        for p in ['waf-regional:CreateWebACL']:
            res = {}
            for nm in ["ChangeToken","MetricName","DefaultAction","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_xss_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['create_xss_match_set']=['waf-regional:CreateXssMatchSet']
        for p in ['waf-regional:CreateXssMatchSet']:
            res = {}
            for nm in ["ChangeToken","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "CreateXssMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_byte_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_byte_match_set']=['waf-regional:DeleteByteMatchSet']
        for p in ['waf-regional:DeleteByteMatchSet']:
            res = {}
            for nm in ["ChangeToken","ByteMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteByteMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_geo_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_geo_match_set']=['waf-regional:DeleteGeoMatchSet']
        for p in ['waf-regional:DeleteGeoMatchSet']:
            res = {}
            for nm in ["ChangeToken","GeoMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteGeoMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ip_set(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_ip_set']=['waf-regional:DeleteIPSet']
        for p in ['waf-regional:DeleteIPSet']:
            res = {}
            for nm in ["ChangeToken","IPSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_logging_configuration(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_logging_configuration']=['waf-regional:DeleteLoggingConfiguration']
        for p in ['waf-regional:DeleteLoggingConfiguration']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteLoggingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_permission_policy(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_permission_policy']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeletePermissionPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_rate_based_rule(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_rate_based_rule']=['waf-regional:DeleteRateBasedRule']
        for p in ['waf-regional:DeleteRateBasedRule']:
            res = {}
            for nm in ["ChangeToken","RuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteRateBasedRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_regex_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_regex_match_set']=['waf-regional:DeleteRegexMatchSet']
        for p in ['waf-regional:DeleteRegexMatchSet']:
            res = {}
            for nm in ["ChangeToken","RegexMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteRegexMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_regex_pattern_set(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_regex_pattern_set']=['waf-regional:DeleteRegexPatternSet']
        for p in ['waf-regional:DeleteRegexPatternSet']:
            res = {}
            for nm in ["RegexPatternSetId","ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_rule(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_rule']=['waf-regional:DeleteRule']
        for p in ['waf-regional:DeleteRule']:
            res = {}
            for nm in ["ChangeToken","RuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_rule_group(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_rule_group']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in ["ChangeToken","RuleGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_size_constraint_set(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_size_constraint_set']=['waf-regional:DeleteSizeConstraintSet']
        for p in ['waf-regional:DeleteSizeConstraintSet']:
            res = {}
            for nm in ["ChangeToken","SizeConstraintSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteSizeConstraintSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_sql_injection_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_sql_injection_match_set']=['waf-regional:DeleteSqlInjectionMatchSet']
        for p in ['waf-regional:DeleteSqlInjectionMatchSet']:
            res = {}
            for nm in ["SqlInjectionMatchSetId","ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteSqlInjectionMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_web_acl(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_web_acl']=['waf-regional:DeleteWebACL']
        for p in ['waf-regional:DeleteWebACL']:
            res = {}
            for nm in ["WebACLId","ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_xss_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['delete_xss_match_set']=['waf-regional:DeleteXssMatchSet']
        for p in ['waf-regional:DeleteXssMatchSet']:
            res = {}
            for nm in ["XssMatchSetId","ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DeleteXssMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_web_acl(self, *args, **kwargs):
        __protego_used['waf-regional']['disassociate_web_acl']=['waf-regional:DisassociateWebACL']
        for p in ['waf-regional:DisassociateWebACL']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "DisassociateWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_byte_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['get_byte_match_set']=['waf-regional:GetByteMatchSet']
        for p in ['waf-regional:GetByteMatchSet']:
            res = {}
            for nm in ["ByteMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetByteMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_change_token(self, *args, **kwargs):
        __protego_used['waf-regional']['get_change_token']=['waf-regional:GetChangeToken']
        for p in ['waf-regional:GetChangeToken']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetChangeToken", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_change_token_status(self, *args, **kwargs):
        __protego_used['waf-regional']['get_change_token_status']=['waf-regional:GetChangeTokenStatus']
        for p in ['waf-regional:GetChangeTokenStatus']:
            res = {}
            for nm in ["ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetChangeTokenStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_geo_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['get_geo_match_set']=['waf-regional:GetGeoMatchSet']
        for p in ['waf-regional:GetGeoMatchSet']:
            res = {}
            for nm in ["GeoMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetGeoMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ip_set(self, *args, **kwargs):
        __protego_used['waf-regional']['get_ip_set']=['waf-regional:GetIPSet']
        for p in ['waf-regional:GetIPSet']:
            res = {}
            for nm in ["IPSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_logging_configuration(self, *args, **kwargs):
        __protego_used['waf-regional']['get_logging_configuration']=['waf-regional:GetLoggingConfiguration']
        for p in ['waf-regional:GetLoggingConfiguration']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetLoggingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_permission_policy(self, *args, **kwargs):
        __protego_used['waf-regional']['get_permission_policy']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetPermissionPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rate_based_rule(self, *args, **kwargs):
        __protego_used['waf-regional']['get_rate_based_rule']=['waf-regional:GetRateBasedRule']
        for p in ['waf-regional:GetRateBasedRule']:
            res = {}
            for nm in ["RuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetRateBasedRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rate_based_rule_managed_keys(self, *args, **kwargs):
        __protego_used['waf-regional']['get_rate_based_rule_managed_keys']=['waf-regional:GetRateBasedRuleManagedKeys']
        for p in ['waf-regional:GetRateBasedRuleManagedKeys']:
            res = {}
            for nm in ["RuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetRateBasedRuleManagedKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_regex_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['get_regex_match_set']=['waf-regional:GetRegexMatchSet']
        for p in ['waf-regional:GetRegexMatchSet']:
            res = {}
            for nm in ["RegexMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetRegexMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_regex_pattern_set(self, *args, **kwargs):
        __protego_used['waf-regional']['get_regex_pattern_set']=['waf-regional:GetRegexPatternSet']
        for p in ['waf-regional:GetRegexPatternSet']:
            res = {}
            for nm in ["RegexPatternSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rule(self, *args, **kwargs):
        __protego_used['waf-regional']['get_rule']=['waf-regional:GetRule']
        for p in ['waf-regional:GetRule']:
            res = {}
            for nm in ["RuleId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rule_group(self, *args, **kwargs):
        __protego_used['waf-regional']['get_rule_group']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in ["RuleGroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sampled_requests(self, *args, **kwargs):
        __protego_used['waf-regional']['get_sampled_requests']=['waf-regional:GetSampledRequests','waf-regional:GetSampledRequests']
        for p in ['waf-regional:GetSampledRequests','waf-regional:GetSampledRequests']:
            res = {}
            for nm in ["TimeWindow","RuleId","WebAclId","MaxItems"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetSampledRequests", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_size_constraint_set(self, *args, **kwargs):
        __protego_used['waf-regional']['get_size_constraint_set']=['waf-regional:GetSizeConstraintSet']
        for p in ['waf-regional:GetSizeConstraintSet']:
            res = {}
            for nm in ["SizeConstraintSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetSizeConstraintSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sql_injection_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['get_sql_injection_match_set']=['waf-regional:GetSqlInjectionMatchSet']
        for p in ['waf-regional:GetSqlInjectionMatchSet']:
            res = {}
            for nm in ["SqlInjectionMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetSqlInjectionMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_web_acl(self, *args, **kwargs):
        __protego_used['waf-regional']['get_web_acl']=['waf-regional:GetWebACL']
        for p in ['waf-regional:GetWebACL']:
            res = {}
            for nm in ["WebACLId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_web_acl_for_resource(self, *args, **kwargs):
        __protego_used['waf-regional']['get_web_acl_for_resource']=['waf-regional:GetWebACLForResource']
        for p in ['waf-regional:GetWebACLForResource']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetWebACLForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_xss_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['get_xss_match_set']=['waf-regional:GetXssMatchSet']
        for p in ['waf-regional:GetXssMatchSet']:
            res = {}
            for nm in ["XssMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "GetXssMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_activated_rules_in_rule_group(self, *args, **kwargs):
        __protego_used['waf-regional']['list_activated_rules_in_rule_group']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListActivatedRulesInRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_byte_match_sets(self, *args, **kwargs):
        __protego_used['waf-regional']['list_byte_match_sets']=['waf-regional:ListByteMatchSets']
        for p in ['waf-regional:ListByteMatchSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListByteMatchSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_geo_match_sets(self, *args, **kwargs):
        __protego_used['waf-regional']['list_geo_match_sets']=['waf-regional:ListGeoMatchSets']
        for p in ['waf-regional:ListGeoMatchSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListGeoMatchSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_ip_sets(self, *args, **kwargs):
        __protego_used['waf-regional']['list_ip_sets']=['waf-regional:ListIPSets']
        for p in ['waf-regional:ListIPSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListIPSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_logging_configurations(self, *args, **kwargs):
        __protego_used['waf-regional']['list_logging_configurations']=['waf-regional:ListLoggingConfigurations']
        for p in ['waf-regional:ListLoggingConfigurations']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListLoggingConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_rate_based_rules(self, *args, **kwargs):
        __protego_used['waf-regional']['list_rate_based_rules']=['waf-regional:ListRateBasedRules']
        for p in ['waf-regional:ListRateBasedRules']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListRateBasedRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_regex_match_sets(self, *args, **kwargs):
        __protego_used['waf-regional']['list_regex_match_sets']=['waf-regional:ListRegexMatchSets']
        for p in ['waf-regional:ListRegexMatchSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListRegexMatchSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_regex_pattern_sets(self, *args, **kwargs):
        __protego_used['waf-regional']['list_regex_pattern_sets']=['waf-regional:ListRegexPatternSets']
        for p in ['waf-regional:ListRegexPatternSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListRegexPatternSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resources_for_web_acl(self, *args, **kwargs):
        __protego_used['waf-regional']['list_resources_for_web_acl']=['waf-regional:ListResourcesForWebACL']
        for p in ['waf-regional:ListResourcesForWebACL']:
            res = {}
            for nm in ["WebACLId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListResourcesForWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_rule_groups(self, *args, **kwargs):
        __protego_used['waf-regional']['list_rule_groups']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListRuleGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_rules(self, *args, **kwargs):
        __protego_used['waf-regional']['list_rules']=['waf-regional:ListRules']
        for p in ['waf-regional:ListRules']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_size_constraint_sets(self, *args, **kwargs):
        __protego_used['waf-regional']['list_size_constraint_sets']=['waf-regional:ListSizeConstraintSets']
        for p in ['waf-regional:ListSizeConstraintSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListSizeConstraintSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_sql_injection_match_sets(self, *args, **kwargs):
        __protego_used['waf-regional']['list_sql_injection_match_sets']=['waf-regional:ListSqlInjectionMatchSets']
        for p in ['waf-regional:ListSqlInjectionMatchSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListSqlInjectionMatchSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_subscribed_rule_groups(self, *args, **kwargs):
        __protego_used['waf-regional']['list_subscribed_rule_groups']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListSubscribedRuleGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['waf-regional']['list_tags_for_resource']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_web_acls(self, *args, **kwargs):
        __protego_used['waf-regional']['list_web_acls']=['waf-regional:ListWebACLs']
        for p in ['waf-regional:ListWebACLs']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListWebACLs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_xss_match_sets(self, *args, **kwargs):
        __protego_used['waf-regional']['list_xss_match_sets']=['waf-regional:ListXssMatchSets']
        for p in ['waf-regional:ListXssMatchSets']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "ListXssMatchSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_logging_configuration(self, *args, **kwargs):
        __protego_used['waf-regional']['put_logging_configuration']=['waf-regional:PutLoggingConfiguration']
        for p in ['waf-regional:PutLoggingConfiguration']:
            res = {}
            for nm in ["LoggingConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "PutLoggingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_permission_policy(self, *args, **kwargs):
        __protego_used['waf-regional']['put_permission_policy']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in ["ResourceArn","Policy"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "PutPermissionPolicy", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['waf-regional']['tag_resource']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['waf-regional']['untag_resource']=['waf-regional:*']
        for p in ['waf-regional:*']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_byte_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['update_byte_match_set']=['waf-regional:UpdateByteMatchSet']
        for p in ['waf-regional:UpdateByteMatchSet']:
            res = {}
            for nm in ["ChangeToken","ByteMatchSetId","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateByteMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_geo_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['update_geo_match_set']=['waf-regional:UpdateGeoMatchSet']
        for p in ['waf-regional:UpdateGeoMatchSet']:
            res = {}
            for nm in ["ChangeToken","GeoMatchSetId","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateGeoMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_ip_set(self, *args, **kwargs):
        __protego_used['waf-regional']['update_ip_set']=['waf-regional:UpdateIPSet']
        for p in ['waf-regional:UpdateIPSet']:
            res = {}
            for nm in ["ChangeToken","Updates","IPSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rate_based_rule(self, *args, **kwargs):
        __protego_used['waf-regional']['update_rate_based_rule']=['waf-regional:UpdateRateBasedRule']
        for p in ['waf-regional:UpdateRateBasedRule']:
            res = {}
            for nm in ["ChangeToken","RuleId","RateLimit","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateRateBasedRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_regex_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['update_regex_match_set']=['waf-regional:UpdateRegexMatchSet']
        for p in ['waf-regional:UpdateRegexMatchSet']:
            res = {}
            for nm in ["ChangeToken","Updates","RegexMatchSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateRegexMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_regex_pattern_set(self, *args, **kwargs):
        __protego_used['waf-regional']['update_regex_pattern_set']=['waf-regional:UpdateRegexPatternSet']
        for p in ['waf-regional:UpdateRegexPatternSet']:
            res = {}
            for nm in ["RegexPatternSetId","ChangeToken","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rule(self, *args, **kwargs):
        __protego_used['waf-regional']['update_rule']=['waf-regional:UpdateRule']
        for p in ['waf-regional:UpdateRule']:
            res = {}
            for nm in ["ChangeToken","RuleId","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rule_group(self, *args, **kwargs):
        __protego_used['waf-regional']['update_rule_group']=['waf-regional:UpdateRuleGroup']
        for p in ['waf-regional:UpdateRuleGroup']:
            res = {}
            for nm in ["ChangeToken","RuleGroupId","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_size_constraint_set(self, *args, **kwargs):
        __protego_used['waf-regional']['update_size_constraint_set']=['waf-regional:UpdateSizeConstraintSet']
        for p in ['waf-regional:UpdateSizeConstraintSet']:
            res = {}
            for nm in ["ChangeToken","Updates","SizeConstraintSetId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateSizeConstraintSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_sql_injection_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['update_sql_injection_match_set']=['waf-regional:UpdateSqlInjectionMatchSet']
        for p in ['waf-regional:UpdateSqlInjectionMatchSet']:
            res = {}
            for nm in ["SqlInjectionMatchSetId","ChangeToken","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateSqlInjectionMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_web_acl(self, *args, **kwargs):
        __protego_used['waf-regional']['update_web_acl']=['waf-regional:UpdateWebACL']
        for p in ['waf-regional:UpdateWebACL']:
            res = {}
            for nm in ["WebACLId","ChangeToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_xss_match_set(self, *args, **kwargs):
        __protego_used['waf-regional']['update_xss_match_set']=['waf-regional:UpdateXssMatchSet']
        for p in ['waf-regional:UpdateXssMatchSet']:
            res = {}
            for nm in ["XssMatchSetId","ChangeToken","Updates"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['waf-regional'].append({'action': "UpdateXssMatchSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class wafv2:
    def __init__(self, region_name=__default_region):
        __protego_used['wafv2']= __protego_used.get('wafv2', {})
        __protego_resource_map['wafv2']=__protego_resource_map.get('wafv2', [])
        self.region = region_name
    def associate_web_acl(self, *args, **kwargs):
        __protego_used['wafv2']['associate_web_acl']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["WebACLArn","ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "AssociateWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def check_capacity(self, *args, **kwargs):
        __protego_used['wafv2']['check_capacity']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope","Rules"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "CheckCapacity", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_ip_set(self, *args, **kwargs):
        __protego_used['wafv2']['create_ip_set']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Addresses","Scope","IPAddressVersion","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "CreateIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_regex_pattern_set(self, *args, **kwargs):
        __protego_used['wafv2']['create_regex_pattern_set']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["RegularExpressionList","Scope","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "CreateRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_rule_group(self, *args, **kwargs):
        __protego_used['wafv2']['create_rule_group']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope","Capacity","Name","VisibilityConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "CreateRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_web_acl(self, *args, **kwargs):
        __protego_used['wafv2']['create_web_acl']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope","DefaultAction","Name","VisibilityConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "CreateWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ip_set(self, *args, **kwargs):
        __protego_used['wafv2']['delete_ip_set']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["LockToken","Scope","Name","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "DeleteIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_logging_configuration(self, *args, **kwargs):
        __protego_used['wafv2']['delete_logging_configuration']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "DeleteLoggingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_regex_pattern_set(self, *args, **kwargs):
        __protego_used['wafv2']['delete_regex_pattern_set']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["LockToken","Scope","Name","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "DeleteRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_rule_group(self, *args, **kwargs):
        __protego_used['wafv2']['delete_rule_group']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["LockToken","Scope","Name","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "DeleteRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_web_acl(self, *args, **kwargs):
        __protego_used['wafv2']['delete_web_acl']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["LockToken","Scope","Name","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "DeleteWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_managed_rule_group(self, *args, **kwargs):
        __protego_used['wafv2']['describe_managed_rule_group']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope","VendorName","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "DescribeManagedRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_web_acl(self, *args, **kwargs):
        __protego_used['wafv2']['disassociate_web_acl']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "DisassociateWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_ip_set(self, *args, **kwargs):
        __protego_used['wafv2']['get_ip_set']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope","Name","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "GetIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_logging_configuration(self, *args, **kwargs):
        __protego_used['wafv2']['get_logging_configuration']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "GetLoggingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rate_based_statement_managed_keys(self, *args, **kwargs):
        __protego_used['wafv2']['get_rate_based_statement_managed_keys']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["RuleName","WebACLId","Scope","WebACLName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "GetRateBasedStatementManagedKeys", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_regex_pattern_set(self, *args, **kwargs):
        __protego_used['wafv2']['get_regex_pattern_set']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope","Name","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "GetRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_rule_group(self, *args, **kwargs):
        __protego_used['wafv2']['get_rule_group']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope","Name","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "GetRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sampled_requests(self, *args, **kwargs):
        __protego_used['wafv2']['get_sampled_requests']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["MaxItems","TimeWindow","Scope","RuleMetricName","WebAclArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "GetSampledRequests", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_web_acl(self, *args, **kwargs):
        __protego_used['wafv2']['get_web_acl']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope","Name","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "GetWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_web_acl_for_resource(self, *args, **kwargs):
        __protego_used['wafv2']['get_web_acl_for_resource']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["ResourceArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "GetWebACLForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_available_managed_rule_groups(self, *args, **kwargs):
        __protego_used['wafv2']['list_available_managed_rule_groups']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "ListAvailableManagedRuleGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_ip_sets(self, *args, **kwargs):
        __protego_used['wafv2']['list_ip_sets']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "ListIPSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_logging_configurations(self, *args, **kwargs):
        __protego_used['wafv2']['list_logging_configurations']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "ListLoggingConfigurations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_regex_pattern_sets(self, *args, **kwargs):
        __protego_used['wafv2']['list_regex_pattern_sets']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "ListRegexPatternSets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resources_for_web_acl(self, *args, **kwargs):
        __protego_used['wafv2']['list_resources_for_web_acl']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["WebACLArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "ListResourcesForWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_rule_groups(self, *args, **kwargs):
        __protego_used['wafv2']['list_rule_groups']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "ListRuleGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_tags_for_resource(self, *args, **kwargs):
        __protego_used['wafv2']['list_tags_for_resource']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["ResourceARN"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "ListTagsForResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_web_acls(self, *args, **kwargs):
        __protego_used['wafv2']['list_web_acls']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Scope"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "ListWebACLs", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_logging_configuration(self, *args, **kwargs):
        __protego_used['wafv2']['put_logging_configuration']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["LoggingConfiguration"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "PutLoggingConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def tag_resource(self, *args, **kwargs):
        __protego_used['wafv2']['tag_resource']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["ResourceARN","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "TagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def untag_resource(self, *args, **kwargs):
        __protego_used['wafv2']['untag_resource']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["ResourceARN","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "UntagResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_ip_set(self, *args, **kwargs):
        __protego_used['wafv2']['update_ip_set']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["LockToken","Name","Addresses","Scope","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "UpdateIPSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_regex_pattern_set(self, *args, **kwargs):
        __protego_used['wafv2']['update_regex_pattern_set']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["RegularExpressionList","LockToken","Name","Scope","Id"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "UpdateRegexPatternSet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rule_group(self, *args, **kwargs):
        __protego_used['wafv2']['update_rule_group']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["LockToken","Name","Scope","Id","VisibilityConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "UpdateRuleGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_web_acl(self, *args, **kwargs):
        __protego_used['wafv2']['update_web_acl']=['wafv2:*']
        for p in ['wafv2:*']:
            res = {}
            for nm in ["Name","LockToken","DefaultAction","Scope","Id","VisibilityConfig"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['wafv2'].append({'action': "UpdateWebACL", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class workdocs:
    def __init__(self, region_name=__default_region):
        __protego_used['workdocs']= __protego_used.get('workdocs', {})
        __protego_resource_map['workdocs']=__protego_resource_map.get('workdocs', [])
        self.region = region_name
    def abort_document_version_upload(self, *args, **kwargs):
        __protego_used['workdocs']['abort_document_version_upload']=['workdocs:AbortDocumentVersionUpload']
        for p in ['workdocs:AbortDocumentVersionUpload']:
            res = {}
            for nm in ["VersionId","DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "AbortDocumentVersionUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def activate_user(self, *args, **kwargs):
        __protego_used['workdocs']['activate_user']=['workdocs:ActivateUser']
        for p in ['workdocs:ActivateUser']:
            res = {}
            for nm in ["UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "ActivateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def add_resource_permissions(self, *args, **kwargs):
        __protego_used['workdocs']['add_resource_permissions']=['workdocs:AddResourcePermissions']
        for p in ['workdocs:AddResourcePermissions']:
            res = {}
            for nm in ["Principals","ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "AddResourcePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_comment(self, *args, **kwargs):
        __protego_used['workdocs']['create_comment']=['workdocs:*']
        for p in ['workdocs:*']:
            res = {}
            for nm in ["Text","VersionId","DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "CreateComment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_custom_metadata(self, *args, **kwargs):
        __protego_used['workdocs']['create_custom_metadata']=['workdocs:*']
        for p in ['workdocs:*']:
            res = {}
            for nm in ["CustomMetadata","ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "CreateCustomMetadata", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_folder(self, *args, **kwargs):
        __protego_used['workdocs']['create_folder']=['workdocs:CreateFolder']
        for p in ['workdocs:CreateFolder']:
            res = {}
            for nm in ["ParentFolderId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "CreateFolder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_labels(self, *args, **kwargs):
        __protego_used['workdocs']['create_labels']=['workdocs:*']
        for p in ['workdocs:*']:
            res = {}
            for nm in ["Labels","ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "CreateLabels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_notification_subscription(self, *args, **kwargs):
        __protego_used['workdocs']['create_notification_subscription']=['workdocs:CreateNotificationSubscription']
        for p in ['workdocs:CreateNotificationSubscription']:
            res = {}
            for nm in ["Endpoint","Protocol","SubscriptionType","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "CreateNotificationSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user(self, *args, **kwargs):
        __protego_used['workdocs']['create_user']=['workdocs:CreateUser']
        for p in ['workdocs:CreateUser']:
            res = {}
            for nm in ["Surname","GivenName","Password","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "CreateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deactivate_user(self, *args, **kwargs):
        __protego_used['workdocs']['deactivate_user']=['workdocs:DeactivateUser']
        for p in ['workdocs:DeactivateUser']:
            res = {}
            for nm in ["UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DeactivateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_comment(self, *args, **kwargs):
        __protego_used['workdocs']['delete_comment']=['workdocs:*']
        for p in ['workdocs:*']:
            res = {}
            for nm in ["CommentId","VersionId","DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DeleteComment", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_custom_metadata(self, *args, **kwargs):
        __protego_used['workdocs']['delete_custom_metadata']=['workdocs:*']
        for p in ['workdocs:*']:
            res = {}
            for nm in ["ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DeleteCustomMetadata", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_document(self, *args, **kwargs):
        __protego_used['workdocs']['delete_document']=['workdocs:DeleteDocument']
        for p in ['workdocs:DeleteDocument']:
            res = {}
            for nm in ["DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DeleteDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_folder(self, *args, **kwargs):
        __protego_used['workdocs']['delete_folder']=['workdocs:DeleteFolder']
        for p in ['workdocs:DeleteFolder']:
            res = {}
            for nm in ["FolderId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DeleteFolder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_folder_contents(self, *args, **kwargs):
        __protego_used['workdocs']['delete_folder_contents']=['workdocs:DeleteFolderContents']
        for p in ['workdocs:DeleteFolderContents']:
            res = {}
            for nm in ["FolderId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DeleteFolderContents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_labels(self, *args, **kwargs):
        __protego_used['workdocs']['delete_labels']=['workdocs:*']
        for p in ['workdocs:*']:
            res = {}
            for nm in ["ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DeleteLabels", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_notification_subscription(self, *args, **kwargs):
        __protego_used['workdocs']['delete_notification_subscription']=['workdocs:DeleteNotificationSubscription']
        for p in ['workdocs:DeleteNotificationSubscription']:
            res = {}
            for nm in ["OrganizationId","SubscriptionId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DeleteNotificationSubscription", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user(self, *args, **kwargs):
        __protego_used['workdocs']['delete_user']=['workdocs:DeleteUser']
        for p in ['workdocs:DeleteUser']:
            res = {}
            for nm in ["UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DeleteUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_activities(self, *args, **kwargs):
        __protego_used['workdocs']['describe_activities']=['workdocs:*']
        for p in ['workdocs:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DescribeActivities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_comments(self, *args, **kwargs):
        __protego_used['workdocs']['describe_comments']=['workdocs:*']
        for p in ['workdocs:*']:
            res = {}
            for nm in ["VersionId","DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DescribeComments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_document_versions(self, *args, **kwargs):
        __protego_used['workdocs']['describe_document_versions']=['workdocs:DescribeDocumentVersions']
        for p in ['workdocs:DescribeDocumentVersions']:
            res = {}
            for nm in ["DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DescribeDocumentVersions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_folder_contents(self, *args, **kwargs):
        __protego_used['workdocs']['describe_folder_contents']=['workdocs:DescribeFolderContents']
        for p in ['workdocs:DescribeFolderContents']:
            res = {}
            for nm in ["FolderId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DescribeFolderContents", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_groups(self, *args, **kwargs):
        __protego_used['workdocs']['describe_groups']=['workdocs:*']
        for p in ['workdocs:*']:
            res = {}
            for nm in ["SearchQuery"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DescribeGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_notification_subscriptions(self, *args, **kwargs):
        __protego_used['workdocs']['describe_notification_subscriptions']=['workdocs:DescribeNotificationSubscriptions']
        for p in ['workdocs:DescribeNotificationSubscriptions']:
            res = {}
            for nm in ["OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DescribeNotificationSubscriptions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_resource_permissions(self, *args, **kwargs):
        __protego_used['workdocs']['describe_resource_permissions']=['workdocs:DescribeResourcePermissions']
        for p in ['workdocs:DescribeResourcePermissions']:
            res = {}
            for nm in ["ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DescribeResourcePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_root_folders(self, *args, **kwargs):
        __protego_used['workdocs']['describe_root_folders']=['workdocs:*']
        for p in ['workdocs:*']:
            res = {}
            for nm in ["AuthenticationToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DescribeRootFolders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_users(self, *args, **kwargs):
        __protego_used['workdocs']['describe_users']=['workdocs:DescribeUsers']
        for p in ['workdocs:DescribeUsers']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "DescribeUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_current_user(self, *args, **kwargs):
        __protego_used['workdocs']['get_current_user']=['workdocs:*']
        for p in ['workdocs:*']:
            res = {}
            for nm in ["AuthenticationToken"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "GetCurrentUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_document(self, *args, **kwargs):
        __protego_used['workdocs']['get_document']=['workdocs:GetDocument']
        for p in ['workdocs:GetDocument']:
            res = {}
            for nm in ["DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "GetDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_document_path(self, *args, **kwargs):
        __protego_used['workdocs']['get_document_path']=['workdocs:GetDocumentPath']
        for p in ['workdocs:GetDocumentPath']:
            res = {}
            for nm in ["DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "GetDocumentPath", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_document_version(self, *args, **kwargs):
        __protego_used['workdocs']['get_document_version']=['workdocs:GetDocumentVersion']
        for p in ['workdocs:GetDocumentVersion']:
            res = {}
            for nm in ["VersionId","DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "GetDocumentVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_folder(self, *args, **kwargs):
        __protego_used['workdocs']['get_folder']=['workdocs:GetFolder']
        for p in ['workdocs:GetFolder']:
            res = {}
            for nm in ["FolderId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "GetFolder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_folder_path(self, *args, **kwargs):
        __protego_used['workdocs']['get_folder_path']=['workdocs:GetFolderPath']
        for p in ['workdocs:GetFolderPath']:
            res = {}
            for nm in ["FolderId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "GetFolderPath", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_resources(self, *args, **kwargs):
        __protego_used['workdocs']['get_resources']=['workdocs:GetResources']
        for p in ['workdocs:GetResources']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "GetResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def initiate_document_version_upload(self, *args, **kwargs):
        __protego_used['workdocs']['initiate_document_version_upload']=['workdocs:InitiateDocumentVersionUpload']
        for p in ['workdocs:InitiateDocumentVersionUpload']:
            res = {}
            for nm in ["ParentFolderId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "InitiateDocumentVersionUpload", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_all_resource_permissions(self, *args, **kwargs):
        __protego_used['workdocs']['remove_all_resource_permissions']=['workdocs:RemoveAllResourcePermissions']
        for p in ['workdocs:RemoveAllResourcePermissions']:
            res = {}
            for nm in ["ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "RemoveAllResourcePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def remove_resource_permission(self, *args, **kwargs):
        __protego_used['workdocs']['remove_resource_permission']=['workdocs:RemoveResourcePermission']
        for p in ['workdocs:RemoveResourcePermission']:
            res = {}
            for nm in ["PrincipalId","ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "RemoveResourcePermission", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_document(self, *args, **kwargs):
        __protego_used['workdocs']['update_document']=['workdocs:UpdateDocument']
        for p in ['workdocs:UpdateDocument']:
            res = {}
            for nm in ["DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "UpdateDocument", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_document_version(self, *args, **kwargs):
        __protego_used['workdocs']['update_document_version']=['workdocs:UpdateDocumentVersion']
        for p in ['workdocs:UpdateDocumentVersion']:
            res = {}
            for nm in ["VersionId","DocumentId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "UpdateDocumentVersion", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_folder(self, *args, **kwargs):
        __protego_used['workdocs']['update_folder']=['workdocs:UpdateFolder']
        for p in ['workdocs:UpdateFolder']:
            res = {}
            for nm in ["FolderId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "UpdateFolder", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_user(self, *args, **kwargs):
        __protego_used['workdocs']['update_user']=['workdocs:UpdateUser']
        for p in ['workdocs:UpdateUser']:
            res = {}
            for nm in ["UserId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workdocs'].append({'action': "UpdateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class worklink:
    def __init__(self, region_name=__default_region):
        __protego_used['worklink']= __protego_used.get('worklink', {})
        __protego_resource_map['worklink']=__protego_resource_map.get('worklink', [])
        self.region = region_name
    def associate_domain(self, *args, **kwargs):
        __protego_used['worklink']['associate_domain']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","DomainName","AcmCertificateArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "AssociateDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_website_authorization_provider(self, *args, **kwargs):
        __protego_used['worklink']['associate_website_authorization_provider']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","AuthorizationProviderType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "AssociateWebsiteAuthorizationProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_website_certificate_authority(self, *args, **kwargs):
        __protego_used['worklink']['associate_website_certificate_authority']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","Certificate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "AssociateWebsiteCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_fleet(self, *args, **kwargs):
        __protego_used['worklink']['create_fleet']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "CreateFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_fleet(self, *args, **kwargs):
        __protego_used['worklink']['delete_fleet']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DeleteFleet", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_audit_stream_configuration(self, *args, **kwargs):
        __protego_used['worklink']['describe_audit_stream_configuration']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DescribeAuditStreamConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_company_network_configuration(self, *args, **kwargs):
        __protego_used['worklink']['describe_company_network_configuration']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DescribeCompanyNetworkConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_device(self, *args, **kwargs):
        __protego_used['worklink']['describe_device']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","DeviceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DescribeDevice", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_device_policy_configuration(self, *args, **kwargs):
        __protego_used['worklink']['describe_device_policy_configuration']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DescribeDevicePolicyConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_domain(self, *args, **kwargs):
        __protego_used['worklink']['describe_domain']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DescribeDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_fleet_metadata(self, *args, **kwargs):
        __protego_used['worklink']['describe_fleet_metadata']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DescribeFleetMetadata", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_identity_provider_configuration(self, *args, **kwargs):
        __protego_used['worklink']['describe_identity_provider_configuration']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DescribeIdentityProviderConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_website_certificate_authority(self, *args, **kwargs):
        __protego_used['worklink']['describe_website_certificate_authority']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","WebsiteCaId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DescribeWebsiteCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_domain(self, *args, **kwargs):
        __protego_used['worklink']['disassociate_domain']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DisassociateDomain", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_website_authorization_provider(self, *args, **kwargs):
        __protego_used['worklink']['disassociate_website_authorization_provider']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","AuthorizationProviderId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DisassociateWebsiteAuthorizationProvider", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_website_certificate_authority(self, *args, **kwargs):
        __protego_used['worklink']['disassociate_website_certificate_authority']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","WebsiteCaId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "DisassociateWebsiteCertificateAuthority", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_devices(self, *args, **kwargs):
        __protego_used['worklink']['list_devices']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "ListDevices", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_domains(self, *args, **kwargs):
        __protego_used['worklink']['list_domains']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "ListDomains", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_fleets(self, *args, **kwargs):
        __protego_used['worklink']['list_fleets']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "ListFleets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_website_authorization_providers(self, *args, **kwargs):
        __protego_used['worklink']['list_website_authorization_providers']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "ListWebsiteAuthorizationProviders", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_website_certificate_authorities(self, *args, **kwargs):
        __protego_used['worklink']['list_website_certificate_authorities']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "ListWebsiteCertificateAuthorities", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_domain_access(self, *args, **kwargs):
        __protego_used['worklink']['restore_domain_access']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "RestoreDomainAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_domain_access(self, *args, **kwargs):
        __protego_used['worklink']['revoke_domain_access']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "RevokeDomainAccess", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def sign_out_user(self, *args, **kwargs):
        __protego_used['worklink']['sign_out_user']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","Username"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "SignOutUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_audit_stream_configuration(self, *args, **kwargs):
        __protego_used['worklink']['update_audit_stream_configuration']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "UpdateAuditStreamConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_company_network_configuration(self, *args, **kwargs):
        __protego_used['worklink']['update_company_network_configuration']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","SecurityGroupIds","VpcId","SubnetIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "UpdateCompanyNetworkConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_device_policy_configuration(self, *args, **kwargs):
        __protego_used['worklink']['update_device_policy_configuration']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "UpdateDevicePolicyConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_domain_metadata(self, *args, **kwargs):
        __protego_used['worklink']['update_domain_metadata']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","DomainName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "UpdateDomainMetadata", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_fleet_metadata(self, *args, **kwargs):
        __protego_used['worklink']['update_fleet_metadata']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "UpdateFleetMetadata", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_identity_provider_configuration(self, *args, **kwargs):
        __protego_used['worklink']['update_identity_provider_configuration']=['worklink:*']
        for p in ['worklink:*']:
            res = {}
            for nm in ["FleetArn","IdentityProviderType"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['worklink'].append({'action': "UpdateIdentityProviderConfiguration", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class workmail:
    def __init__(self, region_name=__default_region):
        __protego_used['workmail']= __protego_used.get('workmail', {})
        __protego_resource_map['workmail']=__protego_resource_map.get('workmail', [])
        self.region = region_name
    def associate_delegate_to_resource(self, *args, **kwargs):
        __protego_used['workmail']['associate_delegate_to_resource']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["ResourceId","EntityId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "AssociateDelegateToResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def associate_member_to_group(self, *args, **kwargs):
        __protego_used['workmail']['associate_member_to_group']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["GroupId","MemberId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "AssociateMemberToGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_alias(self, *args, **kwargs):
        __protego_used['workmail']['create_alias']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["Alias","EntityId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "CreateAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_group(self, *args, **kwargs):
        __protego_used['workmail']['create_group']=['workmail:CreateGroup']
        for p in ['workmail:CreateGroup']:
            res = {}
            for nm in ["OrganizationId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "CreateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_resource(self, *args, **kwargs):
        __protego_used['workmail']['create_resource']=['workmail:CreateResource']
        for p in ['workmail:CreateResource']:
            res = {}
            for nm in ["Type","OrganizationId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "CreateResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_user(self, *args, **kwargs):
        __protego_used['workmail']['create_user']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["DisplayName","Password","OrganizationId","Name"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "CreateUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_alias(self, *args, **kwargs):
        __protego_used['workmail']['delete_alias']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["Alias","EntityId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DeleteAlias", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_group(self, *args, **kwargs):
        __protego_used['workmail']['delete_group']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["GroupId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DeleteGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_mailbox_permissions(self, *args, **kwargs):
        __protego_used['workmail']['delete_mailbox_permissions']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["GranteeId","EntityId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DeleteMailboxPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_resource(self, *args, **kwargs):
        __protego_used['workmail']['delete_resource']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["ResourceId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DeleteResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_user(self, *args, **kwargs):
        __protego_used['workmail']['delete_user']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["UserId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DeleteUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_from_work_mail(self, *args, **kwargs):
        __protego_used['workmail']['deregister_from_work_mail']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["EntityId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DeregisterFromWorkMail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_group(self, *args, **kwargs):
        __protego_used['workmail']['describe_group']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["GroupId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DescribeGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_organization(self, *args, **kwargs):
        __protego_used['workmail']['describe_organization']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DescribeOrganization", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_resource(self, *args, **kwargs):
        __protego_used['workmail']['describe_resource']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["ResourceId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DescribeResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_user(self, *args, **kwargs):
        __protego_used['workmail']['describe_user']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["UserId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DescribeUser", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_delegate_from_resource(self, *args, **kwargs):
        __protego_used['workmail']['disassociate_delegate_from_resource']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["ResourceId","EntityId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DisassociateDelegateFromResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_member_from_group(self, *args, **kwargs):
        __protego_used['workmail']['disassociate_member_from_group']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["GroupId","MemberId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "DisassociateMemberFromGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_mailbox_details(self, *args, **kwargs):
        __protego_used['workmail']['get_mailbox_details']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["UserId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "GetMailboxDetails", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_aliases(self, *args, **kwargs):
        __protego_used['workmail']['list_aliases']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["EntityId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "ListAliases", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_group_members(self, *args, **kwargs):
        __protego_used['workmail']['list_group_members']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["GroupId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "ListGroupMembers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_groups(self, *args, **kwargs):
        __protego_used['workmail']['list_groups']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "ListGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_mailbox_permissions(self, *args, **kwargs):
        __protego_used['workmail']['list_mailbox_permissions']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["EntityId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "ListMailboxPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_organizations(self, *args, **kwargs):
        __protego_used['workmail']['list_organizations']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "ListOrganizations", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resource_delegates(self, *args, **kwargs):
        __protego_used['workmail']['list_resource_delegates']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["ResourceId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "ListResourceDelegates", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_resources(self, *args, **kwargs):
        __protego_used['workmail']['list_resources']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "ListResources", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_users(self, *args, **kwargs):
        __protego_used['workmail']['list_users']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "ListUsers", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_mailbox_permissions(self, *args, **kwargs):
        __protego_used['workmail']['put_mailbox_permissions']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["GranteeId","EntityId","PermissionValues","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "PutMailboxPermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_to_work_mail(self, *args, **kwargs):
        __protego_used['workmail']['register_to_work_mail']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["EntityId","Email","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "RegisterToWorkMail", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reset_password(self, *args, **kwargs):
        __protego_used['workmail']['reset_password']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["UserId","Password","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "ResetPassword", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_mailbox_quota(self, *args, **kwargs):
        __protego_used['workmail']['update_mailbox_quota']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["UserId","MailboxQuota","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "UpdateMailboxQuota", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_primary_email_address(self, *args, **kwargs):
        __protego_used['workmail']['update_primary_email_address']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["EntityId","Email","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "UpdatePrimaryEmailAddress", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_resource(self, *args, **kwargs):
        __protego_used['workmail']['update_resource']=['workmail:*']
        for p in ['workmail:*']:
            res = {}
            for nm in ["ResourceId","OrganizationId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmail'].append({'action': "UpdateResource", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class workmailmessageflow:
    def __init__(self, region_name=__default_region):
        __protego_used['workmailmessageflow']= __protego_used.get('workmailmessageflow', {})
        __protego_resource_map['workmailmessageflow']=__protego_resource_map.get('workmailmessageflow', [])
        self.region = region_name
    def get_raw_message_content(self, *args, **kwargs):
        __protego_used['workmailmessageflow']['get_raw_message_content']=['workmailmessageflow:*']
        for p in ['workmailmessageflow:*']:
            res = {}
            for nm in ["messageId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workmailmessageflow'].append({'action': "GetRawMessageContent", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class workspaces:
    def __init__(self, region_name=__default_region):
        __protego_used['workspaces']= __protego_used.get('workspaces', {})
        __protego_resource_map['workspaces']=__protego_resource_map.get('workspaces', [])
        self.region = region_name
    def associate_ip_groups(self, *args, **kwargs):
        __protego_used['workspaces']['associate_ip_groups']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["DirectoryId","GroupIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "AssociateIpGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def authorize_ip_rules(self, *args, **kwargs):
        __protego_used['workspaces']['authorize_ip_rules']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["UserRules","GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "AuthorizeIpRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def copy_workspace_image(self, *args, **kwargs):
        __protego_used['workspaces']['copy_workspace_image']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["SourceImageId","Name","SourceRegion"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "CopyWorkspaceImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_ip_group(self, *args, **kwargs):
        __protego_used['workspaces']['create_ip_group']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "CreateIpGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_tags(self, *args, **kwargs):
        __protego_used['workspaces']['create_tags']=['workspaces:CreateTags']
        for p in ['workspaces:CreateTags']:
            res = {}
            for nm in ["ResourceId","Tags"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "CreateTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_workspaces(self, *args, **kwargs):
        __protego_used['workspaces']['create_workspaces']=['workspaces:CreateWorkspaces','workspaces:CreateWorkspaces']
        for p in ['workspaces:CreateWorkspaces','workspaces:CreateWorkspaces']:
            res = {}
            for nm in ["Workspaces"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "CreateWorkspaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_ip_group(self, *args, **kwargs):
        __protego_used['workspaces']['delete_ip_group']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DeleteIpGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_tags(self, *args, **kwargs):
        __protego_used['workspaces']['delete_tags']=['workspaces:DeleteTags']
        for p in ['workspaces:DeleteTags']:
            res = {}
            for nm in ["ResourceId","TagKeys"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DeleteTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_workspace_image(self, *args, **kwargs):
        __protego_used['workspaces']['delete_workspace_image']=['workspaces:DeleteWorkspaceImage']
        for p in ['workspaces:DeleteWorkspaceImage']:
            res = {}
            for nm in ["ImageId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DeleteWorkspaceImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def deregister_workspace_directory(self, *args, **kwargs):
        __protego_used['workspaces']['deregister_workspace_directory']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DeregisterWorkspaceDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account(self, *args, **kwargs):
        __protego_used['workspaces']['describe_account']=['workspaces:DescribeAccount']
        for p in ['workspaces:DescribeAccount']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DescribeAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_account_modifications(self, *args, **kwargs):
        __protego_used['workspaces']['describe_account_modifications']=['workspaces:DescribeAccountModifications']
        for p in ['workspaces:DescribeAccountModifications']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DescribeAccountModifications", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_client_properties(self, *args, **kwargs):
        __protego_used['workspaces']['describe_client_properties']=['workspaces:DescribeClientProperties']
        for p in ['workspaces:DescribeClientProperties']:
            res = {}
            for nm in ["ResourceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DescribeClientProperties", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_ip_groups(self, *args, **kwargs):
        __protego_used['workspaces']['describe_ip_groups']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DescribeIpGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_tags(self, *args, **kwargs):
        __protego_used['workspaces']['describe_tags']=['workspaces:DescribeTags']
        for p in ['workspaces:DescribeTags']:
            res = {}
            for nm in ["ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DescribeTags", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_workspace_bundles(self, *args, **kwargs):
        __protego_used['workspaces']['describe_workspace_bundles']=['workspaces:DescribeWorkspaceBundles']
        for p in ['workspaces:DescribeWorkspaceBundles']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DescribeWorkspaceBundles", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_workspace_directories(self, *args, **kwargs):
        __protego_used['workspaces']['describe_workspace_directories']=['workspaces:DescribeWorkspaceDirectories']
        for p in ['workspaces:DescribeWorkspaceDirectories']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DescribeWorkspaceDirectories", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_workspace_images(self, *args, **kwargs):
        __protego_used['workspaces']['describe_workspace_images']=['workspaces:DescribeWorkspaceImages']
        for p in ['workspaces:DescribeWorkspaceImages']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DescribeWorkspaceImages", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_workspace_snapshots(self, *args, **kwargs):
        __protego_used['workspaces']['describe_workspace_snapshots']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["WorkspaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DescribeWorkspaceSnapshots", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_workspaces(self, *args, **kwargs):
        __protego_used['workspaces']['describe_workspaces']=['workspaces:DescribeWorkspaces']
        for p in ['workspaces:DescribeWorkspaces']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DescribeWorkspaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def describe_workspaces_connection_status(self, *args, **kwargs):
        __protego_used['workspaces']['describe_workspaces_connection_status']=['workspaces:DescribeWorkspacesConnectionStatus']
        for p in ['workspaces:DescribeWorkspacesConnectionStatus']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DescribeWorkspacesConnectionStatus", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def disassociate_ip_groups(self, *args, **kwargs):
        __protego_used['workspaces']['disassociate_ip_groups']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["DirectoryId","GroupIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "DisassociateIpGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def import_workspace_image(self, *args, **kwargs):
        __protego_used['workspaces']['import_workspace_image']=['workspaces:ImportWorkspaceImage']
        for p in ['workspaces:ImportWorkspaceImage']:
            res = {}
            for nm in ["ImageName","ImageDescription","Ec2ImageId","IngestionProcess"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "ImportWorkspaceImage", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def list_available_management_cidr_ranges(self, *args, **kwargs):
        __protego_used['workspaces']['list_available_management_cidr_ranges']=['workspaces:ListAvailableManagementCidrRanges']
        for p in ['workspaces:ListAvailableManagementCidrRanges']:
            res = {}
            for nm in ["ManagementCidrRangeConstraint"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "ListAvailableManagementCidrRanges", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_account(self, *args, **kwargs):
        __protego_used['workspaces']['modify_account']=['workspaces:ModifyAccount']
        for p in ['workspaces:ModifyAccount']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "ModifyAccount", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_client_properties(self, *args, **kwargs):
        __protego_used['workspaces']['modify_client_properties']=['workspaces:ModifyClientProperties']
        for p in ['workspaces:ModifyClientProperties']:
            res = {}
            for nm in ["ResourceId","ClientProperties"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "ModifyClientProperties", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_selfservice_permissions(self, *args, **kwargs):
        __protego_used['workspaces']['modify_selfservice_permissions']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["SelfservicePermissions","ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "ModifySelfservicePermissions", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_workspace_access_properties(self, *args, **kwargs):
        __protego_used['workspaces']['modify_workspace_access_properties']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["ResourceId","WorkspaceAccessProperties"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "ModifyWorkspaceAccessProperties", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_workspace_creation_properties(self, *args, **kwargs):
        __protego_used['workspaces']['modify_workspace_creation_properties']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["WorkspaceCreationProperties","ResourceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "ModifyWorkspaceCreationProperties", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_workspace_properties(self, *args, **kwargs):
        __protego_used['workspaces']['modify_workspace_properties']=['workspaces:ModifyWorkspaceProperties']
        for p in ['workspaces:ModifyWorkspaceProperties']:
            res = {}
            for nm in ["WorkspaceId","WorkspaceProperties"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "ModifyWorkspaceProperties", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def modify_workspace_state(self, *args, **kwargs):
        __protego_used['workspaces']['modify_workspace_state']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["WorkspaceId","WorkspaceState"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "ModifyWorkspaceState", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def reboot_workspaces(self, *args, **kwargs):
        __protego_used['workspaces']['reboot_workspaces']=['workspaces:RebootWorkspaces']
        for p in ['workspaces:RebootWorkspaces']:
            res = {}
            for nm in ["RebootWorkspaceRequests"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "RebootWorkspaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def rebuild_workspaces(self, *args, **kwargs):
        __protego_used['workspaces']['rebuild_workspaces']=['workspaces:RebuildWorkspaces']
        for p in ['workspaces:RebuildWorkspaces']:
            res = {}
            for nm in ["RebuildWorkspaceRequests"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "RebuildWorkspaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def register_workspace_directory(self, *args, **kwargs):
        __protego_used['workspaces']['register_workspace_directory']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["EnableWorkDocs","DirectoryId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "RegisterWorkspaceDirectory", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def restore_workspace(self, *args, **kwargs):
        __protego_used['workspaces']['restore_workspace']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["WorkspaceId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "RestoreWorkspace", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def revoke_ip_rules(self, *args, **kwargs):
        __protego_used['workspaces']['revoke_ip_rules']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["UserRules","GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "RevokeIpRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def start_workspaces(self, *args, **kwargs):
        __protego_used['workspaces']['start_workspaces']=['workspaces:StartWorkspaces']
        for p in ['workspaces:StartWorkspaces']:
            res = {}
            for nm in ["StartWorkspaceRequests"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "StartWorkspaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def stop_workspaces(self, *args, **kwargs):
        __protego_used['workspaces']['stop_workspaces']=['workspaces:StopWorkspaces']
        for p in ['workspaces:StopWorkspaces']:
            res = {}
            for nm in ["StopWorkspaceRequests"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "StopWorkspaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def terminate_workspaces(self, *args, **kwargs):
        __protego_used['workspaces']['terminate_workspaces']=['workspaces:TerminateWorkspaces']
        for p in ['workspaces:TerminateWorkspaces']:
            res = {}
            for nm in ["TerminateWorkspaceRequests"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "TerminateWorkspaces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_rules_of_ip_group(self, *args, **kwargs):
        __protego_used['workspaces']['update_rules_of_ip_group']=['workspaces:*']
        for p in ['workspaces:*']:
            res = {}
            for nm in ["UserRules","GroupId"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['workspaces'].append({'action': "UpdateRulesOfIpGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
class xray:
    def __init__(self, region_name=__default_region):
        __protego_used['xray']= __protego_used.get('xray', {})
        __protego_resource_map['xray']=__protego_resource_map.get('xray', [])
        self.region = region_name
    def batch_get_traces(self, *args, **kwargs):
        __protego_used['xray']['batch_get_traces']=['xray:BatchGetTraces']
        for p in ['xray:BatchGetTraces']:
            res = {}
            for nm in ["TraceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "BatchGetTraces", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_group(self, *args, **kwargs):
        __protego_used['xray']['create_group']=['xray:CreateGroup']
        for p in ['xray:CreateGroup']:
            res = {}
            for nm in ["GroupName"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "CreateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def create_sampling_rule(self, *args, **kwargs):
        __protego_used['xray']['create_sampling_rule']=['xray:CreateSamplingRule']
        for p in ['xray:CreateSamplingRule']:
            res = {}
            for nm in ["SamplingRule"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "CreateSamplingRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_group(self, *args, **kwargs):
        __protego_used['xray']['delete_group']=['xray:DeleteGroup']
        for p in ['xray:DeleteGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "DeleteGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def delete_sampling_rule(self, *args, **kwargs):
        __protego_used['xray']['delete_sampling_rule']=['xray:DeleteSamplingRule']
        for p in ['xray:DeleteSamplingRule']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "DeleteSamplingRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_encryption_config(self, *args, **kwargs):
        __protego_used['xray']['get_encryption_config']=['xray:GetEncryptionConfig']
        for p in ['xray:GetEncryptionConfig']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "GetEncryptionConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_group(self, *args, **kwargs):
        __protego_used['xray']['get_group']=['xray:GetGroup']
        for p in ['xray:GetGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "GetGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_groups(self, *args, **kwargs):
        __protego_used['xray']['get_groups']=['xray:GetGroups']
        for p in ['xray:GetGroups']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "GetGroups", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sampling_rules(self, *args, **kwargs):
        __protego_used['xray']['get_sampling_rules']=['xray:GetSamplingRules']
        for p in ['xray:GetSamplingRules']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "GetSamplingRules", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sampling_statistic_summaries(self, *args, **kwargs):
        __protego_used['xray']['get_sampling_statistic_summaries']=['xray:GetSamplingStatisticSummaries']
        for p in ['xray:GetSamplingStatisticSummaries']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "GetSamplingStatisticSummaries", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_sampling_targets(self, *args, **kwargs):
        __protego_used['xray']['get_sampling_targets']=['xray:GetSamplingTargets']
        for p in ['xray:GetSamplingTargets']:
            res = {}
            for nm in ["SamplingStatisticsDocuments"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "GetSamplingTargets", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_service_graph(self, *args, **kwargs):
        __protego_used['xray']['get_service_graph']=['xray:GetServiceGraph']
        for p in ['xray:GetServiceGraph']:
            res = {}
            for nm in ["EndTime","StartTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "GetServiceGraph", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_time_series_service_statistics(self, *args, **kwargs):
        __protego_used['xray']['get_time_series_service_statistics']=['xray:GetTimeSeriesServiceStatistics']
        for p in ['xray:GetTimeSeriesServiceStatistics']:
            res = {}
            for nm in ["EndTime","StartTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "GetTimeSeriesServiceStatistics", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_trace_graph(self, *args, **kwargs):
        __protego_used['xray']['get_trace_graph']=['xray:GetTraceGraph']
        for p in ['xray:GetTraceGraph']:
            res = {}
            for nm in ["TraceIds"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "GetTraceGraph", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_trace_summaries(self, *args, **kwargs):
        __protego_used['xray']['get_trace_summaries']=['xray:GetTraceSummaries']
        for p in ['xray:GetTraceSummaries']:
            res = {}
            for nm in ["EndTime","StartTime"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "GetTraceSummaries", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_encryption_config(self, *args, **kwargs):
        __protego_used['xray']['put_encryption_config']=['xray:PutEncryptionConfig']
        for p in ['xray:PutEncryptionConfig']:
            res = {}
            for nm in ["Type"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "PutEncryptionConfig", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_telemetry_records(self, *args, **kwargs):
        __protego_used['xray']['put_telemetry_records']=['xray:PutTelemetryRecords']
        for p in ['xray:PutTelemetryRecords']:
            res = {}
            for nm in ["TelemetryRecords"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "PutTelemetryRecords", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def put_trace_segments(self, *args, **kwargs):
        __protego_used['xray']['put_trace_segments']=['xray:PutTraceSegments']
        for p in ['xray:PutTraceSegments']:
            res = {}
            for nm in ["TraceSegmentDocuments"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "PutTraceSegments", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_group(self, *args, **kwargs):
        __protego_used['xray']['update_group']=['xray:UpdateGroup']
        for p in ['xray:UpdateGroup']:
            res = {}
            for nm in []:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "UpdateGroup", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def update_sampling_rule(self, *args, **kwargs):
        __protego_used['xray']['update_sampling_rule']=['xray:UpdateSamplingRule']
        for p in ['xray:UpdateSamplingRule']:
            res = {}
            for nm in ["SamplingRuleUpdate"]:
                res[nm] = kwargs.get(nm, None)
            res.update(kwargs)
            __protego_resource_map['xray'].append({'action': "UpdateSamplingRule", 'permission':p, 'res': res, 'region': self.region  })
        pass
    def get_paginator(self, op):
        getattr(self, op)(self)
def client(service_name, region_name=__default_region):
    if service_name == 'accessanalyzer':
        return accessanalyzer(region_name)
    if service_name == 'acm':
        return acm(region_name)
    if service_name == 'acm-pca':
        return acm_pca(region_name)
    if service_name == 'alexaforbusiness':
        return alexaforbusiness(region_name)
    if service_name == 'amplify':
        return amplify(region_name)
    if service_name == 'apigateway':
        return apigateway(region_name)
    if service_name == 'apigatewaymanagementapi':
        return apigatewaymanagementapi(region_name)
    if service_name == 'apigatewayv2':
        return apigatewayv2(region_name)
    if service_name == 'appconfig':
        return appconfig(region_name)
    if service_name == 'application-autoscaling':
        return application_autoscaling(region_name)
    if service_name == 'application-insights':
        return application_insights(region_name)
    if service_name == 'appmesh':
        return appmesh(region_name)
    if service_name == 'appstream':
        return appstream(region_name)
    if service_name == 'appsync':
        return appsync(region_name)
    if service_name == 'athena':
        return athena(region_name)
    if service_name == 'autoscaling':
        return autoscaling(region_name)
    if service_name == 'autoscaling-plans':
        return autoscaling_plans(region_name)
    if service_name == 'backup':
        return backup(region_name)
    if service_name == 'batch':
        return batch(region_name)
    if service_name == 'budgets':
        return budgets(region_name)
    if service_name == 'ce':
        return ce(region_name)
    if service_name == 'chime':
        return chime(region_name)
    if service_name == 'cloud9':
        return cloud9(region_name)
    if service_name == 'clouddirectory':
        return clouddirectory(region_name)
    if service_name == 'cloudformation':
        return cloudformation(region_name)
    if service_name == 'cloudfront':
        return cloudfront(region_name)
    if service_name == 'cloudhsm':
        return cloudhsm(region_name)
    if service_name == 'cloudhsmv2':
        return cloudhsmv2(region_name)
    if service_name == 'cloudsearch':
        return cloudsearch(region_name)
    if service_name == 'cloudsearchdomain':
        return cloudsearchdomain(region_name)
    if service_name == 'cloudtrail':
        return cloudtrail(region_name)
    if service_name == 'cloudwatch':
        return cloudwatch(region_name)
    if service_name == 'codebuild':
        return codebuild(region_name)
    if service_name == 'codecommit':
        return codecommit(region_name)
    if service_name == 'codedeploy':
        return codedeploy(region_name)
    if service_name == 'codeguru-reviewer':
        return codeguru_reviewer(region_name)
    if service_name == 'codeguruprofiler':
        return codeguruprofiler(region_name)
    if service_name == 'codepipeline':
        return codepipeline(region_name)
    if service_name == 'codestar':
        return codestar(region_name)
    if service_name == 'codestar-connections':
        return codestar_connections(region_name)
    if service_name == 'codestar-notifications':
        return codestar_notifications(region_name)
    if service_name == 'cognito-identity':
        return cognito_identity(region_name)
    if service_name == 'cognito-idp':
        return cognito_idp(region_name)
    if service_name == 'cognito-sync':
        return cognito_sync(region_name)
    if service_name == 'comprehend':
        return comprehend(region_name)
    if service_name == 'comprehendmedical':
        return comprehendmedical(region_name)
    if service_name == 'compute-optimizer':
        return compute_optimizer(region_name)
    if service_name == 'config':
        return config(region_name)
    if service_name == 'connect':
        return connect(region_name)
    if service_name == 'connectparticipant':
        return connectparticipant(region_name)
    if service_name == 'cur':
        return cur(region_name)
    if service_name == 'dataexchange':
        return dataexchange(region_name)
    if service_name == 'datapipeline':
        return datapipeline(region_name)
    if service_name == 'datasync':
        return datasync(region_name)
    if service_name == 'dax':
        return dax(region_name)
    if service_name == 'detective':
        return detective(region_name)
    if service_name == 'devicefarm':
        return devicefarm(region_name)
    if service_name == 'directconnect':
        return directconnect(region_name)
    if service_name == 'discovery':
        return discovery(region_name)
    if service_name == 'dlm':
        return dlm(region_name)
    if service_name == 'dms':
        return dms(region_name)
    if service_name == 'docdb':
        return docdb(region_name)
    if service_name == 'ds':
        return ds(region_name)
    if service_name == 'dynamodb':
        return dynamodb(region_name)
    if service_name == 'dynamodbstreams':
        return dynamodbstreams(region_name)
    if service_name == 'ebs':
        return ebs(region_name)
    if service_name == 'ec2':
        return ec2(region_name)
    if service_name == 'ec2-instance-connect':
        return ec2_instance_connect(region_name)
    if service_name == 'ecr':
        return ecr(region_name)
    if service_name == 'ecs':
        return ecs(region_name)
    if service_name == 'efs':
        return efs(region_name)
    if service_name == 'eks':
        return eks(region_name)
    if service_name == 'elastic-inference':
        return elastic_inference(region_name)
    if service_name == 'elasticache':
        return elasticache(region_name)
    if service_name == 'elasticbeanstalk':
        return elasticbeanstalk(region_name)
    if service_name == 'elastictranscoder':
        return elastictranscoder(region_name)
    if service_name == 'elb':
        return elb(region_name)
    if service_name == 'elbv2':
        return elbv2(region_name)
    if service_name == 'emr':
        return emr(region_name)
    if service_name == 'es':
        return es(region_name)
    if service_name == 'events':
        return events(region_name)
    if service_name == 'firehose':
        return firehose(region_name)
    if service_name == 'fms':
        return fms(region_name)
    if service_name == 'forecast':
        return forecast(region_name)
    if service_name == 'forecastquery':
        return forecastquery(region_name)
    if service_name == 'frauddetector':
        return frauddetector(region_name)
    if service_name == 'fsx':
        return fsx(region_name)
    if service_name == 'gamelift':
        return gamelift(region_name)
    if service_name == 'glacier':
        return glacier(region_name)
    if service_name == 'globalaccelerator':
        return globalaccelerator(region_name)
    if service_name == 'glue':
        return glue(region_name)
    if service_name == 'greengrass':
        return greengrass(region_name)
    if service_name == 'groundstation':
        return groundstation(region_name)
    if service_name == 'guardduty':
        return guardduty(region_name)
    if service_name == 'health':
        return health(region_name)
    if service_name == 'iam':
        return iam(region_name)
    if service_name == 'imagebuilder':
        return imagebuilder(region_name)
    if service_name == 'importexport':
        return importexport(region_name)
    if service_name == 'inspector':
        return inspector(region_name)
    if service_name == 'iot':
        return iot(region_name)
    if service_name == 'iot-data':
        return iot_data(region_name)
    if service_name == 'iot-jobs-data':
        return iot_jobs_data(region_name)
    if service_name == 'iot1click-devices':
        return iot1click_devices(region_name)
    if service_name == 'iot1click-projects':
        return iot1click_projects(region_name)
    if service_name == 'iotanalytics':
        return iotanalytics(region_name)
    if service_name == 'iotevents':
        return iotevents(region_name)
    if service_name == 'iotevents-data':
        return iotevents_data(region_name)
    if service_name == 'iotsecuretunneling':
        return iotsecuretunneling(region_name)
    if service_name == 'iotthingsgraph':
        return iotthingsgraph(region_name)
    if service_name == 'kafka':
        return kafka(region_name)
    if service_name == 'kendra':
        return kendra(region_name)
    if service_name == 'kinesis':
        return kinesis(region_name)
    if service_name == 'kinesis-video-archived-media':
        return kinesis_video_archived_media(region_name)
    if service_name == 'kinesis-video-media':
        return kinesis_video_media(region_name)
    if service_name == 'kinesis-video-signaling':
        return kinesis_video_signaling(region_name)
    if service_name == 'kinesisanalytics':
        return kinesisanalytics(region_name)
    if service_name == 'kinesisanalyticsv2':
        return kinesisanalyticsv2(region_name)
    if service_name == 'kinesisvideo':
        return kinesisvideo(region_name)
    if service_name == 'kms':
        return kms(region_name)
    if service_name == 'lakeformation':
        return lakeformation(region_name)
    if service_name == 'lambda':
        return Lambda(region_name)
    if service_name == 'lex-models':
        return lex_models(region_name)
    if service_name == 'lex-runtime':
        return lex_runtime(region_name)
    if service_name == 'license-manager':
        return license_manager(region_name)
    if service_name == 'lightsail':
        return lightsail(region_name)
    if service_name == 'logs':
        return logs(region_name)
    if service_name == 'machinelearning':
        return machinelearning(region_name)
    if service_name == 'macie':
        return macie(region_name)
    if service_name == 'managedblockchain':
        return managedblockchain(region_name)
    if service_name == 'marketplace-catalog':
        return marketplace_catalog(region_name)
    if service_name == 'marketplace-entitlement':
        return marketplace_entitlement(region_name)
    if service_name == 'marketplacecommerceanalytics':
        return marketplacecommerceanalytics(region_name)
    if service_name == 'mediaconnect':
        return mediaconnect(region_name)
    if service_name == 'mediaconvert':
        return mediaconvert(region_name)
    if service_name == 'medialive':
        return medialive(region_name)
    if service_name == 'mediapackage':
        return mediapackage(region_name)
    if service_name == 'mediapackage-vod':
        return mediapackage_vod(region_name)
    if service_name == 'mediastore':
        return mediastore(region_name)
    if service_name == 'mediastore-data':
        return mediastore_data(region_name)
    if service_name == 'mediatailor':
        return mediatailor(region_name)
    if service_name == 'meteringmarketplace':
        return meteringmarketplace(region_name)
    if service_name == 'mgh':
        return mgh(region_name)
    if service_name == 'migrationhub-config':
        return migrationhub_config(region_name)
    if service_name == 'mobile':
        return mobile(region_name)
    if service_name == 'mq':
        return mq(region_name)
    if service_name == 'mturk':
        return mturk(region_name)
    if service_name == 'neptune':
        return neptune(region_name)
    if service_name == 'networkmanager':
        return networkmanager(region_name)
    if service_name == 'opsworks':
        return opsworks(region_name)
    if service_name == 'opsworkscm':
        return opsworkscm(region_name)
    if service_name == 'organizations':
        return organizations(region_name)
    if service_name == 'outposts':
        return outposts(region_name)
    if service_name == 'personalize':
        return personalize(region_name)
    if service_name == 'personalize-events':
        return personalize_events(region_name)
    if service_name == 'personalize-runtime':
        return personalize_runtime(region_name)
    if service_name == 'pi':
        return pi(region_name)
    if service_name == 'pinpoint':
        return pinpoint(region_name)
    if service_name == 'pinpoint-email':
        return pinpoint_email(region_name)
    if service_name == 'pinpoint-sms-voice':
        return pinpoint_sms_voice(region_name)
    if service_name == 'polly':
        return polly(region_name)
    if service_name == 'pricing':
        return pricing(region_name)
    if service_name == 'qldb':
        return qldb(region_name)
    if service_name == 'qldb-session':
        return qldb_session(region_name)
    if service_name == 'quicksight':
        return quicksight(region_name)
    if service_name == 'ram':
        return ram(region_name)
    if service_name == 'rds':
        return rds(region_name)
    if service_name == 'rds-data':
        return rds_data(region_name)
    if service_name == 'redshift':
        return redshift(region_name)
    if service_name == 'rekognition':
        return rekognition(region_name)
    if service_name == 'resource-groups':
        return resource_groups(region_name)
    if service_name == 'resourcegroupstaggingapi':
        return resourcegroupstaggingapi(region_name)
    if service_name == 'robomaker':
        return robomaker(region_name)
    if service_name == 'route53':
        return route53(region_name)
    if service_name == 'route53domains':
        return route53domains(region_name)
    if service_name == 'route53resolver':
        return route53resolver(region_name)
    if service_name == 's3':
        return s3(region_name)
    if service_name == 's3control':
        return s3control(region_name)
    if service_name == 'sagemaker':
        return sagemaker(region_name)
    if service_name == 'sagemaker-a2i-runtime':
        return sagemaker_a2i_runtime(region_name)
    if service_name == 'sagemaker-runtime':
        return sagemaker_runtime(region_name)
    if service_name == 'savingsplans':
        return savingsplans(region_name)
    if service_name == 'schemas':
        return schemas(region_name)
    if service_name == 'sdb':
        return sdb(region_name)
    if service_name == 'secretsmanager':
        return secretsmanager(region_name)
    if service_name == 'securityhub':
        return securityhub(region_name)
    if service_name == 'serverlessrepo':
        return serverlessrepo(region_name)
    if service_name == 'service-quotas':
        return service_quotas(region_name)
    if service_name == 'servicecatalog':
        return servicecatalog(region_name)
    if service_name == 'servicediscovery':
        return servicediscovery(region_name)
    if service_name == 'ses':
        return ses(region_name)
    if service_name == 'sesv2':
        return sesv2(region_name)
    if service_name == 'shield':
        return shield(region_name)
    if service_name == 'signer':
        return signer(region_name)
    if service_name == 'sms':
        return sms(region_name)
    if service_name == 'sms-voice':
        return sms_voice(region_name)
    if service_name == 'snowball':
        return snowball(region_name)
    if service_name == 'sns':
        return sns(region_name)
    if service_name == 'sqs':
        return sqs(region_name)
    if service_name == 'ssm':
        return ssm(region_name)
    if service_name == 'sso':
        return sso(region_name)
    if service_name == 'sso-oidc':
        return sso_oidc(region_name)
    if service_name == 'stepfunctions':
        return stepfunctions(region_name)
    if service_name == 'storagegateway':
        return storagegateway(region_name)
    if service_name == 'sts':
        return sts(region_name)
    if service_name == 'support':
        return support(region_name)
    if service_name == 'swf':
        return swf(region_name)
    if service_name == 'textract':
        return textract(region_name)
    if service_name == 'transcribe':
        return transcribe(region_name)
    if service_name == 'transfer':
        return transfer(region_name)
    if service_name == 'translate':
        return translate(region_name)
    if service_name == 'waf':
        return waf(region_name)
    if service_name == 'waf-regional':
        return waf_regional(region_name)
    if service_name == 'wafv2':
        return wafv2(region_name)
    if service_name == 'workdocs':
        return workdocs(region_name)
    if service_name == 'worklink':
        return worklink(region_name)
    if service_name == 'workmail':
        return workmail(region_name)
    if service_name == 'workmailmessageflow':
        return workmailmessageflow(region_name)
    if service_name == 'workspaces':
        return workspaces(region_name)
    if service_name == 'xray':
        return xray(region_name)
def setup_default_session(**kwargs):
    if 'region_name' in kwargs:
        _default_region=kwargs['region_name']

def _create_cloudformation(region_name):
    _region=region_name
    class RES_cloudformation:
        def __init__(self, *args, **kwargs):
            __protego_used['cloudformation']= __protego_used.get('cloudformation', {})
            __protego_resource_map['cloudformation']=__protego_resource_map.get('cloudformation', [])
        def create_stack(self, *args, **kwargs): #action
            __protego_used['cloudformation']['create_stack']=['cloudformation:CreateStack']
            for p in ['cloudformation:CreateStack']:
                __protego_resource_map['cloudformation'].append({'action': 'CreateStack', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Stack()
        @property
        def stacks(self, *args): #collection
            class stacks_col(object):
                def all(self):
                    __protego_used['cloudformation']['stacks']=['cloudformation:DescribeStacks']
                    for p in ['cloudformation:DescribeStacks']:
                        __protego_resource_map['cloudformation'].append({'action': 'DescribeStacks', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_cloudformation.Stack()]
                def limit(self):
                    __protego_used['cloudformation']['stacks']=['cloudformation:DescribeStacks']
                    for p in ['cloudformation:DescribeStacks']:
                        __protego_resource_map['cloudformation'].append({'action': 'DescribeStacks', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_cloudformation.Stack()]
                def filter(self):
                    __protego_used['cloudformation']['stacks']=['cloudformation:DescribeStacks']
                    for p in ['cloudformation:DescribeStacks']:
                        __protego_resource_map['cloudformation'].append({'action': 'DescribeStacks', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_cloudformation.Stack()]
            return stacks_col()
        @property
        def meta(self):
            class meta_cls:
                def __init__(self):
                    self.client = client("cloudformation")
            return meta_cls()
        pass
        class Event(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            @property
            def id(self):
                pass
            @property
            def event_id(self):
                pass
            pass
        class Stack(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['StackName']=self.__protego_args['Name']
                __protego_used['cloudformation']['Stack.__init__']=['cloudformation:DescribeStacks'] #DescribeStacks
                for p in ['cloudformation:DescribeStacks']:
                    __protego_resource_map['cloudformation'].append({'action': 'DescribeStacks', 'permission':p, 'res': kwargs, 'region': _region  })
            def cancel_update(self, *args, **kwargs):
                kwargs['StackName']=self.__protego_args['Name']
                __protego_used['cloudformation']['Stack.cancel_update']=['cloudformation:CancelUpdateStack']
                for p in ['cloudformation:CancelUpdateStack']:
                    __protego_resource_map['cloudformation'].append({'action': 'CancelUpdateStack', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['StackName']=self.__protego_args['Name']
                __protego_used['cloudformation']['Stack.delete']=['cloudformation:DeleteStack']
                for p in ['cloudformation:DeleteStack']:
                    __protego_resource_map['cloudformation'].append({'action': 'DeleteStack', 'permission':p, 'res': kwargs, 'region': _region  })
            def update(self, *args, **kwargs):
                kwargs['StackName']=self.__protego_args['Name']
                __protego_used['cloudformation']['Stack.update']=['cloudformation:UpdateStack']
                for p in ['cloudformation:UpdateStack']:
                    __protego_resource_map['cloudformation'].append({'action': 'UpdateStack', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def events(self, *args):
                kwargs = self.__protego_args
                kwargs['StackName']=self.__protego_args['Name']
                class events_col(object):
                    def all(self):
                        __protego_used['cloudformation']['events']=['cloudformation:DescribeStackEvents']
                        for p in ['cloudformation:DescribeStackEvents']:
                            __protego_resource_map['cloudformation'].append({'action': 'DescribeStackEvents', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_cloudformation.Event()]
                    def limit(self):
                        __protego_used['cloudformation']['events']=['cloudformation:DescribeStackEvents']
                        for p in ['cloudformation:DescribeStackEvents']:
                            __protego_resource_map['cloudformation'].append({'action': 'DescribeStackEvents', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_cloudformation.Event()]
                    def filter(self):
                        __protego_used['cloudformation']['events']=['cloudformation:DescribeStackEvents']
                        for p in ['cloudformation:DescribeStackEvents']:
                            __protego_resource_map['cloudformation'].append({'action': 'DescribeStackEvents', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_cloudformation.Event()]
                return events_col()
            @property
            def resource_summaries(self, *args):
                kwargs = self.__protego_args
                kwargs['StackName']=self.__protego_args['Name']
                class resource_summaries_col(object):
                    def all(self):
                        __protego_used['cloudformation']['resource_summaries']=['cloudformation:ListStackResources']
                        for p in ['cloudformation:ListStackResources']:
                            __protego_resource_map['cloudformation'].append({'action': 'ListStackResources', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_cloudformation.StackResourceSummary()]
                    def limit(self):
                        __protego_used['cloudformation']['resource_summaries']=['cloudformation:ListStackResources']
                        for p in ['cloudformation:ListStackResources']:
                            __protego_resource_map['cloudformation'].append({'action': 'ListStackResources', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_cloudformation.StackResourceSummary()]
                    def filter(self):
                        __protego_used['cloudformation']['resource_summaries']=['cloudformation:ListStackResources']
                        for p in ['cloudformation:ListStackResources']:
                            __protego_resource_map['cloudformation'].append({'action': 'ListStackResources', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_cloudformation.StackResourceSummary()]
                return resource_summaries_col()
            def Resource(self, *args, **kwargs):
                kwargs['StackName'] = self.__protego_args['Name']
                kwargs['LogicalId'] = args[0]
                res = RES_cloudformation.StackResource(**kwargs)
                return res
            @property
            def name(self):
                pass
            @property
            def stack_name(self):
                pass
            pass
        class StackResource(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['StackName','LogicalId']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['LogicalResourceId']=self.__protego_args['LogicalId']
                kwargs['StackName']=self.__protego_args['StackName']
                __protego_used['cloudformation']['StackResource.__init__']=['cloudformation:DescribeStackResource'] #DescribeStackResource
                for p in ['cloudformation:DescribeStackResource']:
                    __protego_resource_map['cloudformation'].append({'action': 'DescribeStackResource', 'permission':p, 'res': kwargs, 'region': _region  })
            def Stack(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['StackName']
                res = RES_cloudformation.Stack(**kwargs)
                return res
            @property
            def stack_name(self):
                pass
            @property
            def logical_id(self):
                pass
            @property
            def logical_resource_id(self):
                pass
            pass
        class StackResourceSummary(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['StackName','LogicalId']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def Resource(self, *args, **kwargs):
                kwargs['LogicalId'] = self.__protego_args['LogicalId']
                kwargs['StackName'] = self.__protego_args['StackName']
                res = RES_cloudformation.StackResource(**kwargs)
                return res
            @property
            def stack_name(self):
                pass
            @property
            def logical_id(self):
                pass
            @property
            def logical_resource_id(self):
                pass
            pass
    return RES_cloudformation()
def _create_cloudwatch(region_name):
    _region=region_name
    class RES_cloudwatch:
        def __init__(self, *args, **kwargs):
            __protego_used['cloudwatch']= __protego_used.get('cloudwatch', {})
            __protego_resource_map['cloudwatch']=__protego_resource_map.get('cloudwatch', [])
        @property
        def alarms(self, *args): #collection
            class alarms_col(object):
                def all(self):
                    __protego_used['cloudwatch']['alarms']=['cloudwatch:DescribeAlarms']
                    for p in ['cloudwatch:DescribeAlarms']:
                        __protego_resource_map['cloudwatch'].append({'action': 'DescribeAlarms', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_cloudwatch.Alarm()]
                def limit(self):
                    __protego_used['cloudwatch']['alarms']=['cloudwatch:DescribeAlarms']
                    for p in ['cloudwatch:DescribeAlarms']:
                        __protego_resource_map['cloudwatch'].append({'action': 'DescribeAlarms', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_cloudwatch.Alarm()]
                def filter(self):
                    __protego_used['cloudwatch']['alarms']=['cloudwatch:DescribeAlarms']
                    for p in ['cloudwatch:DescribeAlarms']:
                        __protego_resource_map['cloudwatch'].append({'action': 'DescribeAlarms', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_cloudwatch.Alarm()]
            return alarms_col()
        @property
        def metrics(self, *args): #collection
            class metrics_col(object):
                def all(self):
                    __protego_used['cloudwatch']['metrics']=['cloudwatch:ListMetrics']
                    for p in ['cloudwatch:ListMetrics']:
                        __protego_resource_map['cloudwatch'].append({'action': 'ListMetrics', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_cloudwatch.Metric()]
                def limit(self):
                    __protego_used['cloudwatch']['metrics']=['cloudwatch:ListMetrics']
                    for p in ['cloudwatch:ListMetrics']:
                        __protego_resource_map['cloudwatch'].append({'action': 'ListMetrics', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_cloudwatch.Metric()]
                def filter(self):
                    __protego_used['cloudwatch']['metrics']=['cloudwatch:ListMetrics']
                    for p in ['cloudwatch:ListMetrics']:
                        __protego_resource_map['cloudwatch'].append({'action': 'ListMetrics', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_cloudwatch.Metric()]
            return metrics_col()
        @property
        def meta(self):
            class meta_cls:
                def __init__(self):
                    self.client = client("cloudwatch")
            return meta_cls()
        pass
        class Alarm(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['AlarmNames[0]']=self.__protego_args['Name']
                __protego_used['cloudwatch']['Alarm.__init__']=['cloudwatch:DescribeAlarms'] #DescribeAlarms
                for p in ['cloudwatch:DescribeAlarms']:
                    __protego_resource_map['cloudwatch'].append({'action': 'DescribeAlarms', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['AlarmNames[0]']=self.__protego_args['Name']
                __protego_used['cloudwatch']['Alarm.delete']=['cloudwatch:DeleteAlarms']
                for p in ['cloudwatch:DeleteAlarms']:
                    __protego_resource_map['cloudwatch'].append({'action': 'DeleteAlarms', 'permission':p, 'res': kwargs, 'region': _region  })
            def describe_history(self, *args, **kwargs):
                kwargs['AlarmName']=self.__protego_args['Name']
                __protego_used['cloudwatch']['Alarm.describe_history']=['cloudwatch:DescribeAlarmHistory']
                for p in ['cloudwatch:DescribeAlarmHistory']:
                    __protego_resource_map['cloudwatch'].append({'action': 'DescribeAlarmHistory', 'permission':p, 'res': kwargs, 'region': _region  })
            def disable_actions(self, *args, **kwargs):
                kwargs['AlarmNames[0]']=self.__protego_args['Name']
                __protego_used['cloudwatch']['Alarm.disable_actions']=['cloudwatch:DisableAlarmActions']
                for p in ['cloudwatch:DisableAlarmActions']:
                    __protego_resource_map['cloudwatch'].append({'action': 'DisableAlarmActions', 'permission':p, 'res': kwargs, 'region': _region  })
            def enable_actions(self, *args, **kwargs):
                kwargs['AlarmNames[0]']=self.__protego_args['Name']
                __protego_used['cloudwatch']['Alarm.enable_actions']=['cloudwatch:EnableAlarmActions']
                for p in ['cloudwatch:EnableAlarmActions']:
                    __protego_resource_map['cloudwatch'].append({'action': 'EnableAlarmActions', 'permission':p, 'res': kwargs, 'region': _region  })
            def set_state(self, *args, **kwargs):
                kwargs['AlarmName']=self.__protego_args['Name']
                __protego_used['cloudwatch']['Alarm.set_state']=['cloudwatch:SetAlarmState']
                for p in ['cloudwatch:SetAlarmState']:
                    __protego_resource_map['cloudwatch'].append({'action': 'SetAlarmState', 'permission':p, 'res': kwargs, 'region': _region  })
            def Metric(self, *args, **kwargs):
                res = RES_cloudwatch.Metric(**kwargs)
                return res
            @property
            def name(self):
                pass
            @property
            def alarm_name(self):
                pass
            pass
        class Metric(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Namespace','Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['MetricName']=self.__protego_args['Name']
                kwargs['Namespace']=self.__protego_args['Namespace']
                __protego_used['cloudwatch']['Metric.__init__']=['cloudwatch:ListMetrics'] #ListMetrics
                for p in ['cloudwatch:ListMetrics']:
                    __protego_resource_map['cloudwatch'].append({'action': 'ListMetrics', 'permission':p, 'res': kwargs, 'region': _region  })
            def get_statistics(self, *args, **kwargs):
                kwargs['Namespace']=self.__protego_args['Namespace']
                kwargs['MetricName']=self.__protego_args['Name']
                __protego_used['cloudwatch']['Metric.get_statistics']=['cloudwatch:GetMetricStatistics']
                for p in ['cloudwatch:GetMetricStatistics']:
                    __protego_resource_map['cloudwatch'].append({'action': 'GetMetricStatistics', 'permission':p, 'res': kwargs, 'region': _region  })
            def put_alarm(self, *args, **kwargs):
                kwargs['Namespace']=self.__protego_args['Namespace']
                kwargs['MetricName']=self.__protego_args['Name']
                __protego_used['cloudwatch']['Metric.put_alarm']=['cloudwatch:PutMetricAlarm']
                for p in ['cloudwatch:PutMetricAlarm']:
                    __protego_resource_map['cloudwatch'].append({'action': 'PutMetricAlarm', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Name'] = kwargs['AlarmName']
                return RES_cloudwatch.Alarm(**kwargs)
            def put_data(self, *args, **kwargs):
                kwargs['Namespace']=self.__protego_args['Namespace']
                kwargs['MetricData[].MetricName']=self.__protego_args['Name']
                __protego_used['cloudwatch']['Metric.put_data']=['cloudwatch:PutMetricData']
                for p in ['cloudwatch:PutMetricData']:
                    __protego_resource_map['cloudwatch'].append({'action': 'PutMetricData', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def alarms(self, *args):
                kwargs = self.__protego_args
                kwargs['Namespace']=self.__protego_args['Namespace']
                kwargs['MetricName']=self.__protego_args['Name']
                class alarms_col(object):
                    def all(self):
                        __protego_used['cloudwatch']['alarms']=['cloudwatch:DescribeAlarmsForMetric']
                        for p in ['cloudwatch:DescribeAlarmsForMetric']:
                            __protego_resource_map['cloudwatch'].append({'action': 'DescribeAlarmsForMetric', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_cloudwatch.Alarm()]
                    def limit(self):
                        __protego_used['cloudwatch']['alarms']=['cloudwatch:DescribeAlarmsForMetric']
                        for p in ['cloudwatch:DescribeAlarmsForMetric']:
                            __protego_resource_map['cloudwatch'].append({'action': 'DescribeAlarmsForMetric', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_cloudwatch.Alarm()]
                    def filter(self):
                        __protego_used['cloudwatch']['alarms']=['cloudwatch:DescribeAlarmsForMetric']
                        for p in ['cloudwatch:DescribeAlarmsForMetric']:
                            __protego_resource_map['cloudwatch'].append({'action': 'DescribeAlarmsForMetric', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_cloudwatch.Alarm()]
                return alarms_col()
            @property
            def namespace(self):
                pass
            @property
            def namespace(self):
                pass
            @property
            def name(self):
                pass
            @property
            def metric_name(self):
                pass
            pass
    return RES_cloudwatch()
def _create_dynamodb(region_name):
    _region=region_name
    class RES_dynamodb:
        def __init__(self, *args, **kwargs):
            __protego_used['dynamodb']= __protego_used.get('dynamodb', {})
            __protego_resource_map['dynamodb']=__protego_resource_map.get('dynamodb', [])
        def batch_get_item(self, *args, **kwargs): #action
            __protego_used['dynamodb']['batch_get_item']=['dynamodb:BatchGetItem']
            for p in ['dynamodb:BatchGetItem']:
                __protego_resource_map['dynamodb'].append({'action': 'BatchGetItem', 'permission':p, 'res': kwargs, 'region': _region  })
        def batch_write_item(self, *args, **kwargs): #action
            __protego_used['dynamodb']['batch_write_item']=['dynamodb:BatchWriteItem']
            for p in ['dynamodb:BatchWriteItem']:
                __protego_resource_map['dynamodb'].append({'action': 'BatchWriteItem', 'permission':p, 'res': kwargs, 'region': _region  })
        def create_table(self, *args, **kwargs): #action
            __protego_used['dynamodb']['create_table']=['dynamodb:CreateTable']
            for p in ['dynamodb:CreateTable']:
                __protego_resource_map['dynamodb'].append({'action': 'CreateTable', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Table()
        @property
        def tables(self, *args): #collection
            class tables_col(object):
                def all(self):
                    __protego_used['dynamodb']['tables']=['dynamodb:ListTables']
                    for p in ['dynamodb:ListTables']:
                        __protego_resource_map['dynamodb'].append({'action': 'ListTables', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_dynamodb.Table()]
                def limit(self):
                    __protego_used['dynamodb']['tables']=['dynamodb:ListTables']
                    for p in ['dynamodb:ListTables']:
                        __protego_resource_map['dynamodb'].append({'action': 'ListTables', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_dynamodb.Table()]
                def filter(self):
                    __protego_used['dynamodb']['tables']=['dynamodb:ListTables']
                    for p in ['dynamodb:ListTables']:
                        __protego_resource_map['dynamodb'].append({'action': 'ListTables', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_dynamodb.Table()]
            return tables_col()
        @property
        def meta(self):
            class meta_cls:
                def __init__(self):
                    self.client = client("dynamodb")
            return meta_cls()
        pass
        class Table(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['TableName']=self.__protego_args['Name']
                __protego_used['dynamodb']['Table.__init__']=['dynamodb:DescribeTable'] #DescribeTable
                for p in ['dynamodb:DescribeTable']:
                    __protego_resource_map['dynamodb'].append({'action': 'DescribeTable', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['TableName']=self.__protego_args['Name']
                __protego_used['dynamodb']['Table.delete']=['dynamodb:DeleteTable']
                for p in ['dynamodb:DeleteTable']:
                    __protego_resource_map['dynamodb'].append({'action': 'DeleteTable', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete_item(self, *args, **kwargs):
                kwargs['TableName']=self.__protego_args['Name']
                __protego_used['dynamodb']['Table.delete_item']=['dynamodb:DeleteItem']
                for p in ['dynamodb:DeleteItem']:
                    __protego_resource_map['dynamodb'].append({'action': 'DeleteItem', 'permission':p, 'res': kwargs, 'region': _region  })
            def get_item(self, *args, **kwargs):
                kwargs['TableName']=self.__protego_args['Name']
                __protego_used['dynamodb']['Table.get_item']=['dynamodb:GetItem']
                for p in ['dynamodb:GetItem']:
                    __protego_resource_map['dynamodb'].append({'action': 'GetItem', 'permission':p, 'res': kwargs, 'region': _region  })
            def put_item(self, *args, **kwargs):
                kwargs['TableName']=self.__protego_args['Name']
                __protego_used['dynamodb']['Table.put_item']=['dynamodb:PutItem']
                for p in ['dynamodb:PutItem']:
                    __protego_resource_map['dynamodb'].append({'action': 'PutItem', 'permission':p, 'res': kwargs, 'region': _region  })
            def query(self, *args, **kwargs):
                kwargs['TableName']=self.__protego_args['Name']
                __protego_used['dynamodb']['Table.query']=['dynamodb:Query', 'dynamodb:Query']
                for p in ['dynamodb:Query','dynamodb:Query']:
                    __protego_resource_map['dynamodb'].append({'action': 'Query', 'permission':p, 'res': kwargs, 'region': _region  })
            def scan(self, *args, **kwargs):
                kwargs['TableName']=self.__protego_args['Name']
                __protego_used['dynamodb']['Table.scan']=['dynamodb:Scan', 'dynamodb:Scan']
                for p in ['dynamodb:Scan','dynamodb:Scan']:
                    __protego_resource_map['dynamodb'].append({'action': 'Scan', 'permission':p, 'res': kwargs, 'region': _region  })
            def update(self, *args, **kwargs):
                kwargs['TableName']=self.__protego_args['Name']
                __protego_used['dynamodb']['Table.update']=['dynamodb:UpdateTable']
                for p in ['dynamodb:UpdateTable']:
                    __protego_resource_map['dynamodb'].append({'action': 'UpdateTable', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_dynamodb.Table(**kwargs)
            def update_item(self, *args, **kwargs):
                kwargs['TableName']=self.__protego_args['Name']
                __protego_used['dynamodb']['Table.update_item']=['dynamodb:UpdateItem']
                for p in ['dynamodb:UpdateItem']:
                    __protego_resource_map['dynamodb'].append({'action': 'UpdateItem', 'permission':p, 'res': kwargs, 'region': _region  })
            def batch_writer(self, *args, **kwargs):
                kwargs['TableName']=self.__protego_args['Name']
                __protego_used['dynamodb']['Table.batch_writer']=['dynamodb:BatchWriteItem']
                for p in ['dynamodb:BatchWriteItem']:
                    __protego_resource_map['dynamodb'].append({'action': 'BatchWriteItem', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def name(self):
                pass
            @property
            def table_name(self):
                pass
            pass
    return RES_dynamodb()
def _create_ec2(region_name):
    _region=region_name
    class RES_ec2:
        def __init__(self, *args, **kwargs):
            __protego_used['ec2']= __protego_used.get('ec2', {})
            __protego_resource_map['ec2']=__protego_resource_map.get('ec2', [])
        def create_dhcp_options(self, *args, **kwargs): #action
            __protego_used['ec2']['create_dhcp_options']=['ec2:CreateDhcpOptions']
            for p in ['ec2:CreateDhcpOptions']:
                __protego_resource_map['ec2'].append({'action': 'CreateDhcpOptions', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.DhcpOptions()
        def create_instances(self, *args, **kwargs): #action
            __protego_used['ec2']['create_instances']=['ec2:RunInstances', 'ec2:RunInstances', 'ec2:RunInstances', 'ec2:RunInstances', 'ec2:RunInstances', 'ec2:RunInstances']
            for p in ['ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances']:
                __protego_resource_map['ec2'].append({'action': 'RunInstances', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Instance()
        def create_internet_gateway(self, *args, **kwargs): #action
            __protego_used['ec2']['create_internet_gateway']=['ec2:CreateInternetGateway']
            for p in ['ec2:CreateInternetGateway']:
                __protego_resource_map['ec2'].append({'action': 'CreateInternetGateway', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.InternetGateway()
        def create_key_pair(self, *args, **kwargs): #action
            __protego_used['ec2']['create_key_pair']=['ec2:CreateKeyPair']
            for p in ['ec2:CreateKeyPair']:
                __protego_resource_map['ec2'].append({'action': 'CreateKeyPair', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.KeyPair()
        def create_network_acl(self, *args, **kwargs): #action
            __protego_used['ec2']['create_network_acl']=['ec2:CreateNetworkAcl']
            for p in ['ec2:CreateNetworkAcl']:
                __protego_resource_map['ec2'].append({'action': 'CreateNetworkAcl', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.NetworkAcl()
        def create_network_interface(self, *args, **kwargs): #action
            __protego_used['ec2']['create_network_interface']=['ec2:CreateNetworkInterface']
            for p in ['ec2:CreateNetworkInterface']:
                __protego_resource_map['ec2'].append({'action': 'CreateNetworkInterface', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.NetworkInterface()
        def create_placement_group(self, *args, **kwargs): #action
            __protego_used['ec2']['create_placement_group']=['ec2:CreatePlacementGroup']
            for p in ['ec2:CreatePlacementGroup']:
                __protego_resource_map['ec2'].append({'action': 'CreatePlacementGroup', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.PlacementGroup()
        def create_route_table(self, *args, **kwargs): #action
            __protego_used['ec2']['create_route_table']=['ec2:CreateRouteTable']
            for p in ['ec2:CreateRouteTable']:
                __protego_resource_map['ec2'].append({'action': 'CreateRouteTable', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.RouteTable()
        def create_security_group(self, *args, **kwargs): #action
            __protego_used['ec2']['create_security_group']=['ec2:CreateSecurityGroup']
            for p in ['ec2:CreateSecurityGroup']:
                __protego_resource_map['ec2'].append({'action': 'CreateSecurityGroup', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.SecurityGroup()
        def create_snapshot(self, *args, **kwargs): #action
            __protego_used['ec2']['create_snapshot']=['ec2:CreateSnapshot', 'ec2:CreateSnapshot']
            for p in ['ec2:CreateSnapshot','ec2:CreateSnapshot']:
                __protego_resource_map['ec2'].append({'action': 'CreateSnapshot', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Snapshot()
        def create_subnet(self, *args, **kwargs): #action
            __protego_used['ec2']['create_subnet']=['ec2:CreateSubnet']
            for p in ['ec2:CreateSubnet']:
                __protego_resource_map['ec2'].append({'action': 'CreateSubnet', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Subnet()
        def create_tags(self, *args, **kwargs): #action
            __protego_used['ec2']['create_tags']=['ec2:CreateTags']
            for p in ['ec2:CreateTags']:
                __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
        def create_volume(self, *args, **kwargs): #action
            __protego_used['ec2']['create_volume']=['ec2:CreateVolume']
            for p in ['ec2:CreateVolume']:
                __protego_resource_map['ec2'].append({'action': 'CreateVolume', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Volume()
        def create_vpc(self, *args, **kwargs): #action
            __protego_used['ec2']['create_vpc']=['ec2:CreateVpc']
            for p in ['ec2:CreateVpc']:
                __protego_resource_map['ec2'].append({'action': 'CreateVpc', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Vpc()
        def create_vpc_peering_connection(self, *args, **kwargs): #action
            __protego_used['ec2']['create_vpc_peering_connection']=['ec2:CreateVpcPeeringConnection', 'ec2:CreateVpcPeeringConnection']
            for p in ['ec2:CreateVpcPeeringConnection','ec2:CreateVpcPeeringConnection']:
                __protego_resource_map['ec2'].append({'action': 'CreateVpcPeeringConnection', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.VpcPeeringConnection()
        def disassociate_route_table(self, *args, **kwargs): #action
            __protego_used['ec2']['disassociate_route_table']=['ec2:DisassociateRouteTable']
            for p in ['ec2:DisassociateRouteTable']:
                __protego_resource_map['ec2'].append({'action': 'DisassociateRouteTable', 'permission':p, 'res': kwargs, 'region': _region  })
        def import_key_pair(self, *args, **kwargs): #action
            __protego_used['ec2']['import_key_pair']=['ec2:ImportKeyPair']
            for p in ['ec2:ImportKeyPair']:
                __protego_resource_map['ec2'].append({'action': 'ImportKeyPair', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.KeyPairInfo()
        def register_image(self, *args, **kwargs): #action
            __protego_used['ec2']['register_image']=['ec2:RegisterImage']
            for p in ['ec2:RegisterImage']:
                __protego_resource_map['ec2'].append({'action': 'RegisterImage', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Image()
        @property
        def classic_addresses(self, *args): #collection
            class classic_addresses_col(object):
                def all(self):
                    __protego_used['ec2']['classic_addresses']=['ec2:DescribeAddresses']
                    for p in ['ec2:DescribeAddresses']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeAddresses', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.ClassicAddress()]
                def limit(self):
                    __protego_used['ec2']['classic_addresses']=['ec2:DescribeAddresses']
                    for p in ['ec2:DescribeAddresses']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeAddresses', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.ClassicAddress()]
                def filter(self):
                    __protego_used['ec2']['classic_addresses']=['ec2:DescribeAddresses']
                    for p in ['ec2:DescribeAddresses']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeAddresses', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.ClassicAddress()]
            return classic_addresses_col()
        @property
        def dhcp_options_sets(self, *args): #collection
            class dhcp_options_sets_col(object):
                def all(self):
                    __protego_used['ec2']['dhcp_options_sets']=['ec2:DescribeDhcpOptions']
                    for p in ['ec2:DescribeDhcpOptions']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeDhcpOptions', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.DhcpOptions()]
                def limit(self):
                    __protego_used['ec2']['dhcp_options_sets']=['ec2:DescribeDhcpOptions']
                    for p in ['ec2:DescribeDhcpOptions']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeDhcpOptions', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.DhcpOptions()]
                def filter(self):
                    __protego_used['ec2']['dhcp_options_sets']=['ec2:DescribeDhcpOptions']
                    for p in ['ec2:DescribeDhcpOptions']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeDhcpOptions', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.DhcpOptions()]
            return dhcp_options_sets_col()
        @property
        def images(self, *args): #collection
            class images_col(object):
                def all(self):
                    __protego_used['ec2']['images']=['ec2:DescribeImages']
                    for p in ['ec2:DescribeImages']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeImages', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Image()]
                def limit(self):
                    __protego_used['ec2']['images']=['ec2:DescribeImages']
                    for p in ['ec2:DescribeImages']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeImages', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Image()]
                def filter(self):
                    __protego_used['ec2']['images']=['ec2:DescribeImages']
                    for p in ['ec2:DescribeImages']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeImages', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Image()]
            return images_col()
        @property
        def instances(self, *args): #collection
            class instances_col(object):
                def all(self):
                    __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                    for p in ['ec2:DescribeInstances']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Instance()]
                def limit(self):
                    __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                    for p in ['ec2:DescribeInstances']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Instance()]
                def filter(self):
                    __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                    for p in ['ec2:DescribeInstances']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Instance()]
            return instances_col()
        @property
        def internet_gateways(self, *args): #collection
            class internet_gateways_col(object):
                def all(self):
                    __protego_used['ec2']['internet_gateways']=['ec2:DescribeInternetGateways']
                    for p in ['ec2:DescribeInternetGateways']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeInternetGateways', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.InternetGateway()]
                def limit(self):
                    __protego_used['ec2']['internet_gateways']=['ec2:DescribeInternetGateways']
                    for p in ['ec2:DescribeInternetGateways']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeInternetGateways', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.InternetGateway()]
                def filter(self):
                    __protego_used['ec2']['internet_gateways']=['ec2:DescribeInternetGateways']
                    for p in ['ec2:DescribeInternetGateways']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeInternetGateways', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.InternetGateway()]
            return internet_gateways_col()
        @property
        def key_pairs(self, *args): #collection
            class key_pairs_col(object):
                def all(self):
                    __protego_used['ec2']['key_pairs']=['ec2:DescribeKeyPairs']
                    for p in ['ec2:DescribeKeyPairs']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeKeyPairs', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.KeyPairInfo()]
                def limit(self):
                    __protego_used['ec2']['key_pairs']=['ec2:DescribeKeyPairs']
                    for p in ['ec2:DescribeKeyPairs']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeKeyPairs', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.KeyPairInfo()]
                def filter(self):
                    __protego_used['ec2']['key_pairs']=['ec2:DescribeKeyPairs']
                    for p in ['ec2:DescribeKeyPairs']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeKeyPairs', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.KeyPairInfo()]
            return key_pairs_col()
        @property
        def network_acls(self, *args): #collection
            class network_acls_col(object):
                def all(self):
                    __protego_used['ec2']['network_acls']=['ec2:DescribeNetworkAcls']
                    for p in ['ec2:DescribeNetworkAcls']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeNetworkAcls', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.NetworkAcl()]
                def limit(self):
                    __protego_used['ec2']['network_acls']=['ec2:DescribeNetworkAcls']
                    for p in ['ec2:DescribeNetworkAcls']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeNetworkAcls', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.NetworkAcl()]
                def filter(self):
                    __protego_used['ec2']['network_acls']=['ec2:DescribeNetworkAcls']
                    for p in ['ec2:DescribeNetworkAcls']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeNetworkAcls', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.NetworkAcl()]
            return network_acls_col()
        @property
        def network_interfaces(self, *args): #collection
            class network_interfaces_col(object):
                def all(self):
                    __protego_used['ec2']['network_interfaces']=['ec2:DescribeNetworkInterfaces']
                    for p in ['ec2:DescribeNetworkInterfaces']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaces', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.NetworkInterface()]
                def limit(self):
                    __protego_used['ec2']['network_interfaces']=['ec2:DescribeNetworkInterfaces']
                    for p in ['ec2:DescribeNetworkInterfaces']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaces', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.NetworkInterface()]
                def filter(self):
                    __protego_used['ec2']['network_interfaces']=['ec2:DescribeNetworkInterfaces']
                    for p in ['ec2:DescribeNetworkInterfaces']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaces', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.NetworkInterface()]
            return network_interfaces_col()
        @property
        def placement_groups(self, *args): #collection
            class placement_groups_col(object):
                def all(self):
                    __protego_used['ec2']['placement_groups']=['ec2:DescribePlacementGroups']
                    for p in ['ec2:DescribePlacementGroups']:
                        __protego_resource_map['ec2'].append({'action': 'DescribePlacementGroups', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.PlacementGroup()]
                def limit(self):
                    __protego_used['ec2']['placement_groups']=['ec2:DescribePlacementGroups']
                    for p in ['ec2:DescribePlacementGroups']:
                        __protego_resource_map['ec2'].append({'action': 'DescribePlacementGroups', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.PlacementGroup()]
                def filter(self):
                    __protego_used['ec2']['placement_groups']=['ec2:DescribePlacementGroups']
                    for p in ['ec2:DescribePlacementGroups']:
                        __protego_resource_map['ec2'].append({'action': 'DescribePlacementGroups', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.PlacementGroup()]
            return placement_groups_col()
        @property
        def route_tables(self, *args): #collection
            class route_tables_col(object):
                def all(self):
                    __protego_used['ec2']['route_tables']=['ec2:DescribeRouteTables']
                    for p in ['ec2:DescribeRouteTables']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeRouteTables', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.RouteTable()]
                def limit(self):
                    __protego_used['ec2']['route_tables']=['ec2:DescribeRouteTables']
                    for p in ['ec2:DescribeRouteTables']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeRouteTables', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.RouteTable()]
                def filter(self):
                    __protego_used['ec2']['route_tables']=['ec2:DescribeRouteTables']
                    for p in ['ec2:DescribeRouteTables']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeRouteTables', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.RouteTable()]
            return route_tables_col()
        @property
        def security_groups(self, *args): #collection
            class security_groups_col(object):
                def all(self):
                    __protego_used['ec2']['security_groups']=['ec2:DescribeSecurityGroups']
                    for p in ['ec2:DescribeSecurityGroups']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeSecurityGroups', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.SecurityGroup()]
                def limit(self):
                    __protego_used['ec2']['security_groups']=['ec2:DescribeSecurityGroups']
                    for p in ['ec2:DescribeSecurityGroups']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeSecurityGroups', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.SecurityGroup()]
                def filter(self):
                    __protego_used['ec2']['security_groups']=['ec2:DescribeSecurityGroups']
                    for p in ['ec2:DescribeSecurityGroups']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeSecurityGroups', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.SecurityGroup()]
            return security_groups_col()
        @property
        def snapshots(self, *args): #collection
            class snapshots_col(object):
                def all(self):
                    __protego_used['ec2']['snapshots']=['ec2:DescribeSnapshots']
                    for p in ['ec2:DescribeSnapshots']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeSnapshots', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Snapshot()]
                def limit(self):
                    __protego_used['ec2']['snapshots']=['ec2:DescribeSnapshots']
                    for p in ['ec2:DescribeSnapshots']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeSnapshots', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Snapshot()]
                def filter(self):
                    __protego_used['ec2']['snapshots']=['ec2:DescribeSnapshots']
                    for p in ['ec2:DescribeSnapshots']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeSnapshots', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Snapshot()]
            return snapshots_col()
        @property
        def subnets(self, *args): #collection
            class subnets_col(object):
                def all(self):
                    __protego_used['ec2']['subnets']=['ec2:DescribeSubnets']
                    for p in ['ec2:DescribeSubnets']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeSubnets', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Subnet()]
                def limit(self):
                    __protego_used['ec2']['subnets']=['ec2:DescribeSubnets']
                    for p in ['ec2:DescribeSubnets']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeSubnets', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Subnet()]
                def filter(self):
                    __protego_used['ec2']['subnets']=['ec2:DescribeSubnets']
                    for p in ['ec2:DescribeSubnets']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeSubnets', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Subnet()]
            return subnets_col()
        @property
        def volumes(self, *args): #collection
            class volumes_col(object):
                def all(self):
                    __protego_used['ec2']['volumes']=['ec2:DescribeVolumes']
                    for p in ['ec2:DescribeVolumes']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeVolumes', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Volume()]
                def limit(self):
                    __protego_used['ec2']['volumes']=['ec2:DescribeVolumes']
                    for p in ['ec2:DescribeVolumes']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeVolumes', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Volume()]
                def filter(self):
                    __protego_used['ec2']['volumes']=['ec2:DescribeVolumes']
                    for p in ['ec2:DescribeVolumes']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeVolumes', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Volume()]
            return volumes_col()
        @property
        def vpc_addresses(self, *args): #collection
            class vpc_addresses_col(object):
                def all(self):
                    __protego_used['ec2']['vpc_addresses']=['ec2:DescribeAddresses']
                    for p in ['ec2:DescribeAddresses']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeAddresses', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.VpcAddress()]
                def limit(self):
                    __protego_used['ec2']['vpc_addresses']=['ec2:DescribeAddresses']
                    for p in ['ec2:DescribeAddresses']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeAddresses', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.VpcAddress()]
                def filter(self):
                    __protego_used['ec2']['vpc_addresses']=['ec2:DescribeAddresses']
                    for p in ['ec2:DescribeAddresses']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeAddresses', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.VpcAddress()]
            return vpc_addresses_col()
        @property
        def vpc_peering_connections(self, *args): #collection
            class vpc_peering_connections_col(object):
                def all(self):
                    __protego_used['ec2']['vpc_peering_connections']=['ec2:DescribeVpcPeeringConnections']
                    for p in ['ec2:DescribeVpcPeeringConnections']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeVpcPeeringConnections', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.VpcPeeringConnection()]
                def limit(self):
                    __protego_used['ec2']['vpc_peering_connections']=['ec2:DescribeVpcPeeringConnections']
                    for p in ['ec2:DescribeVpcPeeringConnections']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeVpcPeeringConnections', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.VpcPeeringConnection()]
                def filter(self):
                    __protego_used['ec2']['vpc_peering_connections']=['ec2:DescribeVpcPeeringConnections']
                    for p in ['ec2:DescribeVpcPeeringConnections']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeVpcPeeringConnections', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.VpcPeeringConnection()]
            return vpc_peering_connections_col()
        @property
        def vpcs(self, *args): #collection
            class vpcs_col(object):
                def all(self):
                    __protego_used['ec2']['vpcs']=['ec2:DescribeVpcs']
                    for p in ['ec2:DescribeVpcs']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeVpcs', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Vpc()]
                def limit(self):
                    __protego_used['ec2']['vpcs']=['ec2:DescribeVpcs']
                    for p in ['ec2:DescribeVpcs']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeVpcs', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Vpc()]
                def filter(self):
                    __protego_used['ec2']['vpcs']=['ec2:DescribeVpcs']
                    for p in ['ec2:DescribeVpcs']:
                        __protego_resource_map['ec2'].append({'action': 'DescribeVpcs', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_ec2.Vpc()]
            return vpcs_col()
        @property
        def meta(self):
            class meta_cls:
                def __init__(self):
                    self.client = client("ec2")
            return meta_cls()
        pass
        class ClassicAddress(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['PublicIp']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['PublicIps[]']=self.__protego_args['PublicIp']
                __protego_used['ec2']['ClassicAddress.__init__']=['ec2:DescribeAddresses'] #DescribeAddresses
                for p in ['ec2:DescribeAddresses']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeAddresses', 'permission':p, 'res': kwargs, 'region': _region  })
            def associate(self, *args, **kwargs):
                kwargs['PublicIp']=self.__protego_args['PublicIp']
                __protego_used['ec2']['ClassicAddress.associate']=['ec2:AssociateAddress']
                for p in ['ec2:AssociateAddress']:
                    __protego_resource_map['ec2'].append({'action': 'AssociateAddress', 'permission':p, 'res': kwargs, 'region': _region  })
            def disassociate(self, *args, **kwargs):
                kwargs['PublicIp']=self.__protego_args['PublicIp']
                __protego_used['ec2']['ClassicAddress.disassociate']=['ec2:DisassociateAddress']
                for p in ['ec2:DisassociateAddress']:
                    __protego_resource_map['ec2'].append({'action': 'DisassociateAddress', 'permission':p, 'res': kwargs, 'region': _region  })
            def release(self, *args, **kwargs):
                kwargs['PublicIp']=self.__protego_args['PublicIp']
                __protego_used['ec2']['ClassicAddress.release']=['ec2:ReleaseAddress']
                for p in ['ec2:ReleaseAddress']:
                    __protego_resource_map['ec2'].append({'action': 'ReleaseAddress', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def public_ip(self):
                pass
            pass
        class DhcpOptions(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['DhcpOptionsIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['DhcpOptions.__init__']=['ec2:DescribeDhcpOptions'] #DescribeDhcpOptions
                for p in ['ec2:DescribeDhcpOptions']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeDhcpOptions', 'permission':p, 'res': kwargs, 'region': _region  })
            def associate_with_vpc(self, *args, **kwargs):
                kwargs['DhcpOptionsId']=self.__protego_args['Id']
                __protego_used['ec2']['DhcpOptions.associate_with_vpc']=['ec2:AssociateDhcpOptions']
                for p in ['ec2:AssociateDhcpOptions']:
                    __protego_resource_map['ec2'].append({'action': 'AssociateDhcpOptions', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['DhcpOptions.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['DhcpOptionsId']=self.__protego_args['Id']
                __protego_used['ec2']['DhcpOptions.delete']=['ec2:DeleteDhcpOptions']
                for p in ['ec2:DeleteDhcpOptions']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteDhcpOptions', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def id(self):
                pass
            @property
            def dhcp_options_id(self):
                pass
            pass
        class Image(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['ImageIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Image.__init__']=['ec2:DescribeImages'] #DescribeImages
                for p in ['ec2:DescribeImages']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeImages', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Image.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def deregister(self, *args, **kwargs):
                kwargs['ImageId']=self.__protego_args['Id']
                __protego_used['ec2']['Image.deregister']=['ec2:DeregisterImage']
                for p in ['ec2:DeregisterImage']:
                    __protego_resource_map['ec2'].append({'action': 'DeregisterImage', 'permission':p, 'res': kwargs, 'region': _region  })
            def describe_attribute(self, *args, **kwargs):
                kwargs['ImageId']=self.__protego_args['Id']
                __protego_used['ec2']['Image.describe_attribute']=['ec2:DescribeImageAttribute']
                for p in ['ec2:DescribeImageAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeImageAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def modify_attribute(self, *args, **kwargs):
                kwargs['ImageId']=self.__protego_args['Id']
                __protego_used['ec2']['Image.modify_attribute']=['ec2:ModifyImageAttribute']
                for p in ['ec2:ModifyImageAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ModifyImageAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def reset_attribute(self, *args, **kwargs):
                kwargs['ImageId']=self.__protego_args['Id']
                __protego_used['ec2']['Image.reset_attribute']=['ec2:ResetImageAttribute']
                for p in ['ec2:ResetImageAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ResetImageAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def id(self):
                pass
            @property
            def image_id(self):
                pass
            pass
        class Instance(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['InstanceIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.__init__']=['ec2:DescribeInstances'] #DescribeInstances
                for p in ['ec2:DescribeInstances']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_classic_link_vpc(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.attach_classic_link_vpc']=['ec2:AttachClassicLinkVpc', 'ec2:AttachClassicLinkVpc', 'ec2:AttachClassicLinkVpc']
                for p in ['ec2:AttachClassicLinkVpc','ec2:AttachClassicLinkVpc','ec2:AttachClassicLinkVpc']:
                    __protego_resource_map['ec2'].append({'action': 'AttachClassicLinkVpc', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_volume(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.attach_volume']=['ec2:AttachVolume', 'ec2:AttachVolume']
                for p in ['ec2:AttachVolume','ec2:AttachVolume']:
                    __protego_resource_map['ec2'].append({'action': 'AttachVolume', 'permission':p, 'res': kwargs, 'region': _region  })
            def console_output(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.console_output']=['ec2:GetConsoleOutput']
                for p in ['ec2:GetConsoleOutput']:
                    __protego_resource_map['ec2'].append({'action': 'GetConsoleOutput', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_image(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.create_image']=['ec2:CreateImage']
                for p in ['ec2:CreateImage']:
                    __protego_resource_map['ec2'].append({'action': 'CreateImage', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_ec2.Image(**kwargs)
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def describe_attribute(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.describe_attribute']=['ec2:DescribeInstanceAttribute']
                for p in ['ec2:DescribeInstanceAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeInstanceAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_classic_link_vpc(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.detach_classic_link_vpc']=['ec2:DetachClassicLinkVpc', 'ec2:DetachClassicLinkVpc']
                for p in ['ec2:DetachClassicLinkVpc','ec2:DetachClassicLinkVpc']:
                    __protego_resource_map['ec2'].append({'action': 'DetachClassicLinkVpc', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_volume(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.detach_volume']=['ec2:DetachVolume', 'ec2:DetachVolume']
                for p in ['ec2:DetachVolume','ec2:DetachVolume']:
                    __protego_resource_map['ec2'].append({'action': 'DetachVolume', 'permission':p, 'res': kwargs, 'region': _region  })
            def modify_attribute(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.modify_attribute']=['ec2:ModifyInstanceAttribute']
                for p in ['ec2:ModifyInstanceAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ModifyInstanceAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def monitor(self, *args, **kwargs):
                kwargs['InstanceIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.monitor']=['ec2:MonitorInstances']
                for p in ['ec2:MonitorInstances']:
                    __protego_resource_map['ec2'].append({'action': 'MonitorInstances', 'permission':p, 'res': kwargs, 'region': _region  })
            def password_data(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.password_data']=['ec2:GetPasswordData']
                for p in ['ec2:GetPasswordData']:
                    __protego_resource_map['ec2'].append({'action': 'GetPasswordData', 'permission':p, 'res': kwargs, 'region': _region  })
            def reboot(self, *args, **kwargs):
                kwargs['InstanceIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.reboot']=['ec2:RebootInstances']
                for p in ['ec2:RebootInstances']:
                    __protego_resource_map['ec2'].append({'action': 'RebootInstances', 'permission':p, 'res': kwargs, 'region': _region  })
            def report_status(self, *args, **kwargs):
                kwargs['Instances[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.report_status']=['ec2:ReportInstanceStatus']
                for p in ['ec2:ReportInstanceStatus']:
                    __protego_resource_map['ec2'].append({'action': 'ReportInstanceStatus', 'permission':p, 'res': kwargs, 'region': _region  })
            def reset_attribute(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.reset_attribute']=['ec2:ResetInstanceAttribute']
                for p in ['ec2:ResetInstanceAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ResetInstanceAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def reset_kernel(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.reset_kernel']=['ec2:ResetInstanceAttribute']
                for p in ['ec2:ResetInstanceAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ResetInstanceAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def reset_ramdisk(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.reset_ramdisk']=['ec2:ResetInstanceAttribute']
                for p in ['ec2:ResetInstanceAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ResetInstanceAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def reset_source_dest_check(self, *args, **kwargs):
                kwargs['InstanceId']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.reset_source_dest_check']=['ec2:ResetInstanceAttribute']
                for p in ['ec2:ResetInstanceAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ResetInstanceAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def start(self, *args, **kwargs):
                kwargs['InstanceIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.start']=['ec2:StartInstances']
                for p in ['ec2:StartInstances']:
                    __protego_resource_map['ec2'].append({'action': 'StartInstances', 'permission':p, 'res': kwargs, 'region': _region  })
            def stop(self, *args, **kwargs):
                kwargs['InstanceIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.stop']=['ec2:StopInstances']
                for p in ['ec2:StopInstances']:
                    __protego_resource_map['ec2'].append({'action': 'StopInstances', 'permission':p, 'res': kwargs, 'region': _region  })
            def terminate(self, *args, **kwargs):
                kwargs['InstanceIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.terminate']=['ec2:TerminateInstances']
                for p in ['ec2:TerminateInstances']:
                    __protego_resource_map['ec2'].append({'action': 'TerminateInstances', 'permission':p, 'res': kwargs, 'region': _region  })
            def unmonitor(self, *args, **kwargs):
                kwargs['InstanceIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Instance.unmonitor']=['ec2:UnmonitorInstances']
                for p in ['ec2:UnmonitorInstances']:
                    __protego_resource_map['ec2'].append({'action': 'UnmonitorInstances', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def volumes(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class volumes_col(object):
                    def all(self):
                        __protego_used['ec2']['volumes']=['ec2:DescribeVolumes']
                        for p in ['ec2:DescribeVolumes']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeVolumes', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Volume()]
                    def limit(self):
                        __protego_used['ec2']['volumes']=['ec2:DescribeVolumes']
                        for p in ['ec2:DescribeVolumes']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeVolumes', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Volume()]
                    def filter(self):
                        __protego_used['ec2']['volumes']=['ec2:DescribeVolumes']
                        for p in ['ec2:DescribeVolumes']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeVolumes', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.Volume()]
                return volumes_col()
            @property
            def vpc_addresses(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class vpc_addresses_col(object):
                    def all(self):
                        __protego_used['ec2']['vpc_addresses']=['ec2:DescribeAddresses']
                        for p in ['ec2:DescribeAddresses']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeAddresses', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.VpcAddress()]
                    def limit(self):
                        __protego_used['ec2']['vpc_addresses']=['ec2:DescribeAddresses']
                        for p in ['ec2:DescribeAddresses']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeAddresses', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.VpcAddress()]
                    def filter(self):
                        __protego_used['ec2']['vpc_addresses']=['ec2:DescribeAddresses']
                        for p in ['ec2:DescribeAddresses']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeAddresses', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.VpcAddress()]
                return vpc_addresses_col()
            def ClassicAddress(self, *args, **kwargs):
                res = RES_ec2.ClassicAddress(**kwargs)
                return res
            def Image(self, *args, **kwargs):
                res = RES_ec2.Image(**kwargs)
                return res
            def KeyPair(self, *args, **kwargs):
                res = RES_ec2.KeyPairInfo(**kwargs)
                return res
            def NetworkInterfaces(self, *args, **kwargs):
                res = [RES_ec2.NetworkInterface(**kwargs)]
                return res
            def PlacementGroup(self, *args, **kwargs):
                res = RES_ec2.PlacementGroup(**kwargs)
                return res
            def Subnet(self, *args, **kwargs):
                res = RES_ec2.Subnet(**kwargs)
                return res
            def Vpc(self, *args, **kwargs):
                res = RES_ec2.Vpc(**kwargs)
                return res
            @property
            def id(self):
                pass
            @property
            def instance_id(self):
                pass
            pass
        class InternetGateway(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['InternetGatewayIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['InternetGateway.__init__']=['ec2:DescribeInternetGateways'] #DescribeInternetGateways
                for p in ['ec2:DescribeInternetGateways']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeInternetGateways', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_to_vpc(self, *args, **kwargs):
                kwargs['InternetGatewayId']=self.__protego_args['Id']
                __protego_used['ec2']['InternetGateway.attach_to_vpc']=['ec2:AttachInternetGateway']
                for p in ['ec2:AttachInternetGateway']:
                    __protego_resource_map['ec2'].append({'action': 'AttachInternetGateway', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['InternetGateway.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['InternetGatewayId']=self.__protego_args['Id']
                __protego_used['ec2']['InternetGateway.delete']=['ec2:DeleteInternetGateway']
                for p in ['ec2:DeleteInternetGateway']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteInternetGateway', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_from_vpc(self, *args, **kwargs):
                kwargs['InternetGatewayId']=self.__protego_args['Id']
                __protego_used['ec2']['InternetGateway.detach_from_vpc']=['ec2:DetachInternetGateway']
                for p in ['ec2:DetachInternetGateway']:
                    __protego_resource_map['ec2'].append({'action': 'DetachInternetGateway', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def id(self):
                pass
            @property
            def internet_gateway_id(self):
                pass
            pass
        class KeyPair(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def delete(self, *args, **kwargs):
                kwargs['KeyName']=self.__protego_args['Name']
                __protego_used['ec2']['KeyPair.delete']=['ec2:DeleteKeyPair']
                for p in ['ec2:DeleteKeyPair']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteKeyPair', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def name(self):
                pass
            @property
            def key_name(self):
                pass
            pass
        class KeyPairInfo(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['KeyNames[0]']=self.__protego_args['Name']
                __protego_used['ec2']['KeyPairInfo.__init__']=['ec2:DescribeKeyPairs'] #DescribeKeyPairs
                for p in ['ec2:DescribeKeyPairs']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeKeyPairs', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['KeyName']=self.__protego_args['Name']
                __protego_used['ec2']['KeyPairInfo.delete']=['ec2:DeleteKeyPair']
                for p in ['ec2:DeleteKeyPair']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteKeyPair', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def name(self):
                pass
            @property
            def key_name(self):
                pass
            pass
        class NetworkAcl(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['NetworkAclIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkAcl.__init__']=['ec2:DescribeNetworkAcls'] #DescribeNetworkAcls
                for p in ['ec2:DescribeNetworkAcls']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeNetworkAcls', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_entry(self, *args, **kwargs):
                kwargs['NetworkAclId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkAcl.create_entry']=['ec2:CreateNetworkAclEntry']
                for p in ['ec2:CreateNetworkAclEntry']:
                    __protego_resource_map['ec2'].append({'action': 'CreateNetworkAclEntry', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkAcl.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['NetworkAclId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkAcl.delete']=['ec2:DeleteNetworkAcl']
                for p in ['ec2:DeleteNetworkAcl']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteNetworkAcl', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete_entry(self, *args, **kwargs):
                kwargs['NetworkAclId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkAcl.delete_entry']=['ec2:DeleteNetworkAclEntry']
                for p in ['ec2:DeleteNetworkAclEntry']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteNetworkAclEntry', 'permission':p, 'res': kwargs, 'region': _region  })
            def replace_association(self, *args, **kwargs):
                kwargs['NetworkAclId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkAcl.replace_association']=['ec2:ReplaceNetworkAclAssociation']
                for p in ['ec2:ReplaceNetworkAclAssociation']:
                    __protego_resource_map['ec2'].append({'action': 'ReplaceNetworkAclAssociation', 'permission':p, 'res': kwargs, 'region': _region  })
            def replace_entry(self, *args, **kwargs):
                kwargs['NetworkAclId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkAcl.replace_entry']=['ec2:ReplaceNetworkAclEntry']
                for p in ['ec2:ReplaceNetworkAclEntry']:
                    __protego_resource_map['ec2'].append({'action': 'ReplaceNetworkAclEntry', 'permission':p, 'res': kwargs, 'region': _region  })
            def Vpc(self, *args, **kwargs):
                res = RES_ec2.Vpc(**kwargs)
                return res
            @property
            def id(self):
                pass
            @property
            def network_acl_id(self):
                pass
            pass
        class NetworkInterface(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['NetworkInterfaceIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkInterface.__init__']=['ec2:DescribeNetworkInterfaces'] #DescribeNetworkInterfaces
                for p in ['ec2:DescribeNetworkInterfaces']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaces', 'permission':p, 'res': kwargs, 'region': _region  })
            def assign_private_ip_addresses(self, *args, **kwargs):
                kwargs['NetworkInterfaceId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkInterface.assign_private_ip_addresses']=['ec2:AssignPrivateIpAddresses']
                for p in ['ec2:AssignPrivateIpAddresses']:
                    __protego_resource_map['ec2'].append({'action': 'AssignPrivateIpAddresses', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach(self, *args, **kwargs):
                kwargs['NetworkInterfaceId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkInterface.attach']=['ec2:AttachNetworkInterface']
                for p in ['ec2:AttachNetworkInterface']:
                    __protego_resource_map['ec2'].append({'action': 'AttachNetworkInterface', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkInterface.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['NetworkInterfaceId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkInterface.delete']=['ec2:DeleteNetworkInterface']
                for p in ['ec2:DeleteNetworkInterface']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteNetworkInterface', 'permission':p, 'res': kwargs, 'region': _region  })
            def describe_attribute(self, *args, **kwargs):
                kwargs['NetworkInterfaceId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkInterface.describe_attribute']=['ec2:DescribeNetworkInterfaceAttribute']
                for p in ['ec2:DescribeNetworkInterfaceAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaceAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach(self, *args, **kwargs):
                kwargs['AttachmentId']=self.__protego_args['Attachment.AttachmentId']
                __protego_used['ec2']['NetworkInterface.detach']=['ec2:DetachNetworkInterface']
                for p in ['ec2:DetachNetworkInterface']:
                    __protego_resource_map['ec2'].append({'action': 'DetachNetworkInterface', 'permission':p, 'res': kwargs, 'region': _region  })
            def modify_attribute(self, *args, **kwargs):
                kwargs['NetworkInterfaceId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkInterface.modify_attribute']=['ec2:ModifyNetworkInterfaceAttribute']
                for p in ['ec2:ModifyNetworkInterfaceAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ModifyNetworkInterfaceAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def reset_attribute(self, *args, **kwargs):
                kwargs['NetworkInterfaceId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkInterface.reset_attribute']=['ec2:ResetNetworkInterfaceAttribute']
                for p in ['ec2:ResetNetworkInterfaceAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ResetNetworkInterfaceAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def unassign_private_ip_addresses(self, *args, **kwargs):
                kwargs['NetworkInterfaceId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkInterface.unassign_private_ip_addresses']=['ec2:UnassignPrivateIpAddresses']
                for p in ['ec2:UnassignPrivateIpAddresses']:
                    __protego_resource_map['ec2'].append({'action': 'UnassignPrivateIpAddresses', 'permission':p, 'res': kwargs, 'region': _region  })
            def Association(self, *args, **kwargs):
                res = RES_ec2.NetworkInterfaceAssociation(**kwargs)
                return res
            def Subnet(self, *args, **kwargs):
                res = RES_ec2.Subnet(**kwargs)
                return res
            def Vpc(self, *args, **kwargs):
                res = RES_ec2.Vpc(**kwargs)
                return res
            @property
            def id(self):
                pass
            @property
            def network_interface_id(self):
                pass
            pass
        class NetworkInterfaceAssociation(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkInterfaceAssociation.__init__']=['ec2:DescribeNetworkInterfaces'] #DescribeNetworkInterfaces
                for p in ['ec2:DescribeNetworkInterfaces']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaces', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['AssociationId']=self.__protego_args['Id']
                __protego_used['ec2']['NetworkInterfaceAssociation.delete']=['ec2:DisassociateAddress']
                for p in ['ec2:DisassociateAddress']:
                    __protego_resource_map['ec2'].append({'action': 'DisassociateAddress', 'permission':p, 'res': kwargs, 'region': _region  })
            def Address(self, *args, **kwargs):
                res = RES_ec2.VpcAddress(**kwargs)
                return res
            @property
            def id(self):
                pass
            pass
        class PlacementGroup(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['GroupNames[0]']=self.__protego_args['Name']
                __protego_used['ec2']['PlacementGroup.__init__']=['ec2:DescribePlacementGroups'] #DescribePlacementGroups
                for p in ['ec2:DescribePlacementGroups']:
                    __protego_resource_map['ec2'].append({'action': 'DescribePlacementGroups', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['Name']
                __protego_used['ec2']['PlacementGroup.delete']=['ec2:DeletePlacementGroup']
                for p in ['ec2:DeletePlacementGroup']:
                    __protego_resource_map['ec2'].append({'action': 'DeletePlacementGroup', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def instances(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Name']
                class instances_col(object):
                    def all(self):
                        __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                        for p in ['ec2:DescribeInstances']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Instance()]
                    def limit(self):
                        __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                        for p in ['ec2:DescribeInstances']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Instance()]
                    def filter(self):
                        __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                        for p in ['ec2:DescribeInstances']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.Instance()]
                return instances_col()
            @property
            def name(self):
                pass
            @property
            def group_name(self):
                pass
            pass
        class Route(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['RouteTableId','DestinationCidrBlock']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def delete(self, *args, **kwargs):
                kwargs['RouteTableId']=self.__protego_args['RouteTableId']
                kwargs['DestinationCidrBlock']=self.__protego_args['DestinationCidrBlock']
                __protego_used['ec2']['Route.delete']=['ec2:DeleteRoute']
                for p in ['ec2:DeleteRoute']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteRoute', 'permission':p, 'res': kwargs, 'region': _region  })
            def replace(self, *args, **kwargs):
                kwargs['RouteTableId']=self.__protego_args['RouteTableId']
                kwargs['DestinationCidrBlock']=self.__protego_args['DestinationCidrBlock']
                __protego_used['ec2']['Route.replace']=['ec2:ReplaceRoute']
                for p in ['ec2:ReplaceRoute']:
                    __protego_resource_map['ec2'].append({'action': 'ReplaceRoute', 'permission':p, 'res': kwargs, 'region': _region  })
            def RouteTable(self, *args, **kwargs):
                kwargs['Id'] = self.__protego_args['RouteTableId']
                res = RES_ec2.RouteTable(**kwargs)
                return res
            @property
            def route_table_id(self):
                pass
            @property
            def destination_cidr_block(self):
                pass
            @property
            def destination_cidr_block(self):
                pass
            pass
        class RouteTable(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['RouteTableIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['RouteTable.__init__']=['ec2:DescribeRouteTables'] #DescribeRouteTables
                for p in ['ec2:DescribeRouteTables']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeRouteTables', 'permission':p, 'res': kwargs, 'region': _region  })
            def associate_with_subnet(self, *args, **kwargs):
                kwargs['RouteTableId']=self.__protego_args['Id']
                __protego_used['ec2']['RouteTable.associate_with_subnet']=['ec2:AssociateRouteTable']
                for p in ['ec2:AssociateRouteTable']:
                    __protego_resource_map['ec2'].append({'action': 'AssociateRouteTable', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_ec2.RouteTableAssociation(**kwargs)
            def create_route(self, *args, **kwargs):
                kwargs['RouteTableId']=self.__protego_args['Id']
                __protego_used['ec2']['RouteTable.create_route']=['ec2:CreateRoute']
                for p in ['ec2:CreateRoute']:
                    __protego_resource_map['ec2'].append({'action': 'CreateRoute', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['DestinationCidrBlock'] = kwargs['DestinationCidrBlock']
                return RES_ec2.Route(**kwargs)
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['RouteTable.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['RouteTableId']=self.__protego_args['Id']
                __protego_used['ec2']['RouteTable.delete']=['ec2:DeleteRouteTable']
                for p in ['ec2:DeleteRouteTable']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteRouteTable', 'permission':p, 'res': kwargs, 'region': _region  })
            def Associations(self, *args, **kwargs):
                res = [RES_ec2.RouteTableAssociation(**kwargs)]
                return res
            def Routes(self, *args, **kwargs):
                kwargs['RouteTableId'] = self.__protego_args['Id']
                res = [RES_ec2.Route(**kwargs)]
                return res
            def Vpc(self, *args, **kwargs):
                res = RES_ec2.Vpc(**kwargs)
                return res
            @property
            def id(self):
                pass
            @property
            def route_table_id(self):
                pass
            pass
        class RouteTableAssociation(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def delete(self, *args, **kwargs):
                kwargs['AssociationId']=self.__protego_args['Id']
                __protego_used['ec2']['RouteTableAssociation.delete']=['ec2:DisassociateRouteTable']
                for p in ['ec2:DisassociateRouteTable']:
                    __protego_resource_map['ec2'].append({'action': 'DisassociateRouteTable', 'permission':p, 'res': kwargs, 'region': _region  })
            def replace_subnet(self, *args, **kwargs):
                kwargs['AssociationId']=self.__protego_args['Id']
                __protego_used['ec2']['RouteTableAssociation.replace_subnet']=['ec2:ReplaceRouteTableAssociation']
                for p in ['ec2:ReplaceRouteTableAssociation']:
                    __protego_resource_map['ec2'].append({'action': 'ReplaceRouteTableAssociation', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_ec2.RouteTableAssociation(**kwargs)
            def RouteTable(self, *args, **kwargs):
                res = RES_ec2.RouteTable(**kwargs)
                return res
            def Subnet(self, *args, **kwargs):
                res = RES_ec2.Subnet(**kwargs)
                return res
            @property
            def id(self):
                pass
            @property
            def route_table_association_id(self):
                pass
            pass
        class SecurityGroup(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['GroupIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['SecurityGroup.__init__']=['ec2:DescribeSecurityGroups'] #DescribeSecurityGroups
                for p in ['ec2:DescribeSecurityGroups']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeSecurityGroups', 'permission':p, 'res': kwargs, 'region': _region  })
            def authorize_egress(self, *args, **kwargs):
                kwargs['GroupId']=self.__protego_args['Id']
                __protego_used['ec2']['SecurityGroup.authorize_egress']=['ec2:AuthorizeSecurityGroupEgress']
                for p in ['ec2:AuthorizeSecurityGroupEgress']:
                    __protego_resource_map['ec2'].append({'action': 'AuthorizeSecurityGroupEgress', 'permission':p, 'res': kwargs, 'region': _region  })
            def authorize_ingress(self, *args, **kwargs):
                kwargs['GroupId']=self.__protego_args['Id']
                __protego_used['ec2']['SecurityGroup.authorize_ingress']=['ec2:AuthorizeSecurityGroupIngress']
                for p in ['ec2:AuthorizeSecurityGroupIngress']:
                    __protego_resource_map['ec2'].append({'action': 'AuthorizeSecurityGroupIngress', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['SecurityGroup.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['GroupId']=self.__protego_args['Id']
                __protego_used['ec2']['SecurityGroup.delete']=['ec2:DeleteSecurityGroup']
                for p in ['ec2:DeleteSecurityGroup']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteSecurityGroup', 'permission':p, 'res': kwargs, 'region': _region  })
            def revoke_egress(self, *args, **kwargs):
                kwargs['GroupId']=self.__protego_args['Id']
                __protego_used['ec2']['SecurityGroup.revoke_egress']=['ec2:RevokeSecurityGroupEgress']
                for p in ['ec2:RevokeSecurityGroupEgress']:
                    __protego_resource_map['ec2'].append({'action': 'RevokeSecurityGroupEgress', 'permission':p, 'res': kwargs, 'region': _region  })
            def revoke_ingress(self, *args, **kwargs):
                kwargs['GroupId']=self.__protego_args['Id']
                __protego_used['ec2']['SecurityGroup.revoke_ingress']=['ec2:RevokeSecurityGroupIngress']
                for p in ['ec2:RevokeSecurityGroupIngress']:
                    __protego_resource_map['ec2'].append({'action': 'RevokeSecurityGroupIngress', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def id(self):
                pass
            @property
            def group_id(self):
                pass
            pass
        class Snapshot(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['SnapshotIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Snapshot.__init__']=['ec2:DescribeSnapshots'] #DescribeSnapshots
                for p in ['ec2:DescribeSnapshots']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeSnapshots', 'permission':p, 'res': kwargs, 'region': _region  })
            def copy(self, *args, **kwargs):
                kwargs['SourceSnapshotId']=self.__protego_args['Id']
                __protego_used['ec2']['Snapshot.copy']=['ec2:CopySnapshot']
                for p in ['ec2:CopySnapshot']:
                    __protego_resource_map['ec2'].append({'action': 'CopySnapshot', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Snapshot.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['SnapshotId']=self.__protego_args['Id']
                __protego_used['ec2']['Snapshot.delete']=['ec2:DeleteSnapshot']
                for p in ['ec2:DeleteSnapshot']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteSnapshot', 'permission':p, 'res': kwargs, 'region': _region  })
            def describe_attribute(self, *args, **kwargs):
                kwargs['SnapshotId']=self.__protego_args['Id']
                __protego_used['ec2']['Snapshot.describe_attribute']=['ec2:DescribeSnapshotAttribute']
                for p in ['ec2:DescribeSnapshotAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeSnapshotAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def modify_attribute(self, *args, **kwargs):
                kwargs['SnapshotId']=self.__protego_args['Id']
                __protego_used['ec2']['Snapshot.modify_attribute']=['ec2:ModifySnapshotAttribute']
                for p in ['ec2:ModifySnapshotAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ModifySnapshotAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def reset_attribute(self, *args, **kwargs):
                kwargs['SnapshotId']=self.__protego_args['Id']
                __protego_used['ec2']['Snapshot.reset_attribute']=['ec2:ResetSnapshotAttribute']
                for p in ['ec2:ResetSnapshotAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ResetSnapshotAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def Volume(self, *args, **kwargs):
                res = RES_ec2.Volume(**kwargs)
                return res
            @property
            def id(self):
                pass
            @property
            def snapshot_id(self):
                pass
            pass
        class Subnet(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['SubnetIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Subnet.__init__']=['ec2:DescribeSubnets'] #DescribeSubnets
                for p in ['ec2:DescribeSubnets']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeSubnets', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_instances(self, *args, **kwargs):
                kwargs['SubnetId']=self.__protego_args['Id']
                __protego_used['ec2']['Subnet.create_instances']=['ec2:RunInstances', 'ec2:RunInstances', 'ec2:RunInstances', 'ec2:RunInstances', 'ec2:RunInstances', 'ec2:RunInstances']
                for p in ['ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances','ec2:RunInstances']:
                    __protego_resource_map['ec2'].append({'action': 'RunInstances', 'permission':p, 'res': kwargs, 'region': _region  })
                return [RES_ec2.Instance(**kwargs)]
            def create_network_interface(self, *args, **kwargs):
                kwargs['SubnetId']=self.__protego_args['Id']
                __protego_used['ec2']['Subnet.create_network_interface']=['ec2:CreateNetworkInterface']
                for p in ['ec2:CreateNetworkInterface']:
                    __protego_resource_map['ec2'].append({'action': 'CreateNetworkInterface', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_ec2.NetworkInterface(**kwargs)
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Subnet.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['SubnetId']=self.__protego_args['Id']
                __protego_used['ec2']['Subnet.delete']=['ec2:DeleteSubnet']
                for p in ['ec2:DeleteSubnet']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteSubnet', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def instances(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class instances_col(object):
                    def all(self):
                        __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                        for p in ['ec2:DescribeInstances']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Instance()]
                    def limit(self):
                        __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                        for p in ['ec2:DescribeInstances']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Instance()]
                    def filter(self):
                        __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                        for p in ['ec2:DescribeInstances']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.Instance()]
                return instances_col()
            @property
            def network_interfaces(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class network_interfaces_col(object):
                    def all(self):
                        __protego_used['ec2']['network_interfaces']=['ec2:DescribeNetworkInterfaces']
                        for p in ['ec2:DescribeNetworkInterfaces']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaces', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.NetworkInterface()]
                    def limit(self):
                        __protego_used['ec2']['network_interfaces']=['ec2:DescribeNetworkInterfaces']
                        for p in ['ec2:DescribeNetworkInterfaces']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaces', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.NetworkInterface()]
                    def filter(self):
                        __protego_used['ec2']['network_interfaces']=['ec2:DescribeNetworkInterfaces']
                        for p in ['ec2:DescribeNetworkInterfaces']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaces', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.NetworkInterface()]
                return network_interfaces_col()
            def Vpc(self, *args, **kwargs):
                res = RES_ec2.Vpc(**kwargs)
                return res
            @property
            def id(self):
                pass
            @property
            def subnet_id(self):
                pass
            pass
        class Tag(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['ResourceId','Key','Value']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Filters[0].Values[0]']=self.__protego_args['Key']
                kwargs['Filters[1].Values[0]']=self.__protego_args['Value']
                __protego_used['ec2']['Tag.__init__']=['ec2:DescribeTags'] #DescribeTags
                for p in ['ec2:DescribeTags']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeTags', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['ResourceId']
                kwargs['Tags[0].Key']=self.__protego_args['Key']
                kwargs['Tags[0].Value']=self.__protego_args['Value']
                __protego_used['ec2']['Tag.delete']=['ec2:DeleteTags']
                for p in ['ec2:DeleteTags']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteTags', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def resource_id(self):
                pass
            @property
            def resource_id(self):
                pass
            @property
            def key(self):
                pass
            @property
            def key(self):
                pass
            @property
            def value(self):
                pass
            @property
            def value(self):
                pass
            pass
        class Volume(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['VolumeIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Volume.__init__']=['ec2:DescribeVolumes'] #DescribeVolumes
                for p in ['ec2:DescribeVolumes']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeVolumes', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_to_instance(self, *args, **kwargs):
                kwargs['VolumeId']=self.__protego_args['Id']
                __protego_used['ec2']['Volume.attach_to_instance']=['ec2:AttachVolume', 'ec2:AttachVolume']
                for p in ['ec2:AttachVolume','ec2:AttachVolume']:
                    __protego_resource_map['ec2'].append({'action': 'AttachVolume', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_snapshot(self, *args, **kwargs):
                kwargs['VolumeId']=self.__protego_args['Id']
                __protego_used['ec2']['Volume.create_snapshot']=['ec2:CreateSnapshot', 'ec2:CreateSnapshot']
                for p in ['ec2:CreateSnapshot','ec2:CreateSnapshot']:
                    __protego_resource_map['ec2'].append({'action': 'CreateSnapshot', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_ec2.Snapshot(**kwargs)
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Volume.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['VolumeId']=self.__protego_args['Id']
                __protego_used['ec2']['Volume.delete']=['ec2:DeleteVolume']
                for p in ['ec2:DeleteVolume']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteVolume', 'permission':p, 'res': kwargs, 'region': _region  })
            def describe_attribute(self, *args, **kwargs):
                kwargs['VolumeId']=self.__protego_args['Id']
                __protego_used['ec2']['Volume.describe_attribute']=['ec2:DescribeVolumeAttribute']
                for p in ['ec2:DescribeVolumeAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeVolumeAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def describe_status(self, *args, **kwargs):
                kwargs['VolumeIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Volume.describe_status']=['ec2:DescribeVolumeStatus']
                for p in ['ec2:DescribeVolumeStatus']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeVolumeStatus', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_from_instance(self, *args, **kwargs):
                kwargs['VolumeId']=self.__protego_args['Id']
                __protego_used['ec2']['Volume.detach_from_instance']=['ec2:DetachVolume', 'ec2:DetachVolume']
                for p in ['ec2:DetachVolume','ec2:DetachVolume']:
                    __protego_resource_map['ec2'].append({'action': 'DetachVolume', 'permission':p, 'res': kwargs, 'region': _region  })
            def enable_io(self, *args, **kwargs):
                kwargs['VolumeId']=self.__protego_args['Id']
                __protego_used['ec2']['Volume.enable_io']=['ec2:EnableVolumeIO']
                for p in ['ec2:EnableVolumeIO']:
                    __protego_resource_map['ec2'].append({'action': 'EnableVolumeIO', 'permission':p, 'res': kwargs, 'region': _region  })
            def modify_attribute(self, *args, **kwargs):
                kwargs['VolumeId']=self.__protego_args['Id']
                __protego_used['ec2']['Volume.modify_attribute']=['ec2:ModifyVolumeAttribute']
                for p in ['ec2:ModifyVolumeAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ModifyVolumeAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def snapshots(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class snapshots_col(object):
                    def all(self):
                        __protego_used['ec2']['snapshots']=['ec2:DescribeSnapshots']
                        for p in ['ec2:DescribeSnapshots']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeSnapshots', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Snapshot()]
                    def limit(self):
                        __protego_used['ec2']['snapshots']=['ec2:DescribeSnapshots']
                        for p in ['ec2:DescribeSnapshots']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeSnapshots', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Snapshot()]
                    def filter(self):
                        __protego_used['ec2']['snapshots']=['ec2:DescribeSnapshots']
                        for p in ['ec2:DescribeSnapshots']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeSnapshots', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.Snapshot()]
                return snapshots_col()
            @property
            def id(self):
                pass
            @property
            def volume_id(self):
                pass
            pass
        class Vpc(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['VpcIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.__init__']=['ec2:DescribeVpcs'] #DescribeVpcs
                for p in ['ec2:DescribeVpcs']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeVpcs', 'permission':p, 'res': kwargs, 'region': _region  })
            def associate_dhcp_options(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.associate_dhcp_options']=['ec2:AssociateDhcpOptions']
                for p in ['ec2:AssociateDhcpOptions']:
                    __protego_resource_map['ec2'].append({'action': 'AssociateDhcpOptions', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_classic_link_instance(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.attach_classic_link_instance']=['ec2:AttachClassicLinkVpc', 'ec2:AttachClassicLinkVpc', 'ec2:AttachClassicLinkVpc']
                for p in ['ec2:AttachClassicLinkVpc','ec2:AttachClassicLinkVpc','ec2:AttachClassicLinkVpc']:
                    __protego_resource_map['ec2'].append({'action': 'AttachClassicLinkVpc', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_internet_gateway(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.attach_internet_gateway']=['ec2:AttachInternetGateway']
                for p in ['ec2:AttachInternetGateway']:
                    __protego_resource_map['ec2'].append({'action': 'AttachInternetGateway', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_network_acl(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.create_network_acl']=['ec2:CreateNetworkAcl']
                for p in ['ec2:CreateNetworkAcl']:
                    __protego_resource_map['ec2'].append({'action': 'CreateNetworkAcl', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_ec2.NetworkAcl(**kwargs)
            def create_route_table(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.create_route_table']=['ec2:CreateRouteTable']
                for p in ['ec2:CreateRouteTable']:
                    __protego_resource_map['ec2'].append({'action': 'CreateRouteTable', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_ec2.RouteTable(**kwargs)
            def create_security_group(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.create_security_group']=['ec2:CreateSecurityGroup']
                for p in ['ec2:CreateSecurityGroup']:
                    __protego_resource_map['ec2'].append({'action': 'CreateSecurityGroup', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_ec2.SecurityGroup(**kwargs)
            def create_subnet(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.create_subnet']=['ec2:CreateSubnet']
                for p in ['ec2:CreateSubnet']:
                    __protego_resource_map['ec2'].append({'action': 'CreateSubnet', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_ec2.Subnet(**kwargs)
            def create_tags(self, *args, **kwargs):
                kwargs['Resources[0]']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.create_tags']=['ec2:CreateTags']
                for p in ['ec2:CreateTags']:
                    __protego_resource_map['ec2'].append({'action': 'CreateTags', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Tags[].Key']
                kwargs2['Value'] = kwargs['Tags[].Value']
                return RES_ec2.Tag(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.delete']=['ec2:DeleteVpc']
                for p in ['ec2:DeleteVpc']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteVpc', 'permission':p, 'res': kwargs, 'region': _region  })
            def describe_attribute(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.describe_attribute']=['ec2:DescribeVpcAttribute']
                for p in ['ec2:DescribeVpcAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeVpcAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_classic_link_instance(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.detach_classic_link_instance']=['ec2:DetachClassicLinkVpc', 'ec2:DetachClassicLinkVpc']
                for p in ['ec2:DetachClassicLinkVpc','ec2:DetachClassicLinkVpc']:
                    __protego_resource_map['ec2'].append({'action': 'DetachClassicLinkVpc', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_internet_gateway(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.detach_internet_gateway']=['ec2:DetachInternetGateway']
                for p in ['ec2:DetachInternetGateway']:
                    __protego_resource_map['ec2'].append({'action': 'DetachInternetGateway', 'permission':p, 'res': kwargs, 'region': _region  })
            def disable_classic_link(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.disable_classic_link']=['ec2:DisableVpcClassicLink']
                for p in ['ec2:DisableVpcClassicLink']:
                    __protego_resource_map['ec2'].append({'action': 'DisableVpcClassicLink', 'permission':p, 'res': kwargs, 'region': _region  })
            def enable_classic_link(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.enable_classic_link']=['ec2:EnableVpcClassicLink']
                for p in ['ec2:EnableVpcClassicLink']:
                    __protego_resource_map['ec2'].append({'action': 'EnableVpcClassicLink', 'permission':p, 'res': kwargs, 'region': _region  })
            def modify_attribute(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.modify_attribute']=['ec2:ModifyVpcAttribute']
                for p in ['ec2:ModifyVpcAttribute']:
                    __protego_resource_map['ec2'].append({'action': 'ModifyVpcAttribute', 'permission':p, 'res': kwargs, 'region': _region  })
            def request_vpc_peering_connection(self, *args, **kwargs):
                kwargs['VpcId']=self.__protego_args['Id']
                __protego_used['ec2']['Vpc.request_vpc_peering_connection']=['ec2:CreateVpcPeeringConnection', 'ec2:CreateVpcPeeringConnection']
                for p in ['ec2:CreateVpcPeeringConnection','ec2:CreateVpcPeeringConnection']:
                    __protego_resource_map['ec2'].append({'action': 'CreateVpcPeeringConnection', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_ec2.VpcPeeringConnection(**kwargs)
            @property
            def accepted_vpc_peering_connections(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class accepted_vpc_peering_connections_col(object):
                    def all(self):
                        __protego_used['ec2']['accepted_vpc_peering_connections']=['ec2:DescribeVpcPeeringConnections']
                        for p in ['ec2:DescribeVpcPeeringConnections']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeVpcPeeringConnections', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.VpcPeeringConnection()]
                    def limit(self):
                        __protego_used['ec2']['accepted_vpc_peering_connections']=['ec2:DescribeVpcPeeringConnections']
                        for p in ['ec2:DescribeVpcPeeringConnections']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeVpcPeeringConnections', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.VpcPeeringConnection()]
                    def filter(self):
                        __protego_used['ec2']['accepted_vpc_peering_connections']=['ec2:DescribeVpcPeeringConnections']
                        for p in ['ec2:DescribeVpcPeeringConnections']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeVpcPeeringConnections', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.VpcPeeringConnection()]
                return accepted_vpc_peering_connections_col()
            @property
            def instances(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class instances_col(object):
                    def all(self):
                        __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                        for p in ['ec2:DescribeInstances']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Instance()]
                    def limit(self):
                        __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                        for p in ['ec2:DescribeInstances']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Instance()]
                    def filter(self):
                        __protego_used['ec2']['instances']=['ec2:DescribeInstances']
                        for p in ['ec2:DescribeInstances']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInstances', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.Instance()]
                return instances_col()
            @property
            def internet_gateways(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class internet_gateways_col(object):
                    def all(self):
                        __protego_used['ec2']['internet_gateways']=['ec2:DescribeInternetGateways']
                        for p in ['ec2:DescribeInternetGateways']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInternetGateways', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.InternetGateway()]
                    def limit(self):
                        __protego_used['ec2']['internet_gateways']=['ec2:DescribeInternetGateways']
                        for p in ['ec2:DescribeInternetGateways']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInternetGateways', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.InternetGateway()]
                    def filter(self):
                        __protego_used['ec2']['internet_gateways']=['ec2:DescribeInternetGateways']
                        for p in ['ec2:DescribeInternetGateways']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeInternetGateways', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.InternetGateway()]
                return internet_gateways_col()
            @property
            def network_acls(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class network_acls_col(object):
                    def all(self):
                        __protego_used['ec2']['network_acls']=['ec2:DescribeNetworkAcls']
                        for p in ['ec2:DescribeNetworkAcls']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeNetworkAcls', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.NetworkAcl()]
                    def limit(self):
                        __protego_used['ec2']['network_acls']=['ec2:DescribeNetworkAcls']
                        for p in ['ec2:DescribeNetworkAcls']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeNetworkAcls', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.NetworkAcl()]
                    def filter(self):
                        __protego_used['ec2']['network_acls']=['ec2:DescribeNetworkAcls']
                        for p in ['ec2:DescribeNetworkAcls']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeNetworkAcls', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.NetworkAcl()]
                return network_acls_col()
            @property
            def network_interfaces(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class network_interfaces_col(object):
                    def all(self):
                        __protego_used['ec2']['network_interfaces']=['ec2:DescribeNetworkInterfaces']
                        for p in ['ec2:DescribeNetworkInterfaces']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaces', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.NetworkInterface()]
                    def limit(self):
                        __protego_used['ec2']['network_interfaces']=['ec2:DescribeNetworkInterfaces']
                        for p in ['ec2:DescribeNetworkInterfaces']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaces', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.NetworkInterface()]
                    def filter(self):
                        __protego_used['ec2']['network_interfaces']=['ec2:DescribeNetworkInterfaces']
                        for p in ['ec2:DescribeNetworkInterfaces']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeNetworkInterfaces', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.NetworkInterface()]
                return network_interfaces_col()
            @property
            def requested_vpc_peering_connections(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class requested_vpc_peering_connections_col(object):
                    def all(self):
                        __protego_used['ec2']['requested_vpc_peering_connections']=['ec2:DescribeVpcPeeringConnections']
                        for p in ['ec2:DescribeVpcPeeringConnections']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeVpcPeeringConnections', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.VpcPeeringConnection()]
                    def limit(self):
                        __protego_used['ec2']['requested_vpc_peering_connections']=['ec2:DescribeVpcPeeringConnections']
                        for p in ['ec2:DescribeVpcPeeringConnections']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeVpcPeeringConnections', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.VpcPeeringConnection()]
                    def filter(self):
                        __protego_used['ec2']['requested_vpc_peering_connections']=['ec2:DescribeVpcPeeringConnections']
                        for p in ['ec2:DescribeVpcPeeringConnections']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeVpcPeeringConnections', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.VpcPeeringConnection()]
                return requested_vpc_peering_connections_col()
            @property
            def route_tables(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class route_tables_col(object):
                    def all(self):
                        __protego_used['ec2']['route_tables']=['ec2:DescribeRouteTables']
                        for p in ['ec2:DescribeRouteTables']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeRouteTables', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.RouteTable()]
                    def limit(self):
                        __protego_used['ec2']['route_tables']=['ec2:DescribeRouteTables']
                        for p in ['ec2:DescribeRouteTables']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeRouteTables', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.RouteTable()]
                    def filter(self):
                        __protego_used['ec2']['route_tables']=['ec2:DescribeRouteTables']
                        for p in ['ec2:DescribeRouteTables']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeRouteTables', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.RouteTable()]
                return route_tables_col()
            @property
            def security_groups(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class security_groups_col(object):
                    def all(self):
                        __protego_used['ec2']['security_groups']=['ec2:DescribeSecurityGroups']
                        for p in ['ec2:DescribeSecurityGroups']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeSecurityGroups', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.SecurityGroup()]
                    def limit(self):
                        __protego_used['ec2']['security_groups']=['ec2:DescribeSecurityGroups']
                        for p in ['ec2:DescribeSecurityGroups']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeSecurityGroups', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.SecurityGroup()]
                    def filter(self):
                        __protego_used['ec2']['security_groups']=['ec2:DescribeSecurityGroups']
                        for p in ['ec2:DescribeSecurityGroups']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeSecurityGroups', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.SecurityGroup()]
                return security_groups_col()
            @property
            def subnets(self, *args):
                kwargs = self.__protego_args
                kwargs['Filters[0].Values[0]']=self.__protego_args['Id']
                class subnets_col(object):
                    def all(self):
                        __protego_used['ec2']['subnets']=['ec2:DescribeSubnets']
                        for p in ['ec2:DescribeSubnets']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeSubnets', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Subnet()]
                    def limit(self):
                        __protego_used['ec2']['subnets']=['ec2:DescribeSubnets']
                        for p in ['ec2:DescribeSubnets']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeSubnets', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_ec2.Subnet()]
                    def filter(self):
                        __protego_used['ec2']['subnets']=['ec2:DescribeSubnets']
                        for p in ['ec2:DescribeSubnets']:
                            __protego_resource_map['ec2'].append({'action': 'DescribeSubnets', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_ec2.Subnet()]
                return subnets_col()
            def DhcpOptions(self, *args, **kwargs):
                res = RES_ec2.DhcpOptions(**kwargs)
                return res
            @property
            def id(self):
                pass
            @property
            def vpc_id(self):
                pass
            pass
        class VpcPeeringConnection(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['VpcPeeringConnectionIds[0]']=self.__protego_args['Id']
                __protego_used['ec2']['VpcPeeringConnection.__init__']=['ec2:DescribeVpcPeeringConnections'] #DescribeVpcPeeringConnections
                for p in ['ec2:DescribeVpcPeeringConnections']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeVpcPeeringConnections', 'permission':p, 'res': kwargs, 'region': _region  })
            def accept(self, *args, **kwargs):
                kwargs['VpcPeeringConnectionId']=self.__protego_args['Id']
                __protego_used['ec2']['VpcPeeringConnection.accept']=['ec2:AcceptVpcPeeringConnection', 'ec2:AcceptVpcPeeringConnection']
                for p in ['ec2:AcceptVpcPeeringConnection','ec2:AcceptVpcPeeringConnection']:
                    __protego_resource_map['ec2'].append({'action': 'AcceptVpcPeeringConnection', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['VpcPeeringConnectionId']=self.__protego_args['Id']
                __protego_used['ec2']['VpcPeeringConnection.delete']=['ec2:DeleteVpcPeeringConnection']
                for p in ['ec2:DeleteVpcPeeringConnection']:
                    __protego_resource_map['ec2'].append({'action': 'DeleteVpcPeeringConnection', 'permission':p, 'res': kwargs, 'region': _region  })
            def reject(self, *args, **kwargs):
                kwargs['VpcPeeringConnectionId']=self.__protego_args['Id']
                __protego_used['ec2']['VpcPeeringConnection.reject']=['ec2:RejectVpcPeeringConnection']
                for p in ['ec2:RejectVpcPeeringConnection']:
                    __protego_resource_map['ec2'].append({'action': 'RejectVpcPeeringConnection', 'permission':p, 'res': kwargs, 'region': _region  })
            def AccepterVpc(self, *args, **kwargs):
                res = RES_ec2.Vpc(**kwargs)
                return res
            def RequesterVpc(self, *args, **kwargs):
                res = RES_ec2.Vpc(**kwargs)
                return res
            @property
            def id(self):
                pass
            @property
            def vpc_peering_connection_id(self):
                pass
            pass
        class VpcAddress(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['AllocationId']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['AllocationIds[0]']=self.__protego_args['AllocationId']
                __protego_used['ec2']['VpcAddress.__init__']=['ec2:DescribeAddresses'] #DescribeAddresses
                for p in ['ec2:DescribeAddresses']:
                    __protego_resource_map['ec2'].append({'action': 'DescribeAddresses', 'permission':p, 'res': kwargs, 'region': _region  })
            def associate(self, *args, **kwargs):
                kwargs['AllocationId']=self.__protego_args['AllocationId']
                __protego_used['ec2']['VpcAddress.associate']=['ec2:AssociateAddress']
                for p in ['ec2:AssociateAddress']:
                    __protego_resource_map['ec2'].append({'action': 'AssociateAddress', 'permission':p, 'res': kwargs, 'region': _region  })
            def release(self, *args, **kwargs):
                kwargs['AllocationId']=self.__protego_args['AllocationId']
                __protego_used['ec2']['VpcAddress.release']=['ec2:ReleaseAddress']
                for p in ['ec2:ReleaseAddress']:
                    __protego_resource_map['ec2'].append({'action': 'ReleaseAddress', 'permission':p, 'res': kwargs, 'region': _region  })
            def Association(self, *args, **kwargs):
                res = RES_ec2.NetworkInterfaceAssociation(**kwargs)
                return res
            @property
            def allocation_id(self):
                pass
            pass
    return RES_ec2()
def _create_glacier(region_name):
    _region=region_name
    class RES_glacier:
        def __init__(self, *args, **kwargs):
            __protego_used['glacier']= __protego_used.get('glacier', {})
            __protego_resource_map['glacier']=__protego_resource_map.get('glacier', [])
        def create_vault(self, *args, **kwargs): #action
            __protego_used['glacier']['create_vault']=['glacier:CreateVault']
            for p in ['glacier:CreateVault']:
                __protego_resource_map['glacier'].append({'action': 'CreateVault', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Vault()
        @property
        def vaults(self, *args): #collection
            class vaults_col(object):
                def all(self):
                    __protego_used['glacier']['vaults']=['glacier:ListVaults']
                    for p in ['glacier:ListVaults']:
                        __protego_resource_map['glacier'].append({'action': 'ListVaults', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_glacier.Vault()]
                def limit(self):
                    __protego_used['glacier']['vaults']=['glacier:ListVaults']
                    for p in ['glacier:ListVaults']:
                        __protego_resource_map['glacier'].append({'action': 'ListVaults', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_glacier.Vault()]
                def filter(self):
                    __protego_used['glacier']['vaults']=['glacier:ListVaults']
                    for p in ['glacier:ListVaults']:
                        __protego_resource_map['glacier'].append({'action': 'ListVaults', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_glacier.Vault()]
            return vaults_col()
        @property
        def meta(self):
            class meta_cls:
                def __init__(self):
                    self.client = client("glacier")
            return meta_cls()
        pass
        class Account(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def create_vault(self, *args, **kwargs):
                kwargs['accountId']=self.__protego_args['Id']
                __protego_used['glacier']['Account.create_vault']=['glacier:CreateVault']
                for p in ['glacier:CreateVault']:
                    __protego_resource_map['glacier'].append({'action': 'CreateVault', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Name'] = kwargs['vaultName']
                return RES_glacier.Vault(**kwargs)
            @property
            def vaults(self, *args):
                kwargs = self.__protego_args
                kwargs['accountId']=self.__protego_args['Id']
                class vaults_col(object):
                    def all(self):
                        __protego_used['glacier']['vaults']=['glacier:ListVaults']
                        for p in ['glacier:ListVaults']:
                            __protego_resource_map['glacier'].append({'action': 'ListVaults', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Vault()]
                    def limit(self):
                        __protego_used['glacier']['vaults']=['glacier:ListVaults']
                        for p in ['glacier:ListVaults']:
                            __protego_resource_map['glacier'].append({'action': 'ListVaults', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Vault()]
                    def filter(self):
                        __protego_used['glacier']['vaults']=['glacier:ListVaults']
                        for p in ['glacier:ListVaults']:
                            __protego_resource_map['glacier'].append({'action': 'ListVaults', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_glacier.Vault()]
                return vaults_col()
            def Vault(self, *args, **kwargs):
                kwargs['AccountId'] = self.__protego_args['Id']
                kwargs['Name'] = args[0]
                res = RES_glacier.Vault(**kwargs)
                return res
            @property
            def id(self):
                pass
            pass
        class Archive(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['AccountId','VaultName','Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def delete(self, *args, **kwargs):
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['VaultName']
                kwargs['archiveId']=self.__protego_args['Id']
                __protego_used['glacier']['Archive.delete']=['glacier:DeleteArchive']
                for p in ['glacier:DeleteArchive']:
                    __protego_resource_map['glacier'].append({'action': 'DeleteArchive', 'permission':p, 'res': kwargs, 'region': _region  })
            def initiate_archive_retrieval(self, *args, **kwargs):
                kwargs['vaultName']=self.__protego_args['VaultName']
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['jobParameters.ArchiveId']=self.__protego_args['Id']
                __protego_used['glacier']['Archive.initiate_archive_retrieval']=['glacier:InitiateJob']
                for p in ['glacier:InitiateJob']:
                    __protego_resource_map['glacier'].append({'action': 'InitiateJob', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_glacier.Job(**kwargs)
            def Vault(self, *args, **kwargs):
                kwargs['AccountId'] = self.__protego_args['AccountId']
                kwargs['Name'] = self.__protego_args['VaultName']
                res = RES_glacier.Vault(**kwargs)
                return res
            @property
            def account_id(self):
                pass
            @property
            def vault_name(self):
                pass
            @property
            def id(self):
                pass
            pass
        class Job(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['AccountId','VaultName','Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['VaultName']
                kwargs['jobId']=self.__protego_args['Id']
                __protego_used['glacier']['Job.__init__']=['glacier:DescribeJob'] #DescribeJob
                for p in ['glacier:DescribeJob']:
                    __protego_resource_map['glacier'].append({'action': 'DescribeJob', 'permission':p, 'res': kwargs, 'region': _region  })
            def get_output(self, *args, **kwargs):
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['VaultName']
                kwargs['jobId']=self.__protego_args['Id']
                __protego_used['glacier']['Job.get_output']=['glacier:GetJobOutput']
                for p in ['glacier:GetJobOutput']:
                    __protego_resource_map['glacier'].append({'action': 'GetJobOutput', 'permission':p, 'res': kwargs, 'region': _region  })
            def Vault(self, *args, **kwargs):
                kwargs['AccountId'] = self.__protego_args['AccountId']
                kwargs['Name'] = self.__protego_args['VaultName']
                res = RES_glacier.Vault(**kwargs)
                return res
            @property
            def account_id(self):
                pass
            @property
            def vault_name(self):
                pass
            @property
            def id(self):
                pass
            @property
            def job_id(self):
                pass
            pass
        class MultipartUpload(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['AccountId','VaultName','Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def abort(self, *args, **kwargs):
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['VaultName']
                kwargs['uploadId']=self.__protego_args['Id']
                __protego_used['glacier']['MultipartUpload.abort']=['glacier:AbortMultipartUpload']
                for p in ['glacier:AbortMultipartUpload']:
                    __protego_resource_map['glacier'].append({'action': 'AbortMultipartUpload', 'permission':p, 'res': kwargs, 'region': _region  })
            def complete(self, *args, **kwargs):
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['VaultName']
                kwargs['uploadId']=self.__protego_args['Id']
                __protego_used['glacier']['MultipartUpload.complete']=['glacier:CompleteMultipartUpload']
                for p in ['glacier:CompleteMultipartUpload']:
                    __protego_resource_map['glacier'].append({'action': 'CompleteMultipartUpload', 'permission':p, 'res': kwargs, 'region': _region  })
            def parts(self, *args, **kwargs):
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['VaultName']
                kwargs['uploadId']=self.__protego_args['Id']
                __protego_used['glacier']['MultipartUpload.parts']=['glacier:ListParts']
                for p in ['glacier:ListParts']:
                    __protego_resource_map['glacier'].append({'action': 'ListParts', 'permission':p, 'res': kwargs, 'region': _region  })
            def upload_part(self, *args, **kwargs):
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['VaultName']
                kwargs['uploadId']=self.__protego_args['Id']
                __protego_used['glacier']['MultipartUpload.upload_part']=['glacier:UploadMultipartPart']
                for p in ['glacier:UploadMultipartPart']:
                    __protego_resource_map['glacier'].append({'action': 'UploadMultipartPart', 'permission':p, 'res': kwargs, 'region': _region  })
            def Vault(self, *args, **kwargs):
                kwargs['AccountId'] = self.__protego_args['AccountId']
                kwargs['Name'] = self.__protego_args['VaultName']
                res = RES_glacier.Vault(**kwargs)
                return res
            @property
            def account_id(self):
                pass
            @property
            def vault_name(self):
                pass
            @property
            def id(self):
                pass
            @property
            def multipart_upload_id(self):
                pass
            pass
        class Notification(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['AccountId','VaultName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['VaultName']
                __protego_used['glacier']['Notification.__init__']=['glacier:GetVaultNotifications'] #GetVaultNotifications
                for p in ['glacier:GetVaultNotifications']:
                    __protego_resource_map['glacier'].append({'action': 'GetVaultNotifications', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['VaultName']
                __protego_used['glacier']['Notification.delete']=['glacier:DeleteVaultNotifications']
                for p in ['glacier:DeleteVaultNotifications']:
                    __protego_resource_map['glacier'].append({'action': 'DeleteVaultNotifications', 'permission':p, 'res': kwargs, 'region': _region  })
            def set(self, *args, **kwargs):
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['VaultName']
                __protego_used['glacier']['Notification.set']=['glacier:SetVaultNotifications']
                for p in ['glacier:SetVaultNotifications']:
                    __protego_resource_map['glacier'].append({'action': 'SetVaultNotifications', 'permission':p, 'res': kwargs, 'region': _region  })
            def Vault(self, *args, **kwargs):
                kwargs['AccountId'] = self.__protego_args['AccountId']
                kwargs['Name'] = self.__protego_args['VaultName']
                res = RES_glacier.Vault(**kwargs)
                return res
            @property
            def account_id(self):
                pass
            @property
            def vault_name(self):
                pass
            pass
        class Vault(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['AccountId','Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['vaultName']=self.__protego_args['Name']
                kwargs['accountId']=self.__protego_args['AccountId']
                __protego_used['glacier']['Vault.__init__']=['glacier:DescribeVault'] #DescribeVault
                for p in ['glacier:DescribeVault']:
                    __protego_resource_map['glacier'].append({'action': 'DescribeVault', 'permission':p, 'res': kwargs, 'region': _region  })
            def create(self, *args, **kwargs):
                kwargs['vaultName']=self.__protego_args['Name']
                kwargs['accountId']=self.__protego_args['AccountId']
                __protego_used['glacier']['Vault.create']=['glacier:CreateVault']
                for p in ['glacier:CreateVault']:
                    __protego_resource_map['glacier'].append({'action': 'CreateVault', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['vaultName']=self.__protego_args['Name']
                kwargs['accountId']=self.__protego_args['AccountId']
                __protego_used['glacier']['Vault.delete']=['glacier:DeleteVault']
                for p in ['glacier:DeleteVault']:
                    __protego_resource_map['glacier'].append({'action': 'DeleteVault', 'permission':p, 'res': kwargs, 'region': _region  })
            def initiate_inventory_retrieval(self, *args, **kwargs):
                kwargs['vaultName']=self.__protego_args['Name']
                kwargs['accountId']=self.__protego_args['AccountId']
                __protego_used['glacier']['Vault.initiate_inventory_retrieval']=['glacier:InitiateJob']
                for p in ['glacier:InitiateJob']:
                    __protego_resource_map['glacier'].append({'action': 'InitiateJob', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_glacier.Job(**kwargs)
            def initiate_multipart_upload(self, *args, **kwargs):
                kwargs['vaultName']=self.__protego_args['Name']
                kwargs['accountId']=self.__protego_args['AccountId']
                __protego_used['glacier']['Vault.initiate_multipart_upload']=['glacier:InitiateMultipartUpload']
                for p in ['glacier:InitiateMultipartUpload']:
                    __protego_resource_map['glacier'].append({'action': 'InitiateMultipartUpload', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_glacier.MultipartUpload(**kwargs)
            def upload_archive(self, *args, **kwargs):
                kwargs['vaultName']=self.__protego_args['Name']
                kwargs['accountId']=self.__protego_args['AccountId']
                __protego_used['glacier']['Vault.upload_archive']=['glacier:UploadArchive']
                for p in ['glacier:UploadArchive']:
                    __protego_resource_map['glacier'].append({'action': 'UploadArchive', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_glacier.Archive(**kwargs)
            @property
            def completed_jobs(self, *args):
                kwargs = self.__protego_args
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['Name']
                class completed_jobs_col(object):
                    def all(self):
                        __protego_used['glacier']['completed_jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Job()]
                    def limit(self):
                        __protego_used['glacier']['completed_jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Job()]
                    def filter(self):
                        __protego_used['glacier']['completed_jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_glacier.Job()]
                return completed_jobs_col()
            @property
            def failed_jobs(self, *args):
                kwargs = self.__protego_args
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['Name']
                class failed_jobs_col(object):
                    def all(self):
                        __protego_used['glacier']['failed_jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Job()]
                    def limit(self):
                        __protego_used['glacier']['failed_jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Job()]
                    def filter(self):
                        __protego_used['glacier']['failed_jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_glacier.Job()]
                return failed_jobs_col()
            @property
            def jobs(self, *args):
                kwargs = self.__protego_args
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['Name']
                class jobs_col(object):
                    def all(self):
                        __protego_used['glacier']['jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Job()]
                    def limit(self):
                        __protego_used['glacier']['jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Job()]
                    def filter(self):
                        __protego_used['glacier']['jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_glacier.Job()]
                return jobs_col()
            @property
            def jobs_in_progress(self, *args):
                kwargs = self.__protego_args
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['Name']
                class jobs_in_progress_col(object):
                    def all(self):
                        __protego_used['glacier']['jobs_in_progress']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Job()]
                    def limit(self):
                        __protego_used['glacier']['jobs_in_progress']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Job()]
                    def filter(self):
                        __protego_used['glacier']['jobs_in_progress']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_glacier.Job()]
                return jobs_in_progress_col()
            @property
            def multipart_uplaods(self, *args):
                kwargs = self.__protego_args
                kwargs['vaultName']=self.__protego_args['Name']
                kwargs['accountId']=self.__protego_args['AccountId']
                class multipart_uplaods_col(object):
                    def all(self):
                        __protego_used['glacier']['multipart_uplaods']=['glacier:ListMultipartUploads']
                        for p in ['glacier:ListMultipartUploads']:
                            __protego_resource_map['glacier'].append({'action': 'ListMultipartUploads', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.MultipartUpload()]
                    def limit(self):
                        __protego_used['glacier']['multipart_uplaods']=['glacier:ListMultipartUploads']
                        for p in ['glacier:ListMultipartUploads']:
                            __protego_resource_map['glacier'].append({'action': 'ListMultipartUploads', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.MultipartUpload()]
                    def filter(self):
                        __protego_used['glacier']['multipart_uplaods']=['glacier:ListMultipartUploads']
                        for p in ['glacier:ListMultipartUploads']:
                            __protego_resource_map['glacier'].append({'action': 'ListMultipartUploads', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_glacier.MultipartUpload()]
                return multipart_uplaods_col()
            @property
            def multipart_uploads(self, *args):
                kwargs = self.__protego_args
                kwargs['vaultName']=self.__protego_args['Name']
                kwargs['accountId']=self.__protego_args['AccountId']
                class multipart_uploads_col(object):
                    def all(self):
                        __protego_used['glacier']['multipart_uploads']=['glacier:ListMultipartUploads']
                        for p in ['glacier:ListMultipartUploads']:
                            __protego_resource_map['glacier'].append({'action': 'ListMultipartUploads', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.MultipartUpload()]
                    def limit(self):
                        __protego_used['glacier']['multipart_uploads']=['glacier:ListMultipartUploads']
                        for p in ['glacier:ListMultipartUploads']:
                            __protego_resource_map['glacier'].append({'action': 'ListMultipartUploads', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.MultipartUpload()]
                    def filter(self):
                        __protego_used['glacier']['multipart_uploads']=['glacier:ListMultipartUploads']
                        for p in ['glacier:ListMultipartUploads']:
                            __protego_resource_map['glacier'].append({'action': 'ListMultipartUploads', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_glacier.MultipartUpload()]
                return multipart_uploads_col()
            @property
            def succeeded_jobs(self, *args):
                kwargs = self.__protego_args
                kwargs['accountId']=self.__protego_args['AccountId']
                kwargs['vaultName']=self.__protego_args['Name']
                class succeeded_jobs_col(object):
                    def all(self):
                        __protego_used['glacier']['succeeded_jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Job()]
                    def limit(self):
                        __protego_used['glacier']['succeeded_jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_glacier.Job()]
                    def filter(self):
                        __protego_used['glacier']['succeeded_jobs']=['glacier:ListJobs']
                        for p in ['glacier:ListJobs']:
                            __protego_resource_map['glacier'].append({'action': 'ListJobs', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_glacier.Job()]
                return succeeded_jobs_col()
            def Account(self, *args, **kwargs):
                kwargs['Id'] = self.__protego_args['AccountId']
                res = RES_glacier.Account(**kwargs)
                return res
            def Archive(self, *args, **kwargs):
                kwargs['AccountId'] = self.__protego_args['AccountId']
                kwargs['VaultName'] = self.__protego_args['Name']
                kwargs['Id'] = args[0]
                res = RES_glacier.Archive(**kwargs)
                return res
            def Job(self, *args, **kwargs):
                kwargs['AccountId'] = self.__protego_args['AccountId']
                kwargs['VaultName'] = self.__protego_args['Name']
                kwargs['Id'] = args[0]
                res = RES_glacier.Job(**kwargs)
                return res
            def MultipartUpload(self, *args, **kwargs):
                kwargs['AccountId'] = self.__protego_args['AccountId']
                kwargs['VaultName'] = self.__protego_args['Name']
                kwargs['Id'] = args[0]
                res = RES_glacier.MultipartUpload(**kwargs)
                return res
            def Notification(self, *args, **kwargs):
                kwargs['AccountId'] = self.__protego_args['AccountId']
                kwargs['VaultName'] = self.__protego_args['Name']
                res = RES_glacier.Notification(**kwargs)
                return res
            @property
            def account_id(self):
                pass
            @property
            def name(self):
                pass
            @property
            def vault_name(self):
                pass
            pass
    return RES_glacier()
def _create_iam(region_name):
    _region=region_name
    class RES_iam:
        def __init__(self, *args, **kwargs):
            __protego_used['iam']= __protego_used.get('iam', {})
            __protego_resource_map['iam']=__protego_resource_map.get('iam', [])
        def change_password(self, *args, **kwargs): #action
            __protego_used['iam']['change_password']=['iam:ChangePassword']
            for p in ['iam:ChangePassword']:
                __protego_resource_map['iam'].append({'action': 'ChangePassword', 'permission':p, 'res': kwargs, 'region': _region  })
        def create_account_alias(self, *args, **kwargs): #action
            __protego_used['iam']['create_account_alias']=['iam:CreateAccountAlias']
            for p in ['iam:CreateAccountAlias']:
                __protego_resource_map['iam'].append({'action': 'CreateAccountAlias', 'permission':p, 'res': kwargs, 'region': _region  })
        def create_account_password_policy(self, *args, **kwargs): #action
            __protego_used['iam']['create_account_password_policy']=['iam:UpdateAccountPasswordPolicy']
            for p in ['iam:UpdateAccountPasswordPolicy']:
                __protego_resource_map['iam'].append({'action': 'UpdateAccountPasswordPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.AccountPasswordPolicy()
        def create_group(self, *args, **kwargs): #action
            __protego_used['iam']['create_group']=['iam:CreateGroup']
            for p in ['iam:CreateGroup']:
                __protego_resource_map['iam'].append({'action': 'CreateGroup', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Group()
        def create_instance_profile(self, *args, **kwargs): #action
            __protego_used['iam']['create_instance_profile']=['iam:CreateInstanceProfile']
            for p in ['iam:CreateInstanceProfile']:
                __protego_resource_map['iam'].append({'action': 'CreateInstanceProfile', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.InstanceProfile()
        def create_policy(self, *args, **kwargs): #action
            __protego_used['iam']['create_policy']=['iam:CreatePolicy']
            for p in ['iam:CreatePolicy']:
                __protego_resource_map['iam'].append({'action': 'CreatePolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Policy()
        def create_role(self, *args, **kwargs): #action
            __protego_used['iam']['create_role']=['iam:CreateRole']
            for p in ['iam:CreateRole']:
                __protego_resource_map['iam'].append({'action': 'CreateRole', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Role()
        def create_saml_provider(self, *args, **kwargs): #action
            __protego_used['iam']['create_saml_provider']=['iam:CreateSAMLProvider']
            for p in ['iam:CreateSAMLProvider']:
                __protego_resource_map['iam'].append({'action': 'CreateSAMLProvider', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.SamlProvider()
        def create_server_certificate(self, *args, **kwargs): #action
            __protego_used['iam']['create_server_certificate']=['iam:UploadServerCertificate']
            for p in ['iam:UploadServerCertificate']:
                __protego_resource_map['iam'].append({'action': 'UploadServerCertificate', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.ServerCertificate()
        def create_signing_certificate(self, *args, **kwargs): #action
            __protego_used['iam']['create_signing_certificate']=['iam:UploadSigningCertificate']
            for p in ['iam:UploadSigningCertificate']:
                __protego_resource_map['iam'].append({'action': 'UploadSigningCertificate', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.SigningCertificate()
        def create_user(self, *args, **kwargs): #action
            __protego_used['iam']['create_user']=['iam:CreateUser']
            for p in ['iam:CreateUser']:
                __protego_resource_map['iam'].append({'action': 'CreateUser', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.User()
        def create_virtual_mfa_device(self, *args, **kwargs): #action
            __protego_used['iam']['create_virtual_mfa_device']=['iam:CreateVirtualMFADevice']
            for p in ['iam:CreateVirtualMFADevice']:
                __protego_resource_map['iam'].append({'action': 'CreateVirtualMFADevice', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.VirtualMfaDevice()
        @property
        def groups(self, *args): #collection
            class groups_col(object):
                def all(self):
                    __protego_used['iam']['groups']=['iam:ListGroups']
                    for p in ['iam:ListGroups']:
                        __protego_resource_map['iam'].append({'action': 'ListGroups', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.Group()]
                def limit(self):
                    __protego_used['iam']['groups']=['iam:ListGroups']
                    for p in ['iam:ListGroups']:
                        __protego_resource_map['iam'].append({'action': 'ListGroups', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.Group()]
                def filter(self):
                    __protego_used['iam']['groups']=['iam:ListGroups']
                    for p in ['iam:ListGroups']:
                        __protego_resource_map['iam'].append({'action': 'ListGroups', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.Group()]
            return groups_col()
        @property
        def instance_profiles(self, *args): #collection
            class instance_profiles_col(object):
                def all(self):
                    __protego_used['iam']['instance_profiles']=['iam:ListInstanceProfiles']
                    for p in ['iam:ListInstanceProfiles']:
                        __protego_resource_map['iam'].append({'action': 'ListInstanceProfiles', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.InstanceProfile()]
                def limit(self):
                    __protego_used['iam']['instance_profiles']=['iam:ListInstanceProfiles']
                    for p in ['iam:ListInstanceProfiles']:
                        __protego_resource_map['iam'].append({'action': 'ListInstanceProfiles', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.InstanceProfile()]
                def filter(self):
                    __protego_used['iam']['instance_profiles']=['iam:ListInstanceProfiles']
                    for p in ['iam:ListInstanceProfiles']:
                        __protego_resource_map['iam'].append({'action': 'ListInstanceProfiles', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.InstanceProfile()]
            return instance_profiles_col()
        @property
        def policies(self, *args): #collection
            class policies_col(object):
                def all(self):
                    __protego_used['iam']['policies']=['iam:ListPolicies']
                    for p in ['iam:ListPolicies']:
                        __protego_resource_map['iam'].append({'action': 'ListPolicies', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.Policy()]
                def limit(self):
                    __protego_used['iam']['policies']=['iam:ListPolicies']
                    for p in ['iam:ListPolicies']:
                        __protego_resource_map['iam'].append({'action': 'ListPolicies', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.Policy()]
                def filter(self):
                    __protego_used['iam']['policies']=['iam:ListPolicies']
                    for p in ['iam:ListPolicies']:
                        __protego_resource_map['iam'].append({'action': 'ListPolicies', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.Policy()]
            return policies_col()
        @property
        def roles(self, *args): #collection
            class roles_col(object):
                def all(self):
                    __protego_used['iam']['roles']=['iam:ListRoles']
                    for p in ['iam:ListRoles']:
                        __protego_resource_map['iam'].append({'action': 'ListRoles', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.Role()]
                def limit(self):
                    __protego_used['iam']['roles']=['iam:ListRoles']
                    for p in ['iam:ListRoles']:
                        __protego_resource_map['iam'].append({'action': 'ListRoles', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.Role()]
                def filter(self):
                    __protego_used['iam']['roles']=['iam:ListRoles']
                    for p in ['iam:ListRoles']:
                        __protego_resource_map['iam'].append({'action': 'ListRoles', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.Role()]
            return roles_col()
        @property
        def saml_providers(self, *args): #collection
            class saml_providers_col(object):
                def all(self):
                    __protego_used['iam']['saml_providers']=['iam:ListSAMLProviders']
                    for p in ['iam:ListSAMLProviders']:
                        __protego_resource_map['iam'].append({'action': 'ListSAMLProviders', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.SamlProvider()]
                def limit(self):
                    __protego_used['iam']['saml_providers']=['iam:ListSAMLProviders']
                    for p in ['iam:ListSAMLProviders']:
                        __protego_resource_map['iam'].append({'action': 'ListSAMLProviders', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.SamlProvider()]
                def filter(self):
                    __protego_used['iam']['saml_providers']=['iam:ListSAMLProviders']
                    for p in ['iam:ListSAMLProviders']:
                        __protego_resource_map['iam'].append({'action': 'ListSAMLProviders', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.SamlProvider()]
            return saml_providers_col()
        @property
        def server_certificates(self, *args): #collection
            class server_certificates_col(object):
                def all(self):
                    __protego_used['iam']['server_certificates']=['iam:ListServerCertificates']
                    for p in ['iam:ListServerCertificates']:
                        __protego_resource_map['iam'].append({'action': 'ListServerCertificates', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.ServerCertificate()]
                def limit(self):
                    __protego_used['iam']['server_certificates']=['iam:ListServerCertificates']
                    for p in ['iam:ListServerCertificates']:
                        __protego_resource_map['iam'].append({'action': 'ListServerCertificates', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.ServerCertificate()]
                def filter(self):
                    __protego_used['iam']['server_certificates']=['iam:ListServerCertificates']
                    for p in ['iam:ListServerCertificates']:
                        __protego_resource_map['iam'].append({'action': 'ListServerCertificates', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.ServerCertificate()]
            return server_certificates_col()
        @property
        def users(self, *args): #collection
            class users_col(object):
                def all(self):
                    __protego_used['iam']['users']=['iam:ListUsers']
                    for p in ['iam:ListUsers']:
                        __protego_resource_map['iam'].append({'action': 'ListUsers', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.User()]
                def limit(self):
                    __protego_used['iam']['users']=['iam:ListUsers']
                    for p in ['iam:ListUsers']:
                        __protego_resource_map['iam'].append({'action': 'ListUsers', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.User()]
                def filter(self):
                    __protego_used['iam']['users']=['iam:ListUsers']
                    for p in ['iam:ListUsers']:
                        __protego_resource_map['iam'].append({'action': 'ListUsers', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.User()]
            return users_col()
        @property
        def virtual_mfa_devices(self, *args): #collection
            class virtual_mfa_devices_col(object):
                def all(self):
                    __protego_used['iam']['virtual_mfa_devices']=['iam:ListVirtualMFADevices']
                    for p in ['iam:ListVirtualMFADevices']:
                        __protego_resource_map['iam'].append({'action': 'ListVirtualMFADevices', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.VirtualMfaDevice()]
                def limit(self):
                    __protego_used['iam']['virtual_mfa_devices']=['iam:ListVirtualMFADevices']
                    for p in ['iam:ListVirtualMFADevices']:
                        __protego_resource_map['iam'].append({'action': 'ListVirtualMFADevices', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.VirtualMfaDevice()]
                def filter(self):
                    __protego_used['iam']['virtual_mfa_devices']=['iam:ListVirtualMFADevices']
                    for p in ['iam:ListVirtualMFADevices']:
                        __protego_resource_map['iam'].append({'action': 'ListVirtualMFADevices', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_iam.VirtualMfaDevice()]
            return virtual_mfa_devices_col()
        @property
        def meta(self):
            class meta_cls:
                def __init__(self):
                    self.client = client("iam")
            return meta_cls()
        pass
        class AccessKey(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['UserName','Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def activate(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['AccessKeyId']=self.__protego_args['Id']
                __protego_used['iam']['AccessKey.activate']=['iam:UpdateAccessKey']
                for p in ['iam:UpdateAccessKey']:
                    __protego_resource_map['iam'].append({'action': 'UpdateAccessKey', 'permission':p, 'res': kwargs, 'region': _region  })
            def deactivate(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['AccessKeyId']=self.__protego_args['Id']
                __protego_used['iam']['AccessKey.deactivate']=['iam:UpdateAccessKey']
                for p in ['iam:UpdateAccessKey']:
                    __protego_resource_map['iam'].append({'action': 'UpdateAccessKey', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['AccessKeyId']=self.__protego_args['Id']
                __protego_used['iam']['AccessKey.delete']=['iam:DeleteAccessKey']
                for p in ['iam:DeleteAccessKey']:
                    __protego_resource_map['iam'].append({'action': 'DeleteAccessKey', 'permission':p, 'res': kwargs, 'region': _region  })
            def User(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['UserName']
                res = RES_iam.User(**kwargs)
                return res
            @property
            def user_name(self):
                pass
            @property
            def user_name(self):
                pass
            @property
            def id(self):
                pass
            @property
            def access_key_id(self):
                pass
            pass
        class AccessKeyPair(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['UserName','Id','Secret']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def activate(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['AccessKeyId']=self.__protego_args['Id']
                __protego_used['iam']['AccessKeyPair.activate']=['iam:UpdateAccessKey']
                for p in ['iam:UpdateAccessKey']:
                    __protego_resource_map['iam'].append({'action': 'UpdateAccessKey', 'permission':p, 'res': kwargs, 'region': _region  })
            def deactivate(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['AccessKeyId']=self.__protego_args['Id']
                __protego_used['iam']['AccessKeyPair.deactivate']=['iam:UpdateAccessKey']
                for p in ['iam:UpdateAccessKey']:
                    __protego_resource_map['iam'].append({'action': 'UpdateAccessKey', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['AccessKeyId']=self.__protego_args['Id']
                __protego_used['iam']['AccessKeyPair.delete']=['iam:DeleteAccessKey']
                for p in ['iam:DeleteAccessKey']:
                    __protego_resource_map['iam'].append({'action': 'DeleteAccessKey', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def user_name(self):
                pass
            @property
            def user_name(self):
                pass
            @property
            def id(self):
                pass
            @property
            def access_key_id(self):
                pass
            @property
            def secret(self):
                pass
            @property
            def secret_access_key(self):
                pass
            pass
        class AccountPasswordPolicy(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = []
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                __protego_used['iam']['AccountPasswordPolicy.__init__']=['iam:GetAccountPasswordPolicy'] #GetAccountPasswordPolicy
                for p in ['iam:GetAccountPasswordPolicy']:
                    __protego_resource_map['iam'].append({'action': 'GetAccountPasswordPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                __protego_used['iam']['AccountPasswordPolicy.delete']=['iam:DeleteAccountPasswordPolicy']
                for p in ['iam:DeleteAccountPasswordPolicy']:
                    __protego_resource_map['iam'].append({'action': 'DeleteAccountPasswordPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def update(self, *args, **kwargs):
                __protego_used['iam']['AccountPasswordPolicy.update']=['iam:UpdateAccountPasswordPolicy']
                for p in ['iam:UpdateAccountPasswordPolicy']:
                    __protego_resource_map['iam'].append({'action': 'UpdateAccountPasswordPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            pass
        class AccountSummary(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = []
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                __protego_used['iam']['AccountSummary.__init__']=['iam:GetAccountSummary'] #GetAccountSummary
                for p in ['iam:GetAccountSummary']:
                    __protego_resource_map['iam'].append({'action': 'GetAccountSummary', 'permission':p, 'res': kwargs, 'region': _region  })
            pass
        class AssumeRolePolicy(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['RoleName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def update(self, *args, **kwargs):
                kwargs['RoleName']=self.__protego_args['RoleName']
                __protego_used['iam']['AssumeRolePolicy.update']=['iam:UpdateAssumeRolePolicy']
                for p in ['iam:UpdateAssumeRolePolicy']:
                    __protego_resource_map['iam'].append({'action': 'UpdateAssumeRolePolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def Role(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['RoleName']
                res = RES_iam.Role(**kwargs)
                return res
            @property
            def role_name(self):
                pass
            pass
        class CurrentUser(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = []
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                __protego_used['iam']['CurrentUser.__init__']=['iam:GetUser'] #GetUser
                for p in ['iam:GetUser']:
                    __protego_resource_map['iam'].append({'action': 'GetUser', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def access_keys(self, *args):
                kwargs = self.__protego_args
                class access_keys_col(object):
                    def all(self):
                        __protego_used['iam']['access_keys']=['iam:ListAccessKeys']
                        for p in ['iam:ListAccessKeys']:
                            __protego_resource_map['iam'].append({'action': 'ListAccessKeys', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.AccessKey()]
                    def limit(self):
                        __protego_used['iam']['access_keys']=['iam:ListAccessKeys']
                        for p in ['iam:ListAccessKeys']:
                            __protego_resource_map['iam'].append({'action': 'ListAccessKeys', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.AccessKey()]
                    def filter(self):
                        __protego_used['iam']['access_keys']=['iam:ListAccessKeys']
                        for p in ['iam:ListAccessKeys']:
                            __protego_resource_map['iam'].append({'action': 'ListAccessKeys', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.AccessKey()]
                return access_keys_col()
            @property
            def mfa_devices(self, *args):
                kwargs = self.__protego_args
                class mfa_devices_col(object):
                    def all(self):
                        __protego_used['iam']['mfa_devices']=['iam:ListMFADevices']
                        for p in ['iam:ListMFADevices']:
                            __protego_resource_map['iam'].append({'action': 'ListMFADevices', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.MfaDevice()]
                    def limit(self):
                        __protego_used['iam']['mfa_devices']=['iam:ListMFADevices']
                        for p in ['iam:ListMFADevices']:
                            __protego_resource_map['iam'].append({'action': 'ListMFADevices', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.MfaDevice()]
                    def filter(self):
                        __protego_used['iam']['mfa_devices']=['iam:ListMFADevices']
                        for p in ['iam:ListMFADevices']:
                            __protego_resource_map['iam'].append({'action': 'ListMFADevices', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.MfaDevice()]
                return mfa_devices_col()
            @property
            def signing_certificates(self, *args):
                kwargs = self.__protego_args
                class signing_certificates_col(object):
                    def all(self):
                        __protego_used['iam']['signing_certificates']=['iam:ListSigningCertificates']
                        for p in ['iam:ListSigningCertificates']:
                            __protego_resource_map['iam'].append({'action': 'ListSigningCertificates', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.SigningCertificate()]
                    def limit(self):
                        __protego_used['iam']['signing_certificates']=['iam:ListSigningCertificates']
                        for p in ['iam:ListSigningCertificates']:
                            __protego_resource_map['iam'].append({'action': 'ListSigningCertificates', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.SigningCertificate()]
                    def filter(self):
                        __protego_used['iam']['signing_certificates']=['iam:ListSigningCertificates']
                        for p in ['iam:ListSigningCertificates']:
                            __protego_resource_map['iam'].append({'action': 'ListSigningCertificates', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.SigningCertificate()]
                return signing_certificates_col()
            def User(self, *args, **kwargs):
                res = RES_iam.User(**kwargs)
                return res
            pass
        class Group(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['Name']
                __protego_used['iam']['Group.__init__']=['iam:GetGroup'] #GetGroup
                for p in ['iam:GetGroup']:
                    __protego_resource_map['iam'].append({'action': 'GetGroup', 'permission':p, 'res': kwargs, 'region': _region  })
            def add_user(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['Name']
                __protego_used['iam']['Group.add_user']=['iam:AddUserToGroup']
                for p in ['iam:AddUserToGroup']:
                    __protego_resource_map['iam'].append({'action': 'AddUserToGroup', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_policy(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['Name']
                __protego_used['iam']['Group.attach_policy']=['iam:AttachGroupPolicy']
                for p in ['iam:AttachGroupPolicy']:
                    __protego_resource_map['iam'].append({'action': 'AttachGroupPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def create(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['Name']
                __protego_used['iam']['Group.create']=['iam:CreateGroup']
                for p in ['iam:CreateGroup']:
                    __protego_resource_map['iam'].append({'action': 'CreateGroup', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Name'] = kwargs['GroupName']
                return RES_iam.Group(**kwargs)
            def create_policy(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['Name']
                __protego_used['iam']['Group.create_policy']=['iam:PutGroupPolicy']
                for p in ['iam:PutGroupPolicy']:
                    __protego_resource_map['iam'].append({'action': 'PutGroupPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Name'] = kwargs['PolicyName']
                return RES_iam.GroupPolicy(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['Name']
                __protego_used['iam']['Group.delete']=['iam:DeleteGroup']
                for p in ['iam:DeleteGroup']:
                    __protego_resource_map['iam'].append({'action': 'DeleteGroup', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_policy(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['Name']
                __protego_used['iam']['Group.detach_policy']=['iam:DetachGroupPolicy']
                for p in ['iam:DetachGroupPolicy']:
                    __protego_resource_map['iam'].append({'action': 'DetachGroupPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def remove_user(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['Name']
                __protego_used['iam']['Group.remove_user']=['iam:RemoveUserFromGroup']
                for p in ['iam:RemoveUserFromGroup']:
                    __protego_resource_map['iam'].append({'action': 'RemoveUserFromGroup', 'permission':p, 'res': kwargs, 'region': _region  })
            def update(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['Name']
                __protego_used['iam']['Group.update']=['iam:UpdateGroup']
                for p in ['iam:UpdateGroup']:
                    __protego_resource_map['iam'].append({'action': 'UpdateGroup', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Name'] = kwargs['NewGroupName']
                return RES_iam.Group(**kwargs)
            @property
            def attached_policies(self, *args):
                kwargs = self.__protego_args
                kwargs['GroupName']=self.__protego_args['Name']
                class attached_policies_col(object):
                    def all(self):
                        __protego_used['iam']['attached_policies']=['iam:ListAttachedGroupPolicies']
                        for p in ['iam:ListAttachedGroupPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListAttachedGroupPolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Policy()]
                    def limit(self):
                        __protego_used['iam']['attached_policies']=['iam:ListAttachedGroupPolicies']
                        for p in ['iam:ListAttachedGroupPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListAttachedGroupPolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Policy()]
                    def filter(self):
                        __protego_used['iam']['attached_policies']=['iam:ListAttachedGroupPolicies']
                        for p in ['iam:ListAttachedGroupPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListAttachedGroupPolicies', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.Policy()]
                return attached_policies_col()
            @property
            def policies(self, *args):
                kwargs = self.__protego_args
                kwargs['GroupName']=self.__protego_args['Name']
                class policies_col(object):
                    def all(self):
                        __protego_used['iam']['policies']=['iam:ListGroupPolicies']
                        for p in ['iam:ListGroupPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListGroupPolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.GroupPolicy()]
                    def limit(self):
                        __protego_used['iam']['policies']=['iam:ListGroupPolicies']
                        for p in ['iam:ListGroupPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListGroupPolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.GroupPolicy()]
                    def filter(self):
                        __protego_used['iam']['policies']=['iam:ListGroupPolicies']
                        for p in ['iam:ListGroupPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListGroupPolicies', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.GroupPolicy()]
                return policies_col()
            @property
            def users(self, *args):
                kwargs = self.__protego_args
                kwargs['GroupName']=self.__protego_args['Name']
                class users_col(object):
                    def all(self):
                        __protego_used['iam']['users']=['iam:GetGroup']
                        for p in ['iam:GetGroup']:
                            __protego_resource_map['iam'].append({'action': 'GetGroup', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.User()]
                    def limit(self):
                        __protego_used['iam']['users']=['iam:GetGroup']
                        for p in ['iam:GetGroup']:
                            __protego_resource_map['iam'].append({'action': 'GetGroup', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.User()]
                    def filter(self):
                        __protego_used['iam']['users']=['iam:GetGroup']
                        for p in ['iam:GetGroup']:
                            __protego_resource_map['iam'].append({'action': 'GetGroup', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.User()]
                return users_col()
            def Policy(self, *args, **kwargs):
                kwargs['GroupName'] = self.__protego_args['Name']
                kwargs['Name'] = args[0]
                res = RES_iam.GroupPolicy(**kwargs)
                return res
            @property
            def name(self):
                pass
            @property
            def group_name(self):
                pass
            pass
        class GroupPolicy(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['GroupName','Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['GroupName']
                kwargs['PolicyName']=self.__protego_args['Name']
                __protego_used['iam']['GroupPolicy.__init__']=['iam:GetGroupPolicy'] #GetGroupPolicy
                for p in ['iam:GetGroupPolicy']:
                    __protego_resource_map['iam'].append({'action': 'GetGroupPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['GroupName']
                kwargs['PolicyName']=self.__protego_args['Name']
                __protego_used['iam']['GroupPolicy.delete']=['iam:DeleteGroupPolicy']
                for p in ['iam:DeleteGroupPolicy']:
                    __protego_resource_map['iam'].append({'action': 'DeleteGroupPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['GroupName']=self.__protego_args['GroupName']
                kwargs['PolicyName']=self.__protego_args['Name']
                __protego_used['iam']['GroupPolicy.put']=['iam:PutGroupPolicy']
                for p in ['iam:PutGroupPolicy']:
                    __protego_resource_map['iam'].append({'action': 'PutGroupPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def Group(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['GroupName']
                res = RES_iam.Group(**kwargs)
                return res
            @property
            def group_name(self):
                pass
            @property
            def group_name(self):
                pass
            @property
            def name(self):
                pass
            @property
            def policy_name(self):
                pass
            pass
        class InstanceProfile(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['InstanceProfileName']=self.__protego_args['Name']
                __protego_used['iam']['InstanceProfile.__init__']=['iam:GetInstanceProfile'] #GetInstanceProfile
                for p in ['iam:GetInstanceProfile']:
                    __protego_resource_map['iam'].append({'action': 'GetInstanceProfile', 'permission':p, 'res': kwargs, 'region': _region  })
            def add_role(self, *args, **kwargs):
                kwargs['InstanceProfileName']=self.__protego_args['Name']
                __protego_used['iam']['InstanceProfile.add_role']=['iam:AddRoleToInstanceProfile']
                for p in ['iam:AddRoleToInstanceProfile']:
                    __protego_resource_map['iam'].append({'action': 'AddRoleToInstanceProfile', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['InstanceProfileName']=self.__protego_args['Name']
                __protego_used['iam']['InstanceProfile.delete']=['iam:DeleteInstanceProfile']
                for p in ['iam:DeleteInstanceProfile']:
                    __protego_resource_map['iam'].append({'action': 'DeleteInstanceProfile', 'permission':p, 'res': kwargs, 'region': _region  })
            def remove_role(self, *args, **kwargs):
                kwargs['InstanceProfileName']=self.__protego_args['Name']
                __protego_used['iam']['InstanceProfile.remove_role']=['iam:RemoveRoleFromInstanceProfile']
                for p in ['iam:RemoveRoleFromInstanceProfile']:
                    __protego_resource_map['iam'].append({'action': 'RemoveRoleFromInstanceProfile', 'permission':p, 'res': kwargs, 'region': _region  })
            def Roles(self, *args, **kwargs):
                res = [RES_iam.Role(**kwargs)]
                return res
            @property
            def name(self):
                pass
            @property
            def instance_profile_name(self):
                pass
            pass
        class LoginProfile(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['UserName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                __protego_used['iam']['LoginProfile.__init__']=['iam:GetLoginProfile'] #GetLoginProfile
                for p in ['iam:GetLoginProfile']:
                    __protego_resource_map['iam'].append({'action': 'GetLoginProfile', 'permission':p, 'res': kwargs, 'region': _region  })
            def create(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                __protego_used['iam']['LoginProfile.create']=['iam:CreateLoginProfile']
                for p in ['iam:CreateLoginProfile']:
                    __protego_resource_map['iam'].append({'action': 'CreateLoginProfile', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_iam.LoginProfile(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                __protego_used['iam']['LoginProfile.delete']=['iam:DeleteLoginProfile']
                for p in ['iam:DeleteLoginProfile']:
                    __protego_resource_map['iam'].append({'action': 'DeleteLoginProfile', 'permission':p, 'res': kwargs, 'region': _region  })
            def update(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                __protego_used['iam']['LoginProfile.update']=['iam:UpdateLoginProfile']
                for p in ['iam:UpdateLoginProfile']:
                    __protego_resource_map['iam'].append({'action': 'UpdateLoginProfile', 'permission':p, 'res': kwargs, 'region': _region  })
            def User(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['UserName']
                res = RES_iam.User(**kwargs)
                return res
            @property
            def user_name(self):
                pass
            @property
            def user_name(self):
                pass
            pass
        class MfaDevice(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['UserName','SerialNumber']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def associate(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['SerialNumber']=self.__protego_args['SerialNumber']
                __protego_used['iam']['MfaDevice.associate']=['iam:EnableMFADevice']
                for p in ['iam:EnableMFADevice']:
                    __protego_resource_map['iam'].append({'action': 'EnableMFADevice', 'permission':p, 'res': kwargs, 'region': _region  })
            def disassociate(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['SerialNumber']=self.__protego_args['SerialNumber']
                __protego_used['iam']['MfaDevice.disassociate']=['iam:DeactivateMFADevice']
                for p in ['iam:DeactivateMFADevice']:
                    __protego_resource_map['iam'].append({'action': 'DeactivateMFADevice', 'permission':p, 'res': kwargs, 'region': _region  })
            def resync(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['SerialNumber']=self.__protego_args['SerialNumber']
                __protego_used['iam']['MfaDevice.resync']=['iam:ResyncMFADevice']
                for p in ['iam:ResyncMFADevice']:
                    __protego_resource_map['iam'].append({'action': 'ResyncMFADevice', 'permission':p, 'res': kwargs, 'region': _region  })
            def User(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['UserName']
                res = RES_iam.User(**kwargs)
                return res
            @property
            def user_name(self):
                pass
            @property
            def user_name(self):
                pass
            @property
            def serial_number(self):
                pass
            @property
            def serial_number(self):
                pass
            pass
        class Policy(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Arn']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                __protego_used['iam']['Policy.__init__']=['iam:GetPolicy'] #GetPolicy
                for p in ['iam:GetPolicy']:
                    __protego_resource_map['iam'].append({'action': 'GetPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_group(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                __protego_used['iam']['Policy.attach_group']=['iam:AttachGroupPolicy']
                for p in ['iam:AttachGroupPolicy']:
                    __protego_resource_map['iam'].append({'action': 'AttachGroupPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_role(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                __protego_used['iam']['Policy.attach_role']=['iam:AttachRolePolicy']
                for p in ['iam:AttachRolePolicy']:
                    __protego_resource_map['iam'].append({'action': 'AttachRolePolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_user(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                __protego_used['iam']['Policy.attach_user']=['iam:AttachUserPolicy']
                for p in ['iam:AttachUserPolicy']:
                    __protego_resource_map['iam'].append({'action': 'AttachUserPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_version(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                __protego_used['iam']['Policy.create_version']=['iam:CreatePolicyVersion']
                for p in ['iam:CreatePolicyVersion']:
                    __protego_resource_map['iam'].append({'action': 'CreatePolicyVersion', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_iam.PolicyVersion(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                __protego_used['iam']['Policy.delete']=['iam:DeletePolicy']
                for p in ['iam:DeletePolicy']:
                    __protego_resource_map['iam'].append({'action': 'DeletePolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_group(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                __protego_used['iam']['Policy.detach_group']=['iam:DetachGroupPolicy']
                for p in ['iam:DetachGroupPolicy']:
                    __protego_resource_map['iam'].append({'action': 'DetachGroupPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_role(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                __protego_used['iam']['Policy.detach_role']=['iam:DetachRolePolicy']
                for p in ['iam:DetachRolePolicy']:
                    __protego_resource_map['iam'].append({'action': 'DetachRolePolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_user(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                __protego_used['iam']['Policy.detach_user']=['iam:DetachUserPolicy']
                for p in ['iam:DetachUserPolicy']:
                    __protego_resource_map['iam'].append({'action': 'DetachUserPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def attached_groups(self, *args):
                kwargs = self.__protego_args
                kwargs['PolicyArn']=self.__protego_args['Arn']
                class attached_groups_col(object):
                    def all(self):
                        __protego_used['iam']['attached_groups']=['iam:ListEntitiesForPolicy']
                        for p in ['iam:ListEntitiesForPolicy']:
                            __protego_resource_map['iam'].append({'action': 'ListEntitiesForPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Group()]
                    def limit(self):
                        __protego_used['iam']['attached_groups']=['iam:ListEntitiesForPolicy']
                        for p in ['iam:ListEntitiesForPolicy']:
                            __protego_resource_map['iam'].append({'action': 'ListEntitiesForPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Group()]
                    def filter(self):
                        __protego_used['iam']['attached_groups']=['iam:ListEntitiesForPolicy']
                        for p in ['iam:ListEntitiesForPolicy']:
                            __protego_resource_map['iam'].append({'action': 'ListEntitiesForPolicy', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.Group()]
                return attached_groups_col()
            @property
            def attached_roles(self, *args):
                kwargs = self.__protego_args
                kwargs['PolicyArn']=self.__protego_args['Arn']
                class attached_roles_col(object):
                    def all(self):
                        __protego_used['iam']['attached_roles']=['iam:ListEntitiesForPolicy']
                        for p in ['iam:ListEntitiesForPolicy']:
                            __protego_resource_map['iam'].append({'action': 'ListEntitiesForPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Role()]
                    def limit(self):
                        __protego_used['iam']['attached_roles']=['iam:ListEntitiesForPolicy']
                        for p in ['iam:ListEntitiesForPolicy']:
                            __protego_resource_map['iam'].append({'action': 'ListEntitiesForPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Role()]
                    def filter(self):
                        __protego_used['iam']['attached_roles']=['iam:ListEntitiesForPolicy']
                        for p in ['iam:ListEntitiesForPolicy']:
                            __protego_resource_map['iam'].append({'action': 'ListEntitiesForPolicy', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.Role()]
                return attached_roles_col()
            @property
            def attached_users(self, *args):
                kwargs = self.__protego_args
                kwargs['PolicyArn']=self.__protego_args['Arn']
                class attached_users_col(object):
                    def all(self):
                        __protego_used['iam']['attached_users']=['iam:ListEntitiesForPolicy']
                        for p in ['iam:ListEntitiesForPolicy']:
                            __protego_resource_map['iam'].append({'action': 'ListEntitiesForPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.User()]
                    def limit(self):
                        __protego_used['iam']['attached_users']=['iam:ListEntitiesForPolicy']
                        for p in ['iam:ListEntitiesForPolicy']:
                            __protego_resource_map['iam'].append({'action': 'ListEntitiesForPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.User()]
                    def filter(self):
                        __protego_used['iam']['attached_users']=['iam:ListEntitiesForPolicy']
                        for p in ['iam:ListEntitiesForPolicy']:
                            __protego_resource_map['iam'].append({'action': 'ListEntitiesForPolicy', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.User()]
                return attached_users_col()
            @property
            def versions(self, *args):
                kwargs = self.__protego_args
                kwargs['PolicyArn']=self.__protego_args['Arn']
                class versions_col(object):
                    def all(self):
                        __protego_used['iam']['versions']=['iam:ListPolicyVersions']
                        for p in ['iam:ListPolicyVersions']:
                            __protego_resource_map['iam'].append({'action': 'ListPolicyVersions', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.PolicyVersion()]
                    def limit(self):
                        __protego_used['iam']['versions']=['iam:ListPolicyVersions']
                        for p in ['iam:ListPolicyVersions']:
                            __protego_resource_map['iam'].append({'action': 'ListPolicyVersions', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.PolicyVersion()]
                    def filter(self):
                        __protego_used['iam']['versions']=['iam:ListPolicyVersions']
                        for p in ['iam:ListPolicyVersions']:
                            __protego_resource_map['iam'].append({'action': 'ListPolicyVersions', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.PolicyVersion()]
                return versions_col()
            def DefaultVersion(self, *args, **kwargs):
                kwargs['Arn'] = self.__protego_args['Arn']
                res = RES_iam.PolicyVersion(**kwargs)
                return res
            @property
            def arn(self):
                pass
            @property
            def arn(self):
                pass
            pass
        class PolicyVersion(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Arn','VersionId']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                kwargs['VersionId']=self.__protego_args['VersionId']
                __protego_used['iam']['PolicyVersion.__init__']=['iam:GetPolicyVersion'] #GetPolicyVersion
                for p in ['iam:GetPolicyVersion']:
                    __protego_resource_map['iam'].append({'action': 'GetPolicyVersion', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                kwargs['VersionId']=self.__protego_args['VersionId']
                __protego_used['iam']['PolicyVersion.delete']=['iam:DeletePolicyVersion']
                for p in ['iam:DeletePolicyVersion']:
                    __protego_resource_map['iam'].append({'action': 'DeletePolicyVersion', 'permission':p, 'res': kwargs, 'region': _region  })
            def set_as_default(self, *args, **kwargs):
                kwargs['PolicyArn']=self.__protego_args['Arn']
                kwargs['VersionId']=self.__protego_args['VersionId']
                __protego_used['iam']['PolicyVersion.set_as_default']=['iam:SetDefaultPolicyVersion']
                for p in ['iam:SetDefaultPolicyVersion']:
                    __protego_resource_map['iam'].append({'action': 'SetDefaultPolicyVersion', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def arn(self):
                pass
            @property
            def version_id(self):
                pass
            pass
        class Role(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['RoleName']=self.__protego_args['Name']
                __protego_used['iam']['Role.__init__']=['iam:GetRole'] #GetRole
                for p in ['iam:GetRole']:
                    __protego_resource_map['iam'].append({'action': 'GetRole', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_policy(self, *args, **kwargs):
                kwargs['RoleName']=self.__protego_args['Name']
                __protego_used['iam']['Role.attach_policy']=['iam:AttachRolePolicy']
                for p in ['iam:AttachRolePolicy']:
                    __protego_resource_map['iam'].append({'action': 'AttachRolePolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['RoleName']=self.__protego_args['Name']
                __protego_used['iam']['Role.delete']=['iam:DeleteRole']
                for p in ['iam:DeleteRole']:
                    __protego_resource_map['iam'].append({'action': 'DeleteRole', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_policy(self, *args, **kwargs):
                kwargs['RoleName']=self.__protego_args['Name']
                __protego_used['iam']['Role.detach_policy']=['iam:DetachRolePolicy']
                for p in ['iam:DetachRolePolicy']:
                    __protego_resource_map['iam'].append({'action': 'DetachRolePolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def attached_policies(self, *args):
                kwargs = self.__protego_args
                kwargs['RoleName']=self.__protego_args['Name']
                class attached_policies_col(object):
                    def all(self):
                        __protego_used['iam']['attached_policies']=['iam:ListAttachedRolePolicies']
                        for p in ['iam:ListAttachedRolePolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListAttachedRolePolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Policy()]
                    def limit(self):
                        __protego_used['iam']['attached_policies']=['iam:ListAttachedRolePolicies']
                        for p in ['iam:ListAttachedRolePolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListAttachedRolePolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Policy()]
                    def filter(self):
                        __protego_used['iam']['attached_policies']=['iam:ListAttachedRolePolicies']
                        for p in ['iam:ListAttachedRolePolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListAttachedRolePolicies', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.Policy()]
                return attached_policies_col()
            @property
            def instance_profiles(self, *args):
                kwargs = self.__protego_args
                kwargs['RoleName']=self.__protego_args['Name']
                class instance_profiles_col(object):
                    def all(self):
                        __protego_used['iam']['instance_profiles']=['iam:ListInstanceProfilesForRole']
                        for p in ['iam:ListInstanceProfilesForRole']:
                            __protego_resource_map['iam'].append({'action': 'ListInstanceProfilesForRole', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.InstanceProfile()]
                    def limit(self):
                        __protego_used['iam']['instance_profiles']=['iam:ListInstanceProfilesForRole']
                        for p in ['iam:ListInstanceProfilesForRole']:
                            __protego_resource_map['iam'].append({'action': 'ListInstanceProfilesForRole', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.InstanceProfile()]
                    def filter(self):
                        __protego_used['iam']['instance_profiles']=['iam:ListInstanceProfilesForRole']
                        for p in ['iam:ListInstanceProfilesForRole']:
                            __protego_resource_map['iam'].append({'action': 'ListInstanceProfilesForRole', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.InstanceProfile()]
                return instance_profiles_col()
            @property
            def policies(self, *args):
                kwargs = self.__protego_args
                kwargs['RoleName']=self.__protego_args['Name']
                class policies_col(object):
                    def all(self):
                        __protego_used['iam']['policies']=['iam:ListRolePolicies']
                        for p in ['iam:ListRolePolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListRolePolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.RolePolicy()]
                    def limit(self):
                        __protego_used['iam']['policies']=['iam:ListRolePolicies']
                        for p in ['iam:ListRolePolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListRolePolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.RolePolicy()]
                    def filter(self):
                        __protego_used['iam']['policies']=['iam:ListRolePolicies']
                        for p in ['iam:ListRolePolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListRolePolicies', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.RolePolicy()]
                return policies_col()
            def AssumeRolePolicy(self, *args, **kwargs):
                kwargs['RoleName'] = self.__protego_args['Name']
                res = RES_iam.AssumeRolePolicy(**kwargs)
                return res
            def Policy(self, *args, **kwargs):
                kwargs['RoleName'] = self.__protego_args['Name']
                kwargs['Name'] = args[0]
                res = RES_iam.RolePolicy(**kwargs)
                return res
            @property
            def name(self):
                pass
            @property
            def role_name(self):
                pass
            pass
        class RolePolicy(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['RoleName','Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['RoleName']=self.__protego_args['RoleName']
                kwargs['PolicyName']=self.__protego_args['Name']
                __protego_used['iam']['RolePolicy.__init__']=['iam:GetRolePolicy'] #GetRolePolicy
                for p in ['iam:GetRolePolicy']:
                    __protego_resource_map['iam'].append({'action': 'GetRolePolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['RoleName']=self.__protego_args['RoleName']
                kwargs['PolicyName']=self.__protego_args['Name']
                __protego_used['iam']['RolePolicy.delete']=['iam:DeleteRolePolicy']
                for p in ['iam:DeleteRolePolicy']:
                    __protego_resource_map['iam'].append({'action': 'DeleteRolePolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['RoleName']=self.__protego_args['RoleName']
                kwargs['PolicyName']=self.__protego_args['Name']
                __protego_used['iam']['RolePolicy.put']=['iam:PutRolePolicy']
                for p in ['iam:PutRolePolicy']:
                    __protego_resource_map['iam'].append({'action': 'PutRolePolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def Role(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['RoleName']
                res = RES_iam.Role(**kwargs)
                return res
            @property
            def role_name(self):
                pass
            @property
            def role_name(self):
                pass
            @property
            def name(self):
                pass
            @property
            def policy_name(self):
                pass
            pass
        class SamlProvider(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Arn']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['SAMLProviderArn']=self.__protego_args['Arn']
                __protego_used['iam']['SamlProvider.__init__']=['iam:GetSAMLProvider'] #GetSAMLProvider
                for p in ['iam:GetSAMLProvider']:
                    __protego_resource_map['iam'].append({'action': 'GetSAMLProvider', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['SAMLProviderArn']=self.__protego_args['Arn']
                __protego_used['iam']['SamlProvider.delete']=['iam:DeleteSAMLProvider']
                for p in ['iam:DeleteSAMLProvider']:
                    __protego_resource_map['iam'].append({'action': 'DeleteSAMLProvider', 'permission':p, 'res': kwargs, 'region': _region  })
            def update(self, *args, **kwargs):
                kwargs['SAMLProviderArn']=self.__protego_args['Arn']
                __protego_used['iam']['SamlProvider.update']=['iam:UpdateSAMLProvider']
                for p in ['iam:UpdateSAMLProvider']:
                    __protego_resource_map['iam'].append({'action': 'UpdateSAMLProvider', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def arn(self):
                pass
            pass
        class ServerCertificate(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['ServerCertificateName']=self.__protego_args['Name']
                __protego_used['iam']['ServerCertificate.__init__']=['iam:GetServerCertificate'] #GetServerCertificate
                for p in ['iam:GetServerCertificate']:
                    __protego_resource_map['iam'].append({'action': 'GetServerCertificate', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['ServerCertificateName']=self.__protego_args['Name']
                __protego_used['iam']['ServerCertificate.delete']=['iam:DeleteServerCertificate']
                for p in ['iam:DeleteServerCertificate']:
                    __protego_resource_map['iam'].append({'action': 'DeleteServerCertificate', 'permission':p, 'res': kwargs, 'region': _region  })
            def update(self, *args, **kwargs):
                kwargs['ServerCertificateName']=self.__protego_args['Name']
                __protego_used['iam']['ServerCertificate.update']=['iam:UpdateServerCertificate']
                for p in ['iam:UpdateServerCertificate']:
                    __protego_resource_map['iam'].append({'action': 'UpdateServerCertificate', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Name'] = kwargs['NewServerCertificateName']
                return RES_iam.ServerCertificate(**kwargs)
            @property
            def name(self):
                pass
            pass
        class SigningCertificate(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['UserName','Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def activate(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['CertificateId']=self.__protego_args['Id']
                __protego_used['iam']['SigningCertificate.activate']=['iam:UpdateSigningCertificate']
                for p in ['iam:UpdateSigningCertificate']:
                    __protego_resource_map['iam'].append({'action': 'UpdateSigningCertificate', 'permission':p, 'res': kwargs, 'region': _region  })
            def deactivate(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['CertificateId']=self.__protego_args['Id']
                __protego_used['iam']['SigningCertificate.deactivate']=['iam:UpdateSigningCertificate']
                for p in ['iam:UpdateSigningCertificate']:
                    __protego_resource_map['iam'].append({'action': 'UpdateSigningCertificate', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['CertificateId']=self.__protego_args['Id']
                __protego_used['iam']['SigningCertificate.delete']=['iam:DeleteSigningCertificate']
                for p in ['iam:DeleteSigningCertificate']:
                    __protego_resource_map['iam'].append({'action': 'DeleteSigningCertificate', 'permission':p, 'res': kwargs, 'region': _region  })
            def User(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['UserName']
                res = RES_iam.User(**kwargs)
                return res
            @property
            def user_name(self):
                pass
            @property
            def user_name(self):
                pass
            @property
            def id(self):
                pass
            @property
            def certificate_id(self):
                pass
            pass
        class User(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.__init__']=['iam:GetUser'] #GetUser
                for p in ['iam:GetUser']:
                    __protego_resource_map['iam'].append({'action': 'GetUser', 'permission':p, 'res': kwargs, 'region': _region  })
            def add_group(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.add_group']=['iam:AddUserToGroup']
                for p in ['iam:AddUserToGroup']:
                    __protego_resource_map['iam'].append({'action': 'AddUserToGroup', 'permission':p, 'res': kwargs, 'region': _region  })
            def attach_policy(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.attach_policy']=['iam:AttachUserPolicy']
                for p in ['iam:AttachUserPolicy']:
                    __protego_resource_map['iam'].append({'action': 'AttachUserPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def create(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.create']=['iam:CreateUser']
                for p in ['iam:CreateUser']:
                    __protego_resource_map['iam'].append({'action': 'CreateUser', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Name'] = kwargs['UserName']
                return RES_iam.User(**kwargs)
            def create_access_key_pair(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.create_access_key_pair']=['iam:CreateAccessKey']
                for p in ['iam:CreateAccessKey']:
                    __protego_resource_map['iam'].append({'action': 'CreateAccessKey', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_iam.AccessKeyPair(**kwargs)
            def create_login_profile(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.create_login_profile']=['iam:CreateLoginProfile']
                for p in ['iam:CreateLoginProfile']:
                    __protego_resource_map['iam'].append({'action': 'CreateLoginProfile', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_iam.LoginProfile(**kwargs)
            def create_policy(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.create_policy']=['iam:PutUserPolicy']
                for p in ['iam:PutUserPolicy']:
                    __protego_resource_map['iam'].append({'action': 'PutUserPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Name'] = kwargs['PolicyName']
                return RES_iam.UserPolicy(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.delete']=['iam:DeleteUser']
                for p in ['iam:DeleteUser']:
                    __protego_resource_map['iam'].append({'action': 'DeleteUser', 'permission':p, 'res': kwargs, 'region': _region  })
            def detach_policy(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.detach_policy']=['iam:DetachUserPolicy']
                for p in ['iam:DetachUserPolicy']:
                    __protego_resource_map['iam'].append({'action': 'DetachUserPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def enable_mfa(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.enable_mfa']=['iam:EnableMFADevice']
                for p in ['iam:EnableMFADevice']:
                    __protego_resource_map['iam'].append({'action': 'EnableMFADevice', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['SerialNumber'] = kwargs['SerialNumber']
                return RES_iam.MfaDevice(**kwargs)
            def remove_group(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.remove_group']=['iam:RemoveUserFromGroup']
                for p in ['iam:RemoveUserFromGroup']:
                    __protego_resource_map['iam'].append({'action': 'RemoveUserFromGroup', 'permission':p, 'res': kwargs, 'region': _region  })
            def update(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['Name']
                __protego_used['iam']['User.update']=['iam:UpdateUser']
                for p in ['iam:UpdateUser']:
                    __protego_resource_map['iam'].append({'action': 'UpdateUser', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Name'] = kwargs['NewUserName']
                return RES_iam.User(**kwargs)
            @property
            def access_keys(self, *args):
                kwargs = self.__protego_args
                kwargs['UserName']=self.__protego_args['Name']
                class access_keys_col(object):
                    def all(self):
                        __protego_used['iam']['access_keys']=['iam:ListAccessKeys']
                        for p in ['iam:ListAccessKeys']:
                            __protego_resource_map['iam'].append({'action': 'ListAccessKeys', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.AccessKey()]
                    def limit(self):
                        __protego_used['iam']['access_keys']=['iam:ListAccessKeys']
                        for p in ['iam:ListAccessKeys']:
                            __protego_resource_map['iam'].append({'action': 'ListAccessKeys', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.AccessKey()]
                    def filter(self):
                        __protego_used['iam']['access_keys']=['iam:ListAccessKeys']
                        for p in ['iam:ListAccessKeys']:
                            __protego_resource_map['iam'].append({'action': 'ListAccessKeys', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.AccessKey()]
                return access_keys_col()
            @property
            def attached_policies(self, *args):
                kwargs = self.__protego_args
                kwargs['UserName']=self.__protego_args['Name']
                class attached_policies_col(object):
                    def all(self):
                        __protego_used['iam']['attached_policies']=['iam:ListAttachedUserPolicies']
                        for p in ['iam:ListAttachedUserPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListAttachedUserPolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Policy()]
                    def limit(self):
                        __protego_used['iam']['attached_policies']=['iam:ListAttachedUserPolicies']
                        for p in ['iam:ListAttachedUserPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListAttachedUserPolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Policy()]
                    def filter(self):
                        __protego_used['iam']['attached_policies']=['iam:ListAttachedUserPolicies']
                        for p in ['iam:ListAttachedUserPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListAttachedUserPolicies', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.Policy()]
                return attached_policies_col()
            @property
            def groups(self, *args):
                kwargs = self.__protego_args
                kwargs['UserName']=self.__protego_args['Name']
                class groups_col(object):
                    def all(self):
                        __protego_used['iam']['groups']=['iam:ListGroupsForUser']
                        for p in ['iam:ListGroupsForUser']:
                            __protego_resource_map['iam'].append({'action': 'ListGroupsForUser', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Group()]
                    def limit(self):
                        __protego_used['iam']['groups']=['iam:ListGroupsForUser']
                        for p in ['iam:ListGroupsForUser']:
                            __protego_resource_map['iam'].append({'action': 'ListGroupsForUser', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.Group()]
                    def filter(self):
                        __protego_used['iam']['groups']=['iam:ListGroupsForUser']
                        for p in ['iam:ListGroupsForUser']:
                            __protego_resource_map['iam'].append({'action': 'ListGroupsForUser', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.Group()]
                return groups_col()
            @property
            def mfa_devices(self, *args):
                kwargs = self.__protego_args
                kwargs['UserName']=self.__protego_args['Name']
                class mfa_devices_col(object):
                    def all(self):
                        __protego_used['iam']['mfa_devices']=['iam:ListMFADevices']
                        for p in ['iam:ListMFADevices']:
                            __protego_resource_map['iam'].append({'action': 'ListMFADevices', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.MfaDevice()]
                    def limit(self):
                        __protego_used['iam']['mfa_devices']=['iam:ListMFADevices']
                        for p in ['iam:ListMFADevices']:
                            __protego_resource_map['iam'].append({'action': 'ListMFADevices', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.MfaDevice()]
                    def filter(self):
                        __protego_used['iam']['mfa_devices']=['iam:ListMFADevices']
                        for p in ['iam:ListMFADevices']:
                            __protego_resource_map['iam'].append({'action': 'ListMFADevices', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.MfaDevice()]
                return mfa_devices_col()
            @property
            def policies(self, *args):
                kwargs = self.__protego_args
                kwargs['UserName']=self.__protego_args['Name']
                class policies_col(object):
                    def all(self):
                        __protego_used['iam']['policies']=['iam:ListUserPolicies']
                        for p in ['iam:ListUserPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListUserPolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.UserPolicy()]
                    def limit(self):
                        __protego_used['iam']['policies']=['iam:ListUserPolicies']
                        for p in ['iam:ListUserPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListUserPolicies', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.UserPolicy()]
                    def filter(self):
                        __protego_used['iam']['policies']=['iam:ListUserPolicies']
                        for p in ['iam:ListUserPolicies']:
                            __protego_resource_map['iam'].append({'action': 'ListUserPolicies', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.UserPolicy()]
                return policies_col()
            @property
            def signing_certificates(self, *args):
                kwargs = self.__protego_args
                kwargs['UserName']=self.__protego_args['Name']
                class signing_certificates_col(object):
                    def all(self):
                        __protego_used['iam']['signing_certificates']=['iam:ListSigningCertificates']
                        for p in ['iam:ListSigningCertificates']:
                            __protego_resource_map['iam'].append({'action': 'ListSigningCertificates', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.SigningCertificate()]
                    def limit(self):
                        __protego_used['iam']['signing_certificates']=['iam:ListSigningCertificates']
                        for p in ['iam:ListSigningCertificates']:
                            __protego_resource_map['iam'].append({'action': 'ListSigningCertificates', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_iam.SigningCertificate()]
                    def filter(self):
                        __protego_used['iam']['signing_certificates']=['iam:ListSigningCertificates']
                        for p in ['iam:ListSigningCertificates']:
                            __protego_resource_map['iam'].append({'action': 'ListSigningCertificates', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_iam.SigningCertificate()]
                return signing_certificates_col()
            def AccessKey(self, *args, **kwargs):
                kwargs['UserName'] = self.__protego_args['Name']
                kwargs['Id'] = args[0]
                res = RES_iam.AccessKey(**kwargs)
                return res
            def LoginProfile(self, *args, **kwargs):
                kwargs['UserName'] = self.__protego_args['Name']
                res = RES_iam.LoginProfile(**kwargs)
                return res
            def MfaDevice(self, *args, **kwargs):
                kwargs['UserName'] = self.__protego_args['Name']
                kwargs['SerialNumber'] = args[0]
                res = RES_iam.MfaDevice(**kwargs)
                return res
            def Policy(self, *args, **kwargs):
                kwargs['UserName'] = self.__protego_args['Name']
                kwargs['Name'] = args[0]
                res = RES_iam.UserPolicy(**kwargs)
                return res
            def SigningCertificate(self, *args, **kwargs):
                kwargs['UserName'] = self.__protego_args['Name']
                kwargs['Id'] = args[0]
                res = RES_iam.SigningCertificate(**kwargs)
                return res
            @property
            def name(self):
                pass
            @property
            def user_name(self):
                pass
            pass
        class UserPolicy(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['UserName','Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['PolicyName']=self.__protego_args['Name']
                __protego_used['iam']['UserPolicy.__init__']=['iam:GetUserPolicy'] #GetUserPolicy
                for p in ['iam:GetUserPolicy']:
                    __protego_resource_map['iam'].append({'action': 'GetUserPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['PolicyName']=self.__protego_args['Name']
                __protego_used['iam']['UserPolicy.delete']=['iam:DeleteUserPolicy']
                for p in ['iam:DeleteUserPolicy']:
                    __protego_resource_map['iam'].append({'action': 'DeleteUserPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['UserName']=self.__protego_args['UserName']
                kwargs['PolicyName']=self.__protego_args['Name']
                __protego_used['iam']['UserPolicy.put']=['iam:PutUserPolicy']
                for p in ['iam:PutUserPolicy']:
                    __protego_resource_map['iam'].append({'action': 'PutUserPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def User(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['UserName']
                res = RES_iam.User(**kwargs)
                return res
            @property
            def user_name(self):
                pass
            @property
            def user_name(self):
                pass
            @property
            def name(self):
                pass
            @property
            def policy_name(self):
                pass
            pass
        class VirtualMfaDevice(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['SerialNumber']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def delete(self, *args, **kwargs):
                kwargs['SerialNumber']=self.__protego_args['SerialNumber']
                __protego_used['iam']['VirtualMfaDevice.delete']=['iam:DeleteVirtualMFADevice', 'iam:DeleteVirtualMFADevice']
                for p in ['iam:DeleteVirtualMFADevice','iam:DeleteVirtualMFADevice']:
                    __protego_resource_map['iam'].append({'action': 'DeleteVirtualMFADevice', 'permission':p, 'res': kwargs, 'region': _region  })
            def User(self, *args, **kwargs):
                res = RES_iam.User(**kwargs)
                return res
            @property
            def serial_number(self):
                pass
            @property
            def serial_number(self):
                pass
            pass
    return RES_iam()
def _create_opsworks(region_name):
    _region=region_name
    class RES_opsworks:
        def __init__(self, *args, **kwargs):
            __protego_used['opsworks']= __protego_used.get('opsworks', {})
            __protego_resource_map['opsworks']=__protego_resource_map.get('opsworks', [])
        def create_stack(self, *args, **kwargs): #action
            __protego_used['opsworks']['create_stack']=['opsworks:CreateStack']
            for p in ['opsworks:CreateStack']:
                __protego_resource_map['opsworks'].append({'action': 'CreateStack', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Stack()
        @property
        def stacks(self, *args): #collection
            class stacks_col(object):
                def all(self):
                    __protego_used['opsworks']['stacks']=['opsworks:DescribeStacks']
                    for p in ['opsworks:DescribeStacks']:
                        __protego_resource_map['opsworks'].append({'action': 'DescribeStacks', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_opsworks.Stack()]
                def limit(self):
                    __protego_used['opsworks']['stacks']=['opsworks:DescribeStacks']
                    for p in ['opsworks:DescribeStacks']:
                        __protego_resource_map['opsworks'].append({'action': 'DescribeStacks', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_opsworks.Stack()]
                def filter(self):
                    __protego_used['opsworks']['stacks']=['opsworks:DescribeStacks']
                    for p in ['opsworks:DescribeStacks']:
                        __protego_resource_map['opsworks'].append({'action': 'DescribeStacks', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_opsworks.Stack()]
            return stacks_col()
        @property
        def meta(self):
            class meta_cls:
                def __init__(self):
                    self.client = client("opsworks")
            return meta_cls()
        pass
        class Layer(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['LayerIds[]']=self.__protego_args['Id']
                __protego_used['opsworks']['Layer.__init__']=['opsworks:DescribeLayers'] #DescribeLayers
                for p in ['opsworks:DescribeLayers']:
                    __protego_resource_map['opsworks'].append({'action': 'DescribeLayers', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['LayerId']=self.__protego_args['Id']
                __protego_used['opsworks']['Layer.delete']=['opsworks:DeleteLayer']
                for p in ['opsworks:DeleteLayer']:
                    __protego_resource_map['opsworks'].append({'action': 'DeleteLayer', 'permission':p, 'res': kwargs, 'region': _region  })
            def Stack(self, *args, **kwargs):
                res = RES_opsworks.Stack(**kwargs)
                return res
            @property
            def id(self):
                pass
            pass
        class Stack(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['StackIds[]']=self.__protego_args['Id']
                __protego_used['opsworks']['Stack.__init__']=['opsworks:DescribeStacks'] #DescribeStacks
                for p in ['opsworks:DescribeStacks']:
                    __protego_resource_map['opsworks'].append({'action': 'DescribeStacks', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_layer(self, *args, **kwargs):
                kwargs['StackId']=self.__protego_args['Id']
                __protego_used['opsworks']['Stack.create_layer']=['opsworks:CreateLayer']
                for p in ['opsworks:CreateLayer']:
                    __protego_resource_map['opsworks'].append({'action': 'CreateLayer', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_opsworks.Layer(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['StackId']=self.__protego_args['Id']
                __protego_used['opsworks']['Stack.delete']=['opsworks:DeleteStack']
                for p in ['opsworks:DeleteStack']:
                    __protego_resource_map['opsworks'].append({'action': 'DeleteStack', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def layers(self, *args):
                kwargs = self.__protego_args
                kwargs['StackId']=self.__protego_args['Id']
                class layers_col(object):
                    def all(self):
                        __protego_used['opsworks']['layers']=['opsworks:DescribeLayers']
                        for p in ['opsworks:DescribeLayers']:
                            __protego_resource_map['opsworks'].append({'action': 'DescribeLayers', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_opsworks.Layer()]
                    def limit(self):
                        __protego_used['opsworks']['layers']=['opsworks:DescribeLayers']
                        for p in ['opsworks:DescribeLayers']:
                            __protego_resource_map['opsworks'].append({'action': 'DescribeLayers', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_opsworks.Layer()]
                    def filter(self):
                        __protego_used['opsworks']['layers']=['opsworks:DescribeLayers']
                        for p in ['opsworks:DescribeLayers']:
                            __protego_resource_map['opsworks'].append({'action': 'DescribeLayers', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_opsworks.Layer()]
                return layers_col()
            def Summary(self, *args, **kwargs):
                kwargs['StackId'] = self.__protego_args['Id']
                res = RES_opsworks.StackSummary(**kwargs)
                return res
            @property
            def id(self):
                pass
            pass
        class StackSummary(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['StackId']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['StackId']=self.__protego_args['StackId']
                __protego_used['opsworks']['StackSummary.__init__']=['opsworks:DescribeStackSummary'] #DescribeStackSummary
                for p in ['opsworks:DescribeStackSummary']:
                    __protego_resource_map['opsworks'].append({'action': 'DescribeStackSummary', 'permission':p, 'res': kwargs, 'region': _region  })
            def Stack(self, *args, **kwargs):
                kwargs['Id'] = self.__protego_args['StackId']
                res = RES_opsworks.Stack(**kwargs)
                return res
            @property
            def stack_id(self):
                pass
            pass
    return RES_opsworks()
def _create_s3(region_name):
    _region=region_name
    class RES_s3:
        def __init__(self, *args, **kwargs):
            __protego_used['s3']= __protego_used.get('s3', {})
            __protego_resource_map['s3']=__protego_resource_map.get('s3', [])
        def create_bucket(self, *args, **kwargs): #action
            __protego_used['s3']['create_bucket']=['s3:CreateBucket']
            for p in ['s3:CreateBucket']:
                __protego_resource_map['s3'].append({'action': 'CreateBucket', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Bucket()
        @property
        def buckets(self, *args): #collection
            class buckets_col(object):
                def all(self):
                    __protego_used['s3']['buckets']=['s3:ListAllMyBuckets']
                    for p in ['s3:ListAllMyBuckets']:
                        __protego_resource_map['s3'].append({'action': 'ListBuckets', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_s3.Bucket()]
                def limit(self):
                    __protego_used['s3']['buckets']=['s3:ListAllMyBuckets']
                    for p in ['s3:ListAllMyBuckets']:
                        __protego_resource_map['s3'].append({'action': 'ListBuckets', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_s3.Bucket()]
                def filter(self):
                    __protego_used['s3']['buckets']=['s3:ListAllMyBuckets']
                    for p in ['s3:ListAllMyBuckets']:
                        __protego_resource_map['s3'].append({'action': 'ListBuckets', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_s3.Bucket()]
            return buckets_col()
        @property
        def meta(self):
            class meta_cls:
                def __init__(self):
                    self.client = client("s3")
            return meta_cls()
        pass
        class Bucket(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Name']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def create(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['Name']
                __protego_used['s3']['Bucket.create']=['s3:CreateBucket']
                for p in ['s3:CreateBucket']:
                    __protego_resource_map['s3'].append({'action': 'CreateBucket', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['Name']
                __protego_used['s3']['Bucket.delete']=['s3:DeleteBucket']
                for p in ['s3:DeleteBucket']:
                    __protego_resource_map['s3'].append({'action': 'DeleteBucket', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete_objects(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['Name']
                __protego_used['s3']['Bucket.delete_objects']=['s3:PutLifecycleConfiguration', 's3:DeleteObjectVersion', 's3:DeleteObject']
                for p in ['s3:PutLifecycleConfiguration','s3:DeleteObjectVersion','s3:DeleteObject']:
                    __protego_resource_map['s3'].append({'action': 'DeleteObjects', 'permission':p, 'res': kwargs, 'region': _region  })
            def put_object(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['Name']
                __protego_used['s3']['Bucket.put_object']=['s3:PutObject']
                for p in ['s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'PutObject', 'permission':p, 'res': kwargs, 'region': _region  })
                kwargs2['Key'] = kwargs['Key']
                return RES_s3.Object(**kwargs)
            def load(self, *args, **kwargs):
                __protego_used['s3']['Bucket.load']=['s3:ListAllMyBuckets']
                for p in ['s3:ListAllMyBuckets']:
                    __protego_resource_map['s3'].append({'action': 'ListBuckets', 'permission':p, 'res': kwargs, 'region': _region  })
            def upload_file(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['Name']
                kwargs['_Filename']=args[0]
                kwargs['Key']=args[1]
                __protego_used['s3']['Bucket.upload_file']=['s3:PutObject']
                for p in ['s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'PutObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def download_file(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['Name']
                kwargs['Key']=args[0]
                __protego_used['s3']['Bucket.download_file']=['s3:GetObjectVersion', 's3:GetObject']
                for p in ['s3:GetObjectVersion','s3:GetObject']:
                    __protego_resource_map['s3'].append({'action': 'GetObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def copy(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['Name']
                kwargs['CopySource']=args[0]
                kwargs['Key']=args[1]
                __protego_used['s3']['Bucket.copy']=['s3:GetObject', 's3:PutObject']
                for p in ['s3:GetObject','s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'CopyObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def upload_fileobj(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['Name']
                kwargs['_Fileobj']=args[0]
                kwargs['Key']=args[1]
                __protego_used['s3']['Bucket.upload_fileobj']=['s3:PutObject']
                for p in ['s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'PutObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def download_fileobj(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['Name']
                kwargs['Key']=args[0]
                __protego_used['s3']['Bucket.download_fileobj']=['s3:GetObjectVersion', 's3:GetObject']
                for p in ['s3:GetObjectVersion','s3:GetObject']:
                    __protego_resource_map['s3'].append({'action': 'GetObject', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def multipart_uploads(self, *args):
                kwargs = self.__protego_args
                kwargs['Bucket']=self.__protego_args['Name']
                class multipart_uploads_col(object):
                    def all(self):
                        __protego_used['s3']['multipart_uploads']=['s3:ListBucketMultipartUploads']
                        for p in ['s3:ListBucketMultipartUploads']:
                            __protego_resource_map['s3'].append({'action': 'ListMultipartUploads', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_s3.MultipartUpload()]
                    def limit(self):
                        __protego_used['s3']['multipart_uploads']=['s3:ListBucketMultipartUploads']
                        for p in ['s3:ListBucketMultipartUploads']:
                            __protego_resource_map['s3'].append({'action': 'ListMultipartUploads', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_s3.MultipartUpload()]
                    def filter(self):
                        __protego_used['s3']['multipart_uploads']=['s3:ListBucketMultipartUploads']
                        for p in ['s3:ListBucketMultipartUploads']:
                            __protego_resource_map['s3'].append({'action': 'ListMultipartUploads', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_s3.MultipartUpload()]
                return multipart_uploads_col()
            @property
            def object_versions(self, *args):
                kwargs = self.__protego_args
                kwargs['Bucket']=self.__protego_args['Name']
                class object_versions_col(object):
                    def all(self):
                        __protego_used['s3']['object_versions']=['s3:ListBucketVersions']
                        for p in ['s3:ListBucketVersions']:
                            __protego_resource_map['s3'].append({'action': 'ListObjectVersions', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_s3.ObjectVersion()]
                    def limit(self):
                        __protego_used['s3']['object_versions']=['s3:ListBucketVersions']
                        for p in ['s3:ListBucketVersions']:
                            __protego_resource_map['s3'].append({'action': 'ListObjectVersions', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_s3.ObjectVersion()]
                    def filter(self):
                        __protego_used['s3']['object_versions']=['s3:ListBucketVersions']
                        for p in ['s3:ListBucketVersions']:
                            __protego_resource_map['s3'].append({'action': 'ListObjectVersions', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_s3.ObjectVersion()]
                return object_versions_col()
            @property
            def objects(self, *args):
                kwargs = self.__protego_args
                kwargs['Bucket']=self.__protego_args['Name']
                class objects_col(object):
                    def all(self):
                        __protego_used['s3']['objects']=['s3:ListBucket']
                        for p in ['s3:ListBucket']:
                            __protego_resource_map['s3'].append({'action': 'ListObjects', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_s3.ObjectSummary()]
                    def limit(self):
                        __protego_used['s3']['objects']=['s3:ListBucket']
                        for p in ['s3:ListBucket']:
                            __protego_resource_map['s3'].append({'action': 'ListObjects', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_s3.ObjectSummary()]
                    def filter(self):
                        __protego_used['s3']['objects']=['s3:ListBucket']
                        for p in ['s3:ListBucket']:
                            __protego_resource_map['s3'].append({'action': 'ListObjects', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_s3.ObjectSummary()]
                return objects_col()
            def Acl(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                res = RES_s3.BucketAcl(**kwargs)
                return res
            def Cors(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                res = RES_s3.BucketCors(**kwargs)
                return res
            def Lifecycle(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                res = RES_s3.BucketLifecycle(**kwargs)
                return res
            def LifecycleConfiguration(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                res = RES_s3.BucketLifecycleConfiguration(**kwargs)
                return res
            def Logging(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                res = RES_s3.BucketLogging(**kwargs)
                return res
            def Notification(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                res = RES_s3.BucketNotification(**kwargs)
                return res
            def Object(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                kwargs['Key'] = args[0]
                res = RES_s3.Object(**kwargs)
                return res
            def Policy(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                res = RES_s3.BucketPolicy(**kwargs)
                return res
            def RequestPayment(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                res = RES_s3.BucketRequestPayment(**kwargs)
                return res
            def Tagging(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                res = RES_s3.BucketTagging(**kwargs)
                return res
            def Versioning(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                res = RES_s3.BucketVersioning(**kwargs)
                return res
            def Website(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['Name']
                res = RES_s3.BucketWebsite(**kwargs)
                return res
            @property
            def name(self):
                pass
            pass
        class BucketAcl(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketAcl.__init__']=['s3:GetBucketAcl'] #GetBucketAcl
                for p in ['s3:GetBucketAcl']:
                    __protego_resource_map['s3'].append({'action': 'GetBucketAcl', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketAcl.put']=['s3:PutBucketAcl']
                for p in ['s3:PutBucketAcl']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketAcl', 'permission':p, 'res': kwargs, 'region': _region  })
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            pass
        class BucketCors(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketCors.__init__']=['s3:GetBucketCORS'] #GetBucketCors
                for p in ['s3:GetBucketCORS']:
                    __protego_resource_map['s3'].append({'action': 'GetBucketCors', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketCors.delete']=['s3:PutBucketCORS']
                for p in ['s3:PutBucketCORS']:
                    __protego_resource_map['s3'].append({'action': 'DeleteBucketCors', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketCors.put']=['s3:PutBucketCORS']
                for p in ['s3:PutBucketCORS']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketCors', 'permission':p, 'res': kwargs, 'region': _region  })
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            pass
        class BucketLifecycle(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketLifecycle.__init__']=['s3:GetLifecycleConfiguration'] #GetBucketLifecycle
                for p in ['s3:GetLifecycleConfiguration']:
                    __protego_resource_map['s3'].append({'action': 'GetBucketLifecycle', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketLifecycle.delete']=['s3:PutLifecycleConfiguration']
                for p in ['s3:PutLifecycleConfiguration']:
                    __protego_resource_map['s3'].append({'action': 'DeleteBucketLifecycle', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketLifecycle.put']=['s3:PutLifecycleConfiguration']
                for p in ['s3:PutLifecycleConfiguration']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketLifecycle', 'permission':p, 'res': kwargs, 'region': _region  })
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            pass
        class BucketLifecycleConfiguration(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketLifecycleConfiguration.__init__']=['s3:GetLifecycleConfiguration'] #GetBucketLifecycleConfiguration
                for p in ['s3:GetLifecycleConfiguration']:
                    __protego_resource_map['s3'].append({'action': 'GetBucketLifecycleConfiguration', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketLifecycleConfiguration.delete']=['s3:PutLifecycleConfiguration']
                for p in ['s3:PutLifecycleConfiguration']:
                    __protego_resource_map['s3'].append({'action': 'DeleteBucketLifecycle', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketLifecycleConfiguration.put']=['s3:PutLifecycleConfiguration']
                for p in ['s3:PutLifecycleConfiguration']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketLifecycleConfiguration', 'permission':p, 'res': kwargs, 'region': _region  })
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            pass
        class BucketLogging(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketLogging.__init__']=['s3:GetBucketLogging'] #GetBucketLogging
                for p in ['s3:GetBucketLogging']:
                    __protego_resource_map['s3'].append({'action': 'GetBucketLogging', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketLogging.put']=['s3:PutBucketLogging']
                for p in ['s3:PutBucketLogging']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketLogging', 'permission':p, 'res': kwargs, 'region': _region  })
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            pass
        class BucketNotification(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketNotification.__init__']=['s3:GetBucketNotification'] #GetBucketNotificationConfiguration
                for p in ['s3:GetBucketNotification']:
                    __protego_resource_map['s3'].append({'action': 'GetBucketNotificationConfiguration', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketNotification.put']=['s3:PutBucketNotification']
                for p in ['s3:PutBucketNotification']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketNotificationConfiguration', 'permission':p, 'res': kwargs, 'region': _region  })
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            pass
        class BucketPolicy(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketPolicy.__init__']=['s3:GetBucketPolicy'] #GetBucketPolicy
                for p in ['s3:GetBucketPolicy']:
                    __protego_resource_map['s3'].append({'action': 'GetBucketPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketPolicy.delete']=['s3:DeleteBucketPolicy']
                for p in ['s3:DeleteBucketPolicy']:
                    __protego_resource_map['s3'].append({'action': 'DeleteBucketPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketPolicy.put']=['s3:PutBucketPolicy']
                for p in ['s3:PutBucketPolicy']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketPolicy', 'permission':p, 'res': kwargs, 'region': _region  })
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            pass
        class BucketRequestPayment(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketRequestPayment.__init__']=['s3:GetBucketRequestPayment'] #GetBucketRequestPayment
                for p in ['s3:GetBucketRequestPayment']:
                    __protego_resource_map['s3'].append({'action': 'GetBucketRequestPayment', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketRequestPayment.put']=['s3:PutBucketRequestPayment']
                for p in ['s3:PutBucketRequestPayment']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketRequestPayment', 'permission':p, 'res': kwargs, 'region': _region  })
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            pass
        class BucketTagging(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketTagging.__init__']=['s3:GetBucketTagging'] #GetBucketTagging
                for p in ['s3:GetBucketTagging']:
                    __protego_resource_map['s3'].append({'action': 'GetBucketTagging', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketTagging.delete']=['s3:PutBucketTagging']
                for p in ['s3:PutBucketTagging']:
                    __protego_resource_map['s3'].append({'action': 'DeleteBucketTagging', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketTagging.put']=['s3:PutBucketTagging']
                for p in ['s3:PutBucketTagging']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketTagging', 'permission':p, 'res': kwargs, 'region': _region  })
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            pass
        class BucketVersioning(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketVersioning.__init__']=['s3:GetBucketVersioning'] #GetBucketVersioning
                for p in ['s3:GetBucketVersioning']:
                    __protego_resource_map['s3'].append({'action': 'GetBucketVersioning', 'permission':p, 'res': kwargs, 'region': _region  })
            def enable(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketVersioning.enable']=['s3:PutBucketVersioning']
                for p in ['s3:PutBucketVersioning']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketVersioning', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketVersioning.put']=['s3:PutBucketVersioning']
                for p in ['s3:PutBucketVersioning']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketVersioning', 'permission':p, 'res': kwargs, 'region': _region  })
            def suspend(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketVersioning.suspend']=['s3:PutBucketVersioning']
                for p in ['s3:PutBucketVersioning']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketVersioning', 'permission':p, 'res': kwargs, 'region': _region  })
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            pass
        class BucketWebsite(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketWebsite.__init__']=['s3:GetBucketWebsite'] #GetBucketWebsite
                for p in ['s3:GetBucketWebsite']:
                    __protego_resource_map['s3'].append({'action': 'GetBucketWebsite', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketWebsite.delete']=['s3:DeleteBucketWebsite']
                for p in ['s3:DeleteBucketWebsite']:
                    __protego_resource_map['s3'].append({'action': 'DeleteBucketWebsite', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                __protego_used['s3']['BucketWebsite.put']=['s3:PutBucketWebsite']
                for p in ['s3:PutBucketWebsite']:
                    __protego_resource_map['s3'].append({'action': 'PutBucketWebsite', 'permission':p, 'res': kwargs, 'region': _region  })
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            pass
        class MultipartUpload(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName','ObjectKey','Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def abort(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['ObjectKey']
                kwargs['UploadId']=self.__protego_args['Id']
                __protego_used['s3']['MultipartUpload.abort']=['s3:AbortMultipartUpload']
                for p in ['s3:AbortMultipartUpload']:
                    __protego_resource_map['s3'].append({'action': 'AbortMultipartUpload', 'permission':p, 'res': kwargs, 'region': _region  })
            def complete(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['ObjectKey']
                kwargs['UploadId']=self.__protego_args['Id']
                __protego_used['s3']['MultipartUpload.complete']=['s3:PutObject']
                for p in ['s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'CompleteMultipartUpload', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_s3.Object(**kwargs)
            @property
            def parts(self, *args):
                kwargs = self.__protego_args
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['ObjectKey']
                kwargs['UploadId']=self.__protego_args['Id']
                class parts_col(object):
                    def all(self):
                        __protego_used['s3']['parts']=['s3:ListMultipartUploadParts']
                        for p in ['s3:ListMultipartUploadParts']:
                            __protego_resource_map['s3'].append({'action': 'ListParts', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_s3.MultipartUploadPart()]
                    def limit(self):
                        __protego_used['s3']['parts']=['s3:ListMultipartUploadParts']
                        for p in ['s3:ListMultipartUploadParts']:
                            __protego_resource_map['s3'].append({'action': 'ListParts', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_s3.MultipartUploadPart()]
                    def filter(self):
                        __protego_used['s3']['parts']=['s3:ListMultipartUploadParts']
                        for p in ['s3:ListMultipartUploadParts']:
                            __protego_resource_map['s3'].append({'action': 'ListParts', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_s3.MultipartUploadPart()]
                return parts_col()
            def Object(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['Key'] = self.__protego_args['ObjectKey']
                res = RES_s3.Object(**kwargs)
                return res
            def Part(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['ObjectKey'] = self.__protego_args['ObjectKey']
                kwargs['MultipartUploadId'] = self.__protego_args['Id']
                kwargs['PartNumber'] = args[0]
                res = RES_s3.MultipartUploadPart(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            @property
            def object_key(self):
                pass
            @property
            def id(self):
                pass
            pass
        class MultipartUploadPart(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName','ObjectKey','MultipartUploadId','PartNumber']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def copy_from(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['ObjectKey']
                kwargs['UploadId']=self.__protego_args['MultipartUploadId']
                kwargs['PartNumber']=self.__protego_args['PartNumber']
                __protego_used['s3']['MultipartUploadPart.copy_from']=['s3:*']
                for p in ['s3:*']:
                    __protego_resource_map['s3'].append({'action': 'UploadPartCopy', 'permission':p, 'res': kwargs, 'region': _region  })
            def upload(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['ObjectKey']
                kwargs['UploadId']=self.__protego_args['MultipartUploadId']
                kwargs['PartNumber']=self.__protego_args['PartNumber']
                __protego_used['s3']['MultipartUploadPart.upload']=['s3:PutObject']
                for p in ['s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'UploadPart', 'permission':p, 'res': kwargs, 'region': _region  })
            def MultipartUpload(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['ObjectKey'] = self.__protego_args['ObjectKey']
                kwargs['Id'] = self.__protego_args['MultipartUploadId']
                res = RES_s3.MultipartUpload(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            @property
            def object_key(self):
                pass
            @property
            def multipart_upload_id(self):
                pass
            @property
            def part_number(self):
                pass
            @property
            def part_number(self):
                pass
            pass
        class Object(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName','Key']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['Object.__init__']=['s3:GetObject'] #HeadObject
                for p in ['s3:GetObject']:
                    __protego_resource_map['s3'].append({'action': 'HeadObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def copy_from(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['Object.copy_from']=['s3:GetObject', 's3:PutObject']
                for p in ['s3:GetObject','s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'CopyObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['Object.delete']=['s3:DeleteObject']
                for p in ['s3:DeleteObject']:
                    __protego_resource_map['s3'].append({'action': 'DeleteObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def get(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['Object.get']=['s3:GetObjectVersion', 's3:GetObject']
                for p in ['s3:GetObjectVersion','s3:GetObject']:
                    __protego_resource_map['s3'].append({'action': 'GetObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def initiate_multipart_upload(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['Object.initiate_multipart_upload']=['s3:PutObject']
                for p in ['s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'CreateMultipartUpload', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_s3.MultipartUpload(**kwargs)
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['Object.put']=['s3:PutObject']
                for p in ['s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'PutObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def restore_object(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['Object.restore_object']=['s3:RestoreObject']
                for p in ['s3:RestoreObject']:
                    __protego_resource_map['s3'].append({'action': 'RestoreObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def upload_file(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['Object.upload_file']=['s3:PutObject']
                for p in ['s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'PutObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def download_file(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['Object.download_file']=['s3:GetObjectVersion', 's3:GetObject']
                for p in ['s3:GetObjectVersion','s3:GetObject']:
                    __protego_resource_map['s3'].append({'action': 'GetObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def copy(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                kwargs['CopySource']=args[0]
                __protego_used['s3']['Object.copy']=['s3:GetObject', 's3:PutObject']
                for p in ['s3:GetObject','s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'CopyObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def upload_fileobj(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['Object.upload_fileobj']=['s3:PutObject']
                for p in ['s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'PutObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def download_fileobj(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['Object.download_fileobj']=['s3:GetObjectVersion', 's3:GetObject']
                for p in ['s3:GetObjectVersion','s3:GetObject']:
                    __protego_resource_map['s3'].append({'action': 'GetObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def Acl(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['ObjectKey'] = self.__protego_args['Key']
                res = RES_s3.ObjectAcl(**kwargs)
                return res
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            def MultipartUpload(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['ObjectKey'] = self.__protego_args['Key']
                kwargs['Id'] = args[0]
                res = RES_s3.MultipartUpload(**kwargs)
                return res
            def Version(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['ObjectKey'] = self.__protego_args['Key']
                kwargs['Id'] = args[0]
                res = RES_s3.ObjectVersion(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            @property
            def key(self):
                pass
            pass
        class ObjectAcl(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName','ObjectKey']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['ObjectKey']
                __protego_used['s3']['ObjectAcl.__init__']=['s3:GetObjectAcl'] #GetObjectAcl
                for p in ['s3:GetObjectAcl']:
                    __protego_resource_map['s3'].append({'action': 'GetObjectAcl', 'permission':p, 'res': kwargs, 'region': _region  })
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['ObjectKey']
                __protego_used['s3']['ObjectAcl.put']=['s3:PutObjectAcl']
                for p in ['s3:PutObjectAcl']:
                    __protego_resource_map['s3'].append({'action': 'PutObjectAcl', 'permission':p, 'res': kwargs, 'region': _region  })
            def Object(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['Key'] = self.__protego_args['ObjectKey']
                res = RES_s3.Object(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            @property
            def object_key(self):
                pass
            pass
        class ObjectSummary(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName','Key']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def copy_from(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['ObjectSummary.copy_from']=['s3:GetObject', 's3:PutObject']
                for p in ['s3:GetObject','s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'CopyObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['ObjectSummary.delete']=['s3:DeleteObject']
                for p in ['s3:DeleteObject']:
                    __protego_resource_map['s3'].append({'action': 'DeleteObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def get(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['ObjectSummary.get']=['s3:GetObjectVersion', 's3:GetObject']
                for p in ['s3:GetObjectVersion','s3:GetObject']:
                    __protego_resource_map['s3'].append({'action': 'GetObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def initiate_multipart_upload(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['ObjectSummary.initiate_multipart_upload']=['s3:PutObject']
                for p in ['s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'CreateMultipartUpload', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_s3.MultipartUpload(**kwargs)
            def put(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['ObjectSummary.put']=['s3:PutObject']
                for p in ['s3:PutObject']:
                    __protego_resource_map['s3'].append({'action': 'PutObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def restore_object(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['ObjectSummary.restore_object']=['s3:RestoreObject']
                for p in ['s3:RestoreObject']:
                    __protego_resource_map['s3'].append({'action': 'RestoreObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def load(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['Key']
                __protego_used['s3']['ObjectSummary.load']=['s3:GetObjectVersion', 's3:GetObject']
                for p in ['s3:GetObjectVersion','s3:GetObject']:
                    __protego_resource_map['s3'].append({'action': 'GetObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def Acl(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['ObjectKey'] = self.__protego_args['Key']
                res = RES_s3.ObjectAcl(**kwargs)
                return res
            def Bucket(self, *args, **kwargs):
                kwargs['Name'] = self.__protego_args['BucketName']
                res = RES_s3.Bucket(**kwargs)
                return res
            def MultipartUpload(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['ObjectKey'] = self.__protego_args['Key']
                kwargs['Id'] = args[0]
                res = RES_s3.MultipartUpload(**kwargs)
                return res
            def Object(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['Key'] = self.__protego_args['Key']
                res = RES_s3.Object(**kwargs)
                return res
            def Version(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['ObjectKey'] = self.__protego_args['Key']
                kwargs['Id'] = args[0]
                res = RES_s3.ObjectVersion(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            @property
            def key(self):
                pass
            pass
        class ObjectVersion(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['BucketName','ObjectKey','Id']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def delete(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['ObjectKey']
                kwargs['VersionId']=self.__protego_args['Id']
                __protego_used['s3']['ObjectVersion.delete']=['s3:DeleteObject']
                for p in ['s3:DeleteObject']:
                    __protego_resource_map['s3'].append({'action': 'DeleteObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def get(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['ObjectKey']
                kwargs['VersionId']=self.__protego_args['Id']
                __protego_used['s3']['ObjectVersion.get']=['s3:GetObjectVersion', 's3:GetObject']
                for p in ['s3:GetObjectVersion','s3:GetObject']:
                    __protego_resource_map['s3'].append({'action': 'GetObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def head(self, *args, **kwargs):
                kwargs['Bucket']=self.__protego_args['BucketName']
                kwargs['Key']=self.__protego_args['ObjectKey']
                kwargs['VersionId']=self.__protego_args['Id']
                __protego_used['s3']['ObjectVersion.head']=['s3:GetObject']
                for p in ['s3:GetObject']:
                    __protego_resource_map['s3'].append({'action': 'HeadObject', 'permission':p, 'res': kwargs, 'region': _region  })
            def Object(self, *args, **kwargs):
                kwargs['BucketName'] = self.__protego_args['BucketName']
                kwargs['Key'] = self.__protego_args['ObjectKey']
                res = RES_s3.Object(**kwargs)
                return res
            @property
            def bucket_name(self):
                pass
            @property
            def object_key(self):
                pass
            @property
            def id(self):
                pass
            pass
    return RES_s3()
def _create_sns(region_name):
    _region=region_name
    class RES_sns:
        def __init__(self, *args, **kwargs):
            __protego_used['sns']= __protego_used.get('sns', {})
            __protego_resource_map['sns']=__protego_resource_map.get('sns', [])
        def create_platform_application(self, *args, **kwargs): #action
            __protego_used['sns']['create_platform_application']=['sns:CreatePlatformApplication']
            for p in ['sns:CreatePlatformApplication']:
                __protego_resource_map['sns'].append({'action': 'CreatePlatformApplication', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.PlatformApplication()
        def create_topic(self, *args, **kwargs): #action
            __protego_used['sns']['create_topic']=['sns:CreateTopic']
            for p in ['sns:CreateTopic']:
                __protego_resource_map['sns'].append({'action': 'CreateTopic', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Topic()
        @property
        def platform_applications(self, *args): #collection
            class platform_applications_col(object):
                def all(self):
                    __protego_used['sns']['platform_applications']=['sns:ListPlatformApplications']
                    for p in ['sns:ListPlatformApplications']:
                        __protego_resource_map['sns'].append({'action': 'ListPlatformApplications', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sns.PlatformApplication()]
                def limit(self):
                    __protego_used['sns']['platform_applications']=['sns:ListPlatformApplications']
                    for p in ['sns:ListPlatformApplications']:
                        __protego_resource_map['sns'].append({'action': 'ListPlatformApplications', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sns.PlatformApplication()]
                def filter(self):
                    __protego_used['sns']['platform_applications']=['sns:ListPlatformApplications']
                    for p in ['sns:ListPlatformApplications']:
                        __protego_resource_map['sns'].append({'action': 'ListPlatformApplications', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sns.PlatformApplication()]
            return platform_applications_col()
        @property
        def subscriptions(self, *args): #collection
            class subscriptions_col(object):
                def all(self):
                    __protego_used['sns']['subscriptions']=['sns:ListSubscriptions']
                    for p in ['sns:ListSubscriptions']:
                        __protego_resource_map['sns'].append({'action': 'ListSubscriptions', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sns.Subscription()]
                def limit(self):
                    __protego_used['sns']['subscriptions']=['sns:ListSubscriptions']
                    for p in ['sns:ListSubscriptions']:
                        __protego_resource_map['sns'].append({'action': 'ListSubscriptions', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sns.Subscription()]
                def filter(self):
                    __protego_used['sns']['subscriptions']=['sns:ListSubscriptions']
                    for p in ['sns:ListSubscriptions']:
                        __protego_resource_map['sns'].append({'action': 'ListSubscriptions', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sns.Subscription()]
            return subscriptions_col()
        @property
        def topics(self, *args): #collection
            class topics_col(object):
                def all(self):
                    __protego_used['sns']['topics']=['sns:ListTopics']
                    for p in ['sns:ListTopics']:
                        __protego_resource_map['sns'].append({'action': 'ListTopics', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sns.Topic()]
                def limit(self):
                    __protego_used['sns']['topics']=['sns:ListTopics']
                    for p in ['sns:ListTopics']:
                        __protego_resource_map['sns'].append({'action': 'ListTopics', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sns.Topic()]
                def filter(self):
                    __protego_used['sns']['topics']=['sns:ListTopics']
                    for p in ['sns:ListTopics']:
                        __protego_resource_map['sns'].append({'action': 'ListTopics', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sns.Topic()]
            return topics_col()
        @property
        def meta(self):
            class meta_cls:
                def __init__(self):
                    self.client = client("sns")
            return meta_cls()
        pass
        class PlatformApplication(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Arn']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['PlatformApplicationArn']=self.__protego_args['Arn']
                __protego_used['sns']['PlatformApplication.__init__']=['sns:GetPlatformApplicationAttributes'] #GetPlatformApplicationAttributes
                for p in ['sns:GetPlatformApplicationAttributes']:
                    __protego_resource_map['sns'].append({'action': 'GetPlatformApplicationAttributes', 'permission':p, 'res': kwargs, 'region': _region  })
            def create_platform_endpoint(self, *args, **kwargs):
                kwargs['PlatformApplicationArn']=self.__protego_args['Arn']
                __protego_used['sns']['PlatformApplication.create_platform_endpoint']=['sns:CreatePlatformEndpoint']
                for p in ['sns:CreatePlatformEndpoint']:
                    __protego_resource_map['sns'].append({'action': 'CreatePlatformEndpoint', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_sns.PlatformEndpoint(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['PlatformApplicationArn']=self.__protego_args['Arn']
                __protego_used['sns']['PlatformApplication.delete']=['sns:DeletePlatformApplication']
                for p in ['sns:DeletePlatformApplication']:
                    __protego_resource_map['sns'].append({'action': 'DeletePlatformApplication', 'permission':p, 'res': kwargs, 'region': _region  })
            def set_attributes(self, *args, **kwargs):
                kwargs['PlatformApplicationArn']=self.__protego_args['Arn']
                __protego_used['sns']['PlatformApplication.set_attributes']=['sns:SetPlatformApplicationAttributes']
                for p in ['sns:SetPlatformApplicationAttributes']:
                    __protego_resource_map['sns'].append({'action': 'SetPlatformApplicationAttributes', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def endpoints(self, *args):
                kwargs = self.__protego_args
                kwargs['PlatformApplicationArn']=self.__protego_args['Arn']
                class endpoints_col(object):
                    def all(self):
                        __protego_used['sns']['endpoints']=['sns:ListEndpointsByPlatformApplication']
                        for p in ['sns:ListEndpointsByPlatformApplication']:
                            __protego_resource_map['sns'].append({'action': 'ListEndpointsByPlatformApplication', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_sns.PlatformEndpoint()]
                    def limit(self):
                        __protego_used['sns']['endpoints']=['sns:ListEndpointsByPlatformApplication']
                        for p in ['sns:ListEndpointsByPlatformApplication']:
                            __protego_resource_map['sns'].append({'action': 'ListEndpointsByPlatformApplication', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_sns.PlatformEndpoint()]
                    def filter(self):
                        __protego_used['sns']['endpoints']=['sns:ListEndpointsByPlatformApplication']
                        for p in ['sns:ListEndpointsByPlatformApplication']:
                            __protego_resource_map['sns'].append({'action': 'ListEndpointsByPlatformApplication', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_sns.PlatformEndpoint()]
                return endpoints_col()
            @property
            def arn(self):
                pass
            pass
        class PlatformEndpoint(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Arn']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['EndpointArn']=self.__protego_args['Arn']
                __protego_used['sns']['PlatformEndpoint.__init__']=['sns:GetEndpointAttributes'] #GetEndpointAttributes
                for p in ['sns:GetEndpointAttributes']:
                    __protego_resource_map['sns'].append({'action': 'GetEndpointAttributes', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['EndpointArn']=self.__protego_args['Arn']
                __protego_used['sns']['PlatformEndpoint.delete']=['sns:DeleteEndpoint']
                for p in ['sns:DeleteEndpoint']:
                    __protego_resource_map['sns'].append({'action': 'DeleteEndpoint', 'permission':p, 'res': kwargs, 'region': _region  })
            def publish(self, *args, **kwargs):
                kwargs['TargetArn']=self.__protego_args['Arn']
                __protego_used['sns']['PlatformEndpoint.publish']=['sns:Publish']
                for p in ['sns:Publish']:
                    __protego_resource_map['sns'].append({'action': 'Publish', 'permission':p, 'res': kwargs, 'region': _region  })
            def set_attributes(self, *args, **kwargs):
                kwargs['EndpointArn']=self.__protego_args['Arn']
                __protego_used['sns']['PlatformEndpoint.set_attributes']=['sns:SetEndpointAttributes']
                for p in ['sns:SetEndpointAttributes']:
                    __protego_resource_map['sns'].append({'action': 'SetEndpointAttributes', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def arn(self):
                pass
            pass
        class Subscription(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Arn']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['SubscriptionArn']=self.__protego_args['Arn']
                __protego_used['sns']['Subscription.__init__']=['sns:GetSubscriptionAttributes'] #GetSubscriptionAttributes
                for p in ['sns:GetSubscriptionAttributes']:
                    __protego_resource_map['sns'].append({'action': 'GetSubscriptionAttributes', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['SubscriptionArn']=self.__protego_args['Arn']
                __protego_used['sns']['Subscription.delete']=['sns:Unsubscribe']
                for p in ['sns:Unsubscribe']:
                    __protego_resource_map['sns'].append({'action': 'Unsubscribe', 'permission':p, 'res': kwargs, 'region': _region  })
            def set_attributes(self, *args, **kwargs):
                kwargs['SubscriptionArn']=self.__protego_args['Arn']
                __protego_used['sns']['Subscription.set_attributes']=['sns:SetSubscriptionAttributes']
                for p in ['sns:SetSubscriptionAttributes']:
                    __protego_resource_map['sns'].append({'action': 'SetSubscriptionAttributes', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def arn(self):
                pass
            pass
        class Topic(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Arn']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['TopicArn']=self.__protego_args['Arn']
                __protego_used['sns']['Topic.__init__']=['sns:GetTopicAttributes'] #GetTopicAttributes
                for p in ['sns:GetTopicAttributes']:
                    __protego_resource_map['sns'].append({'action': 'GetTopicAttributes', 'permission':p, 'res': kwargs, 'region': _region  })
            def add_permission(self, *args, **kwargs):
                kwargs['TopicArn']=self.__protego_args['Arn']
                __protego_used['sns']['Topic.add_permission']=['sns:AddPermission']
                for p in ['sns:AddPermission']:
                    __protego_resource_map['sns'].append({'action': 'AddPermission', 'permission':p, 'res': kwargs, 'region': _region  })
            def confirm_subscription(self, *args, **kwargs):
                kwargs['TopicArn']=self.__protego_args['Arn']
                __protego_used['sns']['Topic.confirm_subscription']=['sns:ConfirmSubscription']
                for p in ['sns:ConfirmSubscription']:
                    __protego_resource_map['sns'].append({'action': 'ConfirmSubscription', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_sns.Subscription(**kwargs)
            def delete(self, *args, **kwargs):
                kwargs['TopicArn']=self.__protego_args['Arn']
                __protego_used['sns']['Topic.delete']=['sns:DeleteTopic']
                for p in ['sns:DeleteTopic']:
                    __protego_resource_map['sns'].append({'action': 'DeleteTopic', 'permission':p, 'res': kwargs, 'region': _region  })
            def publish(self, *args, **kwargs):
                kwargs['TopicArn']=self.__protego_args['Arn']
                __protego_used['sns']['Topic.publish']=['sns:Publish']
                for p in ['sns:Publish']:
                    __protego_resource_map['sns'].append({'action': 'Publish', 'permission':p, 'res': kwargs, 'region': _region  })
            def remove_permission(self, *args, **kwargs):
                kwargs['TopicArn']=self.__protego_args['Arn']
                __protego_used['sns']['Topic.remove_permission']=['sns:RemovePermission']
                for p in ['sns:RemovePermission']:
                    __protego_resource_map['sns'].append({'action': 'RemovePermission', 'permission':p, 'res': kwargs, 'region': _region  })
            def set_attributes(self, *args, **kwargs):
                kwargs['TopicArn']=self.__protego_args['Arn']
                __protego_used['sns']['Topic.set_attributes']=['sns:SetTopicAttributes']
                for p in ['sns:SetTopicAttributes']:
                    __protego_resource_map['sns'].append({'action': 'SetTopicAttributes', 'permission':p, 'res': kwargs, 'region': _region  })
            def subscribe(self, *args, **kwargs):
                kwargs['TopicArn']=self.__protego_args['Arn']
                __protego_used['sns']['Topic.subscribe']=['sns:Subscribe']
                for p in ['sns:Subscribe']:
                    __protego_resource_map['sns'].append({'action': 'Subscribe', 'permission':p, 'res': kwargs, 'region': _region  })
                return RES_sns.Subscription(**kwargs)
            @property
            def subscriptions(self, *args):
                kwargs = self.__protego_args
                kwargs['TopicArn']=self.__protego_args['Arn']
                class subscriptions_col(object):
                    def all(self):
                        __protego_used['sns']['subscriptions']=['sns:ListSubscriptionsByTopic']
                        for p in ['sns:ListSubscriptionsByTopic']:
                            __protego_resource_map['sns'].append({'action': 'ListSubscriptionsByTopic', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_sns.Subscription()]
                    def limit(self):
                        __protego_used['sns']['subscriptions']=['sns:ListSubscriptionsByTopic']
                        for p in ['sns:ListSubscriptionsByTopic']:
                            __protego_resource_map['sns'].append({'action': 'ListSubscriptionsByTopic', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_sns.Subscription()]
                    def filter(self):
                        __protego_used['sns']['subscriptions']=['sns:ListSubscriptionsByTopic']
                        for p in ['sns:ListSubscriptionsByTopic']:
                            __protego_resource_map['sns'].append({'action': 'ListSubscriptionsByTopic', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_sns.Subscription()]
                return subscriptions_col()
            @property
            def arn(self):
                pass
            pass
    return RES_sns()
def _create_sqs(region_name):
    _region=region_name
    class RES_sqs:
        def __init__(self, *args, **kwargs):
            __protego_used['sqs']= __protego_used.get('sqs', {})
            __protego_resource_map['sqs']=__protego_resource_map.get('sqs', [])
        def create_queue(self, *args, **kwargs): #action
            __protego_used['sqs']['create_queue']=['sqs:CreateQueue']
            for p in ['sqs:CreateQueue']:
                __protego_resource_map['sqs'].append({'action': 'CreateQueue', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Queue()
        def get_queue_by_name(self, *args, **kwargs): #action
            __protego_used['sqs']['get_queue_by_name']=['sqs:GetQueueUrl']
            for p in ['sqs:GetQueueUrl']:
                __protego_resource_map['sqs'].append({'action': 'GetQueueUrl', 'permission':p, 'res': kwargs, 'region': _region  })
            return self.Queue()
        @property
        def queues(self, *args): #collection
            class queues_col(object):
                def all(self):
                    __protego_used['sqs']['queues']=['sqs:ListQueues']
                    for p in ['sqs:ListQueues']:
                        __protego_resource_map['sqs'].append({'action': 'ListQueues', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sqs.Queue()]
                def limit(self):
                    __protego_used['sqs']['queues']=['sqs:ListQueues']
                    for p in ['sqs:ListQueues']:
                        __protego_resource_map['sqs'].append({'action': 'ListQueues', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sqs.Queue()]
                def filter(self):
                    __protego_used['sqs']['queues']=['sqs:ListQueues']
                    for p in ['sqs:ListQueues']:
                        __protego_resource_map['sqs'].append({'action': 'ListQueues', 'permission':p, 'res': {}, 'region': _region  })
                    return [RES_sqs.Queue()]
            return queues_col()
        @property
        def meta(self):
            class meta_cls:
                def __init__(self):
                    self.client = client("sqs")
            return meta_cls()
        pass
        class Message(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['QueueUrl','ReceiptHandle']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def change_visibility(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['QueueUrl']
                kwargs['ReceiptHandle']=self.__protego_args['ReceiptHandle']
                __protego_used['sqs']['Message.change_visibility']=['sqs:ChangeMessageVisibility']
                for p in ['sqs:ChangeMessageVisibility']:
                    __protego_resource_map['sqs'].append({'action': 'ChangeMessageVisibility', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['QueueUrl']
                kwargs['ReceiptHandle']=self.__protego_args['ReceiptHandle']
                __protego_used['sqs']['Message.delete']=['sqs:DeleteMessage']
                for p in ['sqs:DeleteMessage']:
                    __protego_resource_map['sqs'].append({'action': 'DeleteMessage', 'permission':p, 'res': kwargs, 'region': _region  })
            def Queue(self, *args, **kwargs):
                kwargs['Url'] = self.__protego_args['QueueUrl']
                res = RES_sqs.Queue(**kwargs)
                return res
            @property
            def queue_url(self):
                pass
            @property
            def receipt_handle(self):
                pass
            @property
            def receipt_handle(self):
                pass
            pass
        class Queue(object):
            def __init__(self, *args, **kwargs):
                __protego_ids = ['Url']
                self.__protego_args = kwargs
                self.__protego_args.update({__protego_ids[i]: arg for i, arg in enumerate(args)})
                self.load()
            def load(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['Url']
                __protego_used['sqs']['Queue.__init__']=['sqs:GetQueueAttributes'] #GetQueueAttributes
                for p in ['sqs:GetQueueAttributes']:
                    __protego_resource_map['sqs'].append({'action': 'GetQueueAttributes', 'permission':p, 'res': kwargs, 'region': _region  })
            def add_permission(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['Url']
                __protego_used['sqs']['Queue.add_permission']=['sqs:AddPermission']
                for p in ['sqs:AddPermission']:
                    __protego_resource_map['sqs'].append({'action': 'AddPermission', 'permission':p, 'res': kwargs, 'region': _region  })
            def change_message_visibility_batch(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['Url']
                __protego_used['sqs']['Queue.change_message_visibility_batch']=['sqs:ChangeMessageVisibility', 'sqs:ChangeMessageVisibilityBatch']
                for p in ['sqs:ChangeMessageVisibility','sqs:ChangeMessageVisibilityBatch']:
                    __protego_resource_map['sqs'].append({'action': 'ChangeMessageVisibilityBatch', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['Url']
                __protego_used['sqs']['Queue.delete']=['sqs:DeleteQueue']
                for p in ['sqs:DeleteQueue']:
                    __protego_resource_map['sqs'].append({'action': 'DeleteQueue', 'permission':p, 'res': kwargs, 'region': _region  })
            def delete_messages(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['Url']
                __protego_used['sqs']['Queue.delete_messages']=['sqs:DeleteMessage', 'sqs:DeleteMessageBatch']
                for p in ['sqs:DeleteMessage','sqs:DeleteMessageBatch']:
                    __protego_resource_map['sqs'].append({'action': 'DeleteMessageBatch', 'permission':p, 'res': kwargs, 'region': _region  })
            def purge(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['Url']
                __protego_used['sqs']['Queue.purge']=['sqs:PurgeQueue']
                for p in ['sqs:PurgeQueue']:
                    __protego_resource_map['sqs'].append({'action': 'PurgeQueue', 'permission':p, 'res': kwargs, 'region': _region  })
            def receive_messages(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['Url']
                __protego_used['sqs']['Queue.receive_messages']=['sqs:ReceiveMessage']
                for p in ['sqs:ReceiveMessage']:
                    __protego_resource_map['sqs'].append({'action': 'ReceiveMessage', 'permission':p, 'res': kwargs, 'region': _region  })
                return [RES_sqs.Message(**kwargs)]
            def remove_permission(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['Url']
                __protego_used['sqs']['Queue.remove_permission']=['sqs:RemovePermission']
                for p in ['sqs:RemovePermission']:
                    __protego_resource_map['sqs'].append({'action': 'RemovePermission', 'permission':p, 'res': kwargs, 'region': _region  })
            def send_message(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['Url']
                __protego_used['sqs']['Queue.send_message']=['sqs:SendMessage']
                for p in ['sqs:SendMessage']:
                    __protego_resource_map['sqs'].append({'action': 'SendMessage', 'permission':p, 'res': kwargs, 'region': _region  })
            def send_messages(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['Url']
                __protego_used['sqs']['Queue.send_messages']=['sqs:SendMessageBatch', 'sqs:SendMessage']
                for p in ['sqs:SendMessageBatch','sqs:SendMessage']:
                    __protego_resource_map['sqs'].append({'action': 'SendMessageBatch', 'permission':p, 'res': kwargs, 'region': _region  })
            def set_attributes(self, *args, **kwargs):
                kwargs['QueueUrl']=self.__protego_args['Url']
                __protego_used['sqs']['Queue.set_attributes']=['sqs:SetQueueAttributes']
                for p in ['sqs:SetQueueAttributes']:
                    __protego_resource_map['sqs'].append({'action': 'SetQueueAttributes', 'permission':p, 'res': kwargs, 'region': _region  })
            @property
            def dead_letter_source_queues(self, *args):
                kwargs = self.__protego_args
                kwargs['QueueUrl']=self.__protego_args['Url']
                class dead_letter_source_queues_col(object):
                    def all(self):
                        __protego_used['sqs']['dead_letter_source_queues']=['sqs:ListDeadLetterSourceQueues']
                        for p in ['sqs:ListDeadLetterSourceQueues']:
                            __protego_resource_map['sqs'].append({'action': 'ListDeadLetterSourceQueues', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_sqs.Queue()]
                    def limit(self):
                        __protego_used['sqs']['dead_letter_source_queues']=['sqs:ListDeadLetterSourceQueues']
                        for p in ['sqs:ListDeadLetterSourceQueues']:
                            __protego_resource_map['sqs'].append({'action': 'ListDeadLetterSourceQueues', 'permission':p, 'res': kwargs, 'region': _region  })
                        return [RES_sqs.Queue()]
                    def filter(self):
                        __protego_used['sqs']['dead_letter_source_queues']=['sqs:ListDeadLetterSourceQueues']
                        for p in ['sqs:ListDeadLetterSourceQueues']:
                            __protego_resource_map['sqs'].append({'action': 'ListDeadLetterSourceQueues', 'permission':p, 'res': kwargs, 'region': _region })
                        return [RES_sqs.Queue()]
                return dead_letter_source_queues_col()
            def Message(self, *args, **kwargs):
                kwargs['QueueUrl'] = self.__protego_args['Url']
                kwargs['ReceiptHandle'] = args[0]
                res = RES_sqs.Message(**kwargs)
                return res
            @property
            def url(self):
                pass
            pass
    return RES_sqs()
def resource(service_name, region_name=__default_region):
    if (service_name=="cloudformation"): return _create_cloudformation(region_name)
    if (service_name=="cloudwatch"): return _create_cloudwatch(region_name)
    if (service_name=="dynamodb"): return _create_dynamodb(region_name)
    if (service_name=="ec2"): return _create_ec2(region_name)
    if (service_name=="glacier"): return _create_glacier(region_name)
    if (service_name=="iam"): return _create_iam(region_name)
    if (service_name=="opsworks"): return _create_opsworks(region_name)
    if (service_name=="s3"): return _create_s3(region_name)
    if (service_name=="sns"): return _create_sns(region_name)
    if (service_name=="sqs"): return _create_sqs(region_name)
class session(object):
    class Session(object):
        def client(self, service_name, region_name=None): return client(service_name, region_name)
        def resource(self, service_name, region_name=None): return resource(service_name, region_name)
class Session(object):
    def client(self, service_name, region_name=None): return client(service_name, region_name)
    def resource(self, service_name, region_name=None): return resource(service_name, region_name)