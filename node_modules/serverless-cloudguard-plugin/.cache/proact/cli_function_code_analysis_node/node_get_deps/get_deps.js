const thenify = require("thenify");
//const retire = require("retire");
const readInstalled = thenify(require("read-installed"));
const debug = require('debug')('protego')

function generateDependencies(pkg, skip) {
    if (!skip)
        skip = {};
    let pkgid = pkg.name + "@" + pkg.version;
    debug(`Scanning package ${pkgid}`);
    // debug(Object.keys(pkg.dependencies));
    
    if (!(pkgid in skip)) {
        //skip = Object.assign({}, skip);
        skip[pkgid] = true;
        
        return { 
                name: pkg.name, 
                version: pkg.version, 
                runtime: "nodejs",
                // sources: ["read-installed"],
                dependencies: pkg.dependencies ?  
                                Object.keys(pkg.dependencies)
                                    .map(dep=>generateDependencies(pkg.dependencies[dep],skip))
                                    .filter(depObj=>depObj!=null)
                              : []
            };
    } else {
         debug(`Skipped ${pkgid}`)
         return null
    }
}

function scanDependencies(path) {
    debug("path is ", path)
    return readInstalled(path, {dev: false, depth:1})
        .then(pkginfo=>{
            debug("pgkinfo", pkginfo)
            return generateDependencies(pkginfo);
        });
}

exports.scanDependencies = scanDependencies;