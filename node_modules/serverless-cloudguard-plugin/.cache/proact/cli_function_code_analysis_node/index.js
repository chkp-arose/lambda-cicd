'use strict';

const PromiseAll = require('promises-all');
const fs = require('fs');
const fs_extra = require('fs-extra');
const path = require('path');

const NodeFunctionApiUsage = require('./node_function_api_usage');
const nodeGetDeps = require('./node_get_deps/index.js');
const object = new NodeFunctionApiUsage();
const { downloadCodeFromUrl, get_function_url, clearTmp, getTmpDirPromise } = require("./fileUtils");
var gProtegoDir = "";


function handle_code(event, context, tmpFolderPath, gProtegoDir, callback) {
    function getNodeDeps() {
        return new Promise(function (resolve, reject) {
            nodeGetDeps.handler(event, context, tmpFolderPath, function (err, response) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve('node get deps succeeded');
            });

        })
    }

    function codeAnalysis() {
        return new Promise(function (resolve, reject) {
            object.getAPIs(event, tmpFolderPath, gProtegoDir, function (err, result) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve('API analysis succeeded');
            });
        })
    }


    var needed_scans = []
    var scan_type = event.ScanType
    if (scan_type === "Api") needed_scans = [codeAnalysis()]
    else if (scan_type === "Dependencies") needed_scans = [getNodeDeps()]
    else needed_scans = [getNodeDeps(), codeAnalysis()]

    PromiseAll.all(needed_scans).then(function (response) {
        let resolveArray = response.resolve;
        clearTmp(gProtegoDir);
        if (resolveArray.length == needed_scans.length) {
            callback(null, event);
        } else {
            const errorsList = response.reject.map(errReject => ({"errorType": errReject.name, "errorMessage": errReject.message, "stackStrace": errReject.stack }))
            console.log('Node code analysis failed with error ' + JSON.stringify(errorsList));
            event["Errors"] = errorsList
            callback(null, event);
        }
        return;
    }, function (error) {
        console.log(error);
        clearTmp(gProtegoDir);
        callback(error);
        return;
    });
}

exports.handler = function (event, context, callback) {
    if (process.env["AWS_LAMBDA_FUNCTION_NAME"]) {
        // clear /tmp dir at start only for backend
        clearTmp('/tmp/*');
    }

    if (event.FunctionData === undefined) {
        console.log("empty event Do Nothing. ", JSON.stringify(event));
        callback(null, "empty")
        return;
    }

    getTmpDirPromise()
        .then(tmpLocation => {
            gProtegoDir = tmpLocation.path;
            console.log("Received Event : ", JSON.stringify(event));

            const path_to_code = event && event.FunctionData && event.FunctionData.Code && event.FunctionData.Code.Location && event.FunctionData.Code.Location.Path;
            const path_to_layers = event && event.FunctionData && event.FunctionData.LayersLocationPath || "";
            if (path_to_code) {
                const tmpCodePath = path.join(gProtegoDir, 'code');
                const tmpLayerPath = path.join(gProtegoDir, 'layer');

                if (!fs.existsSync(gProtegoDir)) {
                    fs.mkdirSync(gProtegoDir);
                }

                fs.mkdirSync(tmpCodePath);
                fs.mkdirSync(tmpLayerPath);

                if (fs.existsSync(path_to_code)) {
                    fs_extra.copySync(path_to_code, tmpCodePath);
                }
                if (fs.existsSync(path_to_layers)) {
                    fs_extra.copySync(path_to_layers, tmpLayerPath);
                }

                const tmpFolderPath = {
                    "functionCodeLocation": tmpCodePath,
                    "functionLayerLocation": tmpLayerPath
                };
                handle_code(event, context, tmpFolderPath, gProtegoDir, callback);
            } else {
                get_function_url(event, function (err, functionLayerData) {
                    if (err) {
                        console.error("lambda get_function failed with error " + err);
                        callback(err, event);
                        return;
                    }
                    downloadCodeFromUrl(functionLayerData, gProtegoDir).then(tmpFolderPath => {
                        handle_code(event, context, tmpFolderPath, gProtegoDir, callback);
                    });
                });
            }
        })
}
